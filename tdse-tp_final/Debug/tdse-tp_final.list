
tdse-tp_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000784  080053c0  080053c0  000063c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b44  08005b44  00007308  2**0
                  CONTENTS
  4 .ARM          00000008  08005b44  08005b44  00006b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b4c  08005b4c  00007308  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b4c  08005b4c  00006b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b50  08005b50  00006b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000308  20000000  08005b54  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000308  08005e5c  00007308  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006f4  08005e5c  000076f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007308  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a68b  00000000  00000000  00007331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000275c  00000000  00000000  000119bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00014118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c1  00000000  00000000  00014a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cb5  00000000  00000000  00015109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ffd6  00000000  00000000  0002edbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089db4  00000000  00000000  0003ed94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8b48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec0  00000000  00000000  000c8b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000cba4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000308 	.word	0x20000308
 8000128:	00000000 	.word	0x00000000
 800012c:	080053a8 	.word	0x080053a8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000030c 	.word	0x2000030c
 8000148:	080053a8 	.word	0x080053a8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f003 fec4 	bl	8003eec <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fae2 	bl	800072c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f80b 	bl	8000182 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f8c8 	bl	8000300 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f89c 	bl	80002ac <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000174:	f000 f85c 	bl	8000230 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
  app_init();
 8000178:	f001 fe16 	bl	8001da8 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 800017c:	f001 fed2 	bl	8001f24 <app_update>
 8000180:	e7fc      	b.n	800017c <main+0x20>

08000182 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000182:	b580      	push	{r7, lr}
 8000184:	b094      	sub	sp, #80	@ 0x50
 8000186:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000188:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800018c:	2228      	movs	r2, #40	@ 0x28
 800018e:	2100      	movs	r1, #0
 8000190:	4618      	mov	r0, r3
 8000192:	f004 f9d8 	bl	8004546 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000196:	f107 0314 	add.w	r3, r7, #20
 800019a:	2200      	movs	r2, #0
 800019c:	601a      	str	r2, [r3, #0]
 800019e:	605a      	str	r2, [r3, #4]
 80001a0:	609a      	str	r2, [r3, #8]
 80001a2:	60da      	str	r2, [r3, #12]
 80001a4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a6:	1d3b      	adds	r3, r7, #4
 80001a8:	2200      	movs	r2, #0
 80001aa:	601a      	str	r2, [r3, #0]
 80001ac:	605a      	str	r2, [r3, #4]
 80001ae:	609a      	str	r2, [r3, #8]
 80001b0:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b2:	2302      	movs	r3, #2
 80001b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001b6:	2301      	movs	r3, #1
 80001b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001ba:	2310      	movs	r3, #16
 80001bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001be:	2302      	movs	r3, #2
 80001c0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001c2:	2300      	movs	r3, #0
 80001c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001c6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d0:	4618      	mov	r0, r3
 80001d2:	f001 f845 	bl	8001260 <HAL_RCC_OscConfig>
 80001d6:	4603      	mov	r3, r0
 80001d8:	2b00      	cmp	r3, #0
 80001da:	d001      	beq.n	80001e0 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 80001dc:	f000 f95c 	bl	8000498 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e0:	230f      	movs	r3, #15
 80001e2:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e4:	2302      	movs	r3, #2
 80001e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001f0:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f2:	2300      	movs	r3, #0
 80001f4:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001f6:	f107 0314 	add.w	r3, r7, #20
 80001fa:	2102      	movs	r1, #2
 80001fc:	4618      	mov	r0, r3
 80001fe:	f001 fab1 	bl	8001764 <HAL_RCC_ClockConfig>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d001      	beq.n	800020c <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000208:	f000 f946 	bl	8000498 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800020c:	2302      	movs	r3, #2
 800020e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000210:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000214:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000216:	1d3b      	adds	r3, r7, #4
 8000218:	4618      	mov	r0, r3
 800021a:	f001 fc31 	bl	8001a80 <HAL_RCCEx_PeriphCLKConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000224:	f000 f938 	bl	8000498 <Error_Handler>
  }
}
 8000228:	bf00      	nop
 800022a:	3750      	adds	r7, #80	@ 0x50
 800022c:	46bd      	mov	sp, r7
 800022e:	bd80      	pop	{r7, pc}

08000230 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000240:	4b18      	ldr	r3, [pc, #96]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000242:	4a19      	ldr	r2, [pc, #100]	@ (80002a8 <MX_ADC1_Init+0x78>)
 8000244:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000246:	4b17      	ldr	r3, [pc, #92]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000248:	2200      	movs	r2, #0
 800024a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800024c:	4b15      	ldr	r3, [pc, #84]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800024e:	2200      	movs	r2, #0
 8000250:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000252:	4b14      	ldr	r3, [pc, #80]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000254:	2200      	movs	r2, #0
 8000256:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000258:	4b12      	ldr	r3, [pc, #72]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800025a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800025e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000260:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000262:	2200      	movs	r2, #0
 8000264:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000266:	4b0f      	ldr	r3, [pc, #60]	@ (80002a4 <MX_ADC1_Init+0x74>)
 8000268:	2201      	movs	r2, #1
 800026a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800026c:	480d      	ldr	r0, [pc, #52]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800026e:	f000 fae3 	bl	8000838 <HAL_ADC_Init>
 8000272:	4603      	mov	r3, r0
 8000274:	2b00      	cmp	r3, #0
 8000276:	d001      	beq.n	800027c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000278:	f000 f90e 	bl	8000498 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800027c:	2300      	movs	r3, #0
 800027e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000280:	2301      	movs	r3, #1
 8000282:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000284:	2300      	movs	r3, #0
 8000286:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000288:	1d3b      	adds	r3, r7, #4
 800028a:	4619      	mov	r1, r3
 800028c:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_ADC1_Init+0x74>)
 800028e:	f000 fbab 	bl	80009e8 <HAL_ADC_ConfigChannel>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000298:	f000 f8fe 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800029c:	bf00      	nop
 800029e:	3710      	adds	r7, #16
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	20000324 	.word	0x20000324
 80002a8:	40012400 	.word	0x40012400

080002ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002b0:	4b11      	ldr	r3, [pc, #68]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002b2:	4a12      	ldr	r2, [pc, #72]	@ (80002fc <MX_USART2_UART_Init+0x50>)
 80002b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80002b6:	4b10      	ldr	r3, [pc, #64]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002be:	4b0e      	ldr	r3, [pc, #56]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002c4:	4b0c      	ldr	r3, [pc, #48]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ca:	4b0b      	ldr	r3, [pc, #44]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002cc:	2200      	movs	r2, #0
 80002ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002d0:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002d2:	220c      	movs	r2, #12
 80002d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002d6:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002d8:	2200      	movs	r2, #0
 80002da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002dc:	4b06      	ldr	r3, [pc, #24]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002de:	2200      	movs	r2, #0
 80002e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002e2:	4805      	ldr	r0, [pc, #20]	@ (80002f8 <MX_USART2_UART_Init+0x4c>)
 80002e4:	f001 fc82 	bl	8001bec <HAL_UART_Init>
 80002e8:	4603      	mov	r3, r0
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d001      	beq.n	80002f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002ee:	f000 f8d3 	bl	8000498 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002f2:	bf00      	nop
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	20000354 	.word	0x20000354
 80002fc:	40004400 	.word	0x40004400

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b5b      	ldr	r3, [pc, #364]	@ (8000484 <MX_GPIO_Init+0x184>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a5a      	ldr	r2, [pc, #360]	@ (8000484 <MX_GPIO_Init+0x184>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b58      	ldr	r3, [pc, #352]	@ (8000484 <MX_GPIO_Init+0x184>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032c:	4b55      	ldr	r3, [pc, #340]	@ (8000484 <MX_GPIO_Init+0x184>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a54      	ldr	r2, [pc, #336]	@ (8000484 <MX_GPIO_Init+0x184>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b52      	ldr	r3, [pc, #328]	@ (8000484 <MX_GPIO_Init+0x184>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0320 	and.w	r3, r3, #32
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	4b4f      	ldr	r3, [pc, #316]	@ (8000484 <MX_GPIO_Init+0x184>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a4e      	ldr	r2, [pc, #312]	@ (8000484 <MX_GPIO_Init+0x184>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b4c      	ldr	r3, [pc, #304]	@ (8000484 <MX_GPIO_Init+0x184>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0304 	and.w	r3, r3, #4
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	4b49      	ldr	r3, [pc, #292]	@ (8000484 <MX_GPIO_Init+0x184>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a48      	ldr	r2, [pc, #288]	@ (8000484 <MX_GPIO_Init+0x184>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b46      	ldr	r3, [pc, #280]	@ (8000484 <MX_GPIO_Init+0x184>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 800037a:	4843      	ldr	r0, [pc, #268]	@ (8000488 <MX_GPIO_Init+0x188>)
 800037c:	f000 ff1d 	bl	80011ba <HAL_GPIO_WritePin>
                          |D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D9_Pin|O1_Pin|O2_Pin|O3_Pin
 8000380:	2200      	movs	r2, #0
 8000382:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8000386:	4841      	ldr	r0, [pc, #260]	@ (800048c <MX_GPIO_Init+0x18c>)
 8000388:	f000 ff17 	bl	80011ba <HAL_GPIO_WritePin>
                          |O4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_SET);
 800038c:	2201      	movs	r2, #1
 800038e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000392:	483e      	ldr	r0, [pc, #248]	@ (800048c <MX_GPIO_Init+0x18c>)
 8000394:	f000 ff11 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	2140      	movs	r1, #64	@ 0x40
 800039c:	483c      	ldr	r0, [pc, #240]	@ (8000490 <MX_GPIO_Init+0x190>)
 800039e:	f000 ff0c 	bl	80011ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80003a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a8:	4b3a      	ldr	r3, [pc, #232]	@ (8000494 <MX_GPIO_Init+0x194>)
 80003aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ac:	2300      	movs	r3, #0
 80003ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	4619      	mov	r1, r3
 80003b6:	4835      	ldr	r0, [pc, #212]	@ (800048c <MX_GPIO_Init+0x18c>)
 80003b8:	f000 fd64 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin I5_Pin I3_Pin
                           I4_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin|I5_Pin|I3_Pin
 80003bc:	237c      	movs	r3, #124	@ 0x7c
 80003be:	613b      	str	r3, [r7, #16]
                          |I4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003c4:	2301      	movs	r3, #1
 80003c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80003c8:	f107 0310 	add.w	r3, r7, #16
 80003cc:	4619      	mov	r1, r3
 80003ce:	482f      	ldr	r0, [pc, #188]	@ (800048c <MX_GPIO_Init+0x18c>)
 80003d0:	f000 fd58 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D12_Pin D11_Pin D7_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 80003d4:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 80003d8:	613b      	str	r3, [r7, #16]
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003da:	2301      	movs	r3, #1
 80003dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003de:	2300      	movs	r3, #0
 80003e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e2:	2302      	movs	r3, #2
 80003e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003e6:	f107 0310 	add.w	r3, r7, #16
 80003ea:	4619      	mov	r1, r3
 80003ec:	4826      	ldr	r0, [pc, #152]	@ (8000488 <MX_GPIO_Init+0x188>)
 80003ee:	f000 fd49 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 80003f2:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 80003f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003f8:	2300      	movs	r3, #0
 80003fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80003fc:	2301      	movs	r3, #1
 80003fe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000400:	f107 0310 	add.w	r3, r7, #16
 8000404:	4619      	mov	r1, r3
 8000406:	4822      	ldr	r0, [pc, #136]	@ (8000490 <MX_GPIO_Init+0x190>)
 8000408:	f000 fd3c 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : D9_Pin O1_Pin O2_Pin O3_Pin
                           O4_Pin O5_Pin */
  GPIO_InitStruct.Pin = D9_Pin|O1_Pin|O2_Pin|O3_Pin
 800040c:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 8000410:	613b      	str	r3, [r7, #16]
                          |O4_Pin|O5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4819      	ldr	r0, [pc, #100]	@ (800048c <MX_GPIO_Init+0x18c>)
 8000426:	f000 fd2d 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 800042a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000434:	2301      	movs	r3, #1
 8000436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	4812      	ldr	r0, [pc, #72]	@ (8000488 <MX_GPIO_Init+0x188>)
 8000440:	f000 fd20 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000444:	2340      	movs	r3, #64	@ 0x40
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000448:	2301      	movs	r3, #1
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800044c:	2300      	movs	r3, #0
 800044e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000450:	2302      	movs	r3, #2
 8000452:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	480d      	ldr	r0, [pc, #52]	@ (8000490 <MX_GPIO_Init+0x190>)
 800045c:	f000 fd12 	bl	8000e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000460:	2200      	movs	r2, #0
 8000462:	2100      	movs	r1, #0
 8000464:	2028      	movs	r0, #40	@ 0x28
 8000466:	f000 fcd0 	bl	8000e0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800046a:	2028      	movs	r0, #40	@ 0x28
 800046c:	f000 fce9 	bl	8000e42 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_SET);
 8000470:	2201      	movs	r2, #1
 8000472:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000476:	4805      	ldr	r0, [pc, #20]	@ (800048c <MX_GPIO_Init+0x18c>)
 8000478:	f000 fe9f 	bl	80011ba <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 800047c:	bf00      	nop
 800047e:	3720      	adds	r7, #32
 8000480:	46bd      	mov	sp, r7
 8000482:	bd80      	pop	{r7, pc}
 8000484:	40021000 	.word	0x40021000
 8000488:	40010800 	.word	0x40010800
 800048c:	40011000 	.word	0x40011000
 8000490:	40010c00 	.word	0x40010c00
 8000494:	10110000 	.word	0x10110000

08000498 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800049c:	b672      	cpsid	i
}
 800049e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a0:	bf00      	nop
 80004a2:	e7fd      	b.n	80004a0 <Error_Handler+0x8>

080004a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b085      	sub	sp, #20
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004aa:	4b15      	ldr	r3, [pc, #84]	@ (8000500 <HAL_MspInit+0x5c>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a14      	ldr	r2, [pc, #80]	@ (8000500 <HAL_MspInit+0x5c>)
 80004b0:	f043 0301 	orr.w	r3, r3, #1
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b12      	ldr	r3, [pc, #72]	@ (8000500 <HAL_MspInit+0x5c>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0301 	and.w	r3, r3, #1
 80004be:	60bb      	str	r3, [r7, #8]
 80004c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <HAL_MspInit+0x5c>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <HAL_MspInit+0x5c>)
 80004c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <HAL_MspInit+0x5c>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004da:	4b0a      	ldr	r3, [pc, #40]	@ (8000504 <HAL_MspInit+0x60>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <HAL_MspInit+0x60>)
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f6:	bf00      	nop
 80004f8:	3714      	adds	r7, #20
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	40021000 	.word	0x40021000
 8000504:	40010000 	.word	0x40010000

08000508 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	681b      	ldr	r3, [r3, #0]
 8000522:	4a14      	ldr	r2, [pc, #80]	@ (8000574 <HAL_ADC_MspInit+0x6c>)
 8000524:	4293      	cmp	r3, r2
 8000526:	d121      	bne.n	800056c <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 800052e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000540:	4b0d      	ldr	r3, [pc, #52]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 8000542:	699b      	ldr	r3, [r3, #24]
 8000544:	4a0c      	ldr	r2, [pc, #48]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 8000546:	f043 0304 	orr.w	r3, r3, #4
 800054a:	6193      	str	r3, [r2, #24]
 800054c:	4b0a      	ldr	r3, [pc, #40]	@ (8000578 <HAL_ADC_MspInit+0x70>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	f003 0304 	and.w	r3, r3, #4
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = A0_Pin;
 8000558:	2301      	movs	r3, #1
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055c:	2303      	movs	r3, #3
 800055e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(A0_GPIO_Port, &GPIO_InitStruct);
 8000560:	f107 0310 	add.w	r3, r7, #16
 8000564:	4619      	mov	r1, r3
 8000566:	4805      	ldr	r0, [pc, #20]	@ (800057c <HAL_ADC_MspInit+0x74>)
 8000568:	f000 fc8c 	bl	8000e84 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800056c:	bf00      	nop
 800056e:	3720      	adds	r7, #32
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	40012400 	.word	0x40012400
 8000578:	40021000 	.word	0x40021000
 800057c:	40010800 	.word	0x40010800

08000580 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4a15      	ldr	r2, [pc, #84]	@ (80005f0 <HAL_UART_MspInit+0x70>)
 800059c:	4293      	cmp	r3, r2
 800059e:	d123      	bne.n	80005e8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80005a0:	4b14      	ldr	r3, [pc, #80]	@ (80005f4 <HAL_UART_MspInit+0x74>)
 80005a2:	69db      	ldr	r3, [r3, #28]
 80005a4:	4a13      	ldr	r2, [pc, #76]	@ (80005f4 <HAL_UART_MspInit+0x74>)
 80005a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005aa:	61d3      	str	r3, [r2, #28]
 80005ac:	4b11      	ldr	r3, [pc, #68]	@ (80005f4 <HAL_UART_MspInit+0x74>)
 80005ae:	69db      	ldr	r3, [r3, #28]
 80005b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005b8:	4b0e      	ldr	r3, [pc, #56]	@ (80005f4 <HAL_UART_MspInit+0x74>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <HAL_UART_MspInit+0x74>)
 80005be:	f043 0304 	orr.w	r3, r3, #4
 80005c2:	6193      	str	r3, [r2, #24]
 80005c4:	4b0b      	ldr	r3, [pc, #44]	@ (80005f4 <HAL_UART_MspInit+0x74>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	f003 0304 	and.w	r3, r3, #4
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80005d0:	230c      	movs	r3, #12
 80005d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d4:	2302      	movs	r3, #2
 80005d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005d8:	2302      	movs	r3, #2
 80005da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4619      	mov	r1, r3
 80005e2:	4805      	ldr	r0, [pc, #20]	@ (80005f8 <HAL_UART_MspInit+0x78>)
 80005e4:	f000 fc4e 	bl	8000e84 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40004400 	.word	0x40004400
 80005f4:	40021000 	.word	0x40021000
 80005f8:	40010800 	.word	0x40010800

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <NMI_Handler+0x4>

08000604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <MemManage_Handler+0x4>

08000614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <UsageFault_Handler+0x4>

08000624 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000634:	bf00      	nop
 8000636:	46bd      	mov	sp, r7
 8000638:	bc80      	pop	{r7}
 800063a:	4770      	bx	lr

0800063c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000640:	bf00      	nop
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr

08000648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800064c:	f000 f8b4 	bl	80007b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8000650:	f000 fc11 	bl	8000e76 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	bd80      	pop	{r7, pc}

08000658 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800065c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000660:	f000 fddc 	bl	800121c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000664:	bf00      	nop
 8000666:	bd80      	pop	{r7, pc}

08000668 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000670:	4a14      	ldr	r2, [pc, #80]	@ (80006c4 <_sbrk+0x5c>)
 8000672:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <_sbrk+0x60>)
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000678:	697b      	ldr	r3, [r7, #20]
 800067a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800067c:	4b13      	ldr	r3, [pc, #76]	@ (80006cc <_sbrk+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b00      	cmp	r3, #0
 8000682:	d102      	bne.n	800068a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000684:	4b11      	ldr	r3, [pc, #68]	@ (80006cc <_sbrk+0x64>)
 8000686:	4a12      	ldr	r2, [pc, #72]	@ (80006d0 <_sbrk+0x68>)
 8000688:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800068a:	4b10      	ldr	r3, [pc, #64]	@ (80006cc <_sbrk+0x64>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	693a      	ldr	r2, [r7, #16]
 8000694:	429a      	cmp	r2, r3
 8000696:	d207      	bcs.n	80006a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000698:	f003 ffa4 	bl	80045e4 <__errno>
 800069c:	4603      	mov	r3, r0
 800069e:	220c      	movs	r2, #12
 80006a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	e009      	b.n	80006bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <_sbrk+0x64>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ae:	4b07      	ldr	r3, [pc, #28]	@ (80006cc <_sbrk+0x64>)
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	4a05      	ldr	r2, [pc, #20]	@ (80006cc <_sbrk+0x64>)
 80006b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006ba:	68fb      	ldr	r3, [r7, #12]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3718      	adds	r7, #24
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20005000 	.word	0x20005000
 80006c8:	00000400 	.word	0x00000400
 80006cc:	2000039c 	.word	0x2000039c
 80006d0:	200006f8 	.word	0x200006f8

080006d4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006d4:	b480      	push	{r7}
 80006d6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr

080006e0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006e0:	f7ff fff8 	bl	80006d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006e4:	480b      	ldr	r0, [pc, #44]	@ (8000714 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006e6:	490c      	ldr	r1, [pc, #48]	@ (8000718 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006e8:	4a0c      	ldr	r2, [pc, #48]	@ (800071c <LoopFillZerobss+0x16>)
  movs r3, #0
 80006ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006ec:	e002      	b.n	80006f4 <LoopCopyDataInit>

080006ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006f2:	3304      	adds	r3, #4

080006f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006f8:	d3f9      	bcc.n	80006ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006fa:	4a09      	ldr	r2, [pc, #36]	@ (8000720 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80006fc:	4c09      	ldr	r4, [pc, #36]	@ (8000724 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000700:	e001      	b.n	8000706 <LoopFillZerobss>

08000702 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000702:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000704:	3204      	adds	r2, #4

08000706 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000706:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000708:	d3fb      	bcc.n	8000702 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800070a:	f003 ff71 	bl	80045f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff fd25 	bl	800015c <main>
  bx lr
 8000712:	4770      	bx	lr
  ldr r0, =_sdata
 8000714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000718:	20000308 	.word	0x20000308
  ldr r2, =_sidata
 800071c:	08005b54 	.word	0x08005b54
  ldr r2, =_sbss
 8000720:	20000308 	.word	0x20000308
  ldr r4, =_ebss
 8000724:	200006f4 	.word	0x200006f4

08000728 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000728:	e7fe      	b.n	8000728 <ADC1_2_IRQHandler>
	...

0800072c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000730:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <HAL_Init+0x28>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	4a07      	ldr	r2, [pc, #28]	@ (8000754 <HAL_Init+0x28>)
 8000736:	f043 0310 	orr.w	r3, r3, #16
 800073a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800073c:	2003      	movs	r0, #3
 800073e:	f000 fb59 	bl	8000df4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 f808 	bl	8000758 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000748:	f7ff feac 	bl	80004a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40022000 	.word	0x40022000

08000758 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <HAL_InitTick+0x54>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <HAL_InitTick+0x58>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800076e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000772:	fbb2 f3f3 	udiv	r3, r2, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 fb71 	bl	8000e5e <HAL_SYSTICK_Config>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000782:	2301      	movs	r3, #1
 8000784:	e00e      	b.n	80007a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	2b0f      	cmp	r3, #15
 800078a:	d80a      	bhi.n	80007a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800078c:	2200      	movs	r2, #0
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	f04f 30ff 	mov.w	r0, #4294967295
 8000794:	f000 fb39 	bl	8000e0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000798:	4a06      	ldr	r2, [pc, #24]	@ (80007b4 <HAL_InitTick+0x5c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800079e:	2300      	movs	r3, #0
 80007a0:	e000      	b.n	80007a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
}
 80007a4:	4618      	mov	r0, r3
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	20000000 	.word	0x20000000
 80007b0:	20000008 	.word	0x20000008
 80007b4:	20000004 	.word	0x20000004

080007b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <HAL_IncTick+0x1c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <HAL_IncTick+0x20>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	4413      	add	r3, r2
 80007c8:	4a03      	ldr	r2, [pc, #12]	@ (80007d8 <HAL_IncTick+0x20>)
 80007ca:	6013      	str	r3, [r2, #0]
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000008 	.word	0x20000008
 80007d8:	200003a0 	.word	0x200003a0

080007dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
  return uwTick;
 80007e0:	4b02      	ldr	r3, [pc, #8]	@ (80007ec <HAL_GetTick+0x10>)
 80007e2:	681b      	ldr	r3, [r3, #0]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr
 80007ec:	200003a0 	.word	0x200003a0

080007f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f8:	f7ff fff0 	bl	80007dc <HAL_GetTick>
 80007fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000808:	d005      	beq.n	8000816 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800080a:	4b0a      	ldr	r3, [pc, #40]	@ (8000834 <HAL_Delay+0x44>)
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	461a      	mov	r2, r3
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	4413      	add	r3, r2
 8000814:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000816:	bf00      	nop
 8000818:	f7ff ffe0 	bl	80007dc <HAL_GetTick>
 800081c:	4602      	mov	r2, r0
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	1ad3      	subs	r3, r2, r3
 8000822:	68fa      	ldr	r2, [r7, #12]
 8000824:	429a      	cmp	r2, r3
 8000826:	d8f7      	bhi.n	8000818 <HAL_Delay+0x28>
  {
  }
}
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008

08000838 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b086      	sub	sp, #24
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000840:	2300      	movs	r3, #0
 8000842:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000848:	2300      	movs	r3, #0
 800084a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 800084c:	2300      	movs	r3, #0
 800084e:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d101      	bne.n	800085a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e0be      	b.n	80009d8 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	689b      	ldr	r3, [r3, #8]
 800085e:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000864:	2b00      	cmp	r3, #0
 8000866:	d109      	bne.n	800087c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2200      	movs	r2, #0
 800086c:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff fe46 	bl	8000508 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f9ab 	bl	8000bd8 <ADC_ConversionStop_Disable>
 8000882:	4603      	mov	r3, r0
 8000884:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800088a:	f003 0310 	and.w	r3, r3, #16
 800088e:	2b00      	cmp	r3, #0
 8000890:	f040 8099 	bne.w	80009c6 <HAL_ADC_Init+0x18e>
 8000894:	7dfb      	ldrb	r3, [r7, #23]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f040 8095 	bne.w	80009c6 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008a0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80008a4:	f023 0302 	bic.w	r3, r3, #2
 80008a8:	f043 0202 	orr.w	r2, r3, #2
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008b8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	7b1b      	ldrb	r3, [r3, #12]
 80008be:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80008c0:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80008c2:	68ba      	ldr	r2, [r7, #8]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80008d0:	d003      	beq.n	80008da <HAL_ADC_Init+0xa2>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	689b      	ldr	r3, [r3, #8]
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	d102      	bne.n	80008e0 <HAL_ADC_Init+0xa8>
 80008da:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80008de:	e000      	b.n	80008e2 <HAL_ADC_Init+0xaa>
 80008e0:	2300      	movs	r3, #0
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4313      	orrs	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	7d1b      	ldrb	r3, [r3, #20]
 80008ec:	2b01      	cmp	r3, #1
 80008ee:	d119      	bne.n	8000924 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	7b1b      	ldrb	r3, [r3, #12]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d109      	bne.n	800090c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	699b      	ldr	r3, [r3, #24]
 80008fc:	3b01      	subs	r3, #1
 80008fe:	035a      	lsls	r2, r3, #13
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	4313      	orrs	r3, r2
 8000904:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	e00b      	b.n	8000924 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000910:	f043 0220 	orr.w	r2, r3, #32
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800091c:	f043 0201 	orr.w	r2, r3, #1
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	685b      	ldr	r3, [r3, #4]
 800092a:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	693a      	ldr	r2, [r7, #16]
 8000934:	430a      	orrs	r2, r1
 8000936:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	689a      	ldr	r2, [r3, #8]
 800093e:	4b28      	ldr	r3, [pc, #160]	@ (80009e0 <HAL_ADC_Init+0x1a8>)
 8000940:	4013      	ands	r3, r2
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	6812      	ldr	r2, [r2, #0]
 8000946:	68b9      	ldr	r1, [r7, #8]
 8000948:	430b      	orrs	r3, r1
 800094a:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	689b      	ldr	r3, [r3, #8]
 8000950:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000954:	d003      	beq.n	800095e <HAL_ADC_Init+0x126>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	689b      	ldr	r3, [r3, #8]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d104      	bne.n	8000968 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	3b01      	subs	r3, #1
 8000964:	051b      	lsls	r3, r3, #20
 8000966:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800096e:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	68fa      	ldr	r2, [r7, #12]
 8000978:	430a      	orrs	r2, r1
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	689a      	ldr	r2, [r3, #8]
 8000982:	4b18      	ldr	r3, [pc, #96]	@ (80009e4 <HAL_ADC_Init+0x1ac>)
 8000984:	4013      	ands	r3, r2
 8000986:	68ba      	ldr	r2, [r7, #8]
 8000988:	429a      	cmp	r2, r3
 800098a:	d10b      	bne.n	80009a4 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	2200      	movs	r2, #0
 8000990:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000996:	f023 0303 	bic.w	r3, r3, #3
 800099a:	f043 0201 	orr.w	r2, r3, #1
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009a2:	e018      	b.n	80009d6 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009a8:	f023 0312 	bic.w	r3, r3, #18
 80009ac:	f043 0210 	orr.w	r2, r3, #16
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009b8:	f043 0201 	orr.w	r2, r3, #1
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80009c4:	e007      	b.n	80009d6 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009ca:	f043 0210 	orr.w	r2, r3, #16
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	ffe1f7fd 	.word	0xffe1f7fd
 80009e4:	ff1f0efe 	.word	0xff1f0efe

080009e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d101      	bne.n	8000a08 <HAL_ADC_ConfigChannel+0x20>
 8000a04:	2302      	movs	r3, #2
 8000a06:	e0dc      	b.n	8000bc2 <HAL_ADC_ConfigChannel+0x1da>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	2b06      	cmp	r3, #6
 8000a16:	d81c      	bhi.n	8000a52 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	3b05      	subs	r3, #5
 8000a2a:	221f      	movs	r2, #31
 8000a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a30:	43db      	mvns	r3, r3
 8000a32:	4019      	ands	r1, r3
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	4613      	mov	r3, r2
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	4413      	add	r3, r2
 8000a42:	3b05      	subs	r3, #5
 8000a44:	fa00 f203 	lsl.w	r2, r0, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	430a      	orrs	r2, r1
 8000a4e:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a50:	e03c      	b.n	8000acc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	685b      	ldr	r3, [r3, #4]
 8000a56:	2b0c      	cmp	r3, #12
 8000a58:	d81c      	bhi.n	8000a94 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	685a      	ldr	r2, [r3, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	4413      	add	r3, r2
 8000a6a:	3b23      	subs	r3, #35	@ 0x23
 8000a6c:	221f      	movs	r2, #31
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	4019      	ands	r1, r3
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	6818      	ldr	r0, [r3, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685a      	ldr	r2, [r3, #4]
 8000a7e:	4613      	mov	r3, r2
 8000a80:	009b      	lsls	r3, r3, #2
 8000a82:	4413      	add	r3, r2
 8000a84:	3b23      	subs	r3, #35	@ 0x23
 8000a86:	fa00 f203 	lsl.w	r2, r0, r3
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	631a      	str	r2, [r3, #48]	@ 0x30
 8000a92:	e01b      	b.n	8000acc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	685a      	ldr	r2, [r3, #4]
 8000a9e:	4613      	mov	r3, r2
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	3b41      	subs	r3, #65	@ 0x41
 8000aa6:	221f      	movs	r2, #31
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	43db      	mvns	r3, r3
 8000aae:	4019      	ands	r1, r3
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	6818      	ldr	r0, [r3, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685a      	ldr	r2, [r3, #4]
 8000ab8:	4613      	mov	r3, r2
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	4413      	add	r3, r2
 8000abe:	3b41      	subs	r3, #65	@ 0x41
 8000ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b09      	cmp	r3, #9
 8000ad2:	d91c      	bls.n	8000b0e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	68d9      	ldr	r1, [r3, #12]
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	4613      	mov	r3, r2
 8000ae0:	005b      	lsls	r3, r3, #1
 8000ae2:	4413      	add	r3, r2
 8000ae4:	3b1e      	subs	r3, #30
 8000ae6:	2207      	movs	r2, #7
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43db      	mvns	r3, r3
 8000aee:	4019      	ands	r1, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	6898      	ldr	r0, [r3, #8]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	681a      	ldr	r2, [r3, #0]
 8000af8:	4613      	mov	r3, r2
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	4413      	add	r3, r2
 8000afe:	3b1e      	subs	r3, #30
 8000b00:	fa00 f203 	lsl.w	r2, r0, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	430a      	orrs	r2, r1
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	e019      	b.n	8000b42 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6919      	ldr	r1, [r3, #16]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	681a      	ldr	r2, [r3, #0]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	005b      	lsls	r3, r3, #1
 8000b1c:	4413      	add	r3, r2
 8000b1e:	2207      	movs	r2, #7
 8000b20:	fa02 f303 	lsl.w	r3, r2, r3
 8000b24:	43db      	mvns	r3, r3
 8000b26:	4019      	ands	r1, r3
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	6898      	ldr	r0, [r3, #8]
 8000b2c:	683b      	ldr	r3, [r7, #0]
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4613      	mov	r3, r2
 8000b32:	005b      	lsls	r3, r3, #1
 8000b34:	4413      	add	r3, r2
 8000b36:	fa00 f203 	lsl.w	r2, r0, r3
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	430a      	orrs	r2, r1
 8000b40:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2b10      	cmp	r3, #16
 8000b48:	d003      	beq.n	8000b52 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000b4e:	2b11      	cmp	r3, #17
 8000b50:	d132      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a1d      	ldr	r2, [pc, #116]	@ (8000bcc <HAL_ADC_ConfigChannel+0x1e4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d125      	bne.n	8000ba8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d126      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	689a      	ldr	r2, [r3, #8]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8000b78:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b10      	cmp	r3, #16
 8000b80:	d11a      	bne.n	8000bb8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000b82:	4b13      	ldr	r3, [pc, #76]	@ (8000bd0 <HAL_ADC_ConfigChannel+0x1e8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a13      	ldr	r2, [pc, #76]	@ (8000bd4 <HAL_ADC_ConfigChannel+0x1ec>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	0c9a      	lsrs	r2, r3, #18
 8000b8e:	4613      	mov	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	4413      	add	r3, r2
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000b98:	e002      	b.n	8000ba0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000b9a:	68bb      	ldr	r3, [r7, #8]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f9      	bne.n	8000b9a <HAL_ADC_ConfigChannel+0x1b2>
 8000ba6:	e007      	b.n	8000bb8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bac:	f043 0220 	orr.w	r2, r3, #32
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3714      	adds	r7, #20
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	40012400 	.word	0x40012400
 8000bd0:	20000000 	.word	0x20000000
 8000bd4:	431bde83 	.word	0x431bde83

08000bd8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	689b      	ldr	r3, [r3, #8]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	2b01      	cmp	r3, #1
 8000bf0:	d12e      	bne.n	8000c50 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	689a      	ldr	r2, [r3, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f022 0201 	bic.w	r2, r2, #1
 8000c00:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000c02:	f7ff fdeb 	bl	80007dc <HAL_GetTick>
 8000c06:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c08:	e01b      	b.n	8000c42 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000c0a:	f7ff fde7 	bl	80007dc <HAL_GetTick>
 8000c0e:	4602      	mov	r2, r0
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	2b02      	cmp	r3, #2
 8000c16:	d914      	bls.n	8000c42 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f003 0301 	and.w	r3, r3, #1
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d10d      	bne.n	8000c42 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c2a:	f043 0210 	orr.w	r2, r3, #16
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c36:	f043 0201 	orr.w	r2, r3, #1
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e007      	b.n	8000c52 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
 8000c48:	f003 0301 	and.w	r3, r3, #1
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d0dc      	beq.n	8000c0a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b085      	sub	sp, #20
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f003 0307 	and.w	r3, r3, #7
 8000c6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c6e:	68db      	ldr	r3, [r3, #12]
 8000c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c72:	68ba      	ldr	r2, [r7, #8]
 8000c74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	60d3      	str	r3, [r2, #12]
}
 8000c94:	bf00      	nop
 8000c96:	3714      	adds	r7, #20
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bc80      	pop	{r7}
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca8:	4b04      	ldr	r3, [pc, #16]	@ (8000cbc <__NVIC_GetPriorityGrouping+0x18>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	0a1b      	lsrs	r3, r3, #8
 8000cae:	f003 0307 	and.w	r3, r3, #7
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bc80      	pop	{r7}
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	db0b      	blt.n	8000cea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd2:	79fb      	ldrb	r3, [r7, #7]
 8000cd4:	f003 021f 	and.w	r2, r3, #31
 8000cd8:	4906      	ldr	r1, [pc, #24]	@ (8000cf4 <__NVIC_EnableIRQ+0x34>)
 8000cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cde:	095b      	lsrs	r3, r3, #5
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bc80      	pop	{r7}
 8000cf2:	4770      	bx	lr
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	@ (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	@ 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bc80      	pop	{r7}
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	3b01      	subs	r3, #1
 8000dbc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc0:	d301      	bcc.n	8000dc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e00f      	b.n	8000de6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000df0 <SysTick_Config+0x40>)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dce:	210f      	movs	r1, #15
 8000dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd4:	f7ff ff90 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dd8:	4b05      	ldr	r3, [pc, #20]	@ (8000df0 <SysTick_Config+0x40>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dde:	4b04      	ldr	r3, [pc, #16]	@ (8000df0 <SysTick_Config+0x40>)
 8000de0:	2207      	movs	r2, #7
 8000de2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	e000e010 	.word	0xe000e010

08000df4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f7ff ff2d 	bl	8000c5c <__NVIC_SetPriorityGrouping>
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}

08000e0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b086      	sub	sp, #24
 8000e0e:	af00      	add	r7, sp, #0
 8000e10:	4603      	mov	r3, r0
 8000e12:	60b9      	str	r1, [r7, #8]
 8000e14:	607a      	str	r2, [r7, #4]
 8000e16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e1c:	f7ff ff42 	bl	8000ca4 <__NVIC_GetPriorityGrouping>
 8000e20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e22:	687a      	ldr	r2, [r7, #4]
 8000e24:	68b9      	ldr	r1, [r7, #8]
 8000e26:	6978      	ldr	r0, [r7, #20]
 8000e28:	f7ff ff90 	bl	8000d4c <NVIC_EncodePriority>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e32:	4611      	mov	r1, r2
 8000e34:	4618      	mov	r0, r3
 8000e36:	f7ff ff5f 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3a:	bf00      	nop
 8000e3c:	3718      	adds	r7, #24
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	4603      	mov	r3, r0
 8000e4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff35 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	b082      	sub	sp, #8
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e66:	6878      	ldr	r0, [r7, #4]
 8000e68:	f7ff ffa2 	bl	8000db0 <SysTick_Config>
 8000e6c:	4603      	mov	r3, r0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8000e7a:	f001 f8c9 	bl	8002010 <HAL_SYSTICK_Callback>
}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b08b      	sub	sp, #44	@ 0x2c
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e96:	e169      	b.n	800116c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e98:	2201      	movs	r2, #1
 8000e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	69fa      	ldr	r2, [r7, #28]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	f040 8158 	bne.w	8001166 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	4a9a      	ldr	r2, [pc, #616]	@ (8001124 <HAL_GPIO_Init+0x2a0>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d05e      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ec0:	4a98      	ldr	r2, [pc, #608]	@ (8001124 <HAL_GPIO_Init+0x2a0>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d875      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ec6:	4a98      	ldr	r2, [pc, #608]	@ (8001128 <HAL_GPIO_Init+0x2a4>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d058      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ecc:	4a96      	ldr	r2, [pc, #600]	@ (8001128 <HAL_GPIO_Init+0x2a4>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d86f      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ed2:	4a96      	ldr	r2, [pc, #600]	@ (800112c <HAL_GPIO_Init+0x2a8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d052      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ed8:	4a94      	ldr	r2, [pc, #592]	@ (800112c <HAL_GPIO_Init+0x2a8>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d869      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ede:	4a94      	ldr	r2, [pc, #592]	@ (8001130 <HAL_GPIO_Init+0x2ac>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d04c      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ee4:	4a92      	ldr	r2, [pc, #584]	@ (8001130 <HAL_GPIO_Init+0x2ac>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d863      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000eea:	4a92      	ldr	r2, [pc, #584]	@ (8001134 <HAL_GPIO_Init+0x2b0>)
 8000eec:	4293      	cmp	r3, r2
 8000eee:	d046      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
 8000ef0:	4a90      	ldr	r2, [pc, #576]	@ (8001134 <HAL_GPIO_Init+0x2b0>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d85d      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000ef6:	2b12      	cmp	r3, #18
 8000ef8:	d82a      	bhi.n	8000f50 <HAL_GPIO_Init+0xcc>
 8000efa:	2b12      	cmp	r3, #18
 8000efc:	d859      	bhi.n	8000fb2 <HAL_GPIO_Init+0x12e>
 8000efe:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <HAL_GPIO_Init+0x80>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f7f 	.word	0x08000f7f
 8000f08:	08000f59 	.word	0x08000f59
 8000f0c:	08000f6b 	.word	0x08000f6b
 8000f10:	08000fad 	.word	0x08000fad
 8000f14:	08000fb3 	.word	0x08000fb3
 8000f18:	08000fb3 	.word	0x08000fb3
 8000f1c:	08000fb3 	.word	0x08000fb3
 8000f20:	08000fb3 	.word	0x08000fb3
 8000f24:	08000fb3 	.word	0x08000fb3
 8000f28:	08000fb3 	.word	0x08000fb3
 8000f2c:	08000fb3 	.word	0x08000fb3
 8000f30:	08000fb3 	.word	0x08000fb3
 8000f34:	08000fb3 	.word	0x08000fb3
 8000f38:	08000fb3 	.word	0x08000fb3
 8000f3c:	08000fb3 	.word	0x08000fb3
 8000f40:	08000fb3 	.word	0x08000fb3
 8000f44:	08000fb3 	.word	0x08000fb3
 8000f48:	08000f61 	.word	0x08000f61
 8000f4c:	08000f75 	.word	0x08000f75
 8000f50:	4a79      	ldr	r2, [pc, #484]	@ (8001138 <HAL_GPIO_Init+0x2b4>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d013      	beq.n	8000f7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f56:	e02c      	b.n	8000fb2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e029      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	3304      	adds	r3, #4
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e024      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	3308      	adds	r3, #8
 8000f70:	623b      	str	r3, [r7, #32]
          break;
 8000f72:	e01f      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	330c      	adds	r3, #12
 8000f7a:	623b      	str	r3, [r7, #32]
          break;
 8000f7c:	e01a      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d102      	bne.n	8000f8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f86:	2304      	movs	r3, #4
 8000f88:	623b      	str	r3, [r7, #32]
          break;
 8000f8a:	e013      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d105      	bne.n	8000fa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f94:	2308      	movs	r3, #8
 8000f96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69fa      	ldr	r2, [r7, #28]
 8000f9c:	611a      	str	r2, [r3, #16]
          break;
 8000f9e:	e009      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	69fa      	ldr	r2, [r7, #28]
 8000fa8:	615a      	str	r2, [r3, #20]
          break;
 8000faa:	e003      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fac:	2300      	movs	r3, #0
 8000fae:	623b      	str	r3, [r7, #32]
          break;
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x130>
          break;
 8000fb2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fb4:	69bb      	ldr	r3, [r7, #24]
 8000fb6:	2bff      	cmp	r3, #255	@ 0xff
 8000fb8:	d801      	bhi.n	8000fbe <HAL_GPIO_Init+0x13a>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	e001      	b.n	8000fc2 <HAL_GPIO_Init+0x13e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2bff      	cmp	r3, #255	@ 0xff
 8000fc8:	d802      	bhi.n	8000fd0 <HAL_GPIO_Init+0x14c>
 8000fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	e002      	b.n	8000fd6 <HAL_GPIO_Init+0x152>
 8000fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd2:	3b08      	subs	r3, #8
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	210f      	movs	r1, #15
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe4:	43db      	mvns	r3, r3
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	6a39      	ldr	r1, [r7, #32]
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 80b1 	beq.w	8001166 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001004:	4b4d      	ldr	r3, [pc, #308]	@ (800113c <HAL_GPIO_Init+0x2b8>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	4a4c      	ldr	r2, [pc, #304]	@ (800113c <HAL_GPIO_Init+0x2b8>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6193      	str	r3, [r2, #24]
 8001010:	4b4a      	ldr	r3, [pc, #296]	@ (800113c <HAL_GPIO_Init+0x2b8>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60bb      	str	r3, [r7, #8]
 800101a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800101c:	4a48      	ldr	r2, [pc, #288]	@ (8001140 <HAL_GPIO_Init+0x2bc>)
 800101e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001020:	089b      	lsrs	r3, r3, #2
 8001022:	3302      	adds	r3, #2
 8001024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001028:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	f003 0303 	and.w	r3, r3, #3
 8001030:	009b      	lsls	r3, r3, #2
 8001032:	220f      	movs	r2, #15
 8001034:	fa02 f303 	lsl.w	r3, r2, r3
 8001038:	43db      	mvns	r3, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	4013      	ands	r3, r2
 800103e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	4a40      	ldr	r2, [pc, #256]	@ (8001144 <HAL_GPIO_Init+0x2c0>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d013      	beq.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	4a3f      	ldr	r2, [pc, #252]	@ (8001148 <HAL_GPIO_Init+0x2c4>)
 800104c:	4293      	cmp	r3, r2
 800104e:	d00d      	beq.n	800106c <HAL_GPIO_Init+0x1e8>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a3e      	ldr	r2, [pc, #248]	@ (800114c <HAL_GPIO_Init+0x2c8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d007      	beq.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	4a3d      	ldr	r2, [pc, #244]	@ (8001150 <HAL_GPIO_Init+0x2cc>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d101      	bne.n	8001064 <HAL_GPIO_Init+0x1e0>
 8001060:	2303      	movs	r3, #3
 8001062:	e006      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 8001064:	2304      	movs	r3, #4
 8001066:	e004      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 8001068:	2302      	movs	r3, #2
 800106a:	e002      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 800106c:	2301      	movs	r3, #1
 800106e:	e000      	b.n	8001072 <HAL_GPIO_Init+0x1ee>
 8001070:	2300      	movs	r3, #0
 8001072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001074:	f002 0203 	and.w	r2, r2, #3
 8001078:	0092      	lsls	r2, r2, #2
 800107a:	4093      	lsls	r3, r2
 800107c:	68fa      	ldr	r2, [r7, #12]
 800107e:	4313      	orrs	r3, r2
 8001080:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001082:	492f      	ldr	r1, [pc, #188]	@ (8001140 <HAL_GPIO_Init+0x2bc>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001086:	089b      	lsrs	r3, r3, #2
 8001088:	3302      	adds	r3, #2
 800108a:	68fa      	ldr	r2, [r7, #12]
 800108c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d006      	beq.n	80010aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800109c:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	492c      	ldr	r1, [pc, #176]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
 80010a8:	e006      	b.n	80010b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010ac:	689a      	ldr	r2, [r3, #8]
 80010ae:	69bb      	ldr	r3, [r7, #24]
 80010b0:	43db      	mvns	r3, r3
 80010b2:	4928      	ldr	r1, [pc, #160]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010b4:	4013      	ands	r3, r2
 80010b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d006      	beq.n	80010d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80010c4:	4b23      	ldr	r3, [pc, #140]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	4922      	ldr	r1, [pc, #136]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010ca:	69bb      	ldr	r3, [r7, #24]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	60cb      	str	r3, [r1, #12]
 80010d0:	e006      	b.n	80010e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010d4:	68da      	ldr	r2, [r3, #12]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	43db      	mvns	r3, r3
 80010da:	491e      	ldr	r1, [pc, #120]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010dc:	4013      	ands	r3, r2
 80010de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d006      	beq.n	80010fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010ec:	4b19      	ldr	r3, [pc, #100]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010ee:	685a      	ldr	r2, [r3, #4]
 80010f0:	4918      	ldr	r1, [pc, #96]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	604b      	str	r3, [r1, #4]
 80010f8:	e006      	b.n	8001108 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010fa:	4b16      	ldr	r3, [pc, #88]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	43db      	mvns	r3, r3
 8001102:	4914      	ldr	r1, [pc, #80]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 8001104:	4013      	ands	r3, r2
 8001106:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001110:	2b00      	cmp	r3, #0
 8001112:	d021      	beq.n	8001158 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001114:	4b0f      	ldr	r3, [pc, #60]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	490e      	ldr	r1, [pc, #56]	@ (8001154 <HAL_GPIO_Init+0x2d0>)
 800111a:	69bb      	ldr	r3, [r7, #24]
 800111c:	4313      	orrs	r3, r2
 800111e:	600b      	str	r3, [r1, #0]
 8001120:	e021      	b.n	8001166 <HAL_GPIO_Init+0x2e2>
 8001122:	bf00      	nop
 8001124:	10320000 	.word	0x10320000
 8001128:	10310000 	.word	0x10310000
 800112c:	10220000 	.word	0x10220000
 8001130:	10210000 	.word	0x10210000
 8001134:	10120000 	.word	0x10120000
 8001138:	10110000 	.word	0x10110000
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	40010800 	.word	0x40010800
 8001148:	40010c00 	.word	0x40010c00
 800114c:	40011000 	.word	0x40011000
 8001150:	40011400 	.word	0x40011400
 8001154:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001158:	4b0b      	ldr	r3, [pc, #44]	@ (8001188 <HAL_GPIO_Init+0x304>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	43db      	mvns	r3, r3
 8001160:	4909      	ldr	r1, [pc, #36]	@ (8001188 <HAL_GPIO_Init+0x304>)
 8001162:	4013      	ands	r3, r2
 8001164:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	3301      	adds	r3, #1
 800116a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f ae8e 	bne.w	8000e98 <HAL_GPIO_Init+0x14>
  }
}
 800117c:	bf00      	nop
 800117e:	bf00      	nop
 8001180:	372c      	adds	r7, #44	@ 0x2c
 8001182:	46bd      	mov	sp, r7
 8001184:	bc80      	pop	{r7}
 8001186:	4770      	bx	lr
 8001188:	40010400 	.word	0x40010400

0800118c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	4013      	ands	r3, r2
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d002      	beq.n	80011aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011a4:	2301      	movs	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	e001      	b.n	80011ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011aa:	2300      	movs	r3, #0
 80011ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
 80011c6:	4613      	mov	r3, r2
 80011c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011ca:	787b      	ldrb	r3, [r7, #1]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d003      	beq.n	80011d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011d0:	887a      	ldrh	r2, [r7, #2]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011d6:	e003      	b.n	80011e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011d8:	887b      	ldrh	r3, [r7, #2]
 80011da:	041a      	lsls	r2, r3, #16
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	611a      	str	r2, [r3, #16]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bc80      	pop	{r7}
 80011e8:	4770      	bx	lr

080011ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011ea:	b480      	push	{r7}
 80011ec:	b085      	sub	sp, #20
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	460b      	mov	r3, r1
 80011f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011fc:	887a      	ldrh	r2, [r7, #2]
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	4013      	ands	r3, r2
 8001202:	041a      	lsls	r2, r3, #16
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	43d9      	mvns	r1, r3
 8001208:	887b      	ldrh	r3, [r7, #2]
 800120a:	400b      	ands	r3, r1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	611a      	str	r2, [r3, #16]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001226:	4b08      	ldr	r3, [pc, #32]	@ (8001248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001228:	695a      	ldr	r2, [r3, #20]
 800122a:	88fb      	ldrh	r3, [r7, #6]
 800122c:	4013      	ands	r3, r2
 800122e:	2b00      	cmp	r3, #0
 8001230:	d006      	beq.n	8001240 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001232:	4a05      	ldr	r2, [pc, #20]	@ (8001248 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001234:	88fb      	ldrh	r3, [r7, #6]
 8001236:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	4618      	mov	r0, r3
 800123c:	f000 f806 	bl	800124c <HAL_GPIO_EXTI_Callback>
  }
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40010400 	.word	0x40010400

0800124c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d101      	bne.n	8001272 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e272      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f003 0301 	and.w	r3, r3, #1
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8087 	beq.w	800138e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001280:	4b92      	ldr	r3, [pc, #584]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b04      	cmp	r3, #4
 800128a:	d00c      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800128c:	4b8f      	ldr	r3, [pc, #572]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b08      	cmp	r3, #8
 8001296:	d112      	bne.n	80012be <HAL_RCC_OscConfig+0x5e>
 8001298:	4b8c      	ldr	r3, [pc, #560]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012a4:	d10b      	bne.n	80012be <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a6:	4b89      	ldr	r3, [pc, #548]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d06c      	beq.n	800138c <HAL_RCC_OscConfig+0x12c>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d168      	bne.n	800138c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e24c      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012c6:	d106      	bne.n	80012d6 <HAL_RCC_OscConfig+0x76>
 80012c8:	4b80      	ldr	r3, [pc, #512]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a7f      	ldr	r2, [pc, #508]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e02e      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10c      	bne.n	80012f8 <HAL_RCC_OscConfig+0x98>
 80012de:	4b7b      	ldr	r3, [pc, #492]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a7a      	ldr	r2, [pc, #488]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012e8:	6013      	str	r3, [r2, #0]
 80012ea:	4b78      	ldr	r3, [pc, #480]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a77      	ldr	r2, [pc, #476]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80012f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	e01d      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001300:	d10c      	bne.n	800131c <HAL_RCC_OscConfig+0xbc>
 8001302:	4b72      	ldr	r3, [pc, #456]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a71      	ldr	r2, [pc, #452]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001308:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800130c:	6013      	str	r3, [r2, #0]
 800130e:	4b6f      	ldr	r3, [pc, #444]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a6e      	ldr	r2, [pc, #440]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001314:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e00b      	b.n	8001334 <HAL_RCC_OscConfig+0xd4>
 800131c:	4b6b      	ldr	r3, [pc, #428]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a6a      	ldr	r2, [pc, #424]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001322:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001326:	6013      	str	r3, [r2, #0]
 8001328:	4b68      	ldr	r3, [pc, #416]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a67      	ldr	r2, [pc, #412]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 800132e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001332:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d013      	beq.n	8001364 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800133c:	f7ff fa4e 	bl	80007dc <HAL_GetTick>
 8001340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	e008      	b.n	8001356 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001344:	f7ff fa4a 	bl	80007dc <HAL_GetTick>
 8001348:	4602      	mov	r2, r0
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b64      	cmp	r3, #100	@ 0x64
 8001350:	d901      	bls.n	8001356 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e200      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	4b5d      	ldr	r3, [pc, #372]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d0f0      	beq.n	8001344 <HAL_RCC_OscConfig+0xe4>
 8001362:	e014      	b.n	800138e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001364:	f7ff fa3a 	bl	80007dc <HAL_GetTick>
 8001368:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800136a:	e008      	b.n	800137e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800136c:	f7ff fa36 	bl	80007dc <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	2b64      	cmp	r3, #100	@ 0x64
 8001378:	d901      	bls.n	800137e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800137a:	2303      	movs	r3, #3
 800137c:	e1ec      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	4b53      	ldr	r3, [pc, #332]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001386:	2b00      	cmp	r3, #0
 8001388:	d1f0      	bne.n	800136c <HAL_RCC_OscConfig+0x10c>
 800138a:	e000      	b.n	800138e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f003 0302 	and.w	r3, r3, #2
 8001396:	2b00      	cmp	r3, #0
 8001398:	d063      	beq.n	8001462 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800139a:	4b4c      	ldr	r3, [pc, #304]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 030c 	and.w	r3, r3, #12
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d00b      	beq.n	80013be <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013a6:	4b49      	ldr	r3, [pc, #292]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f003 030c 	and.w	r3, r3, #12
 80013ae:	2b08      	cmp	r3, #8
 80013b0:	d11c      	bne.n	80013ec <HAL_RCC_OscConfig+0x18c>
 80013b2:	4b46      	ldr	r3, [pc, #280]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d116      	bne.n	80013ec <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013be:	4b43      	ldr	r3, [pc, #268]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d005      	beq.n	80013d6 <HAL_RCC_OscConfig+0x176>
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d001      	beq.n	80013d6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e1c0      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b3d      	ldr	r3, [pc, #244]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	695b      	ldr	r3, [r3, #20]
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4939      	ldr	r1, [pc, #228]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013ea:	e03a      	b.n	8001462 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d020      	beq.n	8001436 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013f4:	4b36      	ldr	r3, [pc, #216]	@ (80014d0 <HAL_RCC_OscConfig+0x270>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013fa:	f7ff f9ef 	bl	80007dc <HAL_GetTick>
 80013fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001400:	e008      	b.n	8001414 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001402:	f7ff f9eb 	bl	80007dc <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d901      	bls.n	8001414 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001410:	2303      	movs	r3, #3
 8001412:	e1a1      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	4b2d      	ldr	r3, [pc, #180]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0302 	and.w	r3, r3, #2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d0f0      	beq.n	8001402 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001420:	4b2a      	ldr	r3, [pc, #168]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	4927      	ldr	r1, [pc, #156]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001430:	4313      	orrs	r3, r2
 8001432:	600b      	str	r3, [r1, #0]
 8001434:	e015      	b.n	8001462 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001436:	4b26      	ldr	r3, [pc, #152]	@ (80014d0 <HAL_RCC_OscConfig+0x270>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff f9ce 	bl	80007dc <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001444:	f7ff f9ca 	bl	80007dc <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e180      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	4b1d      	ldr	r3, [pc, #116]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	2b00      	cmp	r3, #0
 800146c:	d03a      	beq.n	80014e4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d019      	beq.n	80014aa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001476:	4b17      	ldr	r3, [pc, #92]	@ (80014d4 <HAL_RCC_OscConfig+0x274>)
 8001478:	2201      	movs	r2, #1
 800147a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800147c:	f7ff f9ae 	bl	80007dc <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001484:	f7ff f9aa 	bl	80007dc <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e160      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	4b0d      	ldr	r3, [pc, #52]	@ (80014cc <HAL_RCC_OscConfig+0x26c>)
 8001498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0f0      	beq.n	8001484 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014a2:	2001      	movs	r0, #1
 80014a4:	f000 face 	bl	8001a44 <RCC_Delay>
 80014a8:	e01c      	b.n	80014e4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014aa:	4b0a      	ldr	r3, [pc, #40]	@ (80014d4 <HAL_RCC_OscConfig+0x274>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b0:	f7ff f994 	bl	80007dc <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014b6:	e00f      	b.n	80014d8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014b8:	f7ff f990 	bl	80007dc <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d908      	bls.n	80014d8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e146      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000
 80014d0:	42420000 	.word	0x42420000
 80014d4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d8:	4b92      	ldr	r3, [pc, #584]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80014da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1e9      	bne.n	80014b8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a6 	beq.w	800163e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014f6:	4b8b      	ldr	r3, [pc, #556]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d10d      	bne.n	800151e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b88      	ldr	r3, [pc, #544]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a87      	ldr	r2, [pc, #540]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b85      	ldr	r3, [pc, #532]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800151a:	2301      	movs	r3, #1
 800151c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151e:	4b82      	ldr	r3, [pc, #520]	@ (8001728 <HAL_RCC_OscConfig+0x4c8>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800152a:	4b7f      	ldr	r3, [pc, #508]	@ (8001728 <HAL_RCC_OscConfig+0x4c8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a7e      	ldr	r2, [pc, #504]	@ (8001728 <HAL_RCC_OscConfig+0x4c8>)
 8001530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001534:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001536:	f7ff f951 	bl	80007dc <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800153e:	f7ff f94d 	bl	80007dc <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b64      	cmp	r3, #100	@ 0x64
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e103      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	4b75      	ldr	r3, [pc, #468]	@ (8001728 <HAL_RCC_OscConfig+0x4c8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d106      	bne.n	8001572 <HAL_RCC_OscConfig+0x312>
 8001564:	4b6f      	ldr	r3, [pc, #444]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001566:	6a1b      	ldr	r3, [r3, #32]
 8001568:	4a6e      	ldr	r2, [pc, #440]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6213      	str	r3, [r2, #32]
 8001570:	e02d      	b.n	80015ce <HAL_RCC_OscConfig+0x36e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d10c      	bne.n	8001594 <HAL_RCC_OscConfig+0x334>
 800157a:	4b6a      	ldr	r3, [pc, #424]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800157c:	6a1b      	ldr	r3, [r3, #32]
 800157e:	4a69      	ldr	r2, [pc, #420]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001580:	f023 0301 	bic.w	r3, r3, #1
 8001584:	6213      	str	r3, [r2, #32]
 8001586:	4b67      	ldr	r3, [pc, #412]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001588:	6a1b      	ldr	r3, [r3, #32]
 800158a:	4a66      	ldr	r2, [pc, #408]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	f023 0304 	bic.w	r3, r3, #4
 8001590:	6213      	str	r3, [r2, #32]
 8001592:	e01c      	b.n	80015ce <HAL_RCC_OscConfig+0x36e>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	68db      	ldr	r3, [r3, #12]
 8001598:	2b05      	cmp	r3, #5
 800159a:	d10c      	bne.n	80015b6 <HAL_RCC_OscConfig+0x356>
 800159c:	4b61      	ldr	r3, [pc, #388]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a1b      	ldr	r3, [r3, #32]
 80015a0:	4a60      	ldr	r2, [pc, #384]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015a2:	f043 0304 	orr.w	r3, r3, #4
 80015a6:	6213      	str	r3, [r2, #32]
 80015a8:	4b5e      	ldr	r3, [pc, #376]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	6a1b      	ldr	r3, [r3, #32]
 80015ac:	4a5d      	ldr	r2, [pc, #372]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015ae:	f043 0301 	orr.w	r3, r3, #1
 80015b2:	6213      	str	r3, [r2, #32]
 80015b4:	e00b      	b.n	80015ce <HAL_RCC_OscConfig+0x36e>
 80015b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015b8:	6a1b      	ldr	r3, [r3, #32]
 80015ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	f023 0301 	bic.w	r3, r3, #1
 80015c0:	6213      	str	r3, [r2, #32]
 80015c2:	4b58      	ldr	r3, [pc, #352]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015c4:	6a1b      	ldr	r3, [r3, #32]
 80015c6:	4a57      	ldr	r2, [pc, #348]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	f023 0304 	bic.w	r3, r3, #4
 80015cc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	68db      	ldr	r3, [r3, #12]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d015      	beq.n	8001602 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d6:	f7ff f901 	bl	80007dc <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015dc:	e00a      	b.n	80015f4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015de:	f7ff f8fd 	bl	80007dc <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e0b1      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f4:	4b4b      	ldr	r3, [pc, #300]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d0ee      	beq.n	80015de <HAL_RCC_OscConfig+0x37e>
 8001600:	e014      	b.n	800162c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001602:	f7ff f8eb 	bl	80007dc <HAL_GetTick>
 8001606:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001608:	e00a      	b.n	8001620 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800160a:	f7ff f8e7 	bl	80007dc <HAL_GetTick>
 800160e:	4602      	mov	r2, r0
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	1ad3      	subs	r3, r2, r3
 8001614:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001618:	4293      	cmp	r3, r2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e09b      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001620:	4b40      	ldr	r3, [pc, #256]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d1ee      	bne.n	800160a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800162c:	7dfb      	ldrb	r3, [r7, #23]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d105      	bne.n	800163e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001632:	4b3c      	ldr	r3, [pc, #240]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001634:	69db      	ldr	r3, [r3, #28]
 8001636:	4a3b      	ldr	r2, [pc, #236]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001638:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800163c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8087 	beq.w	8001756 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001648:	4b36      	ldr	r3, [pc, #216]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b08      	cmp	r3, #8
 8001652:	d061      	beq.n	8001718 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	69db      	ldr	r3, [r3, #28]
 8001658:	2b02      	cmp	r3, #2
 800165a:	d146      	bne.n	80016ea <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800165c:	4b33      	ldr	r3, [pc, #204]	@ (800172c <HAL_RCC_OscConfig+0x4cc>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001662:	f7ff f8bb 	bl	80007dc <HAL_GetTick>
 8001666:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff f8b7 	bl	80007dc <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e06d      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	4b29      	ldr	r3, [pc, #164]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d1f0      	bne.n	800166a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001690:	d108      	bne.n	80016a4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001692:	4b24      	ldr	r3, [pc, #144]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4921      	ldr	r1, [pc, #132]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80016a0:	4313      	orrs	r3, r2
 80016a2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a4:	4b1f      	ldr	r3, [pc, #124]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a19      	ldr	r1, [r3, #32]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016b4:	430b      	orrs	r3, r1
 80016b6:	491b      	ldr	r1, [pc, #108]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	4313      	orrs	r3, r2
 80016ba:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016bc:	4b1b      	ldr	r3, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x4cc>)
 80016be:	2201      	movs	r2, #1
 80016c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c2:	f7ff f88b 	bl	80007dc <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff f887 	bl	80007dc <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e03d      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0f0      	beq.n	80016ca <HAL_RCC_OscConfig+0x46a>
 80016e8:	e035      	b.n	8001756 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016ea:	4b10      	ldr	r3, [pc, #64]	@ (800172c <HAL_RCC_OscConfig+0x4cc>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff f874 	bl	80007dc <HAL_GetTick>
 80016f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff f870 	bl	80007dc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e026      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <HAL_RCC_OscConfig+0x4c4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x498>
 8001716:	e01e      	b.n	8001756 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d107      	bne.n	8001730 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e019      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
 8001724:	40021000 	.word	0x40021000
 8001728:	40007000 	.word	0x40007000
 800172c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_OscConfig+0x500>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	429a      	cmp	r2, r3
 8001742:	d106      	bne.n	8001752 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174e:	429a      	cmp	r2, r3
 8001750:	d001      	beq.n	8001756 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e000      	b.n	8001758 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40021000 	.word	0x40021000

08001764 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0d0      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001778:	4b6a      	ldr	r3, [pc, #424]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d910      	bls.n	80017a8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b67      	ldr	r3, [pc, #412]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f023 0207 	bic.w	r2, r3, #7
 800178e:	4965      	ldr	r1, [pc, #404]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	4313      	orrs	r3, r2
 8001794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001796:	4b63      	ldr	r3, [pc, #396]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0307 	and.w	r3, r3, #7
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	429a      	cmp	r2, r3
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0b8      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 0302 	and.w	r3, r3, #2
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d020      	beq.n	80017f6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0304 	and.w	r3, r3, #4
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017c0:	4b59      	ldr	r3, [pc, #356]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	4a58      	ldr	r2, [pc, #352]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017c6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80017ca:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0308 	and.w	r3, r3, #8
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017d8:	4b53      	ldr	r3, [pc, #332]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4a52      	ldr	r2, [pc, #328]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80017e2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017e4:	4b50      	ldr	r3, [pc, #320]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	494d      	ldr	r1, [pc, #308]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d040      	beq.n	8001884 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d107      	bne.n	800181a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800180a:	4b47      	ldr	r3, [pc, #284]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d115      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e07f      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d107      	bne.n	8001832 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001822:	4b41      	ldr	r3, [pc, #260]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d109      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e073      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001832:	4b3d      	ldr	r3, [pc, #244]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0302 	and.w	r3, r3, #2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d101      	bne.n	8001842 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e06b      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001842:	4b39      	ldr	r3, [pc, #228]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f023 0203 	bic.w	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	4936      	ldr	r1, [pc, #216]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001854:	f7fe ffc2 	bl	80007dc <HAL_GetTick>
 8001858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800185a:	e00a      	b.n	8001872 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800185c:	f7fe ffbe 	bl	80007dc <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186a:	4293      	cmp	r3, r2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e053      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001872:	4b2d      	ldr	r3, [pc, #180]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f003 020c 	and.w	r2, r3, #12
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	429a      	cmp	r2, r3
 8001882:	d1eb      	bne.n	800185c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001884:	4b27      	ldr	r3, [pc, #156]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0307 	and.w	r3, r3, #7
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	429a      	cmp	r2, r3
 8001890:	d210      	bcs.n	80018b4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001892:	4b24      	ldr	r3, [pc, #144]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f023 0207 	bic.w	r2, r3, #7
 800189a:	4922      	ldr	r1, [pc, #136]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	4313      	orrs	r3, r2
 80018a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018a2:	4b20      	ldr	r3, [pc, #128]	@ (8001924 <HAL_RCC_ClockConfig+0x1c0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	683a      	ldr	r2, [r7, #0]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d001      	beq.n	80018b4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e032      	b.n	800191a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018c0:	4b19      	ldr	r3, [pc, #100]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	4916      	ldr	r1, [pc, #88]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0308 	and.w	r3, r3, #8
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d009      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018de:	4b12      	ldr	r3, [pc, #72]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	691b      	ldr	r3, [r3, #16]
 80018ea:	00db      	lsls	r3, r3, #3
 80018ec:	490e      	ldr	r1, [pc, #56]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018f2:	f000 f821 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f6:	4602      	mov	r2, r0
 80018f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001928 <HAL_RCC_ClockConfig+0x1c4>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	091b      	lsrs	r3, r3, #4
 80018fe:	f003 030f 	and.w	r3, r3, #15
 8001902:	490a      	ldr	r1, [pc, #40]	@ (800192c <HAL_RCC_ClockConfig+0x1c8>)
 8001904:	5ccb      	ldrb	r3, [r1, r3]
 8001906:	fa22 f303 	lsr.w	r3, r2, r3
 800190a:	4a09      	ldr	r2, [pc, #36]	@ (8001930 <HAL_RCC_ClockConfig+0x1cc>)
 800190c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800190e:	4b09      	ldr	r3, [pc, #36]	@ (8001934 <HAL_RCC_ClockConfig+0x1d0>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe ff20 	bl	8000758 <HAL_InitTick>

  return HAL_OK;
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40022000 	.word	0x40022000
 8001928:	40021000 	.word	0x40021000
 800192c:	08005844 	.word	0x08005844
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	b087      	sub	sp, #28
 800193c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001952:	4b1e      	ldr	r3, [pc, #120]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b04      	cmp	r3, #4
 8001960:	d002      	beq.n	8001968 <HAL_RCC_GetSysClockFreq+0x30>
 8001962:	2b08      	cmp	r3, #8
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x36>
 8001966:	e027      	b.n	80019b8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001968:	4b19      	ldr	r3, [pc, #100]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800196a:	613b      	str	r3, [r7, #16]
      break;
 800196c:	e027      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	0c9b      	lsrs	r3, r3, #18
 8001972:	f003 030f 	and.w	r3, r3, #15
 8001976:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001978:	5cd3      	ldrb	r3, [r2, r3]
 800197a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d010      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001986:	4b11      	ldr	r3, [pc, #68]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x94>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0c5b      	lsrs	r3, r3, #17
 800198c:	f003 0301 	and.w	r3, r3, #1
 8001990:	4a11      	ldr	r2, [pc, #68]	@ (80019d8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001992:	5cd3      	ldrb	r3, [r2, r3]
 8001994:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a0d      	ldr	r2, [pc, #52]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x98>)
 800199a:	fb03 f202 	mul.w	r2, r3, r2
 800199e:	68bb      	ldr	r3, [r7, #8]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e004      	b.n	80019b2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a0c      	ldr	r2, [pc, #48]	@ (80019dc <HAL_RCC_GetSysClockFreq+0xa4>)
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	613b      	str	r3, [r7, #16]
      break;
 80019b6:	e002      	b.n	80019be <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019b8:	4b05      	ldr	r3, [pc, #20]	@ (80019d0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ba:	613b      	str	r3, [r7, #16]
      break;
 80019bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019be:	693b      	ldr	r3, [r7, #16]
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	371c      	adds	r7, #28
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bc80      	pop	{r7}
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	40021000 	.word	0x40021000
 80019d0:	007a1200 	.word	0x007a1200
 80019d4:	0800585c 	.word	0x0800585c
 80019d8:	0800586c 	.word	0x0800586c
 80019dc:	003d0900 	.word	0x003d0900

080019e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019e4:	4b02      	ldr	r3, [pc, #8]	@ (80019f0 <HAL_RCC_GetHCLKFreq+0x10>)
 80019e6:	681b      	ldr	r3, [r3, #0]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr
 80019f0:	20000000 	.word	0x20000000

080019f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019f8:	f7ff fff2 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	0a1b      	lsrs	r3, r3, #8
 8001a04:	f003 0307 	and.w	r3, r3, #7
 8001a08:	4903      	ldr	r1, [pc, #12]	@ (8001a18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a0a:	5ccb      	ldrb	r3, [r1, r3]
 8001a0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	40021000 	.word	0x40021000
 8001a18:	08005854 	.word	0x08005854

08001a1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a20:	f7ff ffde 	bl	80019e0 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	@ (8001a3c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	0adb      	lsrs	r3, r3, #11
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	@ (8001a40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	08005854 	.word	0x08005854

08001a44 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	@ (8001a78 <RCC_Delay+0x34>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a0a      	ldr	r2, [pc, #40]	@ (8001a7c <RCC_Delay+0x38>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0a5b      	lsrs	r3, r3, #9
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	fb02 f303 	mul.w	r3, r2, r3
 8001a5e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a60:	bf00      	nop
  }
  while (Delay --);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1e5a      	subs	r2, r3, #1
 8001a66:	60fa      	str	r2, [r7, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1f9      	bne.n	8001a60 <RCC_Delay+0x1c>
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000000 	.word	0x20000000
 8001a7c:	10624dd3 	.word	0x10624dd3

08001a80 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0301 	and.w	r3, r3, #1
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d07d      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aa0:	4b4f      	ldr	r3, [pc, #316]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aa2:	69db      	ldr	r3, [r3, #28]
 8001aa4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10d      	bne.n	8001ac8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aac:	4b4c      	ldr	r3, [pc, #304]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	4a4b      	ldr	r2, [pc, #300]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ab2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ab6:	61d3      	str	r3, [r2, #28]
 8001ab8:	4b49      	ldr	r3, [pc, #292]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001aba:	69db      	ldr	r3, [r3, #28]
 8001abc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ac0:	60bb      	str	r3, [r7, #8]
 8001ac2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac8:	4b46      	ldr	r3, [pc, #280]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d118      	bne.n	8001b06 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ad4:	4b43      	ldr	r3, [pc, #268]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a42      	ldr	r2, [pc, #264]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ade:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ae0:	f7fe fe7c 	bl	80007dc <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	e008      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae8:	f7fe fe78 	bl	80007dc <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	@ 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e06d      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b3a      	ldr	r3, [pc, #232]	@ (8001be4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b06:	4b36      	ldr	r3, [pc, #216]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b08:	6a1b      	ldr	r3, [r3, #32]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b0e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d02e      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d027      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b24:	4b2e      	ldr	r3, [pc, #184]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b2c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b2e:	4b2e      	ldr	r3, [pc, #184]	@ (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b34:	4b2c      	ldr	r3, [pc, #176]	@ (8001be8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b3a:	4a29      	ldr	r2, [pc, #164]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d014      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7fe fe47 	bl	80007dc <HAL_GetTick>
 8001b4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b50:	e00a      	b.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b52:	f7fe fe43 	bl	80007dc <HAL_GetTick>
 8001b56:	4602      	mov	r2, r0
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d901      	bls.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8001b64:	2303      	movs	r3, #3
 8001b66:	e036      	b.n	8001bd6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b68:	4b1d      	ldr	r3, [pc, #116]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b6a:	6a1b      	ldr	r3, [r3, #32]
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ee      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b74:	4b1a      	ldr	r3, [pc, #104]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b76:	6a1b      	ldr	r3, [r3, #32]
 8001b78:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	4917      	ldr	r1, [pc, #92]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001b86:	7dfb      	ldrb	r3, [r7, #23]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b14      	ldr	r3, [pc, #80]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b8e:	69db      	ldr	r3, [r3, #28]
 8001b90:	4a13      	ldr	r2, [pc, #76]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001b92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b96:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d008      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001ba4:	4b0e      	ldr	r3, [pc, #56]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	490b      	ldr	r1, [pc, #44]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0310 	and.w	r3, r3, #16
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d008      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	4904      	ldr	r1, [pc, #16]	@ (8001be0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40021000 	.word	0x40021000
 8001be4:	40007000 	.word	0x40007000
 8001be8:	42420440 	.word	0x42420440

08001bec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e042      	b.n	8001c84 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d106      	bne.n	8001c18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c12:	6878      	ldr	r0, [r7, #4]
 8001c14:	f7fe fcb4 	bl	8000580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	@ 0x24
 8001c1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001c2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f82b 	bl	8001c8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	691a      	ldr	r2, [r3, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001c44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	695a      	ldr	r2, [r3, #20]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001c54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2220      	movs	r2, #32
 8001c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2220      	movs	r2, #32
 8001c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	691b      	ldr	r3, [r3, #16]
 8001c9a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68da      	ldr	r2, [r3, #12]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689a      	ldr	r2, [r3, #8]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	695b      	ldr	r3, [r3, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68db      	ldr	r3, [r3, #12]
 8001cc2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001cc6:	f023 030c 	bic.w	r3, r3, #12
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6812      	ldr	r2, [r2, #0]
 8001cce:	68b9      	ldr	r1, [r7, #8]
 8001cd0:	430b      	orrs	r3, r1
 8001cd2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	699a      	ldr	r2, [r3, #24]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a2c      	ldr	r2, [pc, #176]	@ (8001da0 <UART_SetConfig+0x114>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d103      	bne.n	8001cfc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001cf4:	f7ff fe92 	bl	8001a1c <HAL_RCC_GetPCLK2Freq>
 8001cf8:	60f8      	str	r0, [r7, #12]
 8001cfa:	e002      	b.n	8001d02 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001cfc:	f7ff fe7a 	bl	80019f4 <HAL_RCC_GetPCLK1Freq>
 8001d00:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d02:	68fa      	ldr	r2, [r7, #12]
 8001d04:	4613      	mov	r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	009a      	lsls	r2, r3, #2
 8001d0c:	441a      	add	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	4a22      	ldr	r2, [pc, #136]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	0119      	lsls	r1, r3, #4
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	4613      	mov	r3, r2
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	4413      	add	r3, r2
 8001d2a:	009a      	lsls	r2, r3, #2
 8001d2c:	441a      	add	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d38:	4b1a      	ldr	r3, [pc, #104]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d3a:	fba3 0302 	umull	r0, r3, r3, r2
 8001d3e:	095b      	lsrs	r3, r3, #5
 8001d40:	2064      	movs	r0, #100	@ 0x64
 8001d42:	fb00 f303 	mul.w	r3, r0, r3
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	011b      	lsls	r3, r3, #4
 8001d4a:	3332      	adds	r3, #50	@ 0x32
 8001d4c:	4a15      	ldr	r2, [pc, #84]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001d58:	4419      	add	r1, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	009a      	lsls	r2, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d70:	4b0c      	ldr	r3, [pc, #48]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d72:	fba3 0302 	umull	r0, r3, r3, r2
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	2064      	movs	r0, #100	@ 0x64
 8001d7a:	fb00 f303 	mul.w	r3, r0, r3
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	3332      	adds	r3, #50	@ 0x32
 8001d84:	4a07      	ldr	r2, [pc, #28]	@ (8001da4 <UART_SetConfig+0x118>)
 8001d86:	fba2 2303 	umull	r2, r3, r2, r3
 8001d8a:	095b      	lsrs	r3, r3, #5
 8001d8c:	f003 020f 	and.w	r2, r3, #15
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	440a      	add	r2, r1
 8001d96:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40013800 	.word	0x40013800
 8001da4:	51eb851f 	.word	0x51eb851f

08001da8 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8001da8:	b590      	push	{r4, r7, lr}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8001dae:	b672      	cpsid	i
 8001db0:	4b4d      	ldr	r3, [pc, #308]	@ (8001ee8 <app_init+0x140>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a4d      	ldr	r2, [pc, #308]	@ (8001eec <app_init+0x144>)
 8001db6:	213f      	movs	r1, #63	@ 0x3f
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 fb2d 	bl	8004418 <sniprintf>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <app_init+0x148>)
 8001dc2:	6013      	str	r3, [r2, #0]
 8001dc4:	4b48      	ldr	r3, [pc, #288]	@ (8001ee8 <app_init+0x140>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f000 fc91 	bl	80026f0 <logger_log_print_>
 8001dce:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 8001dd0:	b672      	cpsid	i
 8001dd2:	4b45      	ldr	r3, [pc, #276]	@ (8001ee8 <app_init+0x140>)
 8001dd4:	681c      	ldr	r4, [r3, #0]
 8001dd6:	f7fe fd01 	bl	80007dc <HAL_GetTick>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	4b45      	ldr	r3, [pc, #276]	@ (8001ef4 <app_init+0x14c>)
 8001de0:	4a45      	ldr	r2, [pc, #276]	@ (8001ef8 <app_init+0x150>)
 8001de2:	213f      	movs	r1, #63	@ 0x3f
 8001de4:	4620      	mov	r0, r4
 8001de6:	f002 fb17 	bl	8004418 <sniprintf>
 8001dea:	4603      	mov	r3, r0
 8001dec:	4a40      	ldr	r2, [pc, #256]	@ (8001ef0 <app_init+0x148>)
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ee8 <app_init+0x140>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 fc7b 	bl	80026f0 <logger_log_print_>
 8001dfa:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001dfc:	b672      	cpsid	i
 8001dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8001ee8 <app_init+0x140>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a3e      	ldr	r2, [pc, #248]	@ (8001efc <app_init+0x154>)
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	213f      	movs	r1, #63	@ 0x3f
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f002 fb05 	bl	8004418 <sniprintf>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	4a37      	ldr	r2, [pc, #220]	@ (8001ef0 <app_init+0x148>)
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b34      	ldr	r3, [pc, #208]	@ (8001ee8 <app_init+0x140>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fc69 	bl	80026f0 <logger_log_print_>
 8001e1e:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001e20:	b672      	cpsid	i
 8001e22:	4b31      	ldr	r3, [pc, #196]	@ (8001ee8 <app_init+0x140>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a36      	ldr	r2, [pc, #216]	@ (8001f00 <app_init+0x158>)
 8001e28:	6812      	ldr	r2, [r2, #0]
 8001e2a:	213f      	movs	r1, #63	@ 0x3f
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f002 faf3 	bl	8004418 <sniprintf>
 8001e32:	4603      	mov	r3, r0
 8001e34:	4a2e      	ldr	r2, [pc, #184]	@ (8001ef0 <app_init+0x148>)
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b2b      	ldr	r3, [pc, #172]	@ (8001ee8 <app_init+0x140>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f000 fc57 	bl	80026f0 <logger_log_print_>
 8001e42:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8001e44:	4b2f      	ldr	r3, [pc, #188]	@ (8001f04 <app_init+0x15c>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8001e4a:	b672      	cpsid	i
 8001e4c:	4b26      	ldr	r3, [pc, #152]	@ (8001ee8 <app_init+0x140>)
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <app_init+0x15c>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	4b2c      	ldr	r3, [pc, #176]	@ (8001f08 <app_init+0x160>)
 8001e58:	4a2c      	ldr	r2, [pc, #176]	@ (8001f0c <app_init+0x164>)
 8001e5a:	213f      	movs	r1, #63	@ 0x3f
 8001e5c:	f002 fadc 	bl	8004418 <sniprintf>
 8001e60:	4603      	mov	r3, r0
 8001e62:	4a23      	ldr	r2, [pc, #140]	@ (8001ef0 <app_init+0x148>)
 8001e64:	6013      	str	r3, [r2, #0]
 8001e66:	4b20      	ldr	r3, [pc, #128]	@ (8001ee8 <app_init+0x140>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f000 fc40 	bl	80026f0 <logger_log_print_>
 8001e70:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
 8001e76:	e020      	b.n	8001eba <app_init+0x112>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001e78:	4925      	ldr	r1, [pc, #148]	@ (8001f10 <app_init+0x168>)
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	4413      	add	r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	440b      	add	r3, r1
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	4821      	ldr	r0, [pc, #132]	@ (8001f10 <app_init+0x168>)
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	4403      	add	r3, r0
 8001e96:	3308      	adds	r3, #8
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <app_init+0x16c>)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		task_dta_list[index].BCET = TASK_X_BCET_INI;
 8001ea8:	4a1a      	ldr	r2, [pc, #104]	@ (8001f14 <app_init+0x16c>)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4413      	add	r3, r2
 8001eb0:	4a19      	ldr	r2, [pc, #100]	@ (8001f18 <app_init+0x170>)
 8001eb2:	605a      	str	r2, [r3, #4]
	for (index = 0; TASK_QTY > index; index++)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	607b      	str	r3, [r7, #4]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d9db      	bls.n	8001e78 <app_init+0xd0>
	}

	cycle_counter_init();
 8001ec0:	4b16      	ldr	r3, [pc, #88]	@ (8001f1c <app_init+0x174>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	4a15      	ldr	r2, [pc, #84]	@ (8001f1c <app_init+0x174>)
 8001ec6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001eca:	60d3      	str	r3, [r2, #12]
 8001ecc:	4b14      	ldr	r3, [pc, #80]	@ (8001f20 <app_init+0x178>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	605a      	str	r2, [r3, #4]
 8001ed2:	4b13      	ldr	r3, [pc, #76]	@ (8001f20 <app_init+0x178>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a12      	ldr	r2, [pc, #72]	@ (8001f20 <app_init+0x178>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6013      	str	r3, [r2, #0]
}
 8001ede:	bf00      	nop
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd90      	pop	{r4, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	080058a0 	.word	0x080058a0
 8001eec:	0800540c 	.word	0x0800540c
 8001ef0:	20000428 	.word	0x20000428
 8001ef4:	08005410 	.word	0x08005410
 8001ef8:	0800541c 	.word	0x0800541c
 8001efc:	2000000c 	.word	0x2000000c
 8001f00:	20000010 	.word	0x20000010
 8001f04:	200003a4 	.word	0x200003a4
 8001f08:	08005440 	.word	0x08005440
 8001f0c:	0800544c 	.word	0x0800544c
 8001f10:	08005870 	.word	0x08005870
 8001f14:	200003b0 	.word	0x200003b0
 8001f18:	0007a120 	.word	0x0007a120
 8001f1c:	e000edf0 	.word	0xe000edf0
 8001f20:	e0001000 	.word	0xe0001000

08001f24 <app_update>:

void app_update(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001f2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ff0 <app_update+0xcc>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d05a      	beq.n	8001fe8 <app_update+0xc4>
    {
    	g_app_tick_cnt--;
 8001f32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <app_update+0xcc>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	4a2d      	ldr	r2, [pc, #180]	@ (8001ff0 <app_update+0xcc>)
 8001f3a:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8001f3c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff4 <app_update+0xd0>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	3301      	adds	r3, #1
 8001f42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ff4 <app_update+0xd0>)
 8001f44:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <app_update+0xd4>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	e047      	b.n	8001fe2 <app_update+0xbe>
    	{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 8001f52:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <app_update+0xd8>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8001f58:	4929      	ldr	r1, [pc, #164]	@ (8002000 <app_update+0xdc>)
 8001f5a:	68fa      	ldr	r2, [r7, #12]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3304      	adds	r3, #4
 8001f68:	6819      	ldr	r1, [r3, #0]
 8001f6a:	4825      	ldr	r0, [pc, #148]	@ (8002000 <app_update+0xdc>)
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4613      	mov	r3, r2
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	4413      	add	r3, r2
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	4403      	add	r3, r0
 8001f78:	3308      	adds	r3, #8
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8001f80:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <app_update+0xd8>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 8001f86:	4b1d      	ldr	r3, [pc, #116]	@ (8001ffc <app_update+0xd8>)
 8001f88:	685a      	ldr	r2, [r3, #4]
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <app_update+0xe0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	491e      	ldr	r1, [pc, #120]	@ (8002008 <app_update+0xe4>)
 8001f90:	fba1 1303 	umull	r1, r3, r1, r3
 8001f94:	0c9b      	lsrs	r3, r3, #18
 8001f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f9a:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8001f9c:	4b16      	ldr	r3, [pc, #88]	@ (8001ff8 <app_update+0xd4>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	4a14      	ldr	r2, [pc, #80]	@ (8001ff8 <app_update+0xd4>)
 8001fa6:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8001fa8:	4a18      	ldr	r2, [pc, #96]	@ (800200c <app_update+0xe8>)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d904      	bls.n	8001fc0 <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8001fb6:	4915      	ldr	r1, [pc, #84]	@ (800200c <app_update+0xe8>)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			}
			if (task_dta_list[index].BCET > cycle_counter_time_us)
 8001fc0:	4a12      	ldr	r2, [pc, #72]	@ (800200c <app_update+0xe8>)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d205      	bcs.n	8001fdc <app_update+0xb8>
			{
				task_dta_list[index].BCET = cycle_counter_time_us;
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	@ (800200c <app_update+0xe8>)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	605a      	str	r2, [r3, #4]
    	for (index = 0; TASK_QTY > index; index++)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3301      	adds	r3, #1
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d9b4      	bls.n	8001f52 <app_update+0x2e>
			}
	    }
    }
}
 8001fe8:	bf00      	nop
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	200003ac 	.word	0x200003ac
 8001ff4:	200003a4 	.word	0x200003a4
 8001ff8:	200003a8 	.word	0x200003a8
 8001ffc:	e0001000 	.word	0xe0001000
 8002000:	08005870 	.word	0x08005870
 8002004:	20000000 	.word	0x20000000
 8002008:	431bde83 	.word	0x431bde83
 800200c:	200003b0 	.word	0x200003b0

08002010 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8002014:	4b0e      	ldr	r3, [pc, #56]	@ (8002050 <HAL_SYSTICK_Callback+0x40>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	3301      	adds	r3, #1
 800201a:	4a0d      	ldr	r2, [pc, #52]	@ (8002050 <HAL_SYSTICK_Callback+0x40>)
 800201c:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 800201e:	4b0d      	ldr	r3, [pc, #52]	@ (8002054 <HAL_SYSTICK_Callback+0x44>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	3301      	adds	r3, #1
 8002024:	4a0b      	ldr	r2, [pc, #44]	@ (8002054 <HAL_SYSTICK_Callback+0x44>)
 8002026:	6013      	str	r3, [r2, #0]
	g_task_set_up_tick_cnt++;
 8002028:	4b0b      	ldr	r3, [pc, #44]	@ (8002058 <HAL_SYSTICK_Callback+0x48>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	4a0a      	ldr	r2, [pc, #40]	@ (8002058 <HAL_SYSTICK_Callback+0x48>)
 8002030:	6013      	str	r3, [r2, #0]
	g_task_normal_tick_cnt++;
 8002032:	4b0a      	ldr	r3, [pc, #40]	@ (800205c <HAL_SYSTICK_Callback+0x4c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	3301      	adds	r3, #1
 8002038:	4a08      	ldr	r2, [pc, #32]	@ (800205c <HAL_SYSTICK_Callback+0x4c>)
 800203a:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_SYSTICK_Callback+0x50>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	3301      	adds	r3, #1
 8002042:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <HAL_SYSTICK_Callback+0x50>)
 8002044:	6013      	str	r3, [r2, #0]

	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 8002046:	bf00      	nop
 8002048:	46bd      	mov	sp, r7
 800204a:	bc80      	pop	{r7}
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	200003ac 	.word	0x200003ac
 8002054:	200004ac 	.word	0x200004ac
 8002058:	200004b4 	.word	0x200004b4
 800205c:	20000440 	.word	0x20000440
 8002060:	20000430 	.word	0x20000430

08002064 <displayInit>:

/********************** internal data definition *****************************/
/********************** external data declaration ****************************/
/********************** external functions definition ************************/
void displayInit( displayConnection_t connection )
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 800206e:	4a38      	ldr	r2, [pc, #224]	@ (8002150 <displayInit+0xec>)
 8002070:	79fb      	ldrb	r3, [r7, #7]
 8002072:	7013      	strb	r3, [r2, #0]

    if( display.connection == DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER) {
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <displayInit+0xec>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d109      	bne.n	8002090 <displayInit+0x2c>
        pcf8574.address = PCF8574_I2C_BUS_8BIT_WRITE_ADDRESS ;
 800207c:	4b35      	ldr	r3, [pc, #212]	@ (8002154 <displayInit+0xf0>)
 800207e:	224e      	movs	r2, #78	@ 0x4e
 8002080:	601a      	str	r2, [r3, #0]
        pcf8574.data = 0b00000000;
 8002082:	4b34      	ldr	r3, [pc, #208]	@ (8002154 <displayInit+0xf0>)
 8002084:	2200      	movs	r2, #0
 8002086:	711a      	strb	r2, [r3, #4]
        /*Definido en el .ioc*/
        //i2cPcf8574.frequency(100000);

        displayPinWrite( DISPLAY_PIN_A_PCF8574,  ON );
 8002088:	2101      	movs	r1, #1
 800208a:	2003      	movs	r0, #3
 800208c:	f000 f8f6 	bl	800227c <displayPinWrite>
    }

    initial8BitCommunicationIsCompleted = false;
 8002090:	4b31      	ldr	r3, [pc, #196]	@ (8002158 <displayInit+0xf4>)
 8002092:	2200      	movs	r2, #0
 8002094:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8002096:	2032      	movs	r0, #50	@ 0x32
 8002098:	f7fe fbaa 	bl	80007f0 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800209c:	2130      	movs	r1, #48	@ 0x30
 800209e:	2000      	movs	r0, #0
 80020a0:	f000 f8c8 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 80020a4:	2005      	movs	r0, #5
 80020a6:	f7fe fba3 	bl	80007f0 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80020aa:	2130      	movs	r1, #48	@ 0x30
 80020ac:	2000      	movs	r0, #0
 80020ae:	f000 f8c1 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 80020b2:	2001      	movs	r0, #1
 80020b4:	f7fe fb9c 	bl	80007f0 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80020b8:	2130      	movs	r1, #48	@ 0x30
 80020ba:	2000      	movs	r0, #0
 80020bc:	f000 f8ba 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f7fe fb95 	bl	80007f0 <HAL_Delay>

    switch( display.connection ) {
 80020c6:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <displayInit+0xec>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d00d      	beq.n	80020ea <displayInit+0x86>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	dc1d      	bgt.n	800210e <displayInit+0xaa>
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d009      	beq.n	80020ea <displayInit+0x86>
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d119      	bne.n	800210e <displayInit+0xaa>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80020da:	2138      	movs	r1, #56	@ 0x38
 80020dc:	2000      	movs	r0, #0
 80020de:	f000 f8a9 	bl	8002234 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 80020e2:	2001      	movs	r0, #1
 80020e4:	f7fe fb84 	bl	80007f0 <HAL_Delay>
        break;
 80020e8:	e011      	b.n	800210e <displayInit+0xaa>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80020ea:	2120      	movs	r1, #32
 80020ec:	2000      	movs	r0, #0
 80020ee:	f000 f8a1 	bl	8002234 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f7fe fb7c 	bl	80007f0 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 80020f8:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <displayInit+0xf4>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80020fe:	2128      	movs	r1, #40	@ 0x28
 8002100:	2000      	movs	r0, #0
 8002102:	f000 f897 	bl	8002234 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8002106:	2001      	movs	r0, #1
 8002108:	f7fe fb72 	bl	80007f0 <HAL_Delay>
        break;
 800210c:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800210e:	2108      	movs	r1, #8
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f88f 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8002116:	2001      	movs	r0, #1
 8002118:	f7fe fb6a 	bl	80007f0 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800211c:	2101      	movs	r1, #1
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f888 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 8002124:	2001      	movs	r0, #1
 8002126:	f7fe fb63 	bl	80007f0 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800212a:	2106      	movs	r1, #6
 800212c:	2000      	movs	r0, #0
 800212e:	f000 f881 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 8002132:	2001      	movs	r0, #1
 8002134:	f7fe fb5c 	bl	80007f0 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002138:	210c      	movs	r1, #12
 800213a:	2000      	movs	r0, #0
 800213c:	f000 f87a 	bl	8002234 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8002140:	2001      	movs	r0, #1
 8002142:	f7fe fb55 	bl	80007f0 <HAL_Delay>
}
 8002146:	bf00      	nop
 8002148:	3708      	adds	r7, #8
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	200003d0 	.word	0x200003d0
 8002154:	200003d4 	.word	0x200003d4
 8002158:	200003e4 	.word	0x200003e4

0800215c <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	4603      	mov	r3, r0
 8002164:	460a      	mov	r2, r1
 8002166:	71fb      	strb	r3, [r7, #7]
 8002168:	4613      	mov	r3, r2
 800216a:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	2b03      	cmp	r3, #3
 8002170:	d846      	bhi.n	8002200 <displayCharPositionWrite+0xa4>
 8002172:	a201      	add	r2, pc, #4	@ (adr r2, 8002178 <displayCharPositionWrite+0x1c>)
 8002174:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002178:	08002189 	.word	0x08002189
 800217c:	080021a1 	.word	0x080021a1
 8002180:	080021c1 	.word	0x080021c1
 8002184:	080021e1 	.word	0x080021e1
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8002188:	79fb      	ldrb	r3, [r7, #7]
 800218a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800218e:	b2db      	uxtb	r3, r3
 8002190:	4619      	mov	r1, r3
 8002192:	2000      	movs	r0, #0
 8002194:	f000 f84e 	bl	8002234 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            HAL_Delay(1);
 8002198:	2001      	movs	r0, #1
 800219a:	f7fe fb29 	bl	80007f0 <HAL_Delay>
        break;
 800219e:	e02f      	b.n	8002200 <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 80021a0:	79fb      	ldrb	r3, [r7, #7]
 80021a2:	3340      	adds	r3, #64	@ 0x40
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 80021a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021ac:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	4619      	mov	r1, r3
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f83e 	bl	8002234 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 80021b8:	2001      	movs	r0, #1
 80021ba:	f7fe fb19 	bl	80007f0 <HAL_Delay>
        break;
 80021be:	e01f      	b.n	8002200 <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	3314      	adds	r3, #20
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 80021c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021cc:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	4619      	mov	r1, r3
 80021d2:	2000      	movs	r0, #0
 80021d4:	f000 f82e 	bl	8002234 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 80021d8:	2001      	movs	r0, #1
 80021da:	f7fe fb09 	bl	80007f0 <HAL_Delay>
        break;
 80021de:	e00f      	b.n	8002200 <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	3354      	adds	r3, #84	@ 0x54
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 80021e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80021ec:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	4619      	mov	r1, r3
 80021f2:	2000      	movs	r0, #0
 80021f4:	f000 f81e 	bl	8002234 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 80021f8:	2001      	movs	r0, #1
 80021fa:	f7fe faf9 	bl	80007f0 <HAL_Delay>
        break;
 80021fe:	bf00      	nop
    }
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8002210:	e007      	b.n	8002222 <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	607a      	str	r2, [r7, #4]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	4619      	mov	r1, r3
 800221c:	2001      	movs	r0, #1
 800221e:	f000 f809 	bl	8002234 <displayCodeWrite>
    while (*str) {
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d1f3      	bne.n	8002212 <displayStringWrite+0xa>
    }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}

08002234 <displayCodeWrite>:
/********************** internal functions definition ************************/
static void displayCodeWrite( bool type, uint8_t dataBus) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	4603      	mov	r3, r0
 800223c:	460a      	mov	r2, r1
 800223e:	71fb      	strb	r3, [r7, #7]
 8002240:	4613      	mov	r3, r2
 8002242:	71bb      	strb	r3, [r7, #6]
	if (type == DISPLAY_RS_INSTRUCTION)
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	f083 0301 	eor.w	r3, r3, #1
 800224a:	b2db      	uxtb	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION);
 8002250:	2100      	movs	r1, #0
 8002252:	2004      	movs	r0, #4
 8002254:	f000 f812 	bl	800227c <displayPinWrite>
 8002258:	e003      	b.n	8002262 <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA);
 800225a:	2101      	movs	r1, #1
 800225c:	2004      	movs	r0, #4
 800225e:	f000 f80d 	bl	800227c <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE);
 8002262:	2100      	movs	r1, #0
 8002264:	2005      	movs	r0, #5
 8002266:	f000 f809 	bl	800227c <displayPinWrite>
	displayDataBusWrite(dataBus);
 800226a:	79bb      	ldrb	r3, [r7, #6]
 800226c:	4618      	mov	r0, r3
 800226e:	f000 f9ad 	bl	80025cc <displayDataBusWrite>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
	...

0800227c <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	4603      	mov	r3, r0
 8002284:	6039      	str	r1, [r7, #0]
 8002286:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8002288:	4b99      	ldr	r3, [pc, #612]	@ (80024f0 <displayPinWrite+0x274>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	2b02      	cmp	r3, #2
 800228e:	f000 80ab 	beq.w	80023e8 <displayPinWrite+0x16c>
 8002292:	2b02      	cmp	r3, #2
 8002294:	f300 8193 	bgt.w	80025be <displayPinWrite+0x342>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d053      	beq.n	8002344 <displayPinWrite+0xc8>
 800229c:	2b01      	cmp	r3, #1
 800229e:	f040 818e 	bne.w	80025be <displayPinWrite+0x342>

    	case DISPLAY_CONNECTION_GPIO_8BITS:
            switch( pinName ) {
 80022a2:	79fb      	ldrb	r3, [r7, #7]
 80022a4:	3b04      	subs	r3, #4
 80022a6:	2b0a      	cmp	r3, #10
 80022a8:	d84a      	bhi.n	8002340 <displayPinWrite+0xc4>
 80022aa:	a201      	add	r2, pc, #4	@ (adr r2, 80022b0 <displayPinWrite+0x34>)
 80022ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022b0:	08002321 	.word	0x08002321
 80022b4:	08002341 	.word	0x08002341
 80022b8:	08002331 	.word	0x08002331
 80022bc:	08002341 	.word	0x08002341
 80022c0:	08002341 	.word	0x08002341
 80022c4:	08002341 	.word	0x08002341
 80022c8:	08002341 	.word	0x08002341
 80022cc:	080022dd 	.word	0x080022dd
 80022d0:	080022ef 	.word	0x080022ef
 80022d4:	08002301 	.word	0x08002301
 80022d8:	08002311 	.word	0x08002311
//                case DISPLAY_PIN_D0: HAL_GPIO_WritePin(D2_GPIO_Port,  D2_Pin,  value);   break;
//                case DISPLAY_PIN_D1: HAL_GPIO_WritePin(D4_GPIO_Port,  D4_Pin,  value);   break;
//                case DISPLAY_PIN_D2: HAL_GPIO_WritePin(D5_GPIO_Port,  D5_Pin,  value);   break;
//                case DISPLAY_PIN_D3: HAL_GPIO_WritePin(D6_GPIO_Port,  D6_Pin,  value);   break;
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	461a      	mov	r2, r3
 80022e2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80022e6:	4883      	ldr	r0, [pc, #524]	@ (80024f4 <displayPinWrite+0x278>)
 80022e8:	f7fe ff67 	bl	80011ba <HAL_GPIO_WritePin>
 80022ec:	e029      	b.n	8002342 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	461a      	mov	r2, r3
 80022f4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80022f8:	487e      	ldr	r0, [pc, #504]	@ (80024f4 <displayPinWrite+0x278>)
 80022fa:	f7fe ff5e 	bl	80011ba <HAL_GPIO_WritePin>
 80022fe:	e020      	b.n	8002342 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	b2db      	uxtb	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	2180      	movs	r1, #128	@ 0x80
 8002308:	487b      	ldr	r0, [pc, #492]	@ (80024f8 <displayPinWrite+0x27c>)
 800230a:	f7fe ff56 	bl	80011ba <HAL_GPIO_WritePin>
 800230e:	e018      	b.n	8002342 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	2140      	movs	r1, #64	@ 0x40
 8002318:	4878      	ldr	r0, [pc, #480]	@ (80024fc <displayPinWrite+0x280>)
 800231a:	f7fe ff4e 	bl	80011ba <HAL_GPIO_WritePin>
 800231e:	e010      	b.n	8002342 <displayPinWrite+0xc6>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	b2db      	uxtb	r3, r3
 8002324:	461a      	mov	r2, r3
 8002326:	2180      	movs	r1, #128	@ 0x80
 8002328:	4872      	ldr	r0, [pc, #456]	@ (80024f4 <displayPinWrite+0x278>)
 800232a:	f7fe ff46 	bl	80011ba <HAL_GPIO_WritePin>
 800232e:	e008      	b.n	8002342 <displayPinWrite+0xc6>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2db      	uxtb	r3, r3
 8002334:	461a      	mov	r2, r3
 8002336:	2140      	movs	r1, #64	@ 0x40
 8002338:	486e      	ldr	r0, [pc, #440]	@ (80024f4 <displayPinWrite+0x278>)
 800233a:	f7fe ff3e 	bl	80011ba <HAL_GPIO_WritePin>
 800233e:	e000      	b.n	8002342 <displayPinWrite+0xc6>
                case DISPLAY_PIN_RW: break;
                default: break;
 8002340:	bf00      	nop
            }
            break;
 8002342:	e13c      	b.n	80025be <displayPinWrite+0x342>


        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	3b04      	subs	r3, #4
 8002348:	2b0a      	cmp	r3, #10
 800234a:	d84b      	bhi.n	80023e4 <displayPinWrite+0x168>
 800234c:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <displayPinWrite+0xd8>)
 800234e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002352:	bf00      	nop
 8002354:	080023c5 	.word	0x080023c5
 8002358:	080023e5 	.word	0x080023e5
 800235c:	080023d5 	.word	0x080023d5
 8002360:	080023e5 	.word	0x080023e5
 8002364:	080023e5 	.word	0x080023e5
 8002368:	080023e5 	.word	0x080023e5
 800236c:	080023e5 	.word	0x080023e5
 8002370:	08002381 	.word	0x08002381
 8002374:	08002393 	.word	0x08002393
 8002378:	080023a5 	.word	0x080023a5
 800237c:	080023b5 	.word	0x080023b5
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	461a      	mov	r2, r3
 8002386:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800238a:	485a      	ldr	r0, [pc, #360]	@ (80024f4 <displayPinWrite+0x278>)
 800238c:	f7fe ff15 	bl	80011ba <HAL_GPIO_WritePin>
 8002390:	e029      	b.n	80023e6 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	b2db      	uxtb	r3, r3
 8002396:	461a      	mov	r2, r3
 8002398:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800239c:	4855      	ldr	r0, [pc, #340]	@ (80024f4 <displayPinWrite+0x278>)
 800239e:	f7fe ff0c 	bl	80011ba <HAL_GPIO_WritePin>
 80023a2:	e020      	b.n	80023e6 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	2180      	movs	r1, #128	@ 0x80
 80023ac:	4852      	ldr	r0, [pc, #328]	@ (80024f8 <displayPinWrite+0x27c>)
 80023ae:	f7fe ff04 	bl	80011ba <HAL_GPIO_WritePin>
 80023b2:	e018      	b.n	80023e6 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	461a      	mov	r2, r3
 80023ba:	2140      	movs	r1, #64	@ 0x40
 80023bc:	484f      	ldr	r0, [pc, #316]	@ (80024fc <displayPinWrite+0x280>)
 80023be:	f7fe fefc 	bl	80011ba <HAL_GPIO_WritePin>
 80023c2:	e010      	b.n	80023e6 <displayPinWrite+0x16a>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	2180      	movs	r1, #128	@ 0x80
 80023cc:	4849      	ldr	r0, [pc, #292]	@ (80024f4 <displayPinWrite+0x278>)
 80023ce:	f7fe fef4 	bl	80011ba <HAL_GPIO_WritePin>
 80023d2:	e008      	b.n	80023e6 <displayPinWrite+0x16a>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	2140      	movs	r1, #64	@ 0x40
 80023dc:	4845      	ldr	r0, [pc, #276]	@ (80024f4 <displayPinWrite+0x278>)
 80023de:	f7fe feec 	bl	80011ba <HAL_GPIO_WritePin>
 80023e2:	e000      	b.n	80023e6 <displayPinWrite+0x16a>
                case DISPLAY_PIN_RW: break;
                default: break;
 80023e4:	bf00      	nop
            }
            break;
 80023e6:	e0ea      	b.n	80025be <displayPinWrite+0x342>

        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
           if ( value ) {
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d03e      	beq.n	800246c <displayPinWrite+0x1f0>
                switch( pinName ) {
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	2b0b      	cmp	r3, #11
 80023f4:	d87a      	bhi.n	80024ec <displayPinWrite+0x270>
 80023f6:	a201      	add	r2, pc, #4	@ (adr r2, 80023fc <displayPinWrite+0x180>)
 80023f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023fc:	08002465 	.word	0x08002465
 8002400:	0800244d 	.word	0x0800244d
 8002404:	0800245d 	.word	0x0800245d
 8002408:	08002455 	.word	0x08002455
 800240c:	080024ed 	.word	0x080024ed
 8002410:	080024ed 	.word	0x080024ed
 8002414:	080024ed 	.word	0x080024ed
 8002418:	080024ed 	.word	0x080024ed
 800241c:	0800242d 	.word	0x0800242d
 8002420:	08002435 	.word	0x08002435
 8002424:	0800243d 	.word	0x0800243d
 8002428:	08002445 	.word	0x08002445
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = ON; break;
 800242c:	4b34      	ldr	r3, [pc, #208]	@ (8002500 <displayPinWrite+0x284>)
 800242e:	2201      	movs	r2, #1
 8002430:	725a      	strb	r2, [r3, #9]
 8002432:	e068      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = ON; break;
 8002434:	4b32      	ldr	r3, [pc, #200]	@ (8002500 <displayPinWrite+0x284>)
 8002436:	2201      	movs	r2, #1
 8002438:	729a      	strb	r2, [r3, #10]
 800243a:	e064      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = ON; break;
 800243c:	4b30      	ldr	r3, [pc, #192]	@ (8002500 <displayPinWrite+0x284>)
 800243e:	2201      	movs	r2, #1
 8002440:	72da      	strb	r2, [r3, #11]
 8002442:	e060      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = ON; break;
 8002444:	4b2e      	ldr	r3, [pc, #184]	@ (8002500 <displayPinWrite+0x284>)
 8002446:	2201      	movs	r2, #1
 8002448:	731a      	strb	r2, [r3, #12]
 800244a:	e05c      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = ON; break;
 800244c:	4b2c      	ldr	r3, [pc, #176]	@ (8002500 <displayPinWrite+0x284>)
 800244e:	2201      	movs	r2, #1
 8002450:	715a      	strb	r2, [r3, #5]
 8002452:	e058      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = ON; break;
 8002454:	4b2a      	ldr	r3, [pc, #168]	@ (8002500 <displayPinWrite+0x284>)
 8002456:	2201      	movs	r2, #1
 8002458:	71da      	strb	r2, [r3, #7]
 800245a:	e054      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = ON; break;
 800245c:	4b28      	ldr	r3, [pc, #160]	@ (8002500 <displayPinWrite+0x284>)
 800245e:	2201      	movs	r2, #1
 8002460:	719a      	strb	r2, [r3, #6]
 8002462:	e050      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = ON; break;
 8002464:	4b26      	ldr	r3, [pc, #152]	@ (8002500 <displayPinWrite+0x284>)
 8002466:	2201      	movs	r2, #1
 8002468:	721a      	strb	r2, [r3, #8]
 800246a:	e04c      	b.n	8002506 <displayPinWrite+0x28a>
                    default: break;
                }
            }
            else {
                switch( pinName ) {
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	3b03      	subs	r3, #3
 8002470:	2b0b      	cmp	r3, #11
 8002472:	d847      	bhi.n	8002504 <displayPinWrite+0x288>
 8002474:	a201      	add	r2, pc, #4	@ (adr r2, 800247c <displayPinWrite+0x200>)
 8002476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800247a:	bf00      	nop
 800247c:	080024e5 	.word	0x080024e5
 8002480:	080024cd 	.word	0x080024cd
 8002484:	080024dd 	.word	0x080024dd
 8002488:	080024d5 	.word	0x080024d5
 800248c:	08002505 	.word	0x08002505
 8002490:	08002505 	.word	0x08002505
 8002494:	08002505 	.word	0x08002505
 8002498:	08002505 	.word	0x08002505
 800249c:	080024ad 	.word	0x080024ad
 80024a0:	080024b5 	.word	0x080024b5
 80024a4:	080024bd 	.word	0x080024bd
 80024a8:	080024c5 	.word	0x080024c5
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = OFF; break;
 80024ac:	4b14      	ldr	r3, [pc, #80]	@ (8002500 <displayPinWrite+0x284>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	725a      	strb	r2, [r3, #9]
 80024b2:	e028      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = OFF; break;
 80024b4:	4b12      	ldr	r3, [pc, #72]	@ (8002500 <displayPinWrite+0x284>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	729a      	strb	r2, [r3, #10]
 80024ba:	e024      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = OFF; break;
 80024bc:	4b10      	ldr	r3, [pc, #64]	@ (8002500 <displayPinWrite+0x284>)
 80024be:	2200      	movs	r2, #0
 80024c0:	72da      	strb	r2, [r3, #11]
 80024c2:	e020      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = OFF; break;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002500 <displayPinWrite+0x284>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	731a      	strb	r2, [r3, #12]
 80024ca:	e01c      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = OFF; break;
 80024cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002500 <displayPinWrite+0x284>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	715a      	strb	r2, [r3, #5]
 80024d2:	e018      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = OFF; break;
 80024d4:	4b0a      	ldr	r3, [pc, #40]	@ (8002500 <displayPinWrite+0x284>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	71da      	strb	r2, [r3, #7]
 80024da:	e014      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = OFF; break;
 80024dc:	4b08      	ldr	r3, [pc, #32]	@ (8002500 <displayPinWrite+0x284>)
 80024de:	2200      	movs	r2, #0
 80024e0:	719a      	strb	r2, [r3, #6]
 80024e2:	e010      	b.n	8002506 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = OFF; break;
 80024e4:	4b06      	ldr	r3, [pc, #24]	@ (8002500 <displayPinWrite+0x284>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	721a      	strb	r2, [r3, #8]
 80024ea:	e00c      	b.n	8002506 <displayPinWrite+0x28a>
                    default: break;
 80024ec:	bf00      	nop
 80024ee:	e00a      	b.n	8002506 <displayPinWrite+0x28a>
 80024f0:	200003d0 	.word	0x200003d0
 80024f4:	40010800 	.word	0x40010800
 80024f8:	40011000 	.word	0x40011000
 80024fc:	40010c00 	.word	0x40010c00
 8002500:	200003d4 	.word	0x200003d4
                    default: break;
 8002504:	bf00      	nop
                }
            }
            pcf8574.data = 0b00000000;
 8002506:	4b30      	ldr	r3, [pc, #192]	@ (80025c8 <displayPinWrite+0x34c>)
 8002508:	2200      	movs	r2, #0
 800250a:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRs ) pcf8574.data |= 0b00000001;
 800250c:	4b2e      	ldr	r3, [pc, #184]	@ (80025c8 <displayPinWrite+0x34c>)
 800250e:	795b      	ldrb	r3, [r3, #5]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d006      	beq.n	8002522 <displayPinWrite+0x2a6>
 8002514:	4b2c      	ldr	r3, [pc, #176]	@ (80025c8 <displayPinWrite+0x34c>)
 8002516:	791b      	ldrb	r3, [r3, #4]
 8002518:	f043 0301 	orr.w	r3, r3, #1
 800251c:	b2da      	uxtb	r2, r3
 800251e:	4b2a      	ldr	r3, [pc, #168]	@ (80025c8 <displayPinWrite+0x34c>)
 8002520:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRw ) pcf8574.data |= 0b00000010;
 8002522:	4b29      	ldr	r3, [pc, #164]	@ (80025c8 <displayPinWrite+0x34c>)
 8002524:	799b      	ldrb	r3, [r3, #6]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d006      	beq.n	8002538 <displayPinWrite+0x2bc>
 800252a:	4b27      	ldr	r3, [pc, #156]	@ (80025c8 <displayPinWrite+0x34c>)
 800252c:	791b      	ldrb	r3, [r3, #4]
 800252e:	f043 0302 	orr.w	r3, r3, #2
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b24      	ldr	r3, [pc, #144]	@ (80025c8 <displayPinWrite+0x34c>)
 8002536:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinEn ) pcf8574.data |= 0b00000100;
 8002538:	4b23      	ldr	r3, [pc, #140]	@ (80025c8 <displayPinWrite+0x34c>)
 800253a:	79db      	ldrb	r3, [r3, #7]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d006      	beq.n	800254e <displayPinWrite+0x2d2>
 8002540:	4b21      	ldr	r3, [pc, #132]	@ (80025c8 <displayPinWrite+0x34c>)
 8002542:	791b      	ldrb	r3, [r3, #4]
 8002544:	f043 0304 	orr.w	r3, r3, #4
 8002548:	b2da      	uxtb	r2, r3
 800254a:	4b1f      	ldr	r3, [pc, #124]	@ (80025c8 <displayPinWrite+0x34c>)
 800254c:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinA  ) pcf8574.data |= 0b00001000;
 800254e:	4b1e      	ldr	r3, [pc, #120]	@ (80025c8 <displayPinWrite+0x34c>)
 8002550:	7a1b      	ldrb	r3, [r3, #8]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d006      	beq.n	8002564 <displayPinWrite+0x2e8>
 8002556:	4b1c      	ldr	r3, [pc, #112]	@ (80025c8 <displayPinWrite+0x34c>)
 8002558:	791b      	ldrb	r3, [r3, #4]
 800255a:	f043 0308 	orr.w	r3, r3, #8
 800255e:	b2da      	uxtb	r2, r3
 8002560:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <displayPinWrite+0x34c>)
 8002562:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD4 ) pcf8574.data |= 0b00010000;
 8002564:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <displayPinWrite+0x34c>)
 8002566:	7a5b      	ldrb	r3, [r3, #9]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d006      	beq.n	800257a <displayPinWrite+0x2fe>
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <displayPinWrite+0x34c>)
 800256e:	791b      	ldrb	r3, [r3, #4]
 8002570:	f043 0310 	orr.w	r3, r3, #16
 8002574:	b2da      	uxtb	r2, r3
 8002576:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <displayPinWrite+0x34c>)
 8002578:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD5 ) pcf8574.data |= 0b00100000;
 800257a:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <displayPinWrite+0x34c>)
 800257c:	7a9b      	ldrb	r3, [r3, #10]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d006      	beq.n	8002590 <displayPinWrite+0x314>
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <displayPinWrite+0x34c>)
 8002584:	791b      	ldrb	r3, [r3, #4]
 8002586:	f043 0320 	orr.w	r3, r3, #32
 800258a:	b2da      	uxtb	r2, r3
 800258c:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <displayPinWrite+0x34c>)
 800258e:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD6 ) pcf8574.data |= 0b01000000;
 8002590:	4b0d      	ldr	r3, [pc, #52]	@ (80025c8 <displayPinWrite+0x34c>)
 8002592:	7adb      	ldrb	r3, [r3, #11]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <displayPinWrite+0x32a>
 8002598:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <displayPinWrite+0x34c>)
 800259a:	791b      	ldrb	r3, [r3, #4]
 800259c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025a0:	b2da      	uxtb	r2, r3
 80025a2:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <displayPinWrite+0x34c>)
 80025a4:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD7 ) pcf8574.data |= 0b10000000;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <displayPinWrite+0x34c>)
 80025a8:	7b1b      	ldrb	r3, [r3, #12]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d006      	beq.n	80025bc <displayPinWrite+0x340>
 80025ae:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <displayPinWrite+0x34c>)
 80025b0:	791b      	ldrb	r3, [r3, #4]
 80025b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025b6:	b2da      	uxtb	r2, r3
 80025b8:	4b03      	ldr	r3, [pc, #12]	@ (80025c8 <displayPinWrite+0x34c>)
 80025ba:	711a      	strb	r2, [r3, #4]

            //i2cPcf8574.write( pcf8574.address, &pcf8574.data, 1);
            //HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)pcf8574.address<<1, (uint8_t *)&pcf8574.data, (uint16_t)16, HAL_MAX_DELAY);

            break;
 80025bc:	bf00      	nop
    }
}
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	200003d4 	.word	0x200003d4

080025cc <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	4603      	mov	r3, r0
 80025d4:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 80025d6:	2100      	movs	r1, #0
 80025d8:	2006      	movs	r0, #6
 80025da:	f7ff fe4f 	bl	800227c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e4:	4619      	mov	r1, r3
 80025e6:	200e      	movs	r0, #14
 80025e8:	f7ff fe48 	bl	800227c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025f2:	4619      	mov	r1, r3
 80025f4:	200d      	movs	r0, #13
 80025f6:	f7ff fe41 	bl	800227c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 80025fa:	79fb      	ldrb	r3, [r7, #7]
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	4619      	mov	r1, r3
 8002602:	200c      	movs	r0, #12
 8002604:	f7ff fe3a 	bl	800227c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	f003 0310 	and.w	r3, r3, #16
 800260e:	4619      	mov	r1, r3
 8002610:	200b      	movs	r0, #11
 8002612:	f7ff fe33 	bl	800227c <displayPinWrite>
    switch( display.connection ) {
 8002616:	4b34      	ldr	r3, [pc, #208]	@ (80026e8 <displayDataBusWrite+0x11c>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b02      	cmp	r3, #2
 800261c:	d022      	beq.n	8002664 <displayDataBusWrite+0x98>
 800261e:	2b02      	cmp	r3, #2
 8002620:	dc4f      	bgt.n	80026c2 <displayDataBusWrite+0xf6>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d01e      	beq.n	8002664 <displayDataBusWrite+0x98>
 8002626:	2b01      	cmp	r3, #1
 8002628:	d14b      	bne.n	80026c2 <displayDataBusWrite+0xf6>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	4619      	mov	r1, r3
 8002632:	200a      	movs	r0, #10
 8002634:	f7ff fe22 	bl	800227c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	f003 0304 	and.w	r3, r3, #4
 800263e:	4619      	mov	r1, r3
 8002640:	2009      	movs	r0, #9
 8002642:	f7ff fe1b 	bl	800227c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	4619      	mov	r1, r3
 800264e:	2008      	movs	r0, #8
 8002650:	f7ff fe14 	bl	800227c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8002654:	79fb      	ldrb	r3, [r7, #7]
 8002656:	f003 0301 	and.w	r3, r3, #1
 800265a:	4619      	mov	r1, r3
 800265c:	2007      	movs	r0, #7
 800265e:	f7ff fe0d 	bl	800227c <displayPinWrite>
        break;
 8002662:	e02e      	b.n	80026c2 <displayDataBusWrite+0xf6>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            if ( initial8BitCommunicationIsCompleted == true) {
 8002664:	4b21      	ldr	r3, [pc, #132]	@ (80026ec <displayDataBusWrite+0x120>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d029      	beq.n	80026c0 <displayDataBusWrite+0xf4>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 800266c:	2101      	movs	r1, #1
 800266e:	2006      	movs	r0, #6
 8002670:	f7ff fe04 	bl	800227c <displayPinWrite>
                HAL_Delay(1);
 8002674:	2001      	movs	r0, #1
 8002676:	f7fe f8bb 	bl	80007f0 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 800267a:	2100      	movs	r1, #0
 800267c:	2006      	movs	r0, #6
 800267e:	f7ff fdfd 	bl	800227c <displayPinWrite>
                HAL_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f7fe f8b4 	bl	80007f0 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	f003 0308 	and.w	r3, r3, #8
 800268e:	4619      	mov	r1, r3
 8002690:	200e      	movs	r0, #14
 8002692:	f7ff fdf3 	bl	800227c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	f003 0304 	and.w	r3, r3, #4
 800269c:	4619      	mov	r1, r3
 800269e:	200d      	movs	r0, #13
 80026a0:	f7ff fdec 	bl	800227c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	4619      	mov	r1, r3
 80026ac:	200c      	movs	r0, #12
 80026ae:	f7ff fde5 	bl	800227c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	4619      	mov	r1, r3
 80026ba:	200b      	movs	r0, #11
 80026bc:	f7ff fdde 	bl	800227c <displayPinWrite>
            }
        break;
 80026c0:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 80026c2:	2101      	movs	r1, #1
 80026c4:	2006      	movs	r0, #6
 80026c6:	f7ff fdd9 	bl	800227c <displayPinWrite>
    HAL_Delay(1);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f7fe f890 	bl	80007f0 <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 80026d0:	2100      	movs	r1, #0
 80026d2:	2006      	movs	r0, #6
 80026d4:	f7ff fdd2 	bl	800227c <displayPinWrite>
    HAL_Delay(1);
 80026d8:	2001      	movs	r0, #1
 80026da:	f7fe f889 	bl	80007f0 <HAL_Delay>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	200003d0 	.word	0x200003d0
 80026ec:	200003e4 	.word	0x200003e4

080026f0 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
	printf(msg);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f001 fe7b 	bl	80043f4 <iprintf>
	fflush(stdout);
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <logger_log_print_+0x24>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4618      	mov	r0, r3
 8002706:	f001 fd9f 	bl	8004248 <fflush>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200002b8 	.word	0x200002b8

08002718 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 8002720:	b672      	cpsid	i
 8002722:	4b5f      	ldr	r3, [pc, #380]	@ (80028a0 <task_actuator_init+0x188>)
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	4b5f      	ldr	r3, [pc, #380]	@ (80028a4 <task_actuator_init+0x18c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	4b5e      	ldr	r3, [pc, #376]	@ (80028a8 <task_actuator_init+0x190>)
 800272e:	4a5f      	ldr	r2, [pc, #380]	@ (80028ac <task_actuator_init+0x194>)
 8002730:	213f      	movs	r1, #63	@ 0x3f
 8002732:	f001 fe71 	bl	8004418 <sniprintf>
 8002736:	4603      	mov	r3, r0
 8002738:	4a5d      	ldr	r2, [pc, #372]	@ (80028b0 <task_actuator_init+0x198>)
 800273a:	6013      	str	r3, [r2, #0]
 800273c:	4b58      	ldr	r3, [pc, #352]	@ (80028a0 <task_actuator_init+0x188>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ffd5 	bl	80026f0 <logger_log_print_>
 8002746:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 8002748:	b672      	cpsid	i
 800274a:	4b55      	ldr	r3, [pc, #340]	@ (80028a0 <task_actuator_init+0x188>)
 800274c:	6818      	ldr	r0, [r3, #0]
 800274e:	4b59      	ldr	r3, [pc, #356]	@ (80028b4 <task_actuator_init+0x19c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	4b58      	ldr	r3, [pc, #352]	@ (80028b8 <task_actuator_init+0x1a0>)
 8002756:	4a59      	ldr	r2, [pc, #356]	@ (80028bc <task_actuator_init+0x1a4>)
 8002758:	213f      	movs	r1, #63	@ 0x3f
 800275a:	f001 fe5d 	bl	8004418 <sniprintf>
 800275e:	4603      	mov	r3, r0
 8002760:	4a53      	ldr	r2, [pc, #332]	@ (80028b0 <task_actuator_init+0x198>)
 8002762:	6013      	str	r3, [r2, #0]
 8002764:	4b4e      	ldr	r3, [pc, #312]	@ (80028a0 <task_actuator_init+0x188>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ffc1 	bl	80026f0 <logger_log_print_>
 800276e:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8002770:	4b53      	ldr	r3, [pc, #332]	@ (80028c0 <task_actuator_init+0x1a8>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8002776:	b672      	cpsid	i
 8002778:	4b49      	ldr	r3, [pc, #292]	@ (80028a0 <task_actuator_init+0x188>)
 800277a:	6818      	ldr	r0, [r3, #0]
 800277c:	4b50      	ldr	r3, [pc, #320]	@ (80028c0 <task_actuator_init+0x1a8>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	4b50      	ldr	r3, [pc, #320]	@ (80028c4 <task_actuator_init+0x1ac>)
 8002784:	4a50      	ldr	r2, [pc, #320]	@ (80028c8 <task_actuator_init+0x1b0>)
 8002786:	213f      	movs	r1, #63	@ 0x3f
 8002788:	f001 fe46 	bl	8004418 <sniprintf>
 800278c:	4603      	mov	r3, r0
 800278e:	4a48      	ldr	r2, [pc, #288]	@ (80028b0 <task_actuator_init+0x198>)
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b43      	ldr	r3, [pc, #268]	@ (80028a0 <task_actuator_init+0x188>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff ffaa 	bl	80026f0 <logger_log_print_>
 800279c:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	e072      	b.n	800288a <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	4613      	mov	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	4a47      	ldr	r2, [pc, #284]	@ (80028cc <task_actuator_init+0x1b4>)
 80027b0:	4413      	add	r3, r2
 80027b2:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4a45      	ldr	r2, [pc, #276]	@ (80028d0 <task_actuator_init+0x1b8>)
 80027ba:	4413      	add	r3, r2
 80027bc:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 80027be:	b672      	cpsid	i
 80027c0:	4b37      	ldr	r3, [pc, #220]	@ (80028a0 <task_actuator_init+0x188>)
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	4b42      	ldr	r3, [pc, #264]	@ (80028d4 <task_actuator_init+0x1bc>)
 80027ca:	4a43      	ldr	r2, [pc, #268]	@ (80028d8 <task_actuator_init+0x1c0>)
 80027cc:	213f      	movs	r1, #63	@ 0x3f
 80027ce:	f001 fe23 	bl	8004418 <sniprintf>
 80027d2:	4603      	mov	r3, r0
 80027d4:	4a36      	ldr	r2, [pc, #216]	@ (80028b0 <task_actuator_init+0x198>)
 80027d6:	6013      	str	r3, [r2, #0]
 80027d8:	4b31      	ldr	r3, [pc, #196]	@ (80028a0 <task_actuator_init+0x188>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7ff ff87 	bl	80026f0 <logger_log_print_>
 80027e2:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	791b      	ldrb	r3, [r3, #4]
 80027e8:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80027ea:	b672      	cpsid	i
 80027ec:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <task_actuator_init+0x188>)
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	7afb      	ldrb	r3, [r7, #11]
 80027f2:	9300      	str	r3, [sp, #0]
 80027f4:	4b39      	ldr	r3, [pc, #228]	@ (80028dc <task_actuator_init+0x1c4>)
 80027f6:	4a38      	ldr	r2, [pc, #224]	@ (80028d8 <task_actuator_init+0x1c0>)
 80027f8:	213f      	movs	r1, #63	@ 0x3f
 80027fa:	f001 fe0d 	bl	8004418 <sniprintf>
 80027fe:	4603      	mov	r3, r0
 8002800:	4a2b      	ldr	r2, [pc, #172]	@ (80028b0 <task_actuator_init+0x198>)
 8002802:	6013      	str	r3, [r2, #0]
 8002804:	4b26      	ldr	r3, [pc, #152]	@ (80028a0 <task_actuator_init+0x188>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff ff71 	bl	80026f0 <logger_log_print_>
 800280e:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	795b      	ldrb	r3, [r3, #5]
 8002814:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002816:	b672      	cpsid	i
 8002818:	4b21      	ldr	r3, [pc, #132]	@ (80028a0 <task_actuator_init+0x188>)
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	7abb      	ldrb	r3, [r7, #10]
 800281e:	9300      	str	r3, [sp, #0]
 8002820:	4b2f      	ldr	r3, [pc, #188]	@ (80028e0 <task_actuator_init+0x1c8>)
 8002822:	4a2d      	ldr	r2, [pc, #180]	@ (80028d8 <task_actuator_init+0x1c0>)
 8002824:	213f      	movs	r1, #63	@ 0x3f
 8002826:	f001 fdf7 	bl	8004418 <sniprintf>
 800282a:	4603      	mov	r3, r0
 800282c:	4a20      	ldr	r2, [pc, #128]	@ (80028b0 <task_actuator_init+0x198>)
 800282e:	6013      	str	r3, [r2, #0]
 8002830:	4b1b      	ldr	r3, [pc, #108]	@ (80028a0 <task_actuator_init+0x188>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff5b 	bl	80026f0 <logger_log_print_>
 800283a:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	799b      	ldrb	r3, [r3, #6]
 8002840:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002842:	b672      	cpsid	i
 8002844:	4b16      	ldr	r3, [pc, #88]	@ (80028a0 <task_actuator_init+0x188>)
 8002846:	6818      	ldr	r0, [r3, #0]
 8002848:	7a7b      	ldrb	r3, [r7, #9]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <task_actuator_init+0x13a>
 800284e:	4b25      	ldr	r3, [pc, #148]	@ (80028e4 <task_actuator_init+0x1cc>)
 8002850:	e000      	b.n	8002854 <task_actuator_init+0x13c>
 8002852:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <task_actuator_init+0x1d0>)
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	4b25      	ldr	r3, [pc, #148]	@ (80028ec <task_actuator_init+0x1d4>)
 8002858:	4a25      	ldr	r2, [pc, #148]	@ (80028f0 <task_actuator_init+0x1d8>)
 800285a:	213f      	movs	r1, #63	@ 0x3f
 800285c:	f001 fddc 	bl	8004418 <sniprintf>
 8002860:	4603      	mov	r3, r0
 8002862:	4a13      	ldr	r2, [pc, #76]	@ (80028b0 <task_actuator_init+0x198>)
 8002864:	6013      	str	r3, [r2, #0]
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <task_actuator_init+0x188>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff ff40 	bl	80026f0 <logger_log_print_>
 8002870:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	6858      	ldr	r0, [r3, #4]
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	8919      	ldrh	r1, [r3, #8]
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	7adb      	ldrb	r3, [r3, #11]
 800287e:	461a      	mov	r2, r3
 8002880:	f7fe fc9b 	bl	80011ba <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	2b05      	cmp	r3, #5
 800288e:	d989      	bls.n	80027a4 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 8002890:	4b18      	ldr	r3, [pc, #96]	@ (80028f4 <task_actuator_init+0x1dc>)
 8002892:	2200      	movs	r2, #0
 8002894:	601a      	str	r2, [r3, #0]
}
 8002896:	bf00      	nop
 8002898:	3718      	adds	r7, #24
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}
 800289e:	bf00      	nop
 80028a0:	080058a0 	.word	0x080058a0
 80028a4:	20000048 	.word	0x20000048
 80028a8:	080054a0 	.word	0x080054a0
 80028ac:	080054b4 	.word	0x080054b4
 80028b0:	20000428 	.word	0x20000428
 80028b4:	2000004c 	.word	0x2000004c
 80028b8:	080054cc 	.word	0x080054cc
 80028bc:	080054dc 	.word	0x080054dc
 80028c0:	2000042c 	.word	0x2000042c
 80028c4:	080054ec 	.word	0x080054ec
 80028c8:	08005500 	.word	0x08005500
 80028cc:	080058a4 	.word	0x080058a4
 80028d0:	20000018 	.word	0x20000018
 80028d4:	08005510 	.word	0x08005510
 80028d8:	08005518 	.word	0x08005518
 80028dc:	08005524 	.word	0x08005524
 80028e0:	0800552c 	.word	0x0800552c
 80028e4:	08005534 	.word	0x08005534
 80028e8:	0800553c 	.word	0x0800553c
 80028ec:	08005544 	.word	0x08005544
 80028f0:	0800554c 	.word	0x0800554c
 80028f4:	20000430 	.word	0x20000430

080028f8 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b086      	sub	sp, #24
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8002900:	2300      	movs	r3, #0
 8002902:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8002904:	4b90      	ldr	r3, [pc, #576]	@ (8002b48 <task_actuator_update+0x250>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	3301      	adds	r3, #1
 800290a:	4a8f      	ldr	r2, [pc, #572]	@ (8002b48 <task_actuator_update+0x250>)
 800290c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800290e:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8002910:	4b8e      	ldr	r3, [pc, #568]	@ (8002b4c <task_actuator_update+0x254>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d006      	beq.n	8002926 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 8002918:	4b8c      	ldr	r3, [pc, #560]	@ (8002b4c <task_actuator_update+0x254>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	3b01      	subs	r3, #1
 800291e:	4a8b      	ldr	r2, [pc, #556]	@ (8002b4c <task_actuator_update+0x254>)
 8002920:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002922:	2301      	movs	r3, #1
 8002924:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002926:	b662      	cpsie	i

    while (b_time_update_required)
 8002928:	e15f      	b.n	8002bea <task_actuator_update+0x2f2>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800292a:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 800292c:	4b87      	ldr	r3, [pc, #540]	@ (8002b4c <task_actuator_update+0x254>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d007      	beq.n	8002944 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 8002934:	4b85      	ldr	r3, [pc, #532]	@ (8002b4c <task_actuator_update+0x254>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	3b01      	subs	r3, #1
 800293a:	4a84      	ldr	r2, [pc, #528]	@ (8002b4c <task_actuator_update+0x254>)
 800293c:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800293e:	2301      	movs	r3, #1
 8002940:	74fb      	strb	r3, [r7, #19]
 8002942:	e001      	b.n	8002948 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002944:	2300      	movs	r3, #0
 8002946:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002948:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	e148      	b.n	8002be2 <task_actuator_update+0x2ea>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4a7d      	ldr	r2, [pc, #500]	@ (8002b50 <task_actuator_update+0x258>)
 800295c:	4413      	add	r3, r2
 800295e:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	00db      	lsls	r3, r3, #3
 8002964:	4a7b      	ldr	r2, [pc, #492]	@ (8002b54 <task_actuator_update+0x25c>)
 8002966:	4413      	add	r3, r2
 8002968:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	791b      	ldrb	r3, [r3, #4]
 800296e:	2b04      	cmp	r3, #4
 8002970:	f200 8129 	bhi.w	8002bc6 <task_actuator_update+0x2ce>
 8002974:	a201      	add	r2, pc, #4	@ (adr r2, 800297c <task_actuator_update+0x84>)
 8002976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800297a:	bf00      	nop
 800297c:	08002991 	.word	0x08002991
 8002980:	08002a37 	.word	0x08002a37
 8002984:	08002a6b 	.word	0x08002a6b
 8002988:	08002adb 	.word	0x08002adb
 800298c:	08002b59 	.word	0x08002b59
			{
				case ST_LED_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	799b      	ldrb	r3, [r3, #6]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d013      	beq.n	80029c0 <task_actuator_update+0xc8>
 8002998:	68bb      	ldr	r3, [r7, #8]
 800299a:	795b      	ldrb	r3, [r3, #5]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d10f      	bne.n	80029c0 <task_actuator_update+0xc8>
					{
						p_task_actuator_dta->flag = false;
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2200      	movs	r2, #0
 80029a4:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6858      	ldr	r0, [r3, #4]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8919      	ldrh	r1, [r3, #8]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	7a9b      	ldrb	r3, [r3, #10]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f7fe fc01 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_ON;
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	2201      	movs	r2, #1
 80029bc:	711a      	strb	r2, [r3, #4]
 80029be:	e039      	b.n	8002a34 <task_actuator_update+0x13c>
					}
					else if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_BLINK == p_task_actuator_dta->event))
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	799b      	ldrb	r3, [r3, #6]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d017      	beq.n	80029f8 <task_actuator_update+0x100>
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	795b      	ldrb	r3, [r3, #5]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d113      	bne.n	80029f8 <task_actuator_update+0x100>
					{
						p_task_actuator_dta->flag = false;
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	2200      	movs	r2, #0
 80029d4:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	6858      	ldr	r0, [r3, #4]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8919      	ldrh	r1, [r3, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	7a9b      	ldrb	r3, [r3, #10]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7fe fbe5 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2202      	movs	r2, #2
 80029f4:	711a      	strb	r2, [r3, #4]
 80029f6:	e01d      	b.n	8002a34 <task_actuator_update+0x13c>
					}
					else if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_PULSE == p_task_actuator_dta->event))
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	799b      	ldrb	r3, [r3, #6]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	f000 80e4 	beq.w	8002bca <task_actuator_update+0x2d2>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	795b      	ldrb	r3, [r3, #5]
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	f040 80df 	bne.w	8002bca <task_actuator_update+0x2d2>
					{
						p_task_actuator_dta->flag = false;
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_pulse;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	691a      	ldr	r2, [r3, #16]
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6858      	ldr	r0, [r3, #4]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8919      	ldrh	r1, [r3, #8]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	7a9b      	ldrb	r3, [r3, #10]
 8002a26:	461a      	mov	r2, r3
 8002a28:	f7fe fbc7 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_PULSE;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2204      	movs	r2, #4
 8002a30:	711a      	strb	r2, [r3, #4]
					}

					break;
 8002a32:	e0ca      	b.n	8002bca <task_actuator_update+0x2d2>
 8002a34:	e0c9      	b.n	8002bca <task_actuator_update+0x2d2>

				case ST_LED_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	799b      	ldrb	r3, [r3, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	f000 80c7 	beq.w	8002bce <task_actuator_update+0x2d6>
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	795b      	ldrb	r3, [r3, #5]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	f040 80c2 	bne.w	8002bce <task_actuator_update+0x2d6>
					{
						p_task_actuator_dta->flag = false;
 8002a4a:	68bb      	ldr	r3, [r7, #8]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	6858      	ldr	r0, [r3, #4]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8919      	ldrh	r1, [r3, #8]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	7adb      	ldrb	r3, [r3, #11]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f7fe fbac 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2200      	movs	r2, #0
 8002a66:	711a      	strb	r2, [r3, #4]
					}

					break;
 8002a68:	e0b1      	b.n	8002bce <task_actuator_update+0x2d6>

				case ST_LED_XX_BLINK_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	799b      	ldrb	r3, [r3, #6]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d013      	beq.n	8002a9a <task_actuator_update+0x1a2>
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	795b      	ldrb	r3, [r3, #5]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d10f      	bne.n	8002a9a <task_actuator_update+0x1a2>
					{
						p_task_actuator_dta->flag = false;
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6858      	ldr	r0, [r3, #4]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8919      	ldrh	r1, [r3, #8]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	7adb      	ldrb	r3, [r3, #11]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7fe fb94 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2200      	movs	r2, #0
 8002a96:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8002a98:	e09b      	b.n	8002bd2 <task_actuator_update+0x2da>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d110      	bne.n	8002ac4 <task_actuator_update+0x1cc>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6858      	ldr	r0, [r3, #4]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	8919      	ldrh	r1, [r3, #8]
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	7adb      	ldrb	r3, [r3, #11]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f7fe fb7f 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_OFF;
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2203      	movs	r2, #3
 8002ac0:	711a      	strb	r2, [r3, #4]
					break;
 8002ac2:	e086      	b.n	8002bd2 <task_actuator_update+0x2da>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8082 	beq.w	8002bd2 <task_actuator_update+0x2da>
						p_task_actuator_dta->tick--;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	1e5a      	subs	r2, r3, #1
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	601a      	str	r2, [r3, #0]
					break;
 8002ad8:	e07b      	b.n	8002bd2 <task_actuator_update+0x2da>

				case ST_LED_XX_BLINK_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	799b      	ldrb	r3, [r3, #6]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d013      	beq.n	8002b0a <task_actuator_update+0x212>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	795b      	ldrb	r3, [r3, #5]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d10f      	bne.n	8002b0a <task_actuator_update+0x212>
					{
						p_task_actuator_dta->flag = false;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6858      	ldr	r0, [r3, #4]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	8919      	ldrh	r1, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	7adb      	ldrb	r3, [r3, #11]
 8002afc:	461a      	mov	r2, r3
 8002afe:	f7fe fb5c 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2200      	movs	r2, #0
 8002b06:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8002b08:	e065      	b.n	8002bd6 <task_actuator_update+0x2de>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d110      	bne.n	8002b34 <task_actuator_update+0x23c>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	68da      	ldr	r2, [r3, #12]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6858      	ldr	r0, [r3, #4]
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8919      	ldrh	r1, [r3, #8]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	7a9b      	ldrb	r3, [r3, #10]
 8002b26:	461a      	mov	r2, r3
 8002b28:	f7fe fb47 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	711a      	strb	r2, [r3, #4]
					break;
 8002b32:	e050      	b.n	8002bd6 <task_actuator_update+0x2de>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d04c      	beq.n	8002bd6 <task_actuator_update+0x2de>
						p_task_actuator_dta->tick--;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	1e5a      	subs	r2, r3, #1
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	601a      	str	r2, [r3, #0]
					break;
 8002b46:	e046      	b.n	8002bd6 <task_actuator_update+0x2de>
 8002b48:	2000042c 	.word	0x2000042c
 8002b4c:	20000430 	.word	0x20000430
 8002b50:	080058a4 	.word	0x080058a4
 8002b54:	20000018 	.word	0x20000018

				case ST_LED_XX_PULSE:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d013      	beq.n	8002b88 <task_actuator_update+0x290>
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	795b      	ldrb	r3, [r3, #5]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10f      	bne.n	8002b88 <task_actuator_update+0x290>
					{
						p_task_actuator_dta->flag = false;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6858      	ldr	r0, [r3, #4]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8919      	ldrh	r1, [r3, #8]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	7adb      	ldrb	r3, [r3, #11]
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	f7fe fb1d 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2200      	movs	r2, #0
 8002b84:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8002b86:	e028      	b.n	8002bda <task_actuator_update+0x2e2>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d110      	bne.n	8002bb2 <task_actuator_update+0x2ba>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	68da      	ldr	r2, [r3, #12]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6858      	ldr	r0, [r3, #4]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8919      	ldrh	r1, [r3, #8]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	7adb      	ldrb	r3, [r3, #11]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	f7fe fb08 	bl	80011ba <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2200      	movs	r2, #0
 8002bae:	711a      	strb	r2, [r3, #4]
					break;
 8002bb0:	e013      	b.n	8002bda <task_actuator_update+0x2e2>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d00f      	beq.n	8002bda <task_actuator_update+0x2e2>
						p_task_actuator_dta->tick--;
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	1e5a      	subs	r2, r3, #1
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	601a      	str	r2, [r3, #0]
					break;
 8002bc4:	e009      	b.n	8002bda <task_actuator_update+0x2e2>

				default:

					break;
 8002bc6:	bf00      	nop
 8002bc8:	e008      	b.n	8002bdc <task_actuator_update+0x2e4>
					break;
 8002bca:	bf00      	nop
 8002bcc:	e006      	b.n	8002bdc <task_actuator_update+0x2e4>
					break;
 8002bce:	bf00      	nop
 8002bd0:	e004      	b.n	8002bdc <task_actuator_update+0x2e4>
					break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <task_actuator_update+0x2e4>
					break;
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <task_actuator_update+0x2e4>
					break;
 8002bda:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	3301      	adds	r3, #1
 8002be0:	617b      	str	r3, [r7, #20]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	f67f aeb3 	bls.w	8002950 <task_actuator_update+0x58>
    while (b_time_update_required)
 8002bea:	7cfb      	ldrb	r3, [r7, #19]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f47f ae9c 	bne.w	800292a <task_actuator_update+0x32>
			}
		}
    }
}
 8002bf2:	bf00      	nop
 8002bf4:	bf00      	nop
 8002bf6:	3718      	adds	r7, #24
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	460a      	mov	r2, r1
 8002c06:	71fb      	strb	r3, [r7, #7]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8002c0c:	79bb      	ldrb	r3, [r7, #6]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4a06      	ldr	r2, [pc, #24]	@ (8002c2c <put_event_task_actuator+0x30>)
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	79fa      	ldrb	r2, [r7, #7]
 8002c1a:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	719a      	strb	r2, [r3, #6]
}
 8002c22:	bf00      	nop
 8002c24:	3714      	adds	r7, #20
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr
 8002c2c:	20000018 	.word	0x20000018

08002c30 <task_normal_init>:
uint32_t g_task_normal_cnt;
volatile uint32_t g_task_normal_tick_cnt;

/********************** external functions definition ************************/
void task_normal_init(void *parameters)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af02      	add	r7, sp, #8
 8002c36:	6078      	str	r0, [r7, #4]
	task_normal_st_t	state;
	task_normal_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_normal_init), p_task_normal);
 8002c38:	b672      	cpsid	i
 8002c3a:	4b48      	ldr	r3, [pc, #288]	@ (8002d5c <task_normal_init+0x12c>)
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	4b48      	ldr	r3, [pc, #288]	@ (8002d60 <task_normal_init+0x130>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	4b47      	ldr	r3, [pc, #284]	@ (8002d64 <task_normal_init+0x134>)
 8002c46:	4a48      	ldr	r2, [pc, #288]	@ (8002d68 <task_normal_init+0x138>)
 8002c48:	213f      	movs	r1, #63	@ 0x3f
 8002c4a:	f001 fbe5 	bl	8004418 <sniprintf>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	4a46      	ldr	r2, [pc, #280]	@ (8002d6c <task_normal_init+0x13c>)
 8002c52:	6013      	str	r3, [r2, #0]
 8002c54:	4b41      	ldr	r3, [pc, #260]	@ (8002d5c <task_normal_init+0x12c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff fd49 	bl	80026f0 <logger_log_print_>
 8002c5e:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_normal), p_task_normal_);
 8002c60:	b672      	cpsid	i
 8002c62:	4b3e      	ldr	r3, [pc, #248]	@ (8002d5c <task_normal_init+0x12c>)
 8002c64:	6818      	ldr	r0, [r3, #0]
 8002c66:	4b42      	ldr	r3, [pc, #264]	@ (8002d70 <task_normal_init+0x140>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	9300      	str	r3, [sp, #0]
 8002c6c:	4b41      	ldr	r3, [pc, #260]	@ (8002d74 <task_normal_init+0x144>)
 8002c6e:	4a42      	ldr	r2, [pc, #264]	@ (8002d78 <task_normal_init+0x148>)
 8002c70:	213f      	movs	r1, #63	@ 0x3f
 8002c72:	f001 fbd1 	bl	8004418 <sniprintf>
 8002c76:	4603      	mov	r3, r0
 8002c78:	4a3c      	ldr	r2, [pc, #240]	@ (8002d6c <task_normal_init+0x13c>)
 8002c7a:	6013      	str	r3, [r2, #0]
 8002c7c:	4b37      	ldr	r3, [pc, #220]	@ (8002d5c <task_normal_init+0x12c>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff fd35 	bl	80026f0 <logger_log_print_>
 8002c86:	b662      	cpsie	i

	g_task_normal_cnt = G_TASK_SYS_CNT_INI;
 8002c88:	4b3c      	ldr	r3, [pc, #240]	@ (8002d7c <task_normal_init+0x14c>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_normal_cnt), g_task_normal_cnt);
 8002c8e:	b672      	cpsid	i
 8002c90:	4b32      	ldr	r3, [pc, #200]	@ (8002d5c <task_normal_init+0x12c>)
 8002c92:	6818      	ldr	r0, [r3, #0]
 8002c94:	4b39      	ldr	r3, [pc, #228]	@ (8002d7c <task_normal_init+0x14c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	4b39      	ldr	r3, [pc, #228]	@ (8002d80 <task_normal_init+0x150>)
 8002c9c:	4a39      	ldr	r2, [pc, #228]	@ (8002d84 <task_normal_init+0x154>)
 8002c9e:	213f      	movs	r1, #63	@ 0x3f
 8002ca0:	f001 fbba 	bl	8004418 <sniprintf>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	4a31      	ldr	r2, [pc, #196]	@ (8002d6c <task_normal_init+0x13c>)
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	4b2c      	ldr	r3, [pc, #176]	@ (8002d5c <task_normal_init+0x12c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff fd1e 	bl	80026f0 <logger_log_print_>
 8002cb4:	b662      	cpsie	i

	init_queue_event_task_normal();
 8002cb6:	f000 f95f 	bl	8002f78 <init_queue_event_task_normal>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_normal_dta = &task_normal_dta;
 8002cba:	4b33      	ldr	r3, [pc, #204]	@ (8002d88 <task_normal_init+0x158>)
 8002cbc:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_normal_dta->state;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	791b      	ldrb	r3, [r3, #4]
 8002cc2:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002cc4:	b672      	cpsid	i
 8002cc6:	4b25      	ldr	r3, [pc, #148]	@ (8002d5c <task_normal_init+0x12c>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	7afb      	ldrb	r3, [r7, #11]
 8002ccc:	9300      	str	r3, [sp, #0]
 8002cce:	4b2f      	ldr	r3, [pc, #188]	@ (8002d8c <task_normal_init+0x15c>)
 8002cd0:	4a2f      	ldr	r2, [pc, #188]	@ (8002d90 <task_normal_init+0x160>)
 8002cd2:	213f      	movs	r1, #63	@ 0x3f
 8002cd4:	f001 fba0 	bl	8004418 <sniprintf>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a24      	ldr	r2, [pc, #144]	@ (8002d6c <task_normal_init+0x13c>)
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	4b1f      	ldr	r3, [pc, #124]	@ (8002d5c <task_normal_init+0x12c>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f7ff fd04 	bl	80026f0 <logger_log_print_>
 8002ce8:	b662      	cpsie	i

	event = p_task_normal_dta->event;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	795b      	ldrb	r3, [r3, #5]
 8002cee:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002cf0:	b672      	cpsid	i
 8002cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <task_normal_init+0x12c>)
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	7abb      	ldrb	r3, [r7, #10]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	4b26      	ldr	r3, [pc, #152]	@ (8002d94 <task_normal_init+0x164>)
 8002cfc:	4a24      	ldr	r2, [pc, #144]	@ (8002d90 <task_normal_init+0x160>)
 8002cfe:	213f      	movs	r1, #63	@ 0x3f
 8002d00:	f001 fb8a 	bl	8004418 <sniprintf>
 8002d04:	4603      	mov	r3, r0
 8002d06:	4a19      	ldr	r2, [pc, #100]	@ (8002d6c <task_normal_init+0x13c>)
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b14      	ldr	r3, [pc, #80]	@ (8002d5c <task_normal_init+0x12c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fcee 	bl	80026f0 <logger_log_print_>
 8002d14:	b662      	cpsie	i

	b_event = p_task_normal_dta->flag;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	799b      	ldrb	r3, [r3, #6]
 8002d1a:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002d1c:	b672      	cpsid	i
 8002d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8002d5c <task_normal_init+0x12c>)
 8002d20:	6818      	ldr	r0, [r3, #0]
 8002d22:	7a7b      	ldrb	r3, [r7, #9]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <task_normal_init+0xfc>
 8002d28:	4b1b      	ldr	r3, [pc, #108]	@ (8002d98 <task_normal_init+0x168>)
 8002d2a:	e000      	b.n	8002d2e <task_normal_init+0xfe>
 8002d2c:	4b1b      	ldr	r3, [pc, #108]	@ (8002d9c <task_normal_init+0x16c>)
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <task_normal_init+0x170>)
 8002d32:	4a1c      	ldr	r2, [pc, #112]	@ (8002da4 <task_normal_init+0x174>)
 8002d34:	213f      	movs	r1, #63	@ 0x3f
 8002d36:	f001 fb6f 	bl	8004418 <sniprintf>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	4a0b      	ldr	r2, [pc, #44]	@ (8002d6c <task_normal_init+0x13c>)
 8002d3e:	6013      	str	r3, [r2, #0]
 8002d40:	4b06      	ldr	r3, [pc, #24]	@ (8002d5c <task_normal_init+0x12c>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f7ff fcd3 	bl	80026f0 <logger_log_print_>
 8002d4a:	b662      	cpsie	i

	g_task_normal_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8002d4c:	4b16      	ldr	r3, [pc, #88]	@ (8002da8 <task_normal_init+0x178>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
}
 8002d52:	bf00      	nop
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	080058a0 	.word	0x080058a0
 8002d60:	20000050 	.word	0x20000050
 8002d64:	080055a0 	.word	0x080055a0
 8002d68:	080055b4 	.word	0x080055b4
 8002d6c:	20000428 	.word	0x20000428
 8002d70:	20000054 	.word	0x20000054
 8002d74:	080055cc 	.word	0x080055cc
 8002d78:	080055d8 	.word	0x080055d8
 8002d7c:	2000043c 	.word	0x2000043c
 8002d80:	080055e8 	.word	0x080055e8
 8002d84:	080055fc 	.word	0x080055fc
 8002d88:	20000434 	.word	0x20000434
 8002d8c:	0800560c 	.word	0x0800560c
 8002d90:	08005614 	.word	0x08005614
 8002d94:	08005620 	.word	0x08005620
 8002d98:	08005628 	.word	0x08005628
 8002d9c:	08005630 	.word	0x08005630
 8002da0:	08005638 	.word	0x08005638
 8002da4:	08005640 	.word	0x08005640
 8002da8:	20000440 	.word	0x20000440

08002dac <task_normal_update>:

void task_normal_update(void *parameters)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b084      	sub	sp, #16
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
	task_normal_dta_t *p_task_normal_dta;
	bool b_time_update_required = false;
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]

	/* Update Task normal Counter */
	g_task_normal_cnt++;
 8002db8:	4b6c      	ldr	r3, [pc, #432]	@ (8002f6c <task_normal_update+0x1c0>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	4a6b      	ldr	r2, [pc, #428]	@ (8002f6c <task_normal_update+0x1c0>)
 8002dc0:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_normal_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8002dc2:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8002dc4:	4b6a      	ldr	r3, [pc, #424]	@ (8002f70 <task_normal_update+0x1c4>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d006      	beq.n	8002dda <task_normal_update+0x2e>
    {
    	g_task_normal_tick_cnt--;
 8002dcc:	4b68      	ldr	r3, [pc, #416]	@ (8002f70 <task_normal_update+0x1c4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	3b01      	subs	r3, #1
 8002dd2:	4a67      	ldr	r2, [pc, #412]	@ (8002f70 <task_normal_update+0x1c4>)
 8002dd4:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002dda:	b662      	cpsie	i

    while (b_time_update_required)
 8002ddc:	e0bd      	b.n	8002f5a <task_normal_update+0x1ae>
    {
		/* Protect shared resource (g_task_normal_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002dde:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8002de0:	4b63      	ldr	r3, [pc, #396]	@ (8002f70 <task_normal_update+0x1c4>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d007      	beq.n	8002df8 <task_normal_update+0x4c>
		{
			g_task_normal_tick_cnt--;
 8002de8:	4b61      	ldr	r3, [pc, #388]	@ (8002f70 <task_normal_update+0x1c4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	4a60      	ldr	r2, [pc, #384]	@ (8002f70 <task_normal_update+0x1c4>)
 8002df0:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002df2:	2301      	movs	r3, #1
 8002df4:	73fb      	strb	r3, [r7, #15]
 8002df6:	e001      	b.n	8002dfc <task_normal_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002dfc:	b662      	cpsie	i

    	/* Update Task normal Data Pointer */
		p_task_normal_dta = &task_normal_dta;
 8002dfe:	4b5d      	ldr	r3, [pc, #372]	@ (8002f74 <task_normal_update+0x1c8>)
 8002e00:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_normal())
 8002e02:	f000 f925 	bl	8003050 <any_event_task_normal>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d008      	beq.n	8002e1e <task_normal_update+0x72>
		{
			p_task_normal_dta->flag = true;
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	719a      	strb	r2, [r3, #6]
			p_task_normal_dta->event = get_event_task_normal();
 8002e12:	f000 f8f7 	bl	8003004 <get_event_task_normal>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_normal_dta->state)
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	791b      	ldrb	r3, [r3, #4]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	f200 8092 	bhi.w	8002f4c <task_normal_update+0x1a0>
 8002e28:	a201      	add	r2, pc, #4	@ (adr r2, 8002e30 <task_normal_update+0x84>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e7b 	.word	0x08002e7b
 8002e38:	08002eb1 	.word	0x08002eb1
 8002e3c:	08002ee9 	.word	0x08002ee9
 8002e40:	08002f4d 	.word	0x08002f4d
 8002e44:	08002f4d 	.word	0x08002f4d
 8002e48:	08002f4d 	.word	0x08002f4d
 8002e4c:	08002f4d 	.word	0x08002f4d
 8002e50:	08002f4d 	.word	0x08002f4d
		{

		case ST_SYS_01_ESPERAR_INGRESO:

			if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_INGRESO_DOWN ==  p_task_normal_dta->event))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	799b      	ldrb	r3, [r3, #6]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d079      	beq.n	8002f50 <task_normal_update+0x1a4>
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	795b      	ldrb	r3, [r3, #5]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d175      	bne.n	8002f50 <task_normal_update+0x1a4>
			{
				p_task_normal_dta->flag = false;
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2200      	movs	r2, #0
 8002e68:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_ABRIR);
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	2003      	movs	r0, #3
 8002e6e:	f7ff fec5 	bl	8002bfc <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ABRIENDO_INGRESO;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2201      	movs	r2, #1
 8002e76:	711a      	strb	r2, [r3, #4]

			}

			break;
 8002e78:	e06a      	b.n	8002f50 <task_normal_update+0x1a4>


		case ST_SYS_01_ABRIENDO_INGRESO:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_INGRESO_ABIERTA ==  p_task_normal_dta->event))
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	799b      	ldrb	r3, [r3, #6]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d068      	beq.n	8002f54 <task_normal_update+0x1a8>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	795b      	ldrb	r3, [r3, #5]
 8002e86:	2b05      	cmp	r3, #5
 8002e88:	d164      	bne.n	8002f54 <task_normal_update+0x1a8>
			{
				p_task_normal_dta->flag = false;
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	719a      	strb	r2, [r3, #6]

				p_task_normal_dta->tick = DEL_SYS_01_ESPERA;
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e96:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_ABRIR);
 8002e98:	2101      	movs	r1, #1
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	f7ff feae 	bl	8002bfc <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_ON, ID_SEMAFORO_INGRESO);
 8002ea0:	2103      	movs	r1, #3
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f7ff feaa 	bl	8002bfc <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_ESPERANDO_INGRESO;
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2202      	movs	r2, #2
 8002eac:	711a      	strb	r2, [r3, #4]

			}
			break;
 8002eae:	e051      	b.n	8002f54 <task_normal_update+0x1a8>

		case ST_SYS_01_ESPERANDO_INGRESO:

			if((true == p_task_normal_dta->flag) && (p_task_normal_dta->tick == 0))
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	799b      	ldrb	r3, [r3, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d011      	beq.n	8002edc <task_normal_update+0x130>
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <task_normal_update+0x130>
			{
				p_task_normal_dta->flag = false;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_CERRAR);
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	2003      	movs	r0, #3
 8002eca:	f7ff fe97 	bl	8002bfc <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_INGRESO);
 8002ece:	2103      	movs	r1, #3
 8002ed0:	2000      	movs	r0, #0
 8002ed2:	f7ff fe93 	bl	8002bfc <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_CERRANDO_INGRESO;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	2203      	movs	r2, #3
 8002eda:	711a      	strb	r2, [r3, #4]

			}

			p_task_normal_dta->tick--;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1e5a      	subs	r2, r3, #1
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	601a      	str	r2, [r3, #0]

			break;
 8002ee6:	e038      	b.n	8002f5a <task_normal_update+0x1ae>

		case ST_SYS_01_CERRANDO_INGRESO:
			//Corregir esto, no va a funcionar aca. Hacer checkeo en dos pasos
			if((true == p_task_normal_dta->flag) &&
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	799b      	ldrb	r3, [r3, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d012      	beq.n	8002f16 <task_normal_update+0x16a>
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	795b      	ldrb	r3, [r3, #5]
			if((true == p_task_normal_dta->flag) &&
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d10e      	bne.n	8002f16 <task_normal_update+0x16a>
			(EV_SYS_01_BARRERA_INACTIVA ==  p_task_normal_dta->event))
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	795b      	ldrb	r3, [r3, #5]
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d10a      	bne.n	8002f16 <task_normal_update+0x16a>
			{
				p_task_normal_dta->flag = false;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	2200      	movs	r2, #0
 8002f04:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_CERRAR);
 8002f06:	2102      	movs	r1, #2
 8002f08:	2000      	movs	r0, #0
 8002f0a:	f7ff fe77 	bl	8002bfc <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ESPERAR_INGRESO;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	711a      	strb	r2, [r3, #4]
				p_task_normal_dta->tick = DEL_SYS_01_PERMANENCIA;
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_CERRAR);
				p_task_normal_dta->state = ST_SYS_01_PERSONA_ADENTRO;
			}

			break;
 8002f14:	e020      	b.n	8002f58 <task_normal_update+0x1ac>
			else if((true == p_task_normal_dta->flag) &&
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	799b      	ldrb	r3, [r3, #6]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d01c      	beq.n	8002f58 <task_normal_update+0x1ac>
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	795b      	ldrb	r3, [r3, #5]
			else if((true == p_task_normal_dta->flag) &&
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d118      	bne.n	8002f58 <task_normal_update+0x1ac>
			(EV_SYS_01_BARRERA_ACTIVA ==  p_task_normal_dta->event))
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	795b      	ldrb	r3, [r3, #5]
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8002f2a:	2b07      	cmp	r3, #7
 8002f2c:	d114      	bne.n	8002f58 <task_normal_update+0x1ac>
				p_task_normal_dta->flag = false;
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2200      	movs	r2, #0
 8002f32:	719a      	strb	r2, [r3, #6]
				p_task_normal_dta->tick = DEL_SYS_01_PERMANENCIA;
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002f3a:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_CERRAR);
 8002f3c:	2102      	movs	r1, #2
 8002f3e:	2000      	movs	r0, #0
 8002f40:	f7ff fe5c 	bl	8002bfc <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_PERSONA_ADENTRO;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2204      	movs	r2, #4
 8002f48:	711a      	strb	r2, [r3, #4]
			break;
 8002f4a:	e005      	b.n	8002f58 <task_normal_update+0x1ac>

				break;
			 */
			default:

				break;
 8002f4c:	bf00      	nop
 8002f4e:	e004      	b.n	8002f5a <task_normal_update+0x1ae>
			break;
 8002f50:	bf00      	nop
 8002f52:	e002      	b.n	8002f5a <task_normal_update+0x1ae>
			break;
 8002f54:	bf00      	nop
 8002f56:	e000      	b.n	8002f5a <task_normal_update+0x1ae>
			break;
 8002f58:	bf00      	nop
    while (b_time_update_required)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	f47f af3e 	bne.w	8002dde <task_normal_update+0x32>
		}
	}
}
 8002f62:	bf00      	nop
 8002f64:	bf00      	nop
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000043c 	.word	0x2000043c
 8002f70:	20000440 	.word	0x20000440
 8002f74:	20000434 	.word	0x20000434

08002f78 <init_queue_event_task_normal>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_normal(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <init_queue_event_task_normal+0x44>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8002f84:	4b0d      	ldr	r3, [pc, #52]	@ (8002fbc <init_queue_event_task_normal+0x44>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8002f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8002fbc <init_queue_event_task_normal+0x44>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8002f90:	2300      	movs	r3, #0
 8002f92:	607b      	str	r3, [r7, #4]
 8002f94:	e008      	b.n	8002fa8 <init_queue_event_task_normal+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002f96:	4a09      	ldr	r2, [pc, #36]	@ (8002fbc <init_queue_event_task_normal+0x44>)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4413      	add	r3, r2
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	22ff      	movs	r2, #255	@ 0xff
 8002fa0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b0f      	cmp	r3, #15
 8002fac:	d9f3      	bls.n	8002f96 <init_queue_event_task_normal+0x1e>
}
 8002fae:	bf00      	nop
 8002fb0:	bf00      	nop
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bc80      	pop	{r7}
 8002fb8:	4770      	bx	lr
 8002fba:	bf00      	nop
 8002fbc:	20000444 	.word	0x20000444

08002fc0 <put_event_task_normal>:

void put_event_task_normal(task_normal_ev_t event)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002fca:	4b0d      	ldr	r3, [pc, #52]	@ (8003000 <put_event_task_normal+0x40>)
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	4a0b      	ldr	r2, [pc, #44]	@ (8003000 <put_event_task_normal+0x40>)
 8002fd2:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002fd4:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <put_event_task_normal+0x40>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	4909      	ldr	r1, [pc, #36]	@ (8003000 <put_event_task_normal+0x40>)
 8002fdc:	600a      	str	r2, [r1, #0]
 8002fde:	4a08      	ldr	r2, [pc, #32]	@ (8003000 <put_event_task_normal+0x40>)
 8002fe0:	4413      	add	r3, r2
 8002fe2:	79fa      	ldrb	r2, [r7, #7]
 8002fe4:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002fe6:	4b06      	ldr	r3, [pc, #24]	@ (8003000 <put_event_task_normal+0x40>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2b10      	cmp	r3, #16
 8002fec:	d102      	bne.n	8002ff4 <put_event_task_normal+0x34>
		queue_task_a.head = 0;
 8002fee:	4b04      	ldr	r3, [pc, #16]	@ (8003000 <put_event_task_normal+0x40>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	601a      	str	r2, [r3, #0]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
 8002ffe:	bf00      	nop
 8003000:	20000444 	.word	0x20000444

08003004 <get_event_task_normal>:

task_normal_ev_t get_event_task_normal(void)

{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
	task_normal_ev_t event;

	queue_task_a.count--;
 800300a:	4b10      	ldr	r3, [pc, #64]	@ (800304c <get_event_task_normal+0x48>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	3b01      	subs	r3, #1
 8003010:	4a0e      	ldr	r2, [pc, #56]	@ (800304c <get_event_task_normal+0x48>)
 8003012:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8003014:	4b0d      	ldr	r3, [pc, #52]	@ (800304c <get_event_task_normal+0x48>)
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	4a0c      	ldr	r2, [pc, #48]	@ (800304c <get_event_task_normal+0x48>)
 800301a:	4413      	add	r3, r2
 800301c:	7b1b      	ldrb	r3, [r3, #12]
 800301e:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8003020:	4b0a      	ldr	r3, [pc, #40]	@ (800304c <get_event_task_normal+0x48>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	1c5a      	adds	r2, r3, #1
 8003026:	4909      	ldr	r1, [pc, #36]	@ (800304c <get_event_task_normal+0x48>)
 8003028:	604a      	str	r2, [r1, #4]
 800302a:	4a08      	ldr	r2, [pc, #32]	@ (800304c <get_event_task_normal+0x48>)
 800302c:	4413      	add	r3, r2
 800302e:	22ff      	movs	r2, #255	@ 0xff
 8003030:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8003032:	4b06      	ldr	r3, [pc, #24]	@ (800304c <get_event_task_normal+0x48>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b10      	cmp	r3, #16
 8003038:	d102      	bne.n	8003040 <get_event_task_normal+0x3c>
		queue_task_a.tail = 0;
 800303a:	4b04      	ldr	r3, [pc, #16]	@ (800304c <get_event_task_normal+0x48>)
 800303c:	2200      	movs	r2, #0
 800303e:	605a      	str	r2, [r3, #4]

	return event;
 8003040:	79fb      	ldrb	r3, [r7, #7]
}
 8003042:	4618      	mov	r0, r3
 8003044:	370c      	adds	r7, #12
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr
 800304c:	20000444 	.word	0x20000444

08003050 <any_event_task_normal>:

bool any_event_task_normal(void)
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8003054:	4b06      	ldr	r3, [pc, #24]	@ (8003070 <any_event_task_normal+0x20>)
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <any_event_task_normal+0x20>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	429a      	cmp	r2, r3
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
}
 8003066:	4618      	mov	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	bc80      	pop	{r7}
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop
 8003070:	20000444 	.word	0x20000444

08003074 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af02      	add	r7, sp, #8
 800307a:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 800307c:	b672      	cpsid	i
 800307e:	4b49      	ldr	r3, [pc, #292]	@ (80031a4 <task_sensor_init+0x130>)
 8003080:	6818      	ldr	r0, [r3, #0]
 8003082:	4b49      	ldr	r3, [pc, #292]	@ (80031a8 <task_sensor_init+0x134>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	9300      	str	r3, [sp, #0]
 8003088:	4b48      	ldr	r3, [pc, #288]	@ (80031ac <task_sensor_init+0x138>)
 800308a:	4a49      	ldr	r2, [pc, #292]	@ (80031b0 <task_sensor_init+0x13c>)
 800308c:	213f      	movs	r1, #63	@ 0x3f
 800308e:	f001 f9c3 	bl	8004418 <sniprintf>
 8003092:	4603      	mov	r3, r0
 8003094:	4a47      	ldr	r2, [pc, #284]	@ (80031b4 <task_sensor_init+0x140>)
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	4b42      	ldr	r3, [pc, #264]	@ (80031a4 <task_sensor_init+0x130>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fb27 	bl	80026f0 <logger_log_print_>
 80030a2:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 80030a4:	b672      	cpsid	i
 80030a6:	4b3f      	ldr	r3, [pc, #252]	@ (80031a4 <task_sensor_init+0x130>)
 80030a8:	6818      	ldr	r0, [r3, #0]
 80030aa:	4b43      	ldr	r3, [pc, #268]	@ (80031b8 <task_sensor_init+0x144>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	4b42      	ldr	r3, [pc, #264]	@ (80031bc <task_sensor_init+0x148>)
 80030b2:	4a43      	ldr	r2, [pc, #268]	@ (80031c0 <task_sensor_init+0x14c>)
 80030b4:	213f      	movs	r1, #63	@ 0x3f
 80030b6:	f001 f9af 	bl	8004418 <sniprintf>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4a3d      	ldr	r2, [pc, #244]	@ (80031b4 <task_sensor_init+0x140>)
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	4b38      	ldr	r3, [pc, #224]	@ (80031a4 <task_sensor_init+0x130>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff fb13 	bl	80026f0 <logger_log_print_>
 80030ca:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 80030cc:	4b3d      	ldr	r3, [pc, #244]	@ (80031c4 <task_sensor_init+0x150>)
 80030ce:	2200      	movs	r2, #0
 80030d0:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 80030d2:	b672      	cpsid	i
 80030d4:	4b33      	ldr	r3, [pc, #204]	@ (80031a4 <task_sensor_init+0x130>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4b3a      	ldr	r3, [pc, #232]	@ (80031c4 <task_sensor_init+0x150>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	9300      	str	r3, [sp, #0]
 80030de:	4b3a      	ldr	r3, [pc, #232]	@ (80031c8 <task_sensor_init+0x154>)
 80030e0:	4a3a      	ldr	r2, [pc, #232]	@ (80031cc <task_sensor_init+0x158>)
 80030e2:	213f      	movs	r1, #63	@ 0x3f
 80030e4:	f001 f998 	bl	8004418 <sniprintf>
 80030e8:	4603      	mov	r3, r0
 80030ea:	4a32      	ldr	r2, [pc, #200]	@ (80031b4 <task_sensor_init+0x140>)
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b2d      	ldr	r3, [pc, #180]	@ (80031a4 <task_sensor_init+0x130>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7ff fafc 	bl	80026f0 <logger_log_print_>
 80030f8:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e046      	b.n	800318e <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <task_sensor_init+0x15c>)
 8003106:	4413      	add	r3, r2
 8003108:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800310a:	b672      	cpsid	i
 800310c:	4b25      	ldr	r3, [pc, #148]	@ (80031a4 <task_sensor_init+0x130>)
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	4b2f      	ldr	r3, [pc, #188]	@ (80031d4 <task_sensor_init+0x160>)
 8003116:	4a30      	ldr	r2, [pc, #192]	@ (80031d8 <task_sensor_init+0x164>)
 8003118:	213f      	movs	r1, #63	@ 0x3f
 800311a:	f001 f97d 	bl	8004418 <sniprintf>
 800311e:	4603      	mov	r3, r0
 8003120:	4a24      	ldr	r2, [pc, #144]	@ (80031b4 <task_sensor_init+0x140>)
 8003122:	6013      	str	r3, [r2, #0]
 8003124:	4b1f      	ldr	r3, [pc, #124]	@ (80031a4 <task_sensor_init+0x130>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7ff fae1 	bl	80026f0 <logger_log_print_>
 800312e:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	791b      	ldrb	r3, [r3, #4]
 8003134:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8003136:	b672      	cpsid	i
 8003138:	4b1a      	ldr	r3, [pc, #104]	@ (80031a4 <task_sensor_init+0x130>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	9300      	str	r3, [sp, #0]
 8003140:	4b26      	ldr	r3, [pc, #152]	@ (80031dc <task_sensor_init+0x168>)
 8003142:	4a25      	ldr	r2, [pc, #148]	@ (80031d8 <task_sensor_init+0x164>)
 8003144:	213f      	movs	r1, #63	@ 0x3f
 8003146:	f001 f967 	bl	8004418 <sniprintf>
 800314a:	4603      	mov	r3, r0
 800314c:	4a19      	ldr	r2, [pc, #100]	@ (80031b4 <task_sensor_init+0x140>)
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	4b14      	ldr	r3, [pc, #80]	@ (80031a4 <task_sensor_init+0x130>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff facb 	bl	80026f0 <logger_log_print_>
 800315a:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	795b      	ldrb	r3, [r3, #5]
 8003160:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8003162:	b672      	cpsid	i
 8003164:	4b0f      	ldr	r3, [pc, #60]	@ (80031a4 <task_sensor_init+0x130>)
 8003166:	6818      	ldr	r0, [r3, #0]
 8003168:	7bbb      	ldrb	r3, [r7, #14]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	4b1c      	ldr	r3, [pc, #112]	@ (80031e0 <task_sensor_init+0x16c>)
 800316e:	4a17      	ldr	r2, [pc, #92]	@ (80031cc <task_sensor_init+0x158>)
 8003170:	213f      	movs	r1, #63	@ 0x3f
 8003172:	f001 f951 	bl	8004418 <sniprintf>
 8003176:	4603      	mov	r3, r0
 8003178:	4a0e      	ldr	r2, [pc, #56]	@ (80031b4 <task_sensor_init+0x140>)
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	4b09      	ldr	r3, [pc, #36]	@ (80031a4 <task_sensor_init+0x130>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fab5 	bl	80026f0 <logger_log_print_>
 8003186:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	3301      	adds	r3, #1
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d9b5      	bls.n	8003100 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <task_sensor_init+0x170>)
 8003196:	2200      	movs	r2, #0
 8003198:	601a      	str	r2, [r3, #0]
}
 800319a:	bf00      	nop
 800319c:	3718      	adds	r7, #24
 800319e:	46bd      	mov	sp, r7
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	080058a0 	.word	0x080058a0
 80031a8:	20000058 	.word	0x20000058
 80031ac:	08005694 	.word	0x08005694
 80031b0:	080056a8 	.word	0x080056a8
 80031b4:	20000428 	.word	0x20000428
 80031b8:	2000005c 	.word	0x2000005c
 80031bc:	080056c0 	.word	0x080056c0
 80031c0:	080056cc 	.word	0x080056cc
 80031c4:	200004a8 	.word	0x200004a8
 80031c8:	080056dc 	.word	0x080056dc
 80031cc:	080056f0 	.word	0x080056f0
 80031d0:	20000460 	.word	0x20000460
 80031d4:	08005700 	.word	0x08005700
 80031d8:	08005708 	.word	0x08005708
 80031dc:	08005714 	.word	0x08005714
 80031e0:	0800571c 	.word	0x0800571c
 80031e4:	200004ac 	.word	0x200004ac

080031e8 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 80031e8:	b590      	push	{r4, r7, lr}
 80031ea:	b087      	sub	sp, #28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 80031f0:	2300      	movs	r3, #0
 80031f2:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 80031f4:	4b62      	ldr	r3, [pc, #392]	@ (8003380 <task_sensor_update+0x198>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3301      	adds	r3, #1
 80031fa:	4a61      	ldr	r2, [pc, #388]	@ (8003380 <task_sensor_update+0x198>)
 80031fc:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 80031fe:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8003200:	4b60      	ldr	r3, [pc, #384]	@ (8003384 <task_sensor_update+0x19c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8003208:	4b5e      	ldr	r3, [pc, #376]	@ (8003384 <task_sensor_update+0x19c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	4a5d      	ldr	r2, [pc, #372]	@ (8003384 <task_sensor_update+0x19c>)
 8003210:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8003212:	2301      	movs	r3, #1
 8003214:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8003216:	b662      	cpsie	i

    while (b_time_update_required)
 8003218:	e0a8      	b.n	800336c <task_sensor_update+0x184>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800321a:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 800321c:	4b59      	ldr	r3, [pc, #356]	@ (8003384 <task_sensor_update+0x19c>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d007      	beq.n	8003234 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8003224:	4b57      	ldr	r3, [pc, #348]	@ (8003384 <task_sensor_update+0x19c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	3b01      	subs	r3, #1
 800322a:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <task_sensor_update+0x19c>)
 800322c:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800322e:	2301      	movs	r3, #1
 8003230:	74fb      	strb	r3, [r7, #19]
 8003232:	e001      	b.n	8003238 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8003234:	2300      	movs	r3, #0
 8003236:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8003238:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e091      	b.n	8003364 <task_sensor_update+0x17c>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	4613      	mov	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	4413      	add	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4a4f      	ldr	r2, [pc, #316]	@ (8003388 <task_sensor_update+0x1a0>)
 800324c:	4413      	add	r3, r2
 800324e:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	4a4d      	ldr	r2, [pc, #308]	@ (800338c <task_sensor_update+0x1a4>)
 8003256:	4413      	add	r3, r2
 8003258:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	7a9c      	ldrb	r4, [r3, #10]
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	891b      	ldrh	r3, [r3, #8]
 8003266:	4619      	mov	r1, r3
 8003268:	4610      	mov	r0, r2
 800326a:	f7fd ff8f 	bl	800118c <HAL_GPIO_ReadPin>
 800326e:	4603      	mov	r3, r0
 8003270:	429c      	cmp	r4, r3
 8003272:	d103      	bne.n	800327c <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	2201      	movs	r2, #1
 8003278:	715a      	strb	r2, [r3, #5]
 800327a:	e002      	b.n	8003282 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	791b      	ldrb	r3, [r3, #4]
 8003286:	2b03      	cmp	r3, #3
 8003288:	d858      	bhi.n	800333c <task_sensor_update+0x154>
 800328a:	a201      	add	r2, pc, #4	@ (adr r2, 8003290 <task_sensor_update+0xa8>)
 800328c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003290:	080032a1 	.word	0x080032a1
 8003294:	080032b9 	.word	0x080032b9
 8003298:	080032ef 	.word	0x080032ef
 800329c:	08003307 	.word	0x08003307
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	795b      	ldrb	r3, [r3, #5]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d153      	bne.n	8003350 <task_sensor_update+0x168>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2201      	movs	r2, #1
 80032ac:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	68da      	ldr	r2, [r3, #12]
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	601a      	str	r2, [r3, #0]
					}

					break;
 80032b6:	e04b      	b.n	8003350 <task_sensor_update+0x168>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	1e5a      	subs	r2, r3, #1
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d144      	bne.n	8003354 <task_sensor_update+0x16c>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	795b      	ldrb	r3, [r3, #5]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d109      	bne.n	80032e6 <task_sensor_update+0xfe>
						{
							p_task_sensor_cfg->f_put_event(p_task_sensor_cfg->signal_down);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	695b      	ldr	r3, [r3, #20]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	7c52      	ldrb	r2, [r2, #17]
 80032da:	4610      	mov	r0, r2
 80032dc:	4798      	blx	r3
							//put_event_task_set_up(p_task_sensor_cfg->signal_down);
							//put_event_task_normal(p_task_sensor_cfg->signal_down);

							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2202      	movs	r2, #2
 80032e2:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 80032e4:	e036      	b.n	8003354 <task_sensor_update+0x16c>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	2200      	movs	r2, #0
 80032ea:	711a      	strb	r2, [r3, #4]
					break;
 80032ec:	e032      	b.n	8003354 <task_sensor_update+0x16c>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	795b      	ldrb	r3, [r3, #5]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d130      	bne.n	8003358 <task_sensor_update+0x170>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2203      	movs	r2, #3
 8003302:	711a      	strb	r2, [r3, #4]
					}

					break;
 8003304:	e028      	b.n	8003358 <task_sensor_update+0x170>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	1e5a      	subs	r2, r3, #1
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d121      	bne.n	800335c <task_sensor_update+0x174>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	795b      	ldrb	r3, [r3, #5]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d109      	bne.n	8003334 <task_sensor_update+0x14c>
						{
							//put_event_task_set_up(p_task_sensor_cfg->signal_up);
							//put_event_task_normal(p_task_sensor_cfg->signal_up);
							p_task_sensor_cfg->f_put_event(p_task_sensor_cfg->signal_up);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	7c12      	ldrb	r2, [r2, #16]
 8003328:	4610      	mov	r0, r2
 800332a:	4798      	blx	r3
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2200      	movs	r2, #0
 8003330:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 8003332:	e013      	b.n	800335c <task_sensor_update+0x174>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	2202      	movs	r2, #2
 8003338:	711a      	strb	r2, [r3, #4]
					break;
 800333a:	e00f      	b.n	800335c <task_sensor_update+0x174>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2200      	movs	r2, #0
 8003340:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	2200      	movs	r2, #0
 8003346:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	2200      	movs	r2, #0
 800334c:	715a      	strb	r2, [r3, #5]

					break;
 800334e:	e006      	b.n	800335e <task_sensor_update+0x176>
					break;
 8003350:	bf00      	nop
 8003352:	e004      	b.n	800335e <task_sensor_update+0x176>
					break;
 8003354:	bf00      	nop
 8003356:	e002      	b.n	800335e <task_sensor_update+0x176>
					break;
 8003358:	bf00      	nop
 800335a:	e000      	b.n	800335e <task_sensor_update+0x176>
					break;
 800335c:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	617b      	str	r3, [r7, #20]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2b08      	cmp	r3, #8
 8003368:	f67f af6a 	bls.w	8003240 <task_sensor_update+0x58>
    while (b_time_update_required)
 800336c:	7cfb      	ldrb	r3, [r7, #19]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f47f af53 	bne.w	800321a <task_sensor_update+0x32>
			}
		}
    }
}
 8003374:	bf00      	nop
 8003376:	bf00      	nop
 8003378:	371c      	adds	r7, #28
 800337a:	46bd      	mov	sp, r7
 800337c:	bd90      	pop	{r4, r7, pc}
 800337e:	bf00      	nop
 8003380:	200004a8 	.word	0x200004a8
 8003384:	200004ac 	.word	0x200004ac
 8003388:	0800591c 	.word	0x0800591c
 800338c:	20000460 	.word	0x20000460

08003390 <task_set_up_init>:
char aux1[16];
char aux2[16];

/********************** external functions definition ************************/
void task_set_up_init(void *parameters)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af02      	add	r7, sp, #8
 8003396:	6078      	str	r0, [r7, #4]
	task_set_up_st_t	state;
	task_set_up_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_set_up_init), p_task_set_up);
 8003398:	b672      	cpsid	i
 800339a:	4b65      	ldr	r3, [pc, #404]	@ (8003530 <task_set_up_init+0x1a0>)
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	4b65      	ldr	r3, [pc, #404]	@ (8003534 <task_set_up_init+0x1a4>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4b64      	ldr	r3, [pc, #400]	@ (8003538 <task_set_up_init+0x1a8>)
 80033a6:	4a65      	ldr	r2, [pc, #404]	@ (800353c <task_set_up_init+0x1ac>)
 80033a8:	213f      	movs	r1, #63	@ 0x3f
 80033aa:	f001 f835 	bl	8004418 <sniprintf>
 80033ae:	4603      	mov	r3, r0
 80033b0:	4a63      	ldr	r2, [pc, #396]	@ (8003540 <task_set_up_init+0x1b0>)
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	4b5e      	ldr	r3, [pc, #376]	@ (8003530 <task_set_up_init+0x1a0>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7ff f999 	bl	80026f0 <logger_log_print_>
 80033be:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_set_up), p_task_set_up_);
 80033c0:	b672      	cpsid	i
 80033c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003530 <task_set_up_init+0x1a0>)
 80033c4:	6818      	ldr	r0, [r3, #0]
 80033c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003544 <task_set_up_init+0x1b4>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003548 <task_set_up_init+0x1b8>)
 80033ce:	4a5f      	ldr	r2, [pc, #380]	@ (800354c <task_set_up_init+0x1bc>)
 80033d0:	213f      	movs	r1, #63	@ 0x3f
 80033d2:	f001 f821 	bl	8004418 <sniprintf>
 80033d6:	4603      	mov	r3, r0
 80033d8:	4a59      	ldr	r2, [pc, #356]	@ (8003540 <task_set_up_init+0x1b0>)
 80033da:	6013      	str	r3, [r2, #0]
 80033dc:	4b54      	ldr	r3, [pc, #336]	@ (8003530 <task_set_up_init+0x1a0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f985 	bl	80026f0 <logger_log_print_>
 80033e6:	b662      	cpsie	i

	g_task_set_up_cnt = G_TASK_MEN_CNT_INI;
 80033e8:	4b59      	ldr	r3, [pc, #356]	@ (8003550 <task_set_up_init+0x1c0>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_set_up_cnt), g_task_set_up_cnt);
 80033ee:	b672      	cpsid	i
 80033f0:	4b4f      	ldr	r3, [pc, #316]	@ (8003530 <task_set_up_init+0x1a0>)
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	4b56      	ldr	r3, [pc, #344]	@ (8003550 <task_set_up_init+0x1c0>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4b56      	ldr	r3, [pc, #344]	@ (8003554 <task_set_up_init+0x1c4>)
 80033fc:	4a56      	ldr	r2, [pc, #344]	@ (8003558 <task_set_up_init+0x1c8>)
 80033fe:	213f      	movs	r1, #63	@ 0x3f
 8003400:	f001 f80a 	bl	8004418 <sniprintf>
 8003404:	4603      	mov	r3, r0
 8003406:	4a4e      	ldr	r2, [pc, #312]	@ (8003540 <task_set_up_init+0x1b0>)
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b49      	ldr	r3, [pc, #292]	@ (8003530 <task_set_up_init+0x1a0>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f7ff f96e 	bl	80026f0 <logger_log_print_>
 8003414:	b662      	cpsie	i

	init_queue_event_task_set_up();
 8003416:	f000 fad3 	bl	80039c0 <init_queue_event_task_set_up>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_set_up_dta = &task_set_up_dta;
 800341a:	4b50      	ldr	r3, [pc, #320]	@ (800355c <task_set_up_init+0x1cc>)
 800341c:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_set_up_dta->state;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	791b      	ldrb	r3, [r3, #4]
 8003422:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8003424:	b672      	cpsid	i
 8003426:	4b42      	ldr	r3, [pc, #264]	@ (8003530 <task_set_up_init+0x1a0>)
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	9300      	str	r3, [sp, #0]
 800342e:	4b4c      	ldr	r3, [pc, #304]	@ (8003560 <task_set_up_init+0x1d0>)
 8003430:	4a4c      	ldr	r2, [pc, #304]	@ (8003564 <task_set_up_init+0x1d4>)
 8003432:	213f      	movs	r1, #63	@ 0x3f
 8003434:	f000 fff0 	bl	8004418 <sniprintf>
 8003438:	4603      	mov	r3, r0
 800343a:	4a41      	ldr	r2, [pc, #260]	@ (8003540 <task_set_up_init+0x1b0>)
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	4b3c      	ldr	r3, [pc, #240]	@ (8003530 <task_set_up_init+0x1a0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff f954 	bl	80026f0 <logger_log_print_>
 8003448:	b662      	cpsie	i

	event = p_task_set_up_dta->event;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	795b      	ldrb	r3, [r3, #5]
 800344e:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8003450:	b672      	cpsid	i
 8003452:	4b37      	ldr	r3, [pc, #220]	@ (8003530 <task_set_up_init+0x1a0>)
 8003454:	6818      	ldr	r0, [r3, #0]
 8003456:	7abb      	ldrb	r3, [r7, #10]
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4b43      	ldr	r3, [pc, #268]	@ (8003568 <task_set_up_init+0x1d8>)
 800345c:	4a41      	ldr	r2, [pc, #260]	@ (8003564 <task_set_up_init+0x1d4>)
 800345e:	213f      	movs	r1, #63	@ 0x3f
 8003460:	f000 ffda 	bl	8004418 <sniprintf>
 8003464:	4603      	mov	r3, r0
 8003466:	4a36      	ldr	r2, [pc, #216]	@ (8003540 <task_set_up_init+0x1b0>)
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	4b31      	ldr	r3, [pc, #196]	@ (8003530 <task_set_up_init+0x1a0>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff f93e 	bl	80026f0 <logger_log_print_>
 8003474:	b662      	cpsie	i

	b_event = p_task_set_up_dta->flag;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	799b      	ldrb	r3, [r3, #6]
 800347a:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 800347c:	b672      	cpsid	i
 800347e:	4b2c      	ldr	r3, [pc, #176]	@ (8003530 <task_set_up_init+0x1a0>)
 8003480:	6818      	ldr	r0, [r3, #0]
 8003482:	7a7b      	ldrb	r3, [r7, #9]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <task_set_up_init+0xfc>
 8003488:	4b38      	ldr	r3, [pc, #224]	@ (800356c <task_set_up_init+0x1dc>)
 800348a:	e000      	b.n	800348e <task_set_up_init+0xfe>
 800348c:	4b38      	ldr	r3, [pc, #224]	@ (8003570 <task_set_up_init+0x1e0>)
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4b38      	ldr	r3, [pc, #224]	@ (8003574 <task_set_up_init+0x1e4>)
 8003492:	4a39      	ldr	r2, [pc, #228]	@ (8003578 <task_set_up_init+0x1e8>)
 8003494:	213f      	movs	r1, #63	@ 0x3f
 8003496:	f000 ffbf 	bl	8004418 <sniprintf>
 800349a:	4603      	mov	r3, r0
 800349c:	4a28      	ldr	r2, [pc, #160]	@ (8003540 <task_set_up_init+0x1b0>)
 800349e:	6013      	str	r3, [r2, #0]
 80034a0:	4b23      	ldr	r3, [pc, #140]	@ (8003530 <task_set_up_init+0x1a0>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff f923 	bl	80026f0 <logger_log_print_>
 80034aa:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80034ac:	2000      	movs	r0, #0
 80034ae:	f7fe fdd9 	bl	8002064 <displayInit>

    sprintf(aux1,"Config: %d %d", configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 80034b2:	4b32      	ldr	r3, [pc, #200]	@ (800357c <task_set_up_init+0x1ec>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b30      	ldr	r3, [pc, #192]	@ (800357c <task_set_up_init+0x1ec>)
 80034ba:	785b      	ldrb	r3, [r3, #1]
 80034bc:	4930      	ldr	r1, [pc, #192]	@ (8003580 <task_set_up_init+0x1f0>)
 80034be:	4831      	ldr	r0, [pc, #196]	@ (8003584 <task_set_up_init+0x1f4>)
 80034c0:	f000 ffde 	bl	8004480 <siprintf>
    sprintf(aux2,"Temp:");
 80034c4:	4930      	ldr	r1, [pc, #192]	@ (8003588 <task_set_up_init+0x1f8>)
 80034c6:	4831      	ldr	r0, [pc, #196]	@ (800358c <task_set_up_init+0x1fc>)
 80034c8:	f000 ffda 	bl	8004480 <siprintf>

    linea1=aux1;
 80034cc:	4b30      	ldr	r3, [pc, #192]	@ (8003590 <task_set_up_init+0x200>)
 80034ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003584 <task_set_up_init+0x1f4>)
 80034d0:	601a      	str	r2, [r3, #0]
    linea2=aux2;
 80034d2:	4b30      	ldr	r3, [pc, #192]	@ (8003594 <task_set_up_init+0x204>)
 80034d4:	4a2d      	ldr	r2, [pc, #180]	@ (800358c <task_set_up_init+0x1fc>)
 80034d6:	601a      	str	r2, [r3, #0]

    displayCharPositionWrite(0, 0);
 80034d8:	2100      	movs	r1, #0
 80034da:	2000      	movs	r0, #0
 80034dc:	f7fe fe3e 	bl	800215c <displayCharPositionWrite>
	displayStringWrite("                ");
 80034e0:	482d      	ldr	r0, [pc, #180]	@ (8003598 <task_set_up_init+0x208>)
 80034e2:	f7fe fe91 	bl	8002208 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 80034e6:	2101      	movs	r1, #1
 80034e8:	2000      	movs	r0, #0
 80034ea:	f7fe fe37 	bl	800215c <displayCharPositionWrite>
	displayStringWrite("                ");
 80034ee:	482a      	ldr	r0, [pc, #168]	@ (8003598 <task_set_up_init+0x208>)
 80034f0:	f7fe fe8a 	bl	8002208 <displayStringWrite>

	displayCharPositionWrite(0, 0);
 80034f4:	2100      	movs	r1, #0
 80034f6:	2000      	movs	r0, #0
 80034f8:	f7fe fe30 	bl	800215c <displayCharPositionWrite>
	displayStringWrite(linea1);
 80034fc:	4b24      	ldr	r3, [pc, #144]	@ (8003590 <task_set_up_init+0x200>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4618      	mov	r0, r3
 8003502:	f7fe fe81 	bl	8002208 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 8003506:	2101      	movs	r1, #1
 8003508:	2000      	movs	r0, #0
 800350a:	f7fe fe27 	bl	800215c <displayCharPositionWrite>
	displayStringWrite(linea2);
 800350e:	4b21      	ldr	r3, [pc, #132]	@ (8003594 <task_set_up_init+0x204>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fe78 	bl	8002208 <displayStringWrite>

	HAL_GPIO_WritePin(LED_A_PORT, LED_A_PIN, LED_A_ON);
 8003518:	2201      	movs	r2, #1
 800351a:	2120      	movs	r1, #32
 800351c:	481f      	ldr	r0, [pc, #124]	@ (800359c <task_set_up_init+0x20c>)
 800351e:	f7fd fe4c 	bl	80011ba <HAL_GPIO_WritePin>

	g_task_set_up_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 8003522:	4b1f      	ldr	r3, [pc, #124]	@ (80035a0 <task_set_up_init+0x210>)
 8003524:	2200      	movs	r2, #0
 8003526:	601a      	str	r2, [r3, #0]
}
 8003528:	bf00      	nop
 800352a:	3710      	adds	r7, #16
 800352c:	46bd      	mov	sp, r7
 800352e:	bd80      	pop	{r7, pc}
 8003530:	080058a0 	.word	0x080058a0
 8003534:	2000006c 	.word	0x2000006c
 8003538:	08005768 	.word	0x08005768
 800353c:	0800577c 	.word	0x0800577c
 8003540:	20000428 	.word	0x20000428
 8003544:	20000070 	.word	0x20000070
 8003548:	08005794 	.word	0x08005794
 800354c:	080057a0 	.word	0x080057a0
 8003550:	200004b0 	.word	0x200004b0
 8003554:	080057b0 	.word	0x080057b0
 8003558:	080057c4 	.word	0x080057c4
 800355c:	20000060 	.word	0x20000060
 8003560:	080057d4 	.word	0x080057d4
 8003564:	080057dc 	.word	0x080057dc
 8003568:	080057e8 	.word	0x080057e8
 800356c:	080057f0 	.word	0x080057f0
 8003570:	080057f8 	.word	0x080057f8
 8003574:	08005800 	.word	0x08005800
 8003578:	08005808 	.word	0x08005808
 800357c:	20000014 	.word	0x20000014
 8003580:	08005818 	.word	0x08005818
 8003584:	200004c0 	.word	0x200004c0
 8003588:	08005828 	.word	0x08005828
 800358c:	200004d0 	.word	0x200004d0
 8003590:	200004b8 	.word	0x200004b8
 8003594:	200004bc 	.word	0x200004bc
 8003598:	08005830 	.word	0x08005830
 800359c:	40010800 	.word	0x40010800
 80035a0:	200004b4 	.word	0x200004b4

080035a4 <task_set_up_update>:

void task_set_up_update(void *parameters)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
	task_set_up_dta_t *p_task_set_up_dta;
	bool b_time_update_required = false;
 80035ac:	2300      	movs	r3, #0
 80035ae:	73fb      	strb	r3, [r7, #15]

	/* Update Task Menu Counter */
	g_task_set_up_cnt++;
 80035b0:	4b9b      	ldr	r3, [pc, #620]	@ (8003820 <task_set_up_update+0x27c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	3301      	adds	r3, #1
 80035b6:	4a9a      	ldr	r2, [pc, #616]	@ (8003820 <task_set_up_update+0x27c>)
 80035b8:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_set_up_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 80035ba:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_set_up_tick_cnt)
 80035bc:	4b99      	ldr	r3, [pc, #612]	@ (8003824 <task_set_up_update+0x280>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <task_set_up_update+0x2e>
    {
    	g_task_set_up_tick_cnt--;
 80035c4:	4b97      	ldr	r3, [pc, #604]	@ (8003824 <task_set_up_update+0x280>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3b01      	subs	r3, #1
 80035ca:	4a96      	ldr	r2, [pc, #600]	@ (8003824 <task_set_up_update+0x280>)
 80035cc:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80035d2:	b662      	cpsie	i

    while (b_time_update_required)
 80035d4:	e1d5      	b.n	8003982 <task_set_up_update+0x3de>
    {
		/* Protect shared resource (g_task_set_up_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 80035d6:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_set_up_tick_cnt)
 80035d8:	4b92      	ldr	r3, [pc, #584]	@ (8003824 <task_set_up_update+0x280>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d007      	beq.n	80035f0 <task_set_up_update+0x4c>
		{
			g_task_set_up_tick_cnt--;
 80035e0:	4b90      	ldr	r3, [pc, #576]	@ (8003824 <task_set_up_update+0x280>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	3b01      	subs	r3, #1
 80035e6:	4a8f      	ldr	r2, [pc, #572]	@ (8003824 <task_set_up_update+0x280>)
 80035e8:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80035ea:	2301      	movs	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	e001      	b.n	80035f4 <task_set_up_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80035f0:	2300      	movs	r3, #0
 80035f2:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80035f4:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_set_up_dta = &task_set_up_dta;
 80035f6:	4b8c      	ldr	r3, [pc, #560]	@ (8003828 <task_set_up_update+0x284>)
 80035f8:	60bb      	str	r3, [r7, #8]

    	if (DEL_MEN_XX_MIN < p_task_set_up_dta->tick)
 80035fa:	68bb      	ldr	r3, [r7, #8]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d005      	beq.n	800360e <task_set_up_update+0x6a>
		{
			p_task_set_up_dta->tick--;
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	601a      	str	r2, [r3, #0]
 800360c:	e1b9      	b.n	8003982 <task_set_up_update+0x3de>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 800360e:	2120      	movs	r1, #32
 8003610:	4886      	ldr	r0, [pc, #536]	@ (800382c <task_set_up_update+0x288>)
 8003612:	f7fd fdea 	bl	80011ea <HAL_GPIO_TogglePin>

			//snprintf(set_up_str, sizeof(set_up_str), "%lu", (g_task_set_up_cnt/1000ul));
			//displayCharPositionWrite(10, 1);
			//displayStringWrite(set_up_str);

			p_task_set_up_dta->tick = DEL_MEN_XX_MAX;
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800361c:	601a      	str	r2, [r3, #0]
				p_task_set_up_dta->flag = true;
				p_task_set_up_dta->event = get_event_task_set_up();
			}
			*/

			if(true == any_event_task_set_up()){
 800361e:	f000 fa3b 	bl	8003a98 <any_event_task_set_up>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	f000 81ac 	beq.w	8003982 <task_set_up_update+0x3de>
				p_task_set_up_dta->flag = true;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2201      	movs	r2, #1
 800362e:	719a      	strb	r2, [r3, #6]
				p_task_set_up_dta->event = get_event_task_set_up();
 8003630:	f000 fa0c 	bl	8003a4c <get_event_task_set_up>
 8003634:	4603      	mov	r3, r0
 8003636:	461a      	mov	r2, r3
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	715a      	strb	r2, [r3, #5]

				switch (p_task_set_up_dta->state)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	791b      	ldrb	r3, [r3, #4]
 8003640:	3b02      	subs	r3, #2
 8003642:	2b03      	cmp	r3, #3
 8003644:	f200 8169 	bhi.w	800391a <task_set_up_update+0x376>
 8003648:	a201      	add	r2, pc, #4	@ (adr r2, 8003650 <task_set_up_update+0xac>)
 800364a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364e:	bf00      	nop
 8003650:	08003661 	.word	0x08003661
 8003654:	08003699 	.word	0x08003699
 8003658:	0800375b 	.word	0x0800375b
 800365c:	08003861 	.word	0x08003861
						}

						break;
				 	 */
					case ST_SET_UP_02_MAIN:
						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_CONF_ACTIVE == p_task_set_up_dta->event))
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	799b      	ldrb	r3, [r3, #6]
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8165 	beq.w	8003934 <task_set_up_update+0x390>
 800366a:	68bb      	ldr	r3, [r7, #8]
 800366c:	795b      	ldrb	r3, [r3, #5]
 800366e:	2b01      	cmp	r3, #1
 8003670:	f040 8160 	bne.w	8003934 <task_set_up_update+0x390>
						{
							linea1 = set_up_fijo;
 8003674:	4b6e      	ldr	r3, [pc, #440]	@ (8003830 <task_set_up_update+0x28c>)
 8003676:	4a6f      	ldr	r2, [pc, #444]	@ (8003834 <task_set_up_update+0x290>)
 8003678:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	79db      	ldrb	r3, [r3, #7]
 800367e:	3b01      	subs	r3, #1
 8003680:	011b      	lsls	r3, r3, #4
 8003682:	4a6d      	ldr	r2, [pc, #436]	@ (8003838 <task_set_up_update+0x294>)
 8003684:	4413      	add	r3, r2
 8003686:	4a6d      	ldr	r2, [pc, #436]	@ (800383c <task_set_up_update+0x298>)
 8003688:	6013      	str	r3, [r2, #0]
							p_task_set_up_dta->flag = false;
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	2200      	movs	r2, #0
 800368e:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MENU;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2203      	movs	r2, #3
 8003694:	711a      	strb	r2, [r3, #4]
						}

						break;
 8003696:	e14d      	b.n	8003934 <task_set_up_update+0x390>

					case ST_SET_UP_02_MENU:
						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event))
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	799b      	ldrb	r3, [r3, #6]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d026      	beq.n	80036ee <task_set_up_update+0x14a>
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	795b      	ldrb	r3, [r3, #5]
 80036a4:	2b03      	cmp	r3, #3
 80036a6:	d122      	bne.n	80036ee <task_set_up_update+0x14a>
						{
							p_task_set_up_dta->flag = false;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2200      	movs	r2, #0
 80036ac:	719a      	strb	r2, [r3, #6]
							if(p_task_set_up_dta->option == 1){
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	79db      	ldrb	r3, [r3, #7]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d10b      	bne.n	80036ce <task_set_up_update+0x12a>
								p_task_set_up_dta->state = ST_SET_UP_02_PUERTA;
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2204      	movs	r2, #4
 80036ba:	711a      	strb	r2, [r3, #4]
								linea2 = set_up2[p_task_set_up_dta->opt_tiempo_puerta - 1];
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	7a1b      	ldrb	r3, [r3, #8]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	011b      	lsls	r3, r3, #4
 80036c4:	4a5e      	ldr	r2, [pc, #376]	@ (8003840 <task_set_up_update+0x29c>)
 80036c6:	4413      	add	r3, r2
 80036c8:	4a5c      	ldr	r2, [pc, #368]	@ (800383c <task_set_up_update+0x298>)
 80036ca:	6013      	str	r3, [r2, #0]
							if(p_task_set_up_dta->option == 1){
 80036cc:	e043      	b.n	8003756 <task_set_up_update+0x1b2>
							}
							else if(p_task_set_up_dta->option == 2){
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	79db      	ldrb	r3, [r3, #7]
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d13f      	bne.n	8003756 <task_set_up_update+0x1b2>
								p_task_set_up_dta->state = ST_SET_UP_02_PERMANENCIA;
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2205      	movs	r2, #5
 80036da:	711a      	strb	r2, [r3, #4]
								linea2 = set_up3[p_task_set_up_dta->opt_tiempo_permanencia - 1];
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	7a5b      	ldrb	r3, [r3, #9]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	4a57      	ldr	r2, [pc, #348]	@ (8003844 <task_set_up_update+0x2a0>)
 80036e6:	4413      	add	r3, r2
 80036e8:	4a54      	ldr	r2, [pc, #336]	@ (800383c <task_set_up_update+0x298>)
 80036ea:	6013      	str	r3, [r2, #0]
							if(p_task_set_up_dta->option == 1){
 80036ec:	e033      	b.n	8003756 <task_set_up_update+0x1b2>
							}

						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	799b      	ldrb	r3, [r3, #6]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d010      	beq.n	8003718 <task_set_up_update+0x174>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	795b      	ldrb	r3, [r3, #5]
 80036fa:	2b07      	cmp	r3, #7
 80036fc:	d10c      	bne.n	8003718 <task_set_up_update+0x174>
						{
							p_task_set_up_dta->flag = false;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	2200      	movs	r2, #0
 8003702:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MAIN;
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2202      	movs	r2, #2
 8003708:	711a      	strb	r2, [r3, #4]
							linea1 = aux1;
 800370a:	4b49      	ldr	r3, [pc, #292]	@ (8003830 <task_set_up_update+0x28c>)
 800370c:	4a4e      	ldr	r2, [pc, #312]	@ (8003848 <task_set_up_update+0x2a4>)
 800370e:	601a      	str	r2, [r3, #0]
							linea2 = aux2;
 8003710:	4b4a      	ldr	r3, [pc, #296]	@ (800383c <task_set_up_update+0x298>)
 8003712:	4a4e      	ldr	r2, [pc, #312]	@ (800384c <task_set_up_update+0x2a8>)
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	e01f      	b.n	8003758 <task_set_up_update+0x1b4>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	799b      	ldrb	r3, [r3, #6]
 800371c:	2b00      	cmp	r3, #0
 800371e:	f000 810b 	beq.w	8003938 <task_set_up_update+0x394>
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	795b      	ldrb	r3, [r3, #5]
 8003726:	2b05      	cmp	r3, #5
 8003728:	f040 8106 	bne.w	8003938 <task_set_up_update+0x394>
							p_task_set_up_dta->option = (p_task_set_up_dta->option%CNT_OPT) + 1;
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	79db      	ldrb	r3, [r3, #7]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	b2db      	uxtb	r3, r3
 8003736:	3301      	adds	r3, #1
 8003738:	b2da      	uxtb	r2, r3
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	71da      	strb	r2, [r3, #7]
							p_task_set_up_dta->flag = false;
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	2200      	movs	r2, #0
 8003742:	719a      	strb	r2, [r3, #6]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	79db      	ldrb	r3, [r3, #7]
 8003748:	3b01      	subs	r3, #1
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	4a3a      	ldr	r2, [pc, #232]	@ (8003838 <task_set_up_update+0x294>)
 800374e:	4413      	add	r3, r2
 8003750:	4a3a      	ldr	r2, [pc, #232]	@ (800383c <task_set_up_update+0x298>)
 8003752:	6013      	str	r3, [r2, #0]
						}

						break;
 8003754:	e0f0      	b.n	8003938 <task_set_up_update+0x394>
							if(p_task_set_up_dta->option == 1){
 8003756:	bf00      	nop
						break;
 8003758:	e0ee      	b.n	8003938 <task_set_up_update+0x394>

					case ST_SET_UP_02_PUERTA:

						if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event)){
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	799b      	ldrb	r3, [r3, #6]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d01a      	beq.n	8003798 <task_set_up_update+0x1f4>
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	795b      	ldrb	r3, [r3, #5]
 8003766:	2b03      	cmp	r3, #3
 8003768:	d116      	bne.n	8003798 <task_set_up_update+0x1f4>
							//Agregar guardado
							configuracion.tiempo_puerta = atoi(string_tiempos_puerta[p_task_set_up_dta->opt_tiempo_puerta-1]);
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	7a1b      	ldrb	r3, [r3, #8]
 800376e:	3b01      	subs	r3, #1
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	4a37      	ldr	r2, [pc, #220]	@ (8003850 <task_set_up_update+0x2ac>)
 8003774:	4413      	add	r3, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fc35 	bl	8003fe6 <atoi>
 800377c:	4603      	mov	r3, r0
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b34      	ldr	r3, [pc, #208]	@ (8003854 <task_set_up_update+0x2b0>)
 8003782:	701a      	strb	r2, [r3, #0]
							sprintf(aux1,"Config: %d %d",configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 8003784:	4b33      	ldr	r3, [pc, #204]	@ (8003854 <task_set_up_update+0x2b0>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	461a      	mov	r2, r3
 800378a:	4b32      	ldr	r3, [pc, #200]	@ (8003854 <task_set_up_update+0x2b0>)
 800378c:	785b      	ldrb	r3, [r3, #1]
 800378e:	4932      	ldr	r1, [pc, #200]	@ (8003858 <task_set_up_update+0x2b4>)
 8003790:	482d      	ldr	r0, [pc, #180]	@ (8003848 <task_set_up_update+0x2a4>)
 8003792:	f000 fe75 	bl	8004480 <siprintf>
 8003796:	e041      	b.n	800381c <task_set_up_update+0x278>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	799b      	ldrb	r3, [r3, #6]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d021      	beq.n	80037e4 <task_set_up_update+0x240>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	795b      	ldrb	r3, [r3, #5]
 80037a4:	2b05      	cmp	r3, #5
 80037a6:	d11d      	bne.n	80037e4 <task_set_up_update+0x240>
							p_task_set_up_dta->opt_tiempo_puerta = (p_task_set_up_dta->opt_tiempo_puerta%CNT_OPT_PUERTA) + 1;
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	7a1a      	ldrb	r2, [r3, #8]
 80037ac:	4b2b      	ldr	r3, [pc, #172]	@ (800385c <task_set_up_update+0x2b8>)
 80037ae:	fba3 1302 	umull	r1, r3, r3, r2
 80037b2:	1ad1      	subs	r1, r2, r3
 80037b4:	0849      	lsrs	r1, r1, #1
 80037b6:	440b      	add	r3, r1
 80037b8:	0899      	lsrs	r1, r3, #2
 80037ba:	460b      	mov	r3, r1
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	1a5b      	subs	r3, r3, r1
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	3301      	adds	r3, #1
 80037c6:	b2da      	uxtb	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	721a      	strb	r2, [r3, #8]
							p_task_set_up_dta->flag = false;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2200      	movs	r2, #0
 80037d0:	719a      	strb	r2, [r3, #6]
							linea2 = set_up2[p_task_set_up_dta->opt_tiempo_puerta - 1];
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	7a1b      	ldrb	r3, [r3, #8]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	011b      	lsls	r3, r3, #4
 80037da:	4a19      	ldr	r2, [pc, #100]	@ (8003840 <task_set_up_update+0x29c>)
 80037dc:	4413      	add	r3, r2
 80037de:	4a17      	ldr	r2, [pc, #92]	@ (800383c <task_set_up_update+0x298>)
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	e01b      	b.n	800381c <task_set_up_update+0x278>
						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	799b      	ldrb	r3, [r3, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	f000 80a7 	beq.w	800393c <task_set_up_update+0x398>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	795b      	ldrb	r3, [r3, #5]
 80037f2:	2b07      	cmp	r3, #7
 80037f4:	f040 80a2 	bne.w	800393c <task_set_up_update+0x398>
						{
							p_task_set_up_dta->flag = false;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2200      	movs	r2, #0
 80037fc:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MENU;
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2203      	movs	r2, #3
 8003802:	711a      	strb	r2, [r3, #4]
							linea1 = set_up_fijo;
 8003804:	4b0a      	ldr	r3, [pc, #40]	@ (8003830 <task_set_up_update+0x28c>)
 8003806:	4a0b      	ldr	r2, [pc, #44]	@ (8003834 <task_set_up_update+0x290>)
 8003808:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	79db      	ldrb	r3, [r3, #7]
 800380e:	3b01      	subs	r3, #1
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	4a09      	ldr	r2, [pc, #36]	@ (8003838 <task_set_up_update+0x294>)
 8003814:	4413      	add	r3, r2
 8003816:	4a09      	ldr	r2, [pc, #36]	@ (800383c <task_set_up_update+0x298>)
 8003818:	6013      	str	r3, [r2, #0]

						}

						break;
 800381a:	e08f      	b.n	800393c <task_set_up_update+0x398>
 800381c:	e08e      	b.n	800393c <task_set_up_update+0x398>
 800381e:	bf00      	nop
 8003820:	200004b0 	.word	0x200004b0
 8003824:	200004b4 	.word	0x200004b4
 8003828:	20000060 	.word	0x20000060
 800382c:	40010800 	.word	0x40010800
 8003830:	200004b8 	.word	0x200004b8
 8003834:	20000074 	.word	0x20000074
 8003838:	20000084 	.word	0x20000084
 800383c:	200004bc 	.word	0x200004bc
 8003840:	200000a4 	.word	0x200000a4
 8003844:	20000114 	.word	0x20000114
 8003848:	200004c0 	.word	0x200004c0
 800384c:	200004d0 	.word	0x200004d0
 8003850:	200001a4 	.word	0x200001a4
 8003854:	20000014 	.word	0x20000014
 8003858:	08005818 	.word	0x08005818
 800385c:	24924925 	.word	0x24924925

					case ST_SET_UP_02_PERMANENCIA:

						if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event)){
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	799b      	ldrb	r3, [r3, #6]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d01a      	beq.n	800389e <task_set_up_update+0x2fa>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	795b      	ldrb	r3, [r3, #5]
 800386c:	2b03      	cmp	r3, #3
 800386e:	d116      	bne.n	800389e <task_set_up_update+0x2fa>
							configuracion.tiempo_permanencia = atoi(string_tiempos_permanencia[p_task_set_up_dta->opt_tiempo_permanencia-1]);
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	7a5b      	ldrb	r3, [r3, #9]
 8003874:	3b01      	subs	r3, #1
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	4a46      	ldr	r2, [pc, #280]	@ (8003994 <task_set_up_update+0x3f0>)
 800387a:	4413      	add	r3, r2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 fbb2 	bl	8003fe6 <atoi>
 8003882:	4603      	mov	r3, r0
 8003884:	b2da      	uxtb	r2, r3
 8003886:	4b44      	ldr	r3, [pc, #272]	@ (8003998 <task_set_up_update+0x3f4>)
 8003888:	705a      	strb	r2, [r3, #1]
							sprintf(aux1,"Config: %d %d",configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 800388a:	4b43      	ldr	r3, [pc, #268]	@ (8003998 <task_set_up_update+0x3f4>)
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	461a      	mov	r2, r3
 8003890:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <task_set_up_update+0x3f4>)
 8003892:	785b      	ldrb	r3, [r3, #1]
 8003894:	4941      	ldr	r1, [pc, #260]	@ (800399c <task_set_up_update+0x3f8>)
 8003896:	4842      	ldr	r0, [pc, #264]	@ (80039a0 <task_set_up_update+0x3fc>)
 8003898:	f000 fdf2 	bl	8004480 <siprintf>
 800389c:	e03c      	b.n	8003918 <task_set_up_update+0x374>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	799b      	ldrb	r3, [r3, #6]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d01e      	beq.n	80038e4 <task_set_up_update+0x340>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	795b      	ldrb	r3, [r3, #5]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d11a      	bne.n	80038e4 <task_set_up_update+0x340>
							p_task_set_up_dta->opt_tiempo_permanencia = (p_task_set_up_dta->opt_tiempo_permanencia%CNT_OPT_PERMANENCIA) + 1;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	7a5a      	ldrb	r2, [r3, #9]
 80038b2:	4b3c      	ldr	r3, [pc, #240]	@ (80039a4 <task_set_up_update+0x400>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	0859      	lsrs	r1, r3, #1
 80038ba:	460b      	mov	r3, r1
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	3301      	adds	r3, #1
 80038c6:	b2da      	uxtb	r2, r3
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	725a      	strb	r2, [r3, #9]
							p_task_set_up_dta->flag = false;
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	2200      	movs	r2, #0
 80038d0:	719a      	strb	r2, [r3, #6]
							linea2 = set_up3[p_task_set_up_dta->opt_tiempo_permanencia - 1];
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	7a5b      	ldrb	r3, [r3, #9]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	4a33      	ldr	r2, [pc, #204]	@ (80039a8 <task_set_up_update+0x404>)
 80038dc:	4413      	add	r3, r2
 80038de:	4a33      	ldr	r2, [pc, #204]	@ (80039ac <task_set_up_update+0x408>)
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e019      	b.n	8003918 <task_set_up_update+0x374>
						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	799b      	ldrb	r3, [r3, #6]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d029      	beq.n	8003940 <task_set_up_update+0x39c>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	795b      	ldrb	r3, [r3, #5]
 80038f0:	2b07      	cmp	r3, #7
 80038f2:	d125      	bne.n	8003940 <task_set_up_update+0x39c>
						{
							p_task_set_up_dta->flag = false;
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MENU;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2203      	movs	r2, #3
 80038fe:	711a      	strb	r2, [r3, #4]
							linea1 = set_up_fijo;
 8003900:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <task_set_up_update+0x40c>)
 8003902:	4a2c      	ldr	r2, [pc, #176]	@ (80039b4 <task_set_up_update+0x410>)
 8003904:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	79db      	ldrb	r3, [r3, #7]
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <task_set_up_update+0x414>)
 8003910:	4413      	add	r3, r2
 8003912:	4a26      	ldr	r2, [pc, #152]	@ (80039ac <task_set_up_update+0x408>)
 8003914:	6013      	str	r3, [r2, #0]

						}

						break;
 8003916:	e013      	b.n	8003940 <task_set_up_update+0x39c>
 8003918:	e012      	b.n	8003940 <task_set_up_update+0x39c>

					default:

						p_task_set_up_dta->tick  = DEL_MEN_XX_MIN;
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
						p_task_set_up_dta->state = ST_MEN_XX_IDLE;
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2200      	movs	r2, #0
 8003924:	711a      	strb	r2, [r3, #4]
						p_task_set_up_dta->event = ST_SET_UP_02_MAIN;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2202      	movs	r2, #2
 800392a:	715a      	strb	r2, [r3, #5]
						p_task_set_up_dta->flag  = false;
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	2200      	movs	r2, #0
 8003930:	719a      	strb	r2, [r3, #6]

						break;
 8003932:	e006      	b.n	8003942 <task_set_up_update+0x39e>
						break;
 8003934:	bf00      	nop
 8003936:	e004      	b.n	8003942 <task_set_up_update+0x39e>
						break;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <task_set_up_update+0x39e>
						break;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <task_set_up_update+0x39e>
						break;
 8003940:	bf00      	nop
				}
				displayCharPositionWrite(0, 0);
 8003942:	2100      	movs	r1, #0
 8003944:	2000      	movs	r0, #0
 8003946:	f7fe fc09 	bl	800215c <displayCharPositionWrite>
				displayStringWrite("                ");
 800394a:	481c      	ldr	r0, [pc, #112]	@ (80039bc <task_set_up_update+0x418>)
 800394c:	f7fe fc5c 	bl	8002208 <displayStringWrite>
				displayCharPositionWrite(0, 1);
 8003950:	2101      	movs	r1, #1
 8003952:	2000      	movs	r0, #0
 8003954:	f7fe fc02 	bl	800215c <displayCharPositionWrite>
				displayStringWrite("                ");
 8003958:	4818      	ldr	r0, [pc, #96]	@ (80039bc <task_set_up_update+0x418>)
 800395a:	f7fe fc55 	bl	8002208 <displayStringWrite>

				displayCharPositionWrite(0, 0);
 800395e:	2100      	movs	r1, #0
 8003960:	2000      	movs	r0, #0
 8003962:	f7fe fbfb 	bl	800215c <displayCharPositionWrite>
				displayStringWrite(linea1);
 8003966:	4b12      	ldr	r3, [pc, #72]	@ (80039b0 <task_set_up_update+0x40c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fc4c 	bl	8002208 <displayStringWrite>
				displayCharPositionWrite(0, 1);
 8003970:	2101      	movs	r1, #1
 8003972:	2000      	movs	r0, #0
 8003974:	f7fe fbf2 	bl	800215c <displayCharPositionWrite>
				displayStringWrite(linea2);
 8003978:	4b0c      	ldr	r3, [pc, #48]	@ (80039ac <task_set_up_update+0x408>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fc43 	bl	8002208 <displayStringWrite>
    while (b_time_update_required)
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b00      	cmp	r3, #0
 8003986:	f47f ae26 	bne.w	80035d6 <task_set_up_update+0x32>
			}
		}
	}
}
 800398a:	bf00      	nop
 800398c:	bf00      	nop
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000214 	.word	0x20000214
 8003998:	20000014 	.word	0x20000014
 800399c:	08005818 	.word	0x08005818
 80039a0:	200004c0 	.word	0x200004c0
 80039a4:	38e38e39 	.word	0x38e38e39
 80039a8:	20000114 	.word	0x20000114
 80039ac:	200004bc 	.word	0x200004bc
 80039b0:	200004b8 	.word	0x200004b8
 80039b4:	20000074 	.word	0x20000074
 80039b8:	20000084 	.word	0x20000084
 80039bc:	08005830 	.word	0x08005830

080039c0 <init_queue_event_task_set_up>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_set_up(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80039c6:	4b0f      	ldr	r3, [pc, #60]	@ (8003a04 <init_queue_event_task_set_up+0x44>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80039cc:	4b0d      	ldr	r3, [pc, #52]	@ (8003a04 <init_queue_event_task_set_up+0x44>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80039d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003a04 <init_queue_event_task_set_up+0x44>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	607b      	str	r3, [r7, #4]
 80039dc:	e008      	b.n	80039f0 <init_queue_event_task_set_up+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80039de:	4a09      	ldr	r2, [pc, #36]	@ (8003a04 <init_queue_event_task_set_up+0x44>)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4413      	add	r3, r2
 80039e4:	330c      	adds	r3, #12
 80039e6:	22ff      	movs	r2, #255	@ 0xff
 80039e8:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	3301      	adds	r3, #1
 80039ee:	607b      	str	r3, [r7, #4]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b0f      	cmp	r3, #15
 80039f4:	d9f3      	bls.n	80039de <init_queue_event_task_set_up+0x1e>
}
 80039f6:	bf00      	nop
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bc80      	pop	{r7}
 8003a00:	4770      	bx	lr
 8003a02:	bf00      	nop
 8003a04:	200004e0 	.word	0x200004e0

08003a08 <put_event_task_set_up>:

void put_event_task_set_up(task_set_up_ev_t event)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	4603      	mov	r3, r0
 8003a10:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	3301      	adds	r3, #1
 8003a18:	4a0b      	ldr	r2, [pc, #44]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a1a:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	4909      	ldr	r1, [pc, #36]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a24:	600a      	str	r2, [r1, #0]
 8003a26:	4a08      	ldr	r2, [pc, #32]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	79fa      	ldrb	r2, [r7, #7]
 8003a2c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8003a2e:	4b06      	ldr	r3, [pc, #24]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b10      	cmp	r3, #16
 8003a34:	d102      	bne.n	8003a3c <put_event_task_set_up+0x34>
		queue_task_a.head = 0;
 8003a36:	4b04      	ldr	r3, [pc, #16]	@ (8003a48 <put_event_task_set_up+0x40>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
}
 8003a3c:	bf00      	nop
 8003a3e:	370c      	adds	r7, #12
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr
 8003a46:	bf00      	nop
 8003a48:	200004e0 	.word	0x200004e0

08003a4c <get_event_task_set_up>:

task_set_up_ev_t get_event_task_set_up(void)

{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
	task_set_up_ev_t event;

	queue_task_a.count--;
 8003a52:	4b10      	ldr	r3, [pc, #64]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	3b01      	subs	r3, #1
 8003a58:	4a0e      	ldr	r2, [pc, #56]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a5a:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a62:	4413      	add	r3, r2
 8003a64:	7b1b      	ldrb	r3, [r3, #12]
 8003a66:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8003a68:	4b0a      	ldr	r3, [pc, #40]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	4909      	ldr	r1, [pc, #36]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a70:	604a      	str	r2, [r1, #4]
 8003a72:	4a08      	ldr	r2, [pc, #32]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a74:	4413      	add	r3, r2
 8003a76:	22ff      	movs	r2, #255	@ 0xff
 8003a78:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8003a7a:	4b06      	ldr	r3, [pc, #24]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d102      	bne.n	8003a88 <get_event_task_set_up+0x3c>
		queue_task_a.tail = 0;
 8003a82:	4b04      	ldr	r3, [pc, #16]	@ (8003a94 <get_event_task_set_up+0x48>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	605a      	str	r2, [r3, #4]

	return event;
 8003a88:	79fb      	ldrb	r3, [r7, #7]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	200004e0 	.word	0x200004e0

08003a98 <any_event_task_set_up>:

bool any_event_task_set_up(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8003a9c:	4b06      	ldr	r3, [pc, #24]	@ (8003ab8 <any_event_task_set_up+0x20>)
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4b05      	ldr	r3, [pc, #20]	@ (8003ab8 <any_event_task_set_up+0x20>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	bf14      	ite	ne
 8003aa8:	2301      	movne	r3, #1
 8003aaa:	2300      	moveq	r3, #0
 8003aac:	b2db      	uxtb	r3, r3
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bc80      	pop	{r7}
 8003ab4:	4770      	bx	lr
 8003ab6:	bf00      	nop
 8003ab8:	200004e0 	.word	0x200004e0

08003abc <findslot>:
 8003abc:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae8 <findslot+0x2c>)
 8003abe:	b510      	push	{r4, lr}
 8003ac0:	4604      	mov	r4, r0
 8003ac2:	6818      	ldr	r0, [r3, #0]
 8003ac4:	b118      	cbz	r0, 8003ace <findslot+0x12>
 8003ac6:	6a03      	ldr	r3, [r0, #32]
 8003ac8:	b90b      	cbnz	r3, 8003ace <findslot+0x12>
 8003aca:	f000 fc5d 	bl	8004388 <__sinit>
 8003ace:	2c13      	cmp	r4, #19
 8003ad0:	d807      	bhi.n	8003ae2 <findslot+0x26>
 8003ad2:	4806      	ldr	r0, [pc, #24]	@ (8003aec <findslot+0x30>)
 8003ad4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003ad8:	3201      	adds	r2, #1
 8003ada:	d002      	beq.n	8003ae2 <findslot+0x26>
 8003adc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8003ae0:	bd10      	pop	{r4, pc}
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	e7fc      	b.n	8003ae0 <findslot+0x24>
 8003ae6:	bf00      	nop
 8003ae8:	200002b8 	.word	0x200002b8
 8003aec:	20000508 	.word	0x20000508

08003af0 <error>:
 8003af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003af2:	4604      	mov	r4, r0
 8003af4:	f000 fd76 	bl	80045e4 <__errno>
 8003af8:	2613      	movs	r6, #19
 8003afa:	4605      	mov	r5, r0
 8003afc:	2700      	movs	r7, #0
 8003afe:	4630      	mov	r0, r6
 8003b00:	4639      	mov	r1, r7
 8003b02:	beab      	bkpt	0x00ab
 8003b04:	4606      	mov	r6, r0
 8003b06:	4620      	mov	r0, r4
 8003b08:	602e      	str	r6, [r5, #0]
 8003b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b0c <checkerror>:
 8003b0c:	1c43      	adds	r3, r0, #1
 8003b0e:	d101      	bne.n	8003b14 <checkerror+0x8>
 8003b10:	f7ff bfee 	b.w	8003af0 <error>
 8003b14:	4770      	bx	lr

08003b16 <_swiread>:
 8003b16:	b530      	push	{r4, r5, lr}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	2406      	movs	r4, #6
 8003b1c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003b20:	9203      	str	r2, [sp, #12]
 8003b22:	ad01      	add	r5, sp, #4
 8003b24:	4620      	mov	r0, r4
 8003b26:	4629      	mov	r1, r5
 8003b28:	beab      	bkpt	0x00ab
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	4620      	mov	r0, r4
 8003b2e:	f7ff ffed 	bl	8003b0c <checkerror>
 8003b32:	b005      	add	sp, #20
 8003b34:	bd30      	pop	{r4, r5, pc}

08003b36 <_read>:
 8003b36:	b570      	push	{r4, r5, r6, lr}
 8003b38:	460e      	mov	r6, r1
 8003b3a:	4614      	mov	r4, r2
 8003b3c:	f7ff ffbe 	bl	8003abc <findslot>
 8003b40:	4605      	mov	r5, r0
 8003b42:	b930      	cbnz	r0, 8003b52 <_read+0x1c>
 8003b44:	f000 fd4e 	bl	80045e4 <__errno>
 8003b48:	2309      	movs	r3, #9
 8003b4a:	6003      	str	r3, [r0, #0]
 8003b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003b50:	bd70      	pop	{r4, r5, r6, pc}
 8003b52:	4622      	mov	r2, r4
 8003b54:	4631      	mov	r1, r6
 8003b56:	6800      	ldr	r0, [r0, #0]
 8003b58:	f7ff ffdd 	bl	8003b16 <_swiread>
 8003b5c:	1c43      	adds	r3, r0, #1
 8003b5e:	d0f5      	beq.n	8003b4c <_read+0x16>
 8003b60:	686b      	ldr	r3, [r5, #4]
 8003b62:	1a20      	subs	r0, r4, r0
 8003b64:	4403      	add	r3, r0
 8003b66:	606b      	str	r3, [r5, #4]
 8003b68:	e7f2      	b.n	8003b50 <_read+0x1a>

08003b6a <_swilseek>:
 8003b6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b6c:	460c      	mov	r4, r1
 8003b6e:	4616      	mov	r6, r2
 8003b70:	f7ff ffa4 	bl	8003abc <findslot>
 8003b74:	4605      	mov	r5, r0
 8003b76:	b940      	cbnz	r0, 8003b8a <_swilseek+0x20>
 8003b78:	f000 fd34 	bl	80045e4 <__errno>
 8003b7c:	2309      	movs	r3, #9
 8003b7e:	6003      	str	r3, [r0, #0]
 8003b80:	f04f 34ff 	mov.w	r4, #4294967295
 8003b84:	4620      	mov	r0, r4
 8003b86:	b003      	add	sp, #12
 8003b88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b8a:	2e02      	cmp	r6, #2
 8003b8c:	d903      	bls.n	8003b96 <_swilseek+0x2c>
 8003b8e:	f000 fd29 	bl	80045e4 <__errno>
 8003b92:	2316      	movs	r3, #22
 8003b94:	e7f3      	b.n	8003b7e <_swilseek+0x14>
 8003b96:	2e01      	cmp	r6, #1
 8003b98:	d112      	bne.n	8003bc0 <_swilseek+0x56>
 8003b9a:	6843      	ldr	r3, [r0, #4]
 8003b9c:	18e4      	adds	r4, r4, r3
 8003b9e:	d4f6      	bmi.n	8003b8e <_swilseek+0x24>
 8003ba0:	682b      	ldr	r3, [r5, #0]
 8003ba2:	260a      	movs	r6, #10
 8003ba4:	466f      	mov	r7, sp
 8003ba6:	e9cd 3400 	strd	r3, r4, [sp]
 8003baa:	4630      	mov	r0, r6
 8003bac:	4639      	mov	r1, r7
 8003bae:	beab      	bkpt	0x00ab
 8003bb0:	4606      	mov	r6, r0
 8003bb2:	4630      	mov	r0, r6
 8003bb4:	f7ff ffaa 	bl	8003b0c <checkerror>
 8003bb8:	2800      	cmp	r0, #0
 8003bba:	dbe1      	blt.n	8003b80 <_swilseek+0x16>
 8003bbc:	606c      	str	r4, [r5, #4]
 8003bbe:	e7e1      	b.n	8003b84 <_swilseek+0x1a>
 8003bc0:	2e02      	cmp	r6, #2
 8003bc2:	6803      	ldr	r3, [r0, #0]
 8003bc4:	d1ec      	bne.n	8003ba0 <_swilseek+0x36>
 8003bc6:	260c      	movs	r6, #12
 8003bc8:	466f      	mov	r7, sp
 8003bca:	9300      	str	r3, [sp, #0]
 8003bcc:	4630      	mov	r0, r6
 8003bce:	4639      	mov	r1, r7
 8003bd0:	beab      	bkpt	0x00ab
 8003bd2:	4606      	mov	r6, r0
 8003bd4:	4630      	mov	r0, r6
 8003bd6:	f7ff ff99 	bl	8003b0c <checkerror>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d0d0      	beq.n	8003b80 <_swilseek+0x16>
 8003bde:	4404      	add	r4, r0
 8003be0:	e7de      	b.n	8003ba0 <_swilseek+0x36>

08003be2 <_lseek>:
 8003be2:	f7ff bfc2 	b.w	8003b6a <_swilseek>

08003be6 <_swiwrite>:
 8003be6:	b530      	push	{r4, r5, lr}
 8003be8:	b085      	sub	sp, #20
 8003bea:	2405      	movs	r4, #5
 8003bec:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8003bf0:	9203      	str	r2, [sp, #12]
 8003bf2:	ad01      	add	r5, sp, #4
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	4629      	mov	r1, r5
 8003bf8:	beab      	bkpt	0x00ab
 8003bfa:	4604      	mov	r4, r0
 8003bfc:	4620      	mov	r0, r4
 8003bfe:	f7ff ff85 	bl	8003b0c <checkerror>
 8003c02:	b005      	add	sp, #20
 8003c04:	bd30      	pop	{r4, r5, pc}

08003c06 <_write>:
 8003c06:	b570      	push	{r4, r5, r6, lr}
 8003c08:	460e      	mov	r6, r1
 8003c0a:	4615      	mov	r5, r2
 8003c0c:	f7ff ff56 	bl	8003abc <findslot>
 8003c10:	4604      	mov	r4, r0
 8003c12:	b930      	cbnz	r0, 8003c22 <_write+0x1c>
 8003c14:	f000 fce6 	bl	80045e4 <__errno>
 8003c18:	2309      	movs	r3, #9
 8003c1a:	6003      	str	r3, [r0, #0]
 8003c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c20:	bd70      	pop	{r4, r5, r6, pc}
 8003c22:	462a      	mov	r2, r5
 8003c24:	4631      	mov	r1, r6
 8003c26:	6800      	ldr	r0, [r0, #0]
 8003c28:	f7ff ffdd 	bl	8003be6 <_swiwrite>
 8003c2c:	1e03      	subs	r3, r0, #0
 8003c2e:	dbf5      	blt.n	8003c1c <_write+0x16>
 8003c30:	6862      	ldr	r2, [r4, #4]
 8003c32:	1ae8      	subs	r0, r5, r3
 8003c34:	4402      	add	r2, r0
 8003c36:	42ab      	cmp	r3, r5
 8003c38:	6062      	str	r2, [r4, #4]
 8003c3a:	d1f1      	bne.n	8003c20 <_write+0x1a>
 8003c3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003c40:	2000      	movs	r0, #0
 8003c42:	f7ff bf55 	b.w	8003af0 <error>

08003c46 <_swiclose>:
 8003c46:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003c48:	2402      	movs	r4, #2
 8003c4a:	9001      	str	r0, [sp, #4]
 8003c4c:	ad01      	add	r5, sp, #4
 8003c4e:	4620      	mov	r0, r4
 8003c50:	4629      	mov	r1, r5
 8003c52:	beab      	bkpt	0x00ab
 8003c54:	4604      	mov	r4, r0
 8003c56:	4620      	mov	r0, r4
 8003c58:	f7ff ff58 	bl	8003b0c <checkerror>
 8003c5c:	b003      	add	sp, #12
 8003c5e:	bd30      	pop	{r4, r5, pc}

08003c60 <_close>:
 8003c60:	b538      	push	{r3, r4, r5, lr}
 8003c62:	4605      	mov	r5, r0
 8003c64:	f7ff ff2a 	bl	8003abc <findslot>
 8003c68:	4604      	mov	r4, r0
 8003c6a:	b930      	cbnz	r0, 8003c7a <_close+0x1a>
 8003c6c:	f000 fcba 	bl	80045e4 <__errno>
 8003c70:	2309      	movs	r3, #9
 8003c72:	6003      	str	r3, [r0, #0]
 8003c74:	f04f 30ff 	mov.w	r0, #4294967295
 8003c78:	bd38      	pop	{r3, r4, r5, pc}
 8003c7a:	3d01      	subs	r5, #1
 8003c7c:	2d01      	cmp	r5, #1
 8003c7e:	d809      	bhi.n	8003c94 <_close+0x34>
 8003c80:	4b07      	ldr	r3, [pc, #28]	@ (8003ca0 <_close+0x40>)
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d104      	bne.n	8003c94 <_close+0x34>
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8e:	2000      	movs	r0, #0
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	e7f1      	b.n	8003c78 <_close+0x18>
 8003c94:	6820      	ldr	r0, [r4, #0]
 8003c96:	f7ff ffd6 	bl	8003c46 <_swiclose>
 8003c9a:	2800      	cmp	r0, #0
 8003c9c:	d0f5      	beq.n	8003c8a <_close+0x2a>
 8003c9e:	e7eb      	b.n	8003c78 <_close+0x18>
 8003ca0:	20000508 	.word	0x20000508

08003ca4 <_swistat>:
 8003ca4:	b570      	push	{r4, r5, r6, lr}
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	f7ff ff08 	bl	8003abc <findslot>
 8003cac:	4605      	mov	r5, r0
 8003cae:	b930      	cbnz	r0, 8003cbe <_swistat+0x1a>
 8003cb0:	f000 fc98 	bl	80045e4 <__errno>
 8003cb4:	2309      	movs	r3, #9
 8003cb6:	6003      	str	r3, [r0, #0]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	bd70      	pop	{r4, r5, r6, pc}
 8003cbe:	6863      	ldr	r3, [r4, #4]
 8003cc0:	260c      	movs	r6, #12
 8003cc2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cc6:	6063      	str	r3, [r4, #4]
 8003cc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ccc:	64a3      	str	r3, [r4, #72]	@ 0x48
 8003cce:	4630      	mov	r0, r6
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	beab      	bkpt	0x00ab
 8003cd4:	4605      	mov	r5, r0
 8003cd6:	4628      	mov	r0, r5
 8003cd8:	f7ff ff18 	bl	8003b0c <checkerror>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d0eb      	beq.n	8003cb8 <_swistat+0x14>
 8003ce0:	6120      	str	r0, [r4, #16]
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	e7ea      	b.n	8003cbc <_swistat+0x18>

08003ce6 <_fstat>:
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	b510      	push	{r4, lr}
 8003cea:	2100      	movs	r1, #0
 8003cec:	4604      	mov	r4, r0
 8003cee:	2258      	movs	r2, #88	@ 0x58
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 fc28 	bl	8004546 <memset>
 8003cf6:	4601      	mov	r1, r0
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cfe:	f7ff bfd1 	b.w	8003ca4 <_swistat>

08003d02 <_stat>:
 8003d02:	b538      	push	{r3, r4, r5, lr}
 8003d04:	460d      	mov	r5, r1
 8003d06:	4604      	mov	r4, r0
 8003d08:	2258      	movs	r2, #88	@ 0x58
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4628      	mov	r0, r5
 8003d0e:	f000 fc1a 	bl	8004546 <memset>
 8003d12:	4620      	mov	r0, r4
 8003d14:	2100      	movs	r1, #0
 8003d16:	f000 f811 	bl	8003d3c <_swiopen>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	d00b      	beq.n	8003d38 <_stat+0x36>
 8003d20:	686b      	ldr	r3, [r5, #4]
 8003d22:	4629      	mov	r1, r5
 8003d24:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8003d28:	606b      	str	r3, [r5, #4]
 8003d2a:	f7ff ffbb 	bl	8003ca4 <_swistat>
 8003d2e:	4605      	mov	r5, r0
 8003d30:	4620      	mov	r0, r4
 8003d32:	f7ff ff95 	bl	8003c60 <_close>
 8003d36:	462c      	mov	r4, r5
 8003d38:	4620      	mov	r0, r4
 8003d3a:	bd38      	pop	{r3, r4, r5, pc}

08003d3c <_swiopen>:
 8003d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d40:	4682      	mov	sl, r0
 8003d42:	460e      	mov	r6, r1
 8003d44:	2400      	movs	r4, #0
 8003d46:	4f28      	ldr	r7, [pc, #160]	@ (8003de8 <_swiopen+0xac>)
 8003d48:	b096      	sub	sp, #88	@ 0x58
 8003d4a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8003d4e:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8003d52:	3301      	adds	r3, #1
 8003d54:	d00c      	beq.n	8003d70 <_swiopen+0x34>
 8003d56:	3401      	adds	r4, #1
 8003d58:	2c14      	cmp	r4, #20
 8003d5a:	d1f6      	bne.n	8003d4a <_swiopen+0xe>
 8003d5c:	f000 fc42 	bl	80045e4 <__errno>
 8003d60:	2318      	movs	r3, #24
 8003d62:	f04f 34ff 	mov.w	r4, #4294967295
 8003d66:	6003      	str	r3, [r0, #0]
 8003d68:	4620      	mov	r0, r4
 8003d6a:	b016      	add	sp, #88	@ 0x58
 8003d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d70:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003d74:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003d78:	46e9      	mov	r9, sp
 8003d7a:	d109      	bne.n	8003d90 <_swiopen+0x54>
 8003d7c:	4649      	mov	r1, r9
 8003d7e:	4650      	mov	r0, sl
 8003d80:	f7ff ffbf 	bl	8003d02 <_stat>
 8003d84:	3001      	adds	r0, #1
 8003d86:	d003      	beq.n	8003d90 <_swiopen+0x54>
 8003d88:	f000 fc2c 	bl	80045e4 <__errno>
 8003d8c:	2311      	movs	r3, #17
 8003d8e:	e7e8      	b.n	8003d62 <_swiopen+0x26>
 8003d90:	f240 6301 	movw	r3, #1537	@ 0x601
 8003d94:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003d98:	07b2      	lsls	r2, r6, #30
 8003d9a:	bf48      	it	mi
 8003d9c:	f045 0502 	orrmi.w	r5, r5, #2
 8003da0:	421e      	tst	r6, r3
 8003da2:	bf18      	it	ne
 8003da4:	f045 0504 	orrne.w	r5, r5, #4
 8003da8:	0733      	lsls	r3, r6, #28
 8003daa:	bf48      	it	mi
 8003dac:	f025 0504 	bicmi.w	r5, r5, #4
 8003db0:	4650      	mov	r0, sl
 8003db2:	bf48      	it	mi
 8003db4:	f045 0508 	orrmi.w	r5, r5, #8
 8003db8:	f8cd a000 	str.w	sl, [sp]
 8003dbc:	f7fc f9c6 	bl	800014c <strlen>
 8003dc0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003dc4:	2501      	movs	r5, #1
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	4649      	mov	r1, r9
 8003dca:	beab      	bkpt	0x00ab
 8003dcc:	4605      	mov	r5, r0
 8003dce:	2d00      	cmp	r5, #0
 8003dd0:	db05      	blt.n	8003dde <_swiopen+0xa2>
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003dd8:	4447      	add	r7, r8
 8003dda:	607b      	str	r3, [r7, #4]
 8003ddc:	e7c4      	b.n	8003d68 <_swiopen+0x2c>
 8003dde:	4628      	mov	r0, r5
 8003de0:	f7ff fe86 	bl	8003af0 <error>
 8003de4:	4604      	mov	r4, r0
 8003de6:	e7bf      	b.n	8003d68 <_swiopen+0x2c>
 8003de8:	20000508 	.word	0x20000508

08003dec <_get_semihosting_exts>:
 8003dec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003df0:	4606      	mov	r6, r0
 8003df2:	460f      	mov	r7, r1
 8003df4:	4829      	ldr	r0, [pc, #164]	@ (8003e9c <_get_semihosting_exts+0xb0>)
 8003df6:	2100      	movs	r1, #0
 8003df8:	4615      	mov	r5, r2
 8003dfa:	f7ff ff9f 	bl	8003d3c <_swiopen>
 8003dfe:	4604      	mov	r4, r0
 8003e00:	462a      	mov	r2, r5
 8003e02:	2100      	movs	r1, #0
 8003e04:	4630      	mov	r0, r6
 8003e06:	f000 fb9e 	bl	8004546 <memset>
 8003e0a:	1c63      	adds	r3, r4, #1
 8003e0c:	d014      	beq.n	8003e38 <_get_semihosting_exts+0x4c>
 8003e0e:	4620      	mov	r0, r4
 8003e10:	f7ff fe54 	bl	8003abc <findslot>
 8003e14:	f04f 080c 	mov.w	r8, #12
 8003e18:	4681      	mov	r9, r0
 8003e1a:	4640      	mov	r0, r8
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	beab      	bkpt	0x00ab
 8003e20:	4680      	mov	r8, r0
 8003e22:	4640      	mov	r0, r8
 8003e24:	f7ff fe72 	bl	8003b0c <checkerror>
 8003e28:	2803      	cmp	r0, #3
 8003e2a:	dd02      	ble.n	8003e32 <_get_semihosting_exts+0x46>
 8003e2c:	1ec3      	subs	r3, r0, #3
 8003e2e:	42ab      	cmp	r3, r5
 8003e30:	dc07      	bgt.n	8003e42 <_get_semihosting_exts+0x56>
 8003e32:	4620      	mov	r0, r4
 8003e34:	f7ff ff14 	bl	8003c60 <_close>
 8003e38:	f04f 30ff 	mov.w	r0, #4294967295
 8003e3c:	b003      	add	sp, #12
 8003e3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003e42:	2204      	movs	r2, #4
 8003e44:	4620      	mov	r0, r4
 8003e46:	eb0d 0102 	add.w	r1, sp, r2
 8003e4a:	f7ff fe74 	bl	8003b36 <_read>
 8003e4e:	2803      	cmp	r0, #3
 8003e50:	ddef      	ble.n	8003e32 <_get_semihosting_exts+0x46>
 8003e52:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003e56:	2b53      	cmp	r3, #83	@ 0x53
 8003e58:	d1eb      	bne.n	8003e32 <_get_semihosting_exts+0x46>
 8003e5a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003e5e:	2b48      	cmp	r3, #72	@ 0x48
 8003e60:	d1e7      	bne.n	8003e32 <_get_semihosting_exts+0x46>
 8003e62:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003e66:	2b46      	cmp	r3, #70	@ 0x46
 8003e68:	d1e3      	bne.n	8003e32 <_get_semihosting_exts+0x46>
 8003e6a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e6e:	2b42      	cmp	r3, #66	@ 0x42
 8003e70:	d1df      	bne.n	8003e32 <_get_semihosting_exts+0x46>
 8003e72:	2201      	movs	r2, #1
 8003e74:	4639      	mov	r1, r7
 8003e76:	4620      	mov	r0, r4
 8003e78:	f7ff fe77 	bl	8003b6a <_swilseek>
 8003e7c:	2800      	cmp	r0, #0
 8003e7e:	dbd8      	blt.n	8003e32 <_get_semihosting_exts+0x46>
 8003e80:	462a      	mov	r2, r5
 8003e82:	4631      	mov	r1, r6
 8003e84:	4620      	mov	r0, r4
 8003e86:	f7ff fe56 	bl	8003b36 <_read>
 8003e8a:	4605      	mov	r5, r0
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f7ff fee7 	bl	8003c60 <_close>
 8003e92:	4628      	mov	r0, r5
 8003e94:	f7ff fe3a 	bl	8003b0c <checkerror>
 8003e98:	e7d0      	b.n	8003e3c <_get_semihosting_exts+0x50>
 8003e9a:	bf00      	nop
 8003e9c:	080059f4 	.word	0x080059f4

08003ea0 <initialise_semihosting_exts>:
 8003ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	4d09      	ldr	r5, [pc, #36]	@ (8003ecc <initialise_semihosting_exts+0x2c>)
 8003ea8:	4c09      	ldr	r4, [pc, #36]	@ (8003ed0 <initialise_semihosting_exts+0x30>)
 8003eaa:	a801      	add	r0, sp, #4
 8003eac:	6029      	str	r1, [r5, #0]
 8003eae:	6022      	str	r2, [r4, #0]
 8003eb0:	f7ff ff9c 	bl	8003dec <_get_semihosting_exts>
 8003eb4:	2800      	cmp	r0, #0
 8003eb6:	dd07      	ble.n	8003ec8 <initialise_semihosting_exts+0x28>
 8003eb8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003ebc:	f003 0201 	and.w	r2, r3, #1
 8003ec0:	f003 0302 	and.w	r3, r3, #2
 8003ec4:	602a      	str	r2, [r5, #0]
 8003ec6:	6023      	str	r3, [r4, #0]
 8003ec8:	b003      	add	sp, #12
 8003eca:	bd30      	pop	{r4, r5, pc}
 8003ecc:	200002a8 	.word	0x200002a8
 8003ed0:	200002a4 	.word	0x200002a4

08003ed4 <_has_ext_stdout_stderr>:
 8003ed4:	b510      	push	{r4, lr}
 8003ed6:	4c04      	ldr	r4, [pc, #16]	@ (8003ee8 <_has_ext_stdout_stderr+0x14>)
 8003ed8:	6823      	ldr	r3, [r4, #0]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	da01      	bge.n	8003ee2 <_has_ext_stdout_stderr+0xe>
 8003ede:	f7ff ffdf 	bl	8003ea0 <initialise_semihosting_exts>
 8003ee2:	6820      	ldr	r0, [r4, #0]
 8003ee4:	bd10      	pop	{r4, pc}
 8003ee6:	bf00      	nop
 8003ee8:	200002a4 	.word	0x200002a4

08003eec <initialise_monitor_handles>:
 8003eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	2400      	movs	r4, #0
 8003ef4:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8003f98 <initialise_monitor_handles+0xac>
 8003ef8:	b085      	sub	sp, #20
 8003efa:	f8cd 9004 	str.w	r9, [sp, #4]
 8003efe:	af01      	add	r7, sp, #4
 8003f00:	9303      	str	r3, [sp, #12]
 8003f02:	2501      	movs	r5, #1
 8003f04:	9402      	str	r4, [sp, #8]
 8003f06:	4628      	mov	r0, r5
 8003f08:	4639      	mov	r1, r7
 8003f0a:	beab      	bkpt	0x00ab
 8003f0c:	4605      	mov	r5, r0
 8003f0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003f12:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003f9c <initialise_monitor_handles+0xb0>
 8003f16:	4623      	mov	r3, r4
 8003f18:	4c21      	ldr	r4, [pc, #132]	@ (8003fa0 <initialise_monitor_handles+0xb4>)
 8003f1a:	f8c8 5000 	str.w	r5, [r8]
 8003f1e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8003f22:	3301      	adds	r3, #1
 8003f24:	2b14      	cmp	r3, #20
 8003f26:	d1fa      	bne.n	8003f1e <initialise_monitor_handles+0x32>
 8003f28:	f7ff ffd4 	bl	8003ed4 <_has_ext_stdout_stderr>
 8003f2c:	4d1d      	ldr	r5, [pc, #116]	@ (8003fa4 <initialise_monitor_handles+0xb8>)
 8003f2e:	b1d0      	cbz	r0, 8003f66 <initialise_monitor_handles+0x7a>
 8003f30:	f04f 0a03 	mov.w	sl, #3
 8003f34:	2304      	movs	r3, #4
 8003f36:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f3a:	2601      	movs	r6, #1
 8003f3c:	f8cd a00c 	str.w	sl, [sp, #12]
 8003f40:	9302      	str	r3, [sp, #8]
 8003f42:	4630      	mov	r0, r6
 8003f44:	4639      	mov	r1, r7
 8003f46:	beab      	bkpt	0x00ab
 8003f48:	4683      	mov	fp, r0
 8003f4a:	4b17      	ldr	r3, [pc, #92]	@ (8003fa8 <initialise_monitor_handles+0xbc>)
 8003f4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003f50:	f8c3 b000 	str.w	fp, [r3]
 8003f54:	2308      	movs	r3, #8
 8003f56:	f8cd a00c 	str.w	sl, [sp, #12]
 8003f5a:	9302      	str	r3, [sp, #8]
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	4639      	mov	r1, r7
 8003f60:	beab      	bkpt	0x00ab
 8003f62:	4606      	mov	r6, r0
 8003f64:	602e      	str	r6, [r5, #0]
 8003f66:	2600      	movs	r6, #0
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	6066      	str	r6, [r4, #4]
 8003f6c:	3301      	adds	r3, #1
 8003f6e:	bf02      	ittt	eq
 8003f70:	4b0d      	ldreq	r3, [pc, #52]	@ (8003fa8 <initialise_monitor_handles+0xbc>)
 8003f72:	681b      	ldreq	r3, [r3, #0]
 8003f74:	602b      	streq	r3, [r5, #0]
 8003f76:	f8d8 3000 	ldr.w	r3, [r8]
 8003f7a:	6023      	str	r3, [r4, #0]
 8003f7c:	f7ff ffaa 	bl	8003ed4 <_has_ext_stdout_stderr>
 8003f80:	b130      	cbz	r0, 8003f90 <initialise_monitor_handles+0xa4>
 8003f82:	4b09      	ldr	r3, [pc, #36]	@ (8003fa8 <initialise_monitor_handles+0xbc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003f8a:	682b      	ldr	r3, [r5, #0]
 8003f8c:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003f90:	b005      	add	sp, #20
 8003f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f96:	bf00      	nop
 8003f98:	08005a0a 	.word	0x08005a0a
 8003f9c:	20000504 	.word	0x20000504
 8003fa0:	20000508 	.word	0x20000508
 8003fa4:	200004fc 	.word	0x200004fc
 8003fa8:	20000500 	.word	0x20000500

08003fac <_isatty>:
 8003fac:	b570      	push	{r4, r5, r6, lr}
 8003fae:	f7ff fd85 	bl	8003abc <findslot>
 8003fb2:	2409      	movs	r4, #9
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	b920      	cbnz	r0, 8003fc2 <_isatty+0x16>
 8003fb8:	f000 fb14 	bl	80045e4 <__errno>
 8003fbc:	6004      	str	r4, [r0, #0]
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	bd70      	pop	{r4, r5, r6, pc}
 8003fc2:	4620      	mov	r0, r4
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	beab      	bkpt	0x00ab
 8003fc8:	4604      	mov	r4, r0
 8003fca:	2c01      	cmp	r4, #1
 8003fcc:	4620      	mov	r0, r4
 8003fce:	d0f7      	beq.n	8003fc0 <_isatty+0x14>
 8003fd0:	f000 fb08 	bl	80045e4 <__errno>
 8003fd4:	2513      	movs	r5, #19
 8003fd6:	4604      	mov	r4, r0
 8003fd8:	2600      	movs	r6, #0
 8003fda:	4628      	mov	r0, r5
 8003fdc:	4631      	mov	r1, r6
 8003fde:	beab      	bkpt	0x00ab
 8003fe0:	4605      	mov	r5, r0
 8003fe2:	6025      	str	r5, [r4, #0]
 8003fe4:	e7eb      	b.n	8003fbe <_isatty+0x12>

08003fe6 <atoi>:
 8003fe6:	220a      	movs	r2, #10
 8003fe8:	2100      	movs	r1, #0
 8003fea:	f000 b87b 	b.w	80040e4 <strtol>
	...

08003ff0 <_strtol_l.constprop.0>:
 8003ff0:	2b24      	cmp	r3, #36	@ 0x24
 8003ff2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ff6:	4686      	mov	lr, r0
 8003ff8:	4690      	mov	r8, r2
 8003ffa:	d801      	bhi.n	8004000 <_strtol_l.constprop.0+0x10>
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d106      	bne.n	800400e <_strtol_l.constprop.0+0x1e>
 8004000:	f000 faf0 	bl	80045e4 <__errno>
 8004004:	2316      	movs	r3, #22
 8004006:	6003      	str	r3, [r0, #0]
 8004008:	2000      	movs	r0, #0
 800400a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800400e:	460d      	mov	r5, r1
 8004010:	4833      	ldr	r0, [pc, #204]	@ (80040e0 <_strtol_l.constprop.0+0xf0>)
 8004012:	462a      	mov	r2, r5
 8004014:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004018:	5d06      	ldrb	r6, [r0, r4]
 800401a:	f016 0608 	ands.w	r6, r6, #8
 800401e:	d1f8      	bne.n	8004012 <_strtol_l.constprop.0+0x22>
 8004020:	2c2d      	cmp	r4, #45	@ 0x2d
 8004022:	d12d      	bne.n	8004080 <_strtol_l.constprop.0+0x90>
 8004024:	2601      	movs	r6, #1
 8004026:	782c      	ldrb	r4, [r5, #0]
 8004028:	1c95      	adds	r5, r2, #2
 800402a:	f033 0210 	bics.w	r2, r3, #16
 800402e:	d109      	bne.n	8004044 <_strtol_l.constprop.0+0x54>
 8004030:	2c30      	cmp	r4, #48	@ 0x30
 8004032:	d12a      	bne.n	800408a <_strtol_l.constprop.0+0x9a>
 8004034:	782a      	ldrb	r2, [r5, #0]
 8004036:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800403a:	2a58      	cmp	r2, #88	@ 0x58
 800403c:	d125      	bne.n	800408a <_strtol_l.constprop.0+0x9a>
 800403e:	2310      	movs	r3, #16
 8004040:	786c      	ldrb	r4, [r5, #1]
 8004042:	3502      	adds	r5, #2
 8004044:	2200      	movs	r2, #0
 8004046:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800404a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800404e:	fbbc f9f3 	udiv	r9, ip, r3
 8004052:	4610      	mov	r0, r2
 8004054:	fb03 ca19 	mls	sl, r3, r9, ip
 8004058:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800405c:	2f09      	cmp	r7, #9
 800405e:	d81b      	bhi.n	8004098 <_strtol_l.constprop.0+0xa8>
 8004060:	463c      	mov	r4, r7
 8004062:	42a3      	cmp	r3, r4
 8004064:	dd27      	ble.n	80040b6 <_strtol_l.constprop.0+0xc6>
 8004066:	1c57      	adds	r7, r2, #1
 8004068:	d007      	beq.n	800407a <_strtol_l.constprop.0+0x8a>
 800406a:	4581      	cmp	r9, r0
 800406c:	d320      	bcc.n	80040b0 <_strtol_l.constprop.0+0xc0>
 800406e:	d101      	bne.n	8004074 <_strtol_l.constprop.0+0x84>
 8004070:	45a2      	cmp	sl, r4
 8004072:	db1d      	blt.n	80040b0 <_strtol_l.constprop.0+0xc0>
 8004074:	2201      	movs	r2, #1
 8004076:	fb00 4003 	mla	r0, r0, r3, r4
 800407a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800407e:	e7eb      	b.n	8004058 <_strtol_l.constprop.0+0x68>
 8004080:	2c2b      	cmp	r4, #43	@ 0x2b
 8004082:	bf04      	itt	eq
 8004084:	782c      	ldrbeq	r4, [r5, #0]
 8004086:	1c95      	addeq	r5, r2, #2
 8004088:	e7cf      	b.n	800402a <_strtol_l.constprop.0+0x3a>
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1da      	bne.n	8004044 <_strtol_l.constprop.0+0x54>
 800408e:	2c30      	cmp	r4, #48	@ 0x30
 8004090:	bf0c      	ite	eq
 8004092:	2308      	moveq	r3, #8
 8004094:	230a      	movne	r3, #10
 8004096:	e7d5      	b.n	8004044 <_strtol_l.constprop.0+0x54>
 8004098:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800409c:	2f19      	cmp	r7, #25
 800409e:	d801      	bhi.n	80040a4 <_strtol_l.constprop.0+0xb4>
 80040a0:	3c37      	subs	r4, #55	@ 0x37
 80040a2:	e7de      	b.n	8004062 <_strtol_l.constprop.0+0x72>
 80040a4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80040a8:	2f19      	cmp	r7, #25
 80040aa:	d804      	bhi.n	80040b6 <_strtol_l.constprop.0+0xc6>
 80040ac:	3c57      	subs	r4, #87	@ 0x57
 80040ae:	e7d8      	b.n	8004062 <_strtol_l.constprop.0+0x72>
 80040b0:	f04f 32ff 	mov.w	r2, #4294967295
 80040b4:	e7e1      	b.n	800407a <_strtol_l.constprop.0+0x8a>
 80040b6:	1c53      	adds	r3, r2, #1
 80040b8:	d108      	bne.n	80040cc <_strtol_l.constprop.0+0xdc>
 80040ba:	2322      	movs	r3, #34	@ 0x22
 80040bc:	4660      	mov	r0, ip
 80040be:	f8ce 3000 	str.w	r3, [lr]
 80040c2:	f1b8 0f00 	cmp.w	r8, #0
 80040c6:	d0a0      	beq.n	800400a <_strtol_l.constprop.0+0x1a>
 80040c8:	1e69      	subs	r1, r5, #1
 80040ca:	e006      	b.n	80040da <_strtol_l.constprop.0+0xea>
 80040cc:	b106      	cbz	r6, 80040d0 <_strtol_l.constprop.0+0xe0>
 80040ce:	4240      	negs	r0, r0
 80040d0:	f1b8 0f00 	cmp.w	r8, #0
 80040d4:	d099      	beq.n	800400a <_strtol_l.constprop.0+0x1a>
 80040d6:	2a00      	cmp	r2, #0
 80040d8:	d1f6      	bne.n	80040c8 <_strtol_l.constprop.0+0xd8>
 80040da:	f8c8 1000 	str.w	r1, [r8]
 80040de:	e794      	b.n	800400a <_strtol_l.constprop.0+0x1a>
 80040e0:	08005a0f 	.word	0x08005a0f

080040e4 <strtol>:
 80040e4:	4613      	mov	r3, r2
 80040e6:	460a      	mov	r2, r1
 80040e8:	4601      	mov	r1, r0
 80040ea:	4802      	ldr	r0, [pc, #8]	@ (80040f4 <strtol+0x10>)
 80040ec:	6800      	ldr	r0, [r0, #0]
 80040ee:	f7ff bf7f 	b.w	8003ff0 <_strtol_l.constprop.0>
 80040f2:	bf00      	nop
 80040f4:	200002b8 	.word	0x200002b8

080040f8 <__sflush_r>:
 80040f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80040fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040fe:	0716      	lsls	r6, r2, #28
 8004100:	4605      	mov	r5, r0
 8004102:	460c      	mov	r4, r1
 8004104:	d454      	bmi.n	80041b0 <__sflush_r+0xb8>
 8004106:	684b      	ldr	r3, [r1, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	dc02      	bgt.n	8004112 <__sflush_r+0x1a>
 800410c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800410e:	2b00      	cmp	r3, #0
 8004110:	dd48      	ble.n	80041a4 <__sflush_r+0xac>
 8004112:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004114:	2e00      	cmp	r6, #0
 8004116:	d045      	beq.n	80041a4 <__sflush_r+0xac>
 8004118:	2300      	movs	r3, #0
 800411a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800411e:	682f      	ldr	r7, [r5, #0]
 8004120:	6a21      	ldr	r1, [r4, #32]
 8004122:	602b      	str	r3, [r5, #0]
 8004124:	d030      	beq.n	8004188 <__sflush_r+0x90>
 8004126:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004128:	89a3      	ldrh	r3, [r4, #12]
 800412a:	0759      	lsls	r1, r3, #29
 800412c:	d505      	bpl.n	800413a <__sflush_r+0x42>
 800412e:	6863      	ldr	r3, [r4, #4]
 8004130:	1ad2      	subs	r2, r2, r3
 8004132:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004134:	b10b      	cbz	r3, 800413a <__sflush_r+0x42>
 8004136:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004138:	1ad2      	subs	r2, r2, r3
 800413a:	2300      	movs	r3, #0
 800413c:	4628      	mov	r0, r5
 800413e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004140:	6a21      	ldr	r1, [r4, #32]
 8004142:	47b0      	blx	r6
 8004144:	1c43      	adds	r3, r0, #1
 8004146:	89a3      	ldrh	r3, [r4, #12]
 8004148:	d106      	bne.n	8004158 <__sflush_r+0x60>
 800414a:	6829      	ldr	r1, [r5, #0]
 800414c:	291d      	cmp	r1, #29
 800414e:	d82b      	bhi.n	80041a8 <__sflush_r+0xb0>
 8004150:	4a28      	ldr	r2, [pc, #160]	@ (80041f4 <__sflush_r+0xfc>)
 8004152:	410a      	asrs	r2, r1
 8004154:	07d6      	lsls	r6, r2, #31
 8004156:	d427      	bmi.n	80041a8 <__sflush_r+0xb0>
 8004158:	2200      	movs	r2, #0
 800415a:	6062      	str	r2, [r4, #4]
 800415c:	6922      	ldr	r2, [r4, #16]
 800415e:	04d9      	lsls	r1, r3, #19
 8004160:	6022      	str	r2, [r4, #0]
 8004162:	d504      	bpl.n	800416e <__sflush_r+0x76>
 8004164:	1c42      	adds	r2, r0, #1
 8004166:	d101      	bne.n	800416c <__sflush_r+0x74>
 8004168:	682b      	ldr	r3, [r5, #0]
 800416a:	b903      	cbnz	r3, 800416e <__sflush_r+0x76>
 800416c:	6560      	str	r0, [r4, #84]	@ 0x54
 800416e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004170:	602f      	str	r7, [r5, #0]
 8004172:	b1b9      	cbz	r1, 80041a4 <__sflush_r+0xac>
 8004174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004178:	4299      	cmp	r1, r3
 800417a:	d002      	beq.n	8004182 <__sflush_r+0x8a>
 800417c:	4628      	mov	r0, r5
 800417e:	f000 fa5f 	bl	8004640 <_free_r>
 8004182:	2300      	movs	r3, #0
 8004184:	6363      	str	r3, [r4, #52]	@ 0x34
 8004186:	e00d      	b.n	80041a4 <__sflush_r+0xac>
 8004188:	2301      	movs	r3, #1
 800418a:	4628      	mov	r0, r5
 800418c:	47b0      	blx	r6
 800418e:	4602      	mov	r2, r0
 8004190:	1c50      	adds	r0, r2, #1
 8004192:	d1c9      	bne.n	8004128 <__sflush_r+0x30>
 8004194:	682b      	ldr	r3, [r5, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0c6      	beq.n	8004128 <__sflush_r+0x30>
 800419a:	2b1d      	cmp	r3, #29
 800419c:	d001      	beq.n	80041a2 <__sflush_r+0xaa>
 800419e:	2b16      	cmp	r3, #22
 80041a0:	d11d      	bne.n	80041de <__sflush_r+0xe6>
 80041a2:	602f      	str	r7, [r5, #0]
 80041a4:	2000      	movs	r0, #0
 80041a6:	e021      	b.n	80041ec <__sflush_r+0xf4>
 80041a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041ac:	b21b      	sxth	r3, r3
 80041ae:	e01a      	b.n	80041e6 <__sflush_r+0xee>
 80041b0:	690f      	ldr	r7, [r1, #16]
 80041b2:	2f00      	cmp	r7, #0
 80041b4:	d0f6      	beq.n	80041a4 <__sflush_r+0xac>
 80041b6:	0793      	lsls	r3, r2, #30
 80041b8:	bf18      	it	ne
 80041ba:	2300      	movne	r3, #0
 80041bc:	680e      	ldr	r6, [r1, #0]
 80041be:	bf08      	it	eq
 80041c0:	694b      	ldreq	r3, [r1, #20]
 80041c2:	1bf6      	subs	r6, r6, r7
 80041c4:	600f      	str	r7, [r1, #0]
 80041c6:	608b      	str	r3, [r1, #8]
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	ddeb      	ble.n	80041a4 <__sflush_r+0xac>
 80041cc:	4633      	mov	r3, r6
 80041ce:	463a      	mov	r2, r7
 80041d0:	4628      	mov	r0, r5
 80041d2:	6a21      	ldr	r1, [r4, #32]
 80041d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80041d8:	47e0      	blx	ip
 80041da:	2800      	cmp	r0, #0
 80041dc:	dc07      	bgt.n	80041ee <__sflush_r+0xf6>
 80041de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80041e6:	f04f 30ff 	mov.w	r0, #4294967295
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80041ee:	4407      	add	r7, r0
 80041f0:	1a36      	subs	r6, r6, r0
 80041f2:	e7e9      	b.n	80041c8 <__sflush_r+0xd0>
 80041f4:	dfbffffe 	.word	0xdfbffffe

080041f8 <_fflush_r>:
 80041f8:	b538      	push	{r3, r4, r5, lr}
 80041fa:	690b      	ldr	r3, [r1, #16]
 80041fc:	4605      	mov	r5, r0
 80041fe:	460c      	mov	r4, r1
 8004200:	b913      	cbnz	r3, 8004208 <_fflush_r+0x10>
 8004202:	2500      	movs	r5, #0
 8004204:	4628      	mov	r0, r5
 8004206:	bd38      	pop	{r3, r4, r5, pc}
 8004208:	b118      	cbz	r0, 8004212 <_fflush_r+0x1a>
 800420a:	6a03      	ldr	r3, [r0, #32]
 800420c:	b90b      	cbnz	r3, 8004212 <_fflush_r+0x1a>
 800420e:	f000 f8bb 	bl	8004388 <__sinit>
 8004212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f3      	beq.n	8004202 <_fflush_r+0xa>
 800421a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800421c:	07d0      	lsls	r0, r2, #31
 800421e:	d404      	bmi.n	800422a <_fflush_r+0x32>
 8004220:	0599      	lsls	r1, r3, #22
 8004222:	d402      	bmi.n	800422a <_fflush_r+0x32>
 8004224:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004226:	f000 fa08 	bl	800463a <__retarget_lock_acquire_recursive>
 800422a:	4628      	mov	r0, r5
 800422c:	4621      	mov	r1, r4
 800422e:	f7ff ff63 	bl	80040f8 <__sflush_r>
 8004232:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004234:	4605      	mov	r5, r0
 8004236:	07da      	lsls	r2, r3, #31
 8004238:	d4e4      	bmi.n	8004204 <_fflush_r+0xc>
 800423a:	89a3      	ldrh	r3, [r4, #12]
 800423c:	059b      	lsls	r3, r3, #22
 800423e:	d4e1      	bmi.n	8004204 <_fflush_r+0xc>
 8004240:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004242:	f000 f9fb 	bl	800463c <__retarget_lock_release_recursive>
 8004246:	e7dd      	b.n	8004204 <_fflush_r+0xc>

08004248 <fflush>:
 8004248:	4601      	mov	r1, r0
 800424a:	b920      	cbnz	r0, 8004256 <fflush+0xe>
 800424c:	4a04      	ldr	r2, [pc, #16]	@ (8004260 <fflush+0x18>)
 800424e:	4905      	ldr	r1, [pc, #20]	@ (8004264 <fflush+0x1c>)
 8004250:	4805      	ldr	r0, [pc, #20]	@ (8004268 <fflush+0x20>)
 8004252:	f000 b8b1 	b.w	80043b8 <_fwalk_sglue>
 8004256:	4b05      	ldr	r3, [pc, #20]	@ (800426c <fflush+0x24>)
 8004258:	6818      	ldr	r0, [r3, #0]
 800425a:	f7ff bfcd 	b.w	80041f8 <_fflush_r>
 800425e:	bf00      	nop
 8004260:	200002ac 	.word	0x200002ac
 8004264:	080041f9 	.word	0x080041f9
 8004268:	200002bc 	.word	0x200002bc
 800426c:	200002b8 	.word	0x200002b8

08004270 <std>:
 8004270:	2300      	movs	r3, #0
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	e9c0 3300 	strd	r3, r3, [r0]
 800427a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800427e:	6083      	str	r3, [r0, #8]
 8004280:	8181      	strh	r1, [r0, #12]
 8004282:	6643      	str	r3, [r0, #100]	@ 0x64
 8004284:	81c2      	strh	r2, [r0, #14]
 8004286:	6183      	str	r3, [r0, #24]
 8004288:	4619      	mov	r1, r3
 800428a:	2208      	movs	r2, #8
 800428c:	305c      	adds	r0, #92	@ 0x5c
 800428e:	f000 f95a 	bl	8004546 <memset>
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <std+0x58>)
 8004294:	6224      	str	r4, [r4, #32]
 8004296:	6263      	str	r3, [r4, #36]	@ 0x24
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <std+0x5c>)
 800429a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <std+0x60>)
 800429e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <std+0x64>)
 80042a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80042a4:	4b0c      	ldr	r3, [pc, #48]	@ (80042d8 <std+0x68>)
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d006      	beq.n	80042b8 <std+0x48>
 80042aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042ae:	4294      	cmp	r4, r2
 80042b0:	d002      	beq.n	80042b8 <std+0x48>
 80042b2:	33d0      	adds	r3, #208	@ 0xd0
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d105      	bne.n	80042c4 <std+0x54>
 80042b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c0:	f000 b9ba 	b.w	8004638 <__retarget_lock_init_recursive>
 80042c4:	bd10      	pop	{r4, pc}
 80042c6:	bf00      	nop
 80042c8:	080044c1 	.word	0x080044c1
 80042cc:	080044e3 	.word	0x080044e3
 80042d0:	0800451b 	.word	0x0800451b
 80042d4:	0800453f 	.word	0x0800453f
 80042d8:	200005a8 	.word	0x200005a8

080042dc <stdio_exit_handler>:
 80042dc:	4a02      	ldr	r2, [pc, #8]	@ (80042e8 <stdio_exit_handler+0xc>)
 80042de:	4903      	ldr	r1, [pc, #12]	@ (80042ec <stdio_exit_handler+0x10>)
 80042e0:	4803      	ldr	r0, [pc, #12]	@ (80042f0 <stdio_exit_handler+0x14>)
 80042e2:	f000 b869 	b.w	80043b8 <_fwalk_sglue>
 80042e6:	bf00      	nop
 80042e8:	200002ac 	.word	0x200002ac
 80042ec:	080041f9 	.word	0x080041f9
 80042f0:	200002bc 	.word	0x200002bc

080042f4 <cleanup_stdio>:
 80042f4:	6841      	ldr	r1, [r0, #4]
 80042f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <cleanup_stdio+0x34>)
 80042f8:	b510      	push	{r4, lr}
 80042fa:	4299      	cmp	r1, r3
 80042fc:	4604      	mov	r4, r0
 80042fe:	d001      	beq.n	8004304 <cleanup_stdio+0x10>
 8004300:	f7ff ff7a 	bl	80041f8 <_fflush_r>
 8004304:	68a1      	ldr	r1, [r4, #8]
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <cleanup_stdio+0x38>)
 8004308:	4299      	cmp	r1, r3
 800430a:	d002      	beq.n	8004312 <cleanup_stdio+0x1e>
 800430c:	4620      	mov	r0, r4
 800430e:	f7ff ff73 	bl	80041f8 <_fflush_r>
 8004312:	68e1      	ldr	r1, [r4, #12]
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <cleanup_stdio+0x3c>)
 8004316:	4299      	cmp	r1, r3
 8004318:	d004      	beq.n	8004324 <cleanup_stdio+0x30>
 800431a:	4620      	mov	r0, r4
 800431c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004320:	f7ff bf6a 	b.w	80041f8 <_fflush_r>
 8004324:	bd10      	pop	{r4, pc}
 8004326:	bf00      	nop
 8004328:	200005a8 	.word	0x200005a8
 800432c:	20000610 	.word	0x20000610
 8004330:	20000678 	.word	0x20000678

08004334 <global_stdio_init.part.0>:
 8004334:	b510      	push	{r4, lr}
 8004336:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <global_stdio_init.part.0+0x30>)
 8004338:	4c0b      	ldr	r4, [pc, #44]	@ (8004368 <global_stdio_init.part.0+0x34>)
 800433a:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <global_stdio_init.part.0+0x38>)
 800433c:	4620      	mov	r0, r4
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	2104      	movs	r1, #4
 8004342:	2200      	movs	r2, #0
 8004344:	f7ff ff94 	bl	8004270 <std>
 8004348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800434c:	2201      	movs	r2, #1
 800434e:	2109      	movs	r1, #9
 8004350:	f7ff ff8e 	bl	8004270 <std>
 8004354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004358:	2202      	movs	r2, #2
 800435a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435e:	2112      	movs	r1, #18
 8004360:	f7ff bf86 	b.w	8004270 <std>
 8004364:	200006e0 	.word	0x200006e0
 8004368:	200005a8 	.word	0x200005a8
 800436c:	080042dd 	.word	0x080042dd

08004370 <__sfp_lock_acquire>:
 8004370:	4801      	ldr	r0, [pc, #4]	@ (8004378 <__sfp_lock_acquire+0x8>)
 8004372:	f000 b962 	b.w	800463a <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	200006e9 	.word	0x200006e9

0800437c <__sfp_lock_release>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__sfp_lock_release+0x8>)
 800437e:	f000 b95d 	b.w	800463c <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	200006e9 	.word	0x200006e9

08004388 <__sinit>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0
 800438c:	f7ff fff0 	bl	8004370 <__sfp_lock_acquire>
 8004390:	6a23      	ldr	r3, [r4, #32]
 8004392:	b11b      	cbz	r3, 800439c <__sinit+0x14>
 8004394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004398:	f7ff bff0 	b.w	800437c <__sfp_lock_release>
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <__sinit+0x28>)
 800439e:	6223      	str	r3, [r4, #32]
 80043a0:	4b04      	ldr	r3, [pc, #16]	@ (80043b4 <__sinit+0x2c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f5      	bne.n	8004394 <__sinit+0xc>
 80043a8:	f7ff ffc4 	bl	8004334 <global_stdio_init.part.0>
 80043ac:	e7f2      	b.n	8004394 <__sinit+0xc>
 80043ae:	bf00      	nop
 80043b0:	080042f5 	.word	0x080042f5
 80043b4:	200006e0 	.word	0x200006e0

080043b8 <_fwalk_sglue>:
 80043b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043bc:	4607      	mov	r7, r0
 80043be:	4688      	mov	r8, r1
 80043c0:	4614      	mov	r4, r2
 80043c2:	2600      	movs	r6, #0
 80043c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043c8:	f1b9 0901 	subs.w	r9, r9, #1
 80043cc:	d505      	bpl.n	80043da <_fwalk_sglue+0x22>
 80043ce:	6824      	ldr	r4, [r4, #0]
 80043d0:	2c00      	cmp	r4, #0
 80043d2:	d1f7      	bne.n	80043c4 <_fwalk_sglue+0xc>
 80043d4:	4630      	mov	r0, r6
 80043d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043da:	89ab      	ldrh	r3, [r5, #12]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d907      	bls.n	80043f0 <_fwalk_sglue+0x38>
 80043e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80043e4:	3301      	adds	r3, #1
 80043e6:	d003      	beq.n	80043f0 <_fwalk_sglue+0x38>
 80043e8:	4629      	mov	r1, r5
 80043ea:	4638      	mov	r0, r7
 80043ec:	47c0      	blx	r8
 80043ee:	4306      	orrs	r6, r0
 80043f0:	3568      	adds	r5, #104	@ 0x68
 80043f2:	e7e9      	b.n	80043c8 <_fwalk_sglue+0x10>

080043f4 <iprintf>:
 80043f4:	b40f      	push	{r0, r1, r2, r3}
 80043f6:	b507      	push	{r0, r1, r2, lr}
 80043f8:	4906      	ldr	r1, [pc, #24]	@ (8004414 <iprintf+0x20>)
 80043fa:	ab04      	add	r3, sp, #16
 80043fc:	6808      	ldr	r0, [r1, #0]
 80043fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8004402:	6881      	ldr	r1, [r0, #8]
 8004404:	9301      	str	r3, [sp, #4]
 8004406:	f000 fb91 	bl	8004b2c <_vfiprintf_r>
 800440a:	b003      	add	sp, #12
 800440c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004410:	b004      	add	sp, #16
 8004412:	4770      	bx	lr
 8004414:	200002b8 	.word	0x200002b8

08004418 <sniprintf>:
 8004418:	b40c      	push	{r2, r3}
 800441a:	b530      	push	{r4, r5, lr}
 800441c:	4b17      	ldr	r3, [pc, #92]	@ (800447c <sniprintf+0x64>)
 800441e:	1e0c      	subs	r4, r1, #0
 8004420:	681d      	ldr	r5, [r3, #0]
 8004422:	b09d      	sub	sp, #116	@ 0x74
 8004424:	da08      	bge.n	8004438 <sniprintf+0x20>
 8004426:	238b      	movs	r3, #139	@ 0x8b
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	602b      	str	r3, [r5, #0]
 800442e:	b01d      	add	sp, #116	@ 0x74
 8004430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004434:	b002      	add	sp, #8
 8004436:	4770      	bx	lr
 8004438:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800443c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004440:	bf0c      	ite	eq
 8004442:	4623      	moveq	r3, r4
 8004444:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004448:	9304      	str	r3, [sp, #16]
 800444a:	9307      	str	r3, [sp, #28]
 800444c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004450:	9002      	str	r0, [sp, #8]
 8004452:	9006      	str	r0, [sp, #24]
 8004454:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004458:	4628      	mov	r0, r5
 800445a:	ab21      	add	r3, sp, #132	@ 0x84
 800445c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800445e:	a902      	add	r1, sp, #8
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	f000 fa3f 	bl	80048e4 <_svfiprintf_r>
 8004466:	1c43      	adds	r3, r0, #1
 8004468:	bfbc      	itt	lt
 800446a:	238b      	movlt	r3, #139	@ 0x8b
 800446c:	602b      	strlt	r3, [r5, #0]
 800446e:	2c00      	cmp	r4, #0
 8004470:	d0dd      	beq.n	800442e <sniprintf+0x16>
 8004472:	2200      	movs	r2, #0
 8004474:	9b02      	ldr	r3, [sp, #8]
 8004476:	701a      	strb	r2, [r3, #0]
 8004478:	e7d9      	b.n	800442e <sniprintf+0x16>
 800447a:	bf00      	nop
 800447c:	200002b8 	.word	0x200002b8

08004480 <siprintf>:
 8004480:	b40e      	push	{r1, r2, r3}
 8004482:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004486:	b500      	push	{lr}
 8004488:	b09c      	sub	sp, #112	@ 0x70
 800448a:	ab1d      	add	r3, sp, #116	@ 0x74
 800448c:	9002      	str	r0, [sp, #8]
 800448e:	9006      	str	r0, [sp, #24]
 8004490:	9107      	str	r1, [sp, #28]
 8004492:	9104      	str	r1, [sp, #16]
 8004494:	4808      	ldr	r0, [pc, #32]	@ (80044b8 <siprintf+0x38>)
 8004496:	4909      	ldr	r1, [pc, #36]	@ (80044bc <siprintf+0x3c>)
 8004498:	f853 2b04 	ldr.w	r2, [r3], #4
 800449c:	9105      	str	r1, [sp, #20]
 800449e:	6800      	ldr	r0, [r0, #0]
 80044a0:	a902      	add	r1, sp, #8
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	f000 fa1e 	bl	80048e4 <_svfiprintf_r>
 80044a8:	2200      	movs	r2, #0
 80044aa:	9b02      	ldr	r3, [sp, #8]
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	b01c      	add	sp, #112	@ 0x70
 80044b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044b4:	b003      	add	sp, #12
 80044b6:	4770      	bx	lr
 80044b8:	200002b8 	.word	0x200002b8
 80044bc:	ffff0208 	.word	0xffff0208

080044c0 <__sread>:
 80044c0:	b510      	push	{r4, lr}
 80044c2:	460c      	mov	r4, r1
 80044c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044c8:	f000 f868 	bl	800459c <_read_r>
 80044cc:	2800      	cmp	r0, #0
 80044ce:	bfab      	itete	ge
 80044d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80044d2:	89a3      	ldrhlt	r3, [r4, #12]
 80044d4:	181b      	addge	r3, r3, r0
 80044d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80044da:	bfac      	ite	ge
 80044dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80044de:	81a3      	strhlt	r3, [r4, #12]
 80044e0:	bd10      	pop	{r4, pc}

080044e2 <__swrite>:
 80044e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e6:	461f      	mov	r7, r3
 80044e8:	898b      	ldrh	r3, [r1, #12]
 80044ea:	4605      	mov	r5, r0
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	460c      	mov	r4, r1
 80044f0:	4616      	mov	r6, r2
 80044f2:	d505      	bpl.n	8004500 <__swrite+0x1e>
 80044f4:	2302      	movs	r3, #2
 80044f6:	2200      	movs	r2, #0
 80044f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80044fc:	f000 f83c 	bl	8004578 <_lseek_r>
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	4632      	mov	r2, r6
 8004504:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004508:	81a3      	strh	r3, [r4, #12]
 800450a:	4628      	mov	r0, r5
 800450c:	463b      	mov	r3, r7
 800450e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004516:	f000 b853 	b.w	80045c0 <_write_r>

0800451a <__sseek>:
 800451a:	b510      	push	{r4, lr}
 800451c:	460c      	mov	r4, r1
 800451e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004522:	f000 f829 	bl	8004578 <_lseek_r>
 8004526:	1c43      	adds	r3, r0, #1
 8004528:	89a3      	ldrh	r3, [r4, #12]
 800452a:	bf15      	itete	ne
 800452c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800452e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004532:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004536:	81a3      	strheq	r3, [r4, #12]
 8004538:	bf18      	it	ne
 800453a:	81a3      	strhne	r3, [r4, #12]
 800453c:	bd10      	pop	{r4, pc}

0800453e <__sclose>:
 800453e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004542:	f000 b809 	b.w	8004558 <_close_r>

08004546 <memset>:
 8004546:	4603      	mov	r3, r0
 8004548:	4402      	add	r2, r0
 800454a:	4293      	cmp	r3, r2
 800454c:	d100      	bne.n	8004550 <memset+0xa>
 800454e:	4770      	bx	lr
 8004550:	f803 1b01 	strb.w	r1, [r3], #1
 8004554:	e7f9      	b.n	800454a <memset+0x4>
	...

08004558 <_close_r>:
 8004558:	b538      	push	{r3, r4, r5, lr}
 800455a:	2300      	movs	r3, #0
 800455c:	4d05      	ldr	r5, [pc, #20]	@ (8004574 <_close_r+0x1c>)
 800455e:	4604      	mov	r4, r0
 8004560:	4608      	mov	r0, r1
 8004562:	602b      	str	r3, [r5, #0]
 8004564:	f7ff fb7c 	bl	8003c60 <_close>
 8004568:	1c43      	adds	r3, r0, #1
 800456a:	d102      	bne.n	8004572 <_close_r+0x1a>
 800456c:	682b      	ldr	r3, [r5, #0]
 800456e:	b103      	cbz	r3, 8004572 <_close_r+0x1a>
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	bd38      	pop	{r3, r4, r5, pc}
 8004574:	200006e4 	.word	0x200006e4

08004578 <_lseek_r>:
 8004578:	b538      	push	{r3, r4, r5, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	4608      	mov	r0, r1
 800457e:	4611      	mov	r1, r2
 8004580:	2200      	movs	r2, #0
 8004582:	4d05      	ldr	r5, [pc, #20]	@ (8004598 <_lseek_r+0x20>)
 8004584:	602a      	str	r2, [r5, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	f7ff fb2b 	bl	8003be2 <_lseek>
 800458c:	1c43      	adds	r3, r0, #1
 800458e:	d102      	bne.n	8004596 <_lseek_r+0x1e>
 8004590:	682b      	ldr	r3, [r5, #0]
 8004592:	b103      	cbz	r3, 8004596 <_lseek_r+0x1e>
 8004594:	6023      	str	r3, [r4, #0]
 8004596:	bd38      	pop	{r3, r4, r5, pc}
 8004598:	200006e4 	.word	0x200006e4

0800459c <_read_r>:
 800459c:	b538      	push	{r3, r4, r5, lr}
 800459e:	4604      	mov	r4, r0
 80045a0:	4608      	mov	r0, r1
 80045a2:	4611      	mov	r1, r2
 80045a4:	2200      	movs	r2, #0
 80045a6:	4d05      	ldr	r5, [pc, #20]	@ (80045bc <_read_r+0x20>)
 80045a8:	602a      	str	r2, [r5, #0]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f7ff fac3 	bl	8003b36 <_read>
 80045b0:	1c43      	adds	r3, r0, #1
 80045b2:	d102      	bne.n	80045ba <_read_r+0x1e>
 80045b4:	682b      	ldr	r3, [r5, #0]
 80045b6:	b103      	cbz	r3, 80045ba <_read_r+0x1e>
 80045b8:	6023      	str	r3, [r4, #0]
 80045ba:	bd38      	pop	{r3, r4, r5, pc}
 80045bc:	200006e4 	.word	0x200006e4

080045c0 <_write_r>:
 80045c0:	b538      	push	{r3, r4, r5, lr}
 80045c2:	4604      	mov	r4, r0
 80045c4:	4608      	mov	r0, r1
 80045c6:	4611      	mov	r1, r2
 80045c8:	2200      	movs	r2, #0
 80045ca:	4d05      	ldr	r5, [pc, #20]	@ (80045e0 <_write_r+0x20>)
 80045cc:	602a      	str	r2, [r5, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	f7ff fb19 	bl	8003c06 <_write>
 80045d4:	1c43      	adds	r3, r0, #1
 80045d6:	d102      	bne.n	80045de <_write_r+0x1e>
 80045d8:	682b      	ldr	r3, [r5, #0]
 80045da:	b103      	cbz	r3, 80045de <_write_r+0x1e>
 80045dc:	6023      	str	r3, [r4, #0]
 80045de:	bd38      	pop	{r3, r4, r5, pc}
 80045e0:	200006e4 	.word	0x200006e4

080045e4 <__errno>:
 80045e4:	4b01      	ldr	r3, [pc, #4]	@ (80045ec <__errno+0x8>)
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	4770      	bx	lr
 80045ea:	bf00      	nop
 80045ec:	200002b8 	.word	0x200002b8

080045f0 <__libc_init_array>:
 80045f0:	b570      	push	{r4, r5, r6, lr}
 80045f2:	2600      	movs	r6, #0
 80045f4:	4d0c      	ldr	r5, [pc, #48]	@ (8004628 <__libc_init_array+0x38>)
 80045f6:	4c0d      	ldr	r4, [pc, #52]	@ (800462c <__libc_init_array+0x3c>)
 80045f8:	1b64      	subs	r4, r4, r5
 80045fa:	10a4      	asrs	r4, r4, #2
 80045fc:	42a6      	cmp	r6, r4
 80045fe:	d109      	bne.n	8004614 <__libc_init_array+0x24>
 8004600:	f000 fed2 	bl	80053a8 <_init>
 8004604:	2600      	movs	r6, #0
 8004606:	4d0a      	ldr	r5, [pc, #40]	@ (8004630 <__libc_init_array+0x40>)
 8004608:	4c0a      	ldr	r4, [pc, #40]	@ (8004634 <__libc_init_array+0x44>)
 800460a:	1b64      	subs	r4, r4, r5
 800460c:	10a4      	asrs	r4, r4, #2
 800460e:	42a6      	cmp	r6, r4
 8004610:	d105      	bne.n	800461e <__libc_init_array+0x2e>
 8004612:	bd70      	pop	{r4, r5, r6, pc}
 8004614:	f855 3b04 	ldr.w	r3, [r5], #4
 8004618:	4798      	blx	r3
 800461a:	3601      	adds	r6, #1
 800461c:	e7ee      	b.n	80045fc <__libc_init_array+0xc>
 800461e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004622:	4798      	blx	r3
 8004624:	3601      	adds	r6, #1
 8004626:	e7f2      	b.n	800460e <__libc_init_array+0x1e>
 8004628:	08005b4c 	.word	0x08005b4c
 800462c:	08005b4c 	.word	0x08005b4c
 8004630:	08005b4c 	.word	0x08005b4c
 8004634:	08005b50 	.word	0x08005b50

08004638 <__retarget_lock_init_recursive>:
 8004638:	4770      	bx	lr

0800463a <__retarget_lock_acquire_recursive>:
 800463a:	4770      	bx	lr

0800463c <__retarget_lock_release_recursive>:
 800463c:	4770      	bx	lr
	...

08004640 <_free_r>:
 8004640:	b538      	push	{r3, r4, r5, lr}
 8004642:	4605      	mov	r5, r0
 8004644:	2900      	cmp	r1, #0
 8004646:	d040      	beq.n	80046ca <_free_r+0x8a>
 8004648:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800464c:	1f0c      	subs	r4, r1, #4
 800464e:	2b00      	cmp	r3, #0
 8004650:	bfb8      	it	lt
 8004652:	18e4      	addlt	r4, r4, r3
 8004654:	f000 f8de 	bl	8004814 <__malloc_lock>
 8004658:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <_free_r+0x8c>)
 800465a:	6813      	ldr	r3, [r2, #0]
 800465c:	b933      	cbnz	r3, 800466c <_free_r+0x2c>
 800465e:	6063      	str	r3, [r4, #4]
 8004660:	6014      	str	r4, [r2, #0]
 8004662:	4628      	mov	r0, r5
 8004664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004668:	f000 b8da 	b.w	8004820 <__malloc_unlock>
 800466c:	42a3      	cmp	r3, r4
 800466e:	d908      	bls.n	8004682 <_free_r+0x42>
 8004670:	6820      	ldr	r0, [r4, #0]
 8004672:	1821      	adds	r1, r4, r0
 8004674:	428b      	cmp	r3, r1
 8004676:	bf01      	itttt	eq
 8004678:	6819      	ldreq	r1, [r3, #0]
 800467a:	685b      	ldreq	r3, [r3, #4]
 800467c:	1809      	addeq	r1, r1, r0
 800467e:	6021      	streq	r1, [r4, #0]
 8004680:	e7ed      	b.n	800465e <_free_r+0x1e>
 8004682:	461a      	mov	r2, r3
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	b10b      	cbz	r3, 800468c <_free_r+0x4c>
 8004688:	42a3      	cmp	r3, r4
 800468a:	d9fa      	bls.n	8004682 <_free_r+0x42>
 800468c:	6811      	ldr	r1, [r2, #0]
 800468e:	1850      	adds	r0, r2, r1
 8004690:	42a0      	cmp	r0, r4
 8004692:	d10b      	bne.n	80046ac <_free_r+0x6c>
 8004694:	6820      	ldr	r0, [r4, #0]
 8004696:	4401      	add	r1, r0
 8004698:	1850      	adds	r0, r2, r1
 800469a:	4283      	cmp	r3, r0
 800469c:	6011      	str	r1, [r2, #0]
 800469e:	d1e0      	bne.n	8004662 <_free_r+0x22>
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4408      	add	r0, r1
 80046a6:	6010      	str	r0, [r2, #0]
 80046a8:	6053      	str	r3, [r2, #4]
 80046aa:	e7da      	b.n	8004662 <_free_r+0x22>
 80046ac:	d902      	bls.n	80046b4 <_free_r+0x74>
 80046ae:	230c      	movs	r3, #12
 80046b0:	602b      	str	r3, [r5, #0]
 80046b2:	e7d6      	b.n	8004662 <_free_r+0x22>
 80046b4:	6820      	ldr	r0, [r4, #0]
 80046b6:	1821      	adds	r1, r4, r0
 80046b8:	428b      	cmp	r3, r1
 80046ba:	bf01      	itttt	eq
 80046bc:	6819      	ldreq	r1, [r3, #0]
 80046be:	685b      	ldreq	r3, [r3, #4]
 80046c0:	1809      	addeq	r1, r1, r0
 80046c2:	6021      	streq	r1, [r4, #0]
 80046c4:	6063      	str	r3, [r4, #4]
 80046c6:	6054      	str	r4, [r2, #4]
 80046c8:	e7cb      	b.n	8004662 <_free_r+0x22>
 80046ca:	bd38      	pop	{r3, r4, r5, pc}
 80046cc:	200006f0 	.word	0x200006f0

080046d0 <sbrk_aligned>:
 80046d0:	b570      	push	{r4, r5, r6, lr}
 80046d2:	4e0f      	ldr	r6, [pc, #60]	@ (8004710 <sbrk_aligned+0x40>)
 80046d4:	460c      	mov	r4, r1
 80046d6:	6831      	ldr	r1, [r6, #0]
 80046d8:	4605      	mov	r5, r0
 80046da:	b911      	cbnz	r1, 80046e2 <sbrk_aligned+0x12>
 80046dc:	f000 fd7e 	bl	80051dc <_sbrk_r>
 80046e0:	6030      	str	r0, [r6, #0]
 80046e2:	4621      	mov	r1, r4
 80046e4:	4628      	mov	r0, r5
 80046e6:	f000 fd79 	bl	80051dc <_sbrk_r>
 80046ea:	1c43      	adds	r3, r0, #1
 80046ec:	d103      	bne.n	80046f6 <sbrk_aligned+0x26>
 80046ee:	f04f 34ff 	mov.w	r4, #4294967295
 80046f2:	4620      	mov	r0, r4
 80046f4:	bd70      	pop	{r4, r5, r6, pc}
 80046f6:	1cc4      	adds	r4, r0, #3
 80046f8:	f024 0403 	bic.w	r4, r4, #3
 80046fc:	42a0      	cmp	r0, r4
 80046fe:	d0f8      	beq.n	80046f2 <sbrk_aligned+0x22>
 8004700:	1a21      	subs	r1, r4, r0
 8004702:	4628      	mov	r0, r5
 8004704:	f000 fd6a 	bl	80051dc <_sbrk_r>
 8004708:	3001      	adds	r0, #1
 800470a:	d1f2      	bne.n	80046f2 <sbrk_aligned+0x22>
 800470c:	e7ef      	b.n	80046ee <sbrk_aligned+0x1e>
 800470e:	bf00      	nop
 8004710:	200006ec 	.word	0x200006ec

08004714 <_malloc_r>:
 8004714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004718:	1ccd      	adds	r5, r1, #3
 800471a:	f025 0503 	bic.w	r5, r5, #3
 800471e:	3508      	adds	r5, #8
 8004720:	2d0c      	cmp	r5, #12
 8004722:	bf38      	it	cc
 8004724:	250c      	movcc	r5, #12
 8004726:	2d00      	cmp	r5, #0
 8004728:	4606      	mov	r6, r0
 800472a:	db01      	blt.n	8004730 <_malloc_r+0x1c>
 800472c:	42a9      	cmp	r1, r5
 800472e:	d904      	bls.n	800473a <_malloc_r+0x26>
 8004730:	230c      	movs	r3, #12
 8004732:	6033      	str	r3, [r6, #0]
 8004734:	2000      	movs	r0, #0
 8004736:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004810 <_malloc_r+0xfc>
 800473e:	f000 f869 	bl	8004814 <__malloc_lock>
 8004742:	f8d8 3000 	ldr.w	r3, [r8]
 8004746:	461c      	mov	r4, r3
 8004748:	bb44      	cbnz	r4, 800479c <_malloc_r+0x88>
 800474a:	4629      	mov	r1, r5
 800474c:	4630      	mov	r0, r6
 800474e:	f7ff ffbf 	bl	80046d0 <sbrk_aligned>
 8004752:	1c43      	adds	r3, r0, #1
 8004754:	4604      	mov	r4, r0
 8004756:	d158      	bne.n	800480a <_malloc_r+0xf6>
 8004758:	f8d8 4000 	ldr.w	r4, [r8]
 800475c:	4627      	mov	r7, r4
 800475e:	2f00      	cmp	r7, #0
 8004760:	d143      	bne.n	80047ea <_malloc_r+0xd6>
 8004762:	2c00      	cmp	r4, #0
 8004764:	d04b      	beq.n	80047fe <_malloc_r+0xea>
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	4639      	mov	r1, r7
 800476a:	4630      	mov	r0, r6
 800476c:	eb04 0903 	add.w	r9, r4, r3
 8004770:	f000 fd34 	bl	80051dc <_sbrk_r>
 8004774:	4581      	cmp	r9, r0
 8004776:	d142      	bne.n	80047fe <_malloc_r+0xea>
 8004778:	6821      	ldr	r1, [r4, #0]
 800477a:	4630      	mov	r0, r6
 800477c:	1a6d      	subs	r5, r5, r1
 800477e:	4629      	mov	r1, r5
 8004780:	f7ff ffa6 	bl	80046d0 <sbrk_aligned>
 8004784:	3001      	adds	r0, #1
 8004786:	d03a      	beq.n	80047fe <_malloc_r+0xea>
 8004788:	6823      	ldr	r3, [r4, #0]
 800478a:	442b      	add	r3, r5
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	f8d8 3000 	ldr.w	r3, [r8]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	bb62      	cbnz	r2, 80047f0 <_malloc_r+0xdc>
 8004796:	f8c8 7000 	str.w	r7, [r8]
 800479a:	e00f      	b.n	80047bc <_malloc_r+0xa8>
 800479c:	6822      	ldr	r2, [r4, #0]
 800479e:	1b52      	subs	r2, r2, r5
 80047a0:	d420      	bmi.n	80047e4 <_malloc_r+0xd0>
 80047a2:	2a0b      	cmp	r2, #11
 80047a4:	d917      	bls.n	80047d6 <_malloc_r+0xc2>
 80047a6:	1961      	adds	r1, r4, r5
 80047a8:	42a3      	cmp	r3, r4
 80047aa:	6025      	str	r5, [r4, #0]
 80047ac:	bf18      	it	ne
 80047ae:	6059      	strne	r1, [r3, #4]
 80047b0:	6863      	ldr	r3, [r4, #4]
 80047b2:	bf08      	it	eq
 80047b4:	f8c8 1000 	streq.w	r1, [r8]
 80047b8:	5162      	str	r2, [r4, r5]
 80047ba:	604b      	str	r3, [r1, #4]
 80047bc:	4630      	mov	r0, r6
 80047be:	f000 f82f 	bl	8004820 <__malloc_unlock>
 80047c2:	f104 000b 	add.w	r0, r4, #11
 80047c6:	1d23      	adds	r3, r4, #4
 80047c8:	f020 0007 	bic.w	r0, r0, #7
 80047cc:	1ac2      	subs	r2, r0, r3
 80047ce:	bf1c      	itt	ne
 80047d0:	1a1b      	subne	r3, r3, r0
 80047d2:	50a3      	strne	r3, [r4, r2]
 80047d4:	e7af      	b.n	8004736 <_malloc_r+0x22>
 80047d6:	6862      	ldr	r2, [r4, #4]
 80047d8:	42a3      	cmp	r3, r4
 80047da:	bf0c      	ite	eq
 80047dc:	f8c8 2000 	streq.w	r2, [r8]
 80047e0:	605a      	strne	r2, [r3, #4]
 80047e2:	e7eb      	b.n	80047bc <_malloc_r+0xa8>
 80047e4:	4623      	mov	r3, r4
 80047e6:	6864      	ldr	r4, [r4, #4]
 80047e8:	e7ae      	b.n	8004748 <_malloc_r+0x34>
 80047ea:	463c      	mov	r4, r7
 80047ec:	687f      	ldr	r7, [r7, #4]
 80047ee:	e7b6      	b.n	800475e <_malloc_r+0x4a>
 80047f0:	461a      	mov	r2, r3
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	d1fb      	bne.n	80047f0 <_malloc_r+0xdc>
 80047f8:	2300      	movs	r3, #0
 80047fa:	6053      	str	r3, [r2, #4]
 80047fc:	e7de      	b.n	80047bc <_malloc_r+0xa8>
 80047fe:	230c      	movs	r3, #12
 8004800:	4630      	mov	r0, r6
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	f000 f80c 	bl	8004820 <__malloc_unlock>
 8004808:	e794      	b.n	8004734 <_malloc_r+0x20>
 800480a:	6005      	str	r5, [r0, #0]
 800480c:	e7d6      	b.n	80047bc <_malloc_r+0xa8>
 800480e:	bf00      	nop
 8004810:	200006f0 	.word	0x200006f0

08004814 <__malloc_lock>:
 8004814:	4801      	ldr	r0, [pc, #4]	@ (800481c <__malloc_lock+0x8>)
 8004816:	f7ff bf10 	b.w	800463a <__retarget_lock_acquire_recursive>
 800481a:	bf00      	nop
 800481c:	200006e8 	.word	0x200006e8

08004820 <__malloc_unlock>:
 8004820:	4801      	ldr	r0, [pc, #4]	@ (8004828 <__malloc_unlock+0x8>)
 8004822:	f7ff bf0b 	b.w	800463c <__retarget_lock_release_recursive>
 8004826:	bf00      	nop
 8004828:	200006e8 	.word	0x200006e8

0800482c <__ssputs_r>:
 800482c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004830:	461f      	mov	r7, r3
 8004832:	688e      	ldr	r6, [r1, #8]
 8004834:	4682      	mov	sl, r0
 8004836:	42be      	cmp	r6, r7
 8004838:	460c      	mov	r4, r1
 800483a:	4690      	mov	r8, r2
 800483c:	680b      	ldr	r3, [r1, #0]
 800483e:	d82d      	bhi.n	800489c <__ssputs_r+0x70>
 8004840:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004844:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004848:	d026      	beq.n	8004898 <__ssputs_r+0x6c>
 800484a:	6965      	ldr	r5, [r4, #20]
 800484c:	6909      	ldr	r1, [r1, #16]
 800484e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004852:	eba3 0901 	sub.w	r9, r3, r1
 8004856:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800485a:	1c7b      	adds	r3, r7, #1
 800485c:	444b      	add	r3, r9
 800485e:	106d      	asrs	r5, r5, #1
 8004860:	429d      	cmp	r5, r3
 8004862:	bf38      	it	cc
 8004864:	461d      	movcc	r5, r3
 8004866:	0553      	lsls	r3, r2, #21
 8004868:	d527      	bpl.n	80048ba <__ssputs_r+0x8e>
 800486a:	4629      	mov	r1, r5
 800486c:	f7ff ff52 	bl	8004714 <_malloc_r>
 8004870:	4606      	mov	r6, r0
 8004872:	b360      	cbz	r0, 80048ce <__ssputs_r+0xa2>
 8004874:	464a      	mov	r2, r9
 8004876:	6921      	ldr	r1, [r4, #16]
 8004878:	f000 fcce 	bl	8005218 <memcpy>
 800487c:	89a3      	ldrh	r3, [r4, #12]
 800487e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004882:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004886:	81a3      	strh	r3, [r4, #12]
 8004888:	6126      	str	r6, [r4, #16]
 800488a:	444e      	add	r6, r9
 800488c:	6026      	str	r6, [r4, #0]
 800488e:	463e      	mov	r6, r7
 8004890:	6165      	str	r5, [r4, #20]
 8004892:	eba5 0509 	sub.w	r5, r5, r9
 8004896:	60a5      	str	r5, [r4, #8]
 8004898:	42be      	cmp	r6, r7
 800489a:	d900      	bls.n	800489e <__ssputs_r+0x72>
 800489c:	463e      	mov	r6, r7
 800489e:	4632      	mov	r2, r6
 80048a0:	4641      	mov	r1, r8
 80048a2:	6820      	ldr	r0, [r4, #0]
 80048a4:	f000 fc80 	bl	80051a8 <memmove>
 80048a8:	2000      	movs	r0, #0
 80048aa:	68a3      	ldr	r3, [r4, #8]
 80048ac:	1b9b      	subs	r3, r3, r6
 80048ae:	60a3      	str	r3, [r4, #8]
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	4433      	add	r3, r6
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	462a      	mov	r2, r5
 80048bc:	f000 fcba 	bl	8005234 <_realloc_r>
 80048c0:	4606      	mov	r6, r0
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d1e0      	bne.n	8004888 <__ssputs_r+0x5c>
 80048c6:	4650      	mov	r0, sl
 80048c8:	6921      	ldr	r1, [r4, #16]
 80048ca:	f7ff feb9 	bl	8004640 <_free_r>
 80048ce:	230c      	movs	r3, #12
 80048d0:	f8ca 3000 	str.w	r3, [sl]
 80048d4:	89a3      	ldrh	r3, [r4, #12]
 80048d6:	f04f 30ff 	mov.w	r0, #4294967295
 80048da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	e7e9      	b.n	80048b6 <__ssputs_r+0x8a>
	...

080048e4 <_svfiprintf_r>:
 80048e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048e8:	4698      	mov	r8, r3
 80048ea:	898b      	ldrh	r3, [r1, #12]
 80048ec:	4607      	mov	r7, r0
 80048ee:	061b      	lsls	r3, r3, #24
 80048f0:	460d      	mov	r5, r1
 80048f2:	4614      	mov	r4, r2
 80048f4:	b09d      	sub	sp, #116	@ 0x74
 80048f6:	d510      	bpl.n	800491a <_svfiprintf_r+0x36>
 80048f8:	690b      	ldr	r3, [r1, #16]
 80048fa:	b973      	cbnz	r3, 800491a <_svfiprintf_r+0x36>
 80048fc:	2140      	movs	r1, #64	@ 0x40
 80048fe:	f7ff ff09 	bl	8004714 <_malloc_r>
 8004902:	6028      	str	r0, [r5, #0]
 8004904:	6128      	str	r0, [r5, #16]
 8004906:	b930      	cbnz	r0, 8004916 <_svfiprintf_r+0x32>
 8004908:	230c      	movs	r3, #12
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	f04f 30ff 	mov.w	r0, #4294967295
 8004910:	b01d      	add	sp, #116	@ 0x74
 8004912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004916:	2340      	movs	r3, #64	@ 0x40
 8004918:	616b      	str	r3, [r5, #20]
 800491a:	2300      	movs	r3, #0
 800491c:	9309      	str	r3, [sp, #36]	@ 0x24
 800491e:	2320      	movs	r3, #32
 8004920:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004924:	2330      	movs	r3, #48	@ 0x30
 8004926:	f04f 0901 	mov.w	r9, #1
 800492a:	f8cd 800c 	str.w	r8, [sp, #12]
 800492e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004ac8 <_svfiprintf_r+0x1e4>
 8004932:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004936:	4623      	mov	r3, r4
 8004938:	469a      	mov	sl, r3
 800493a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800493e:	b10a      	cbz	r2, 8004944 <_svfiprintf_r+0x60>
 8004940:	2a25      	cmp	r2, #37	@ 0x25
 8004942:	d1f9      	bne.n	8004938 <_svfiprintf_r+0x54>
 8004944:	ebba 0b04 	subs.w	fp, sl, r4
 8004948:	d00b      	beq.n	8004962 <_svfiprintf_r+0x7e>
 800494a:	465b      	mov	r3, fp
 800494c:	4622      	mov	r2, r4
 800494e:	4629      	mov	r1, r5
 8004950:	4638      	mov	r0, r7
 8004952:	f7ff ff6b 	bl	800482c <__ssputs_r>
 8004956:	3001      	adds	r0, #1
 8004958:	f000 80a7 	beq.w	8004aaa <_svfiprintf_r+0x1c6>
 800495c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800495e:	445a      	add	r2, fp
 8004960:	9209      	str	r2, [sp, #36]	@ 0x24
 8004962:	f89a 3000 	ldrb.w	r3, [sl]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f000 809f 	beq.w	8004aaa <_svfiprintf_r+0x1c6>
 800496c:	2300      	movs	r3, #0
 800496e:	f04f 32ff 	mov.w	r2, #4294967295
 8004972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004976:	f10a 0a01 	add.w	sl, sl, #1
 800497a:	9304      	str	r3, [sp, #16]
 800497c:	9307      	str	r3, [sp, #28]
 800497e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004982:	931a      	str	r3, [sp, #104]	@ 0x68
 8004984:	4654      	mov	r4, sl
 8004986:	2205      	movs	r2, #5
 8004988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498c:	484e      	ldr	r0, [pc, #312]	@ (8004ac8 <_svfiprintf_r+0x1e4>)
 800498e:	f000 fc35 	bl	80051fc <memchr>
 8004992:	9a04      	ldr	r2, [sp, #16]
 8004994:	b9d8      	cbnz	r0, 80049ce <_svfiprintf_r+0xea>
 8004996:	06d0      	lsls	r0, r2, #27
 8004998:	bf44      	itt	mi
 800499a:	2320      	movmi	r3, #32
 800499c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049a0:	0711      	lsls	r1, r2, #28
 80049a2:	bf44      	itt	mi
 80049a4:	232b      	movmi	r3, #43	@ 0x2b
 80049a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80049aa:	f89a 3000 	ldrb.w	r3, [sl]
 80049ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80049b0:	d015      	beq.n	80049de <_svfiprintf_r+0xfa>
 80049b2:	4654      	mov	r4, sl
 80049b4:	2000      	movs	r0, #0
 80049b6:	f04f 0c0a 	mov.w	ip, #10
 80049ba:	9a07      	ldr	r2, [sp, #28]
 80049bc:	4621      	mov	r1, r4
 80049be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049c2:	3b30      	subs	r3, #48	@ 0x30
 80049c4:	2b09      	cmp	r3, #9
 80049c6:	d94b      	bls.n	8004a60 <_svfiprintf_r+0x17c>
 80049c8:	b1b0      	cbz	r0, 80049f8 <_svfiprintf_r+0x114>
 80049ca:	9207      	str	r2, [sp, #28]
 80049cc:	e014      	b.n	80049f8 <_svfiprintf_r+0x114>
 80049ce:	eba0 0308 	sub.w	r3, r0, r8
 80049d2:	fa09 f303 	lsl.w	r3, r9, r3
 80049d6:	4313      	orrs	r3, r2
 80049d8:	46a2      	mov	sl, r4
 80049da:	9304      	str	r3, [sp, #16]
 80049dc:	e7d2      	b.n	8004984 <_svfiprintf_r+0xa0>
 80049de:	9b03      	ldr	r3, [sp, #12]
 80049e0:	1d19      	adds	r1, r3, #4
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	9103      	str	r1, [sp, #12]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bfbb      	ittet	lt
 80049ea:	425b      	neglt	r3, r3
 80049ec:	f042 0202 	orrlt.w	r2, r2, #2
 80049f0:	9307      	strge	r3, [sp, #28]
 80049f2:	9307      	strlt	r3, [sp, #28]
 80049f4:	bfb8      	it	lt
 80049f6:	9204      	strlt	r2, [sp, #16]
 80049f8:	7823      	ldrb	r3, [r4, #0]
 80049fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80049fc:	d10a      	bne.n	8004a14 <_svfiprintf_r+0x130>
 80049fe:	7863      	ldrb	r3, [r4, #1]
 8004a00:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a02:	d132      	bne.n	8004a6a <_svfiprintf_r+0x186>
 8004a04:	9b03      	ldr	r3, [sp, #12]
 8004a06:	3402      	adds	r4, #2
 8004a08:	1d1a      	adds	r2, r3, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	9203      	str	r2, [sp, #12]
 8004a0e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004a12:	9305      	str	r3, [sp, #20]
 8004a14:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004acc <_svfiprintf_r+0x1e8>
 8004a18:	2203      	movs	r2, #3
 8004a1a:	4650      	mov	r0, sl
 8004a1c:	7821      	ldrb	r1, [r4, #0]
 8004a1e:	f000 fbed 	bl	80051fc <memchr>
 8004a22:	b138      	cbz	r0, 8004a34 <_svfiprintf_r+0x150>
 8004a24:	2240      	movs	r2, #64	@ 0x40
 8004a26:	9b04      	ldr	r3, [sp, #16]
 8004a28:	eba0 000a 	sub.w	r0, r0, sl
 8004a2c:	4082      	lsls	r2, r0
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	3401      	adds	r4, #1
 8004a32:	9304      	str	r3, [sp, #16]
 8004a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a38:	2206      	movs	r2, #6
 8004a3a:	4825      	ldr	r0, [pc, #148]	@ (8004ad0 <_svfiprintf_r+0x1ec>)
 8004a3c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004a40:	f000 fbdc 	bl	80051fc <memchr>
 8004a44:	2800      	cmp	r0, #0
 8004a46:	d036      	beq.n	8004ab6 <_svfiprintf_r+0x1d2>
 8004a48:	4b22      	ldr	r3, [pc, #136]	@ (8004ad4 <_svfiprintf_r+0x1f0>)
 8004a4a:	bb1b      	cbnz	r3, 8004a94 <_svfiprintf_r+0x1b0>
 8004a4c:	9b03      	ldr	r3, [sp, #12]
 8004a4e:	3307      	adds	r3, #7
 8004a50:	f023 0307 	bic.w	r3, r3, #7
 8004a54:	3308      	adds	r3, #8
 8004a56:	9303      	str	r3, [sp, #12]
 8004a58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a5a:	4433      	add	r3, r6
 8004a5c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a5e:	e76a      	b.n	8004936 <_svfiprintf_r+0x52>
 8004a60:	460c      	mov	r4, r1
 8004a62:	2001      	movs	r0, #1
 8004a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8004a68:	e7a8      	b.n	80049bc <_svfiprintf_r+0xd8>
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	f04f 0c0a 	mov.w	ip, #10
 8004a70:	4619      	mov	r1, r3
 8004a72:	3401      	adds	r4, #1
 8004a74:	9305      	str	r3, [sp, #20]
 8004a76:	4620      	mov	r0, r4
 8004a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a7c:	3a30      	subs	r2, #48	@ 0x30
 8004a7e:	2a09      	cmp	r2, #9
 8004a80:	d903      	bls.n	8004a8a <_svfiprintf_r+0x1a6>
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d0c6      	beq.n	8004a14 <_svfiprintf_r+0x130>
 8004a86:	9105      	str	r1, [sp, #20]
 8004a88:	e7c4      	b.n	8004a14 <_svfiprintf_r+0x130>
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a92:	e7f0      	b.n	8004a76 <_svfiprintf_r+0x192>
 8004a94:	ab03      	add	r3, sp, #12
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	462a      	mov	r2, r5
 8004a9a:	4638      	mov	r0, r7
 8004a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ad8 <_svfiprintf_r+0x1f4>)
 8004a9e:	a904      	add	r1, sp, #16
 8004aa0:	f3af 8000 	nop.w
 8004aa4:	1c42      	adds	r2, r0, #1
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	d1d6      	bne.n	8004a58 <_svfiprintf_r+0x174>
 8004aaa:	89ab      	ldrh	r3, [r5, #12]
 8004aac:	065b      	lsls	r3, r3, #25
 8004aae:	f53f af2d 	bmi.w	800490c <_svfiprintf_r+0x28>
 8004ab2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ab4:	e72c      	b.n	8004910 <_svfiprintf_r+0x2c>
 8004ab6:	ab03      	add	r3, sp, #12
 8004ab8:	9300      	str	r3, [sp, #0]
 8004aba:	462a      	mov	r2, r5
 8004abc:	4638      	mov	r0, r7
 8004abe:	4b06      	ldr	r3, [pc, #24]	@ (8004ad8 <_svfiprintf_r+0x1f4>)
 8004ac0:	a904      	add	r1, sp, #16
 8004ac2:	f000 f9bd 	bl	8004e40 <_printf_i>
 8004ac6:	e7ed      	b.n	8004aa4 <_svfiprintf_r+0x1c0>
 8004ac8:	08005b0f 	.word	0x08005b0f
 8004acc:	08005b15 	.word	0x08005b15
 8004ad0:	08005b19 	.word	0x08005b19
 8004ad4:	00000000 	.word	0x00000000
 8004ad8:	0800482d 	.word	0x0800482d

08004adc <__sfputc_r>:
 8004adc:	6893      	ldr	r3, [r2, #8]
 8004ade:	b410      	push	{r4}
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	6093      	str	r3, [r2, #8]
 8004ae6:	da07      	bge.n	8004af8 <__sfputc_r+0x1c>
 8004ae8:	6994      	ldr	r4, [r2, #24]
 8004aea:	42a3      	cmp	r3, r4
 8004aec:	db01      	blt.n	8004af2 <__sfputc_r+0x16>
 8004aee:	290a      	cmp	r1, #10
 8004af0:	d102      	bne.n	8004af8 <__sfputc_r+0x1c>
 8004af2:	bc10      	pop	{r4}
 8004af4:	f000 bac4 	b.w	8005080 <__swbuf_r>
 8004af8:	6813      	ldr	r3, [r2, #0]
 8004afa:	1c58      	adds	r0, r3, #1
 8004afc:	6010      	str	r0, [r2, #0]
 8004afe:	7019      	strb	r1, [r3, #0]
 8004b00:	4608      	mov	r0, r1
 8004b02:	bc10      	pop	{r4}
 8004b04:	4770      	bx	lr

08004b06 <__sfputs_r>:
 8004b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b08:	4606      	mov	r6, r0
 8004b0a:	460f      	mov	r7, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	18d5      	adds	r5, r2, r3
 8004b10:	42ac      	cmp	r4, r5
 8004b12:	d101      	bne.n	8004b18 <__sfputs_r+0x12>
 8004b14:	2000      	movs	r0, #0
 8004b16:	e007      	b.n	8004b28 <__sfputs_r+0x22>
 8004b18:	463a      	mov	r2, r7
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b20:	f7ff ffdc 	bl	8004adc <__sfputc_r>
 8004b24:	1c43      	adds	r3, r0, #1
 8004b26:	d1f3      	bne.n	8004b10 <__sfputs_r+0xa>
 8004b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004b2c <_vfiprintf_r>:
 8004b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b30:	460d      	mov	r5, r1
 8004b32:	4614      	mov	r4, r2
 8004b34:	4698      	mov	r8, r3
 8004b36:	4606      	mov	r6, r0
 8004b38:	b09d      	sub	sp, #116	@ 0x74
 8004b3a:	b118      	cbz	r0, 8004b44 <_vfiprintf_r+0x18>
 8004b3c:	6a03      	ldr	r3, [r0, #32]
 8004b3e:	b90b      	cbnz	r3, 8004b44 <_vfiprintf_r+0x18>
 8004b40:	f7ff fc22 	bl	8004388 <__sinit>
 8004b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b46:	07d9      	lsls	r1, r3, #31
 8004b48:	d405      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b4a:	89ab      	ldrh	r3, [r5, #12]
 8004b4c:	059a      	lsls	r2, r3, #22
 8004b4e:	d402      	bmi.n	8004b56 <_vfiprintf_r+0x2a>
 8004b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b52:	f7ff fd72 	bl	800463a <__retarget_lock_acquire_recursive>
 8004b56:	89ab      	ldrh	r3, [r5, #12]
 8004b58:	071b      	lsls	r3, r3, #28
 8004b5a:	d501      	bpl.n	8004b60 <_vfiprintf_r+0x34>
 8004b5c:	692b      	ldr	r3, [r5, #16]
 8004b5e:	b99b      	cbnz	r3, 8004b88 <_vfiprintf_r+0x5c>
 8004b60:	4629      	mov	r1, r5
 8004b62:	4630      	mov	r0, r6
 8004b64:	f000 faca 	bl	80050fc <__swsetup_r>
 8004b68:	b170      	cbz	r0, 8004b88 <_vfiprintf_r+0x5c>
 8004b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004b6c:	07dc      	lsls	r4, r3, #31
 8004b6e:	d504      	bpl.n	8004b7a <_vfiprintf_r+0x4e>
 8004b70:	f04f 30ff 	mov.w	r0, #4294967295
 8004b74:	b01d      	add	sp, #116	@ 0x74
 8004b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7a:	89ab      	ldrh	r3, [r5, #12]
 8004b7c:	0598      	lsls	r0, r3, #22
 8004b7e:	d4f7      	bmi.n	8004b70 <_vfiprintf_r+0x44>
 8004b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004b82:	f7ff fd5b 	bl	800463c <__retarget_lock_release_recursive>
 8004b86:	e7f3      	b.n	8004b70 <_vfiprintf_r+0x44>
 8004b88:	2300      	movs	r3, #0
 8004b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b8c:	2320      	movs	r3, #32
 8004b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004b92:	2330      	movs	r3, #48	@ 0x30
 8004b94:	f04f 0901 	mov.w	r9, #1
 8004b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004d48 <_vfiprintf_r+0x21c>
 8004ba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ba4:	4623      	mov	r3, r4
 8004ba6:	469a      	mov	sl, r3
 8004ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bac:	b10a      	cbz	r2, 8004bb2 <_vfiprintf_r+0x86>
 8004bae:	2a25      	cmp	r2, #37	@ 0x25
 8004bb0:	d1f9      	bne.n	8004ba6 <_vfiprintf_r+0x7a>
 8004bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8004bb6:	d00b      	beq.n	8004bd0 <_vfiprintf_r+0xa4>
 8004bb8:	465b      	mov	r3, fp
 8004bba:	4622      	mov	r2, r4
 8004bbc:	4629      	mov	r1, r5
 8004bbe:	4630      	mov	r0, r6
 8004bc0:	f7ff ffa1 	bl	8004b06 <__sfputs_r>
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	f000 80a7 	beq.w	8004d18 <_vfiprintf_r+0x1ec>
 8004bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bcc:	445a      	add	r2, fp
 8004bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 809f 	beq.w	8004d18 <_vfiprintf_r+0x1ec>
 8004bda:	2300      	movs	r3, #0
 8004bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8004be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004be4:	f10a 0a01 	add.w	sl, sl, #1
 8004be8:	9304      	str	r3, [sp, #16]
 8004bea:	9307      	str	r3, [sp, #28]
 8004bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004bf2:	4654      	mov	r4, sl
 8004bf4:	2205      	movs	r2, #5
 8004bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bfa:	4853      	ldr	r0, [pc, #332]	@ (8004d48 <_vfiprintf_r+0x21c>)
 8004bfc:	f000 fafe 	bl	80051fc <memchr>
 8004c00:	9a04      	ldr	r2, [sp, #16]
 8004c02:	b9d8      	cbnz	r0, 8004c3c <_vfiprintf_r+0x110>
 8004c04:	06d1      	lsls	r1, r2, #27
 8004c06:	bf44      	itt	mi
 8004c08:	2320      	movmi	r3, #32
 8004c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c0e:	0713      	lsls	r3, r2, #28
 8004c10:	bf44      	itt	mi
 8004c12:	232b      	movmi	r3, #43	@ 0x2b
 8004c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c18:	f89a 3000 	ldrb.w	r3, [sl]
 8004c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c1e:	d015      	beq.n	8004c4c <_vfiprintf_r+0x120>
 8004c20:	4654      	mov	r4, sl
 8004c22:	2000      	movs	r0, #0
 8004c24:	f04f 0c0a 	mov.w	ip, #10
 8004c28:	9a07      	ldr	r2, [sp, #28]
 8004c2a:	4621      	mov	r1, r4
 8004c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c30:	3b30      	subs	r3, #48	@ 0x30
 8004c32:	2b09      	cmp	r3, #9
 8004c34:	d94b      	bls.n	8004cce <_vfiprintf_r+0x1a2>
 8004c36:	b1b0      	cbz	r0, 8004c66 <_vfiprintf_r+0x13a>
 8004c38:	9207      	str	r2, [sp, #28]
 8004c3a:	e014      	b.n	8004c66 <_vfiprintf_r+0x13a>
 8004c3c:	eba0 0308 	sub.w	r3, r0, r8
 8004c40:	fa09 f303 	lsl.w	r3, r9, r3
 8004c44:	4313      	orrs	r3, r2
 8004c46:	46a2      	mov	sl, r4
 8004c48:	9304      	str	r3, [sp, #16]
 8004c4a:	e7d2      	b.n	8004bf2 <_vfiprintf_r+0xc6>
 8004c4c:	9b03      	ldr	r3, [sp, #12]
 8004c4e:	1d19      	adds	r1, r3, #4
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	9103      	str	r1, [sp, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bfbb      	ittet	lt
 8004c58:	425b      	neglt	r3, r3
 8004c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8004c5e:	9307      	strge	r3, [sp, #28]
 8004c60:	9307      	strlt	r3, [sp, #28]
 8004c62:	bfb8      	it	lt
 8004c64:	9204      	strlt	r2, [sp, #16]
 8004c66:	7823      	ldrb	r3, [r4, #0]
 8004c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c6a:	d10a      	bne.n	8004c82 <_vfiprintf_r+0x156>
 8004c6c:	7863      	ldrb	r3, [r4, #1]
 8004c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c70:	d132      	bne.n	8004cd8 <_vfiprintf_r+0x1ac>
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	3402      	adds	r4, #2
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	9203      	str	r2, [sp, #12]
 8004c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c80:	9305      	str	r3, [sp, #20]
 8004c82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004d4c <_vfiprintf_r+0x220>
 8004c86:	2203      	movs	r2, #3
 8004c88:	4650      	mov	r0, sl
 8004c8a:	7821      	ldrb	r1, [r4, #0]
 8004c8c:	f000 fab6 	bl	80051fc <memchr>
 8004c90:	b138      	cbz	r0, 8004ca2 <_vfiprintf_r+0x176>
 8004c92:	2240      	movs	r2, #64	@ 0x40
 8004c94:	9b04      	ldr	r3, [sp, #16]
 8004c96:	eba0 000a 	sub.w	r0, r0, sl
 8004c9a:	4082      	lsls	r2, r0
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	3401      	adds	r4, #1
 8004ca0:	9304      	str	r3, [sp, #16]
 8004ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ca6:	2206      	movs	r2, #6
 8004ca8:	4829      	ldr	r0, [pc, #164]	@ (8004d50 <_vfiprintf_r+0x224>)
 8004caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cae:	f000 faa5 	bl	80051fc <memchr>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	d03f      	beq.n	8004d36 <_vfiprintf_r+0x20a>
 8004cb6:	4b27      	ldr	r3, [pc, #156]	@ (8004d54 <_vfiprintf_r+0x228>)
 8004cb8:	bb1b      	cbnz	r3, 8004d02 <_vfiprintf_r+0x1d6>
 8004cba:	9b03      	ldr	r3, [sp, #12]
 8004cbc:	3307      	adds	r3, #7
 8004cbe:	f023 0307 	bic.w	r3, r3, #7
 8004cc2:	3308      	adds	r3, #8
 8004cc4:	9303      	str	r3, [sp, #12]
 8004cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc8:	443b      	add	r3, r7
 8004cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ccc:	e76a      	b.n	8004ba4 <_vfiprintf_r+0x78>
 8004cce:	460c      	mov	r4, r1
 8004cd0:	2001      	movs	r0, #1
 8004cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cd6:	e7a8      	b.n	8004c2a <_vfiprintf_r+0xfe>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	f04f 0c0a 	mov.w	ip, #10
 8004cde:	4619      	mov	r1, r3
 8004ce0:	3401      	adds	r4, #1
 8004ce2:	9305      	str	r3, [sp, #20]
 8004ce4:	4620      	mov	r0, r4
 8004ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cea:	3a30      	subs	r2, #48	@ 0x30
 8004cec:	2a09      	cmp	r2, #9
 8004cee:	d903      	bls.n	8004cf8 <_vfiprintf_r+0x1cc>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0c6      	beq.n	8004c82 <_vfiprintf_r+0x156>
 8004cf4:	9105      	str	r1, [sp, #20]
 8004cf6:	e7c4      	b.n	8004c82 <_vfiprintf_r+0x156>
 8004cf8:	4604      	mov	r4, r0
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d00:	e7f0      	b.n	8004ce4 <_vfiprintf_r+0x1b8>
 8004d02:	ab03      	add	r3, sp, #12
 8004d04:	9300      	str	r3, [sp, #0]
 8004d06:	462a      	mov	r2, r5
 8004d08:	4630      	mov	r0, r6
 8004d0a:	4b13      	ldr	r3, [pc, #76]	@ (8004d58 <_vfiprintf_r+0x22c>)
 8004d0c:	a904      	add	r1, sp, #16
 8004d0e:	f3af 8000 	nop.w
 8004d12:	4607      	mov	r7, r0
 8004d14:	1c78      	adds	r0, r7, #1
 8004d16:	d1d6      	bne.n	8004cc6 <_vfiprintf_r+0x19a>
 8004d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d1a:	07d9      	lsls	r1, r3, #31
 8004d1c:	d405      	bmi.n	8004d2a <_vfiprintf_r+0x1fe>
 8004d1e:	89ab      	ldrh	r3, [r5, #12]
 8004d20:	059a      	lsls	r2, r3, #22
 8004d22:	d402      	bmi.n	8004d2a <_vfiprintf_r+0x1fe>
 8004d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d26:	f7ff fc89 	bl	800463c <__retarget_lock_release_recursive>
 8004d2a:	89ab      	ldrh	r3, [r5, #12]
 8004d2c:	065b      	lsls	r3, r3, #25
 8004d2e:	f53f af1f 	bmi.w	8004b70 <_vfiprintf_r+0x44>
 8004d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d34:	e71e      	b.n	8004b74 <_vfiprintf_r+0x48>
 8004d36:	ab03      	add	r3, sp, #12
 8004d38:	9300      	str	r3, [sp, #0]
 8004d3a:	462a      	mov	r2, r5
 8004d3c:	4630      	mov	r0, r6
 8004d3e:	4b06      	ldr	r3, [pc, #24]	@ (8004d58 <_vfiprintf_r+0x22c>)
 8004d40:	a904      	add	r1, sp, #16
 8004d42:	f000 f87d 	bl	8004e40 <_printf_i>
 8004d46:	e7e4      	b.n	8004d12 <_vfiprintf_r+0x1e6>
 8004d48:	08005b0f 	.word	0x08005b0f
 8004d4c:	08005b15 	.word	0x08005b15
 8004d50:	08005b19 	.word	0x08005b19
 8004d54:	00000000 	.word	0x00000000
 8004d58:	08004b07 	.word	0x08004b07

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4616      	mov	r6, r2
 8004d62:	4698      	mov	r8, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4607      	mov	r7, r0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bfb8      	it	lt
 8004d6e:	4613      	movlt	r3, r2
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004d76:	460c      	mov	r4, r1
 8004d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004d7c:	b10a      	cbz	r2, 8004d82 <_printf_common+0x26>
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	0699      	lsls	r1, r3, #26
 8004d86:	bf42      	ittt	mi
 8004d88:	6833      	ldrmi	r3, [r6, #0]
 8004d8a:	3302      	addmi	r3, #2
 8004d8c:	6033      	strmi	r3, [r6, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	f015 0506 	ands.w	r5, r5, #6
 8004d94:	d106      	bne.n	8004da4 <_printf_common+0x48>
 8004d96:	f104 0a19 	add.w	sl, r4, #25
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	6832      	ldr	r2, [r6, #0]
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dc2b      	bgt.n	8004dfc <_printf_common+0xa0>
 8004da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	3b00      	subs	r3, #0
 8004dac:	bf18      	it	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	0692      	lsls	r2, r2, #26
 8004db2:	d430      	bmi.n	8004e16 <_printf_common+0xba>
 8004db4:	4641      	mov	r1, r8
 8004db6:	4638      	mov	r0, r7
 8004db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004dbc:	47c8      	blx	r9
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d023      	beq.n	8004e0a <_printf_common+0xae>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	bf14      	ite	ne
 8004dce:	2500      	movne	r5, #0
 8004dd0:	6833      	ldreq	r3, [r6, #0]
 8004dd2:	f04f 0600 	mov.w	r6, #0
 8004dd6:	bf08      	it	eq
 8004dd8:	68e5      	ldreq	r5, [r4, #12]
 8004dda:	f104 041a 	add.w	r4, r4, #26
 8004dde:	bf08      	it	eq
 8004de0:	1aed      	subeq	r5, r5, r3
 8004de2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004de6:	bf08      	it	eq
 8004de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004dec:	4293      	cmp	r3, r2
 8004dee:	bfc4      	itt	gt
 8004df0:	1a9b      	subgt	r3, r3, r2
 8004df2:	18ed      	addgt	r5, r5, r3
 8004df4:	42b5      	cmp	r5, r6
 8004df6:	d11a      	bne.n	8004e2e <_printf_common+0xd2>
 8004df8:	2000      	movs	r0, #0
 8004dfa:	e008      	b.n	8004e0e <_printf_common+0xb2>
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4652      	mov	r2, sl
 8004e00:	4641      	mov	r1, r8
 8004e02:	4638      	mov	r0, r7
 8004e04:	47c8      	blx	r9
 8004e06:	3001      	adds	r0, #1
 8004e08:	d103      	bne.n	8004e12 <_printf_common+0xb6>
 8004e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e12:	3501      	adds	r5, #1
 8004e14:	e7c1      	b.n	8004d9a <_printf_common+0x3e>
 8004e16:	2030      	movs	r0, #48	@ 0x30
 8004e18:	18e1      	adds	r1, r4, r3
 8004e1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e1e:	1c5a      	adds	r2, r3, #1
 8004e20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e24:	4422      	add	r2, r4
 8004e26:	3302      	adds	r3, #2
 8004e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e2c:	e7c2      	b.n	8004db4 <_printf_common+0x58>
 8004e2e:	2301      	movs	r3, #1
 8004e30:	4622      	mov	r2, r4
 8004e32:	4641      	mov	r1, r8
 8004e34:	4638      	mov	r0, r7
 8004e36:	47c8      	blx	r9
 8004e38:	3001      	adds	r0, #1
 8004e3a:	d0e6      	beq.n	8004e0a <_printf_common+0xae>
 8004e3c:	3601      	adds	r6, #1
 8004e3e:	e7d9      	b.n	8004df4 <_printf_common+0x98>

08004e40 <_printf_i>:
 8004e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e44:	7e0f      	ldrb	r7, [r1, #24]
 8004e46:	4691      	mov	r9, r2
 8004e48:	2f78      	cmp	r7, #120	@ 0x78
 8004e4a:	4680      	mov	r8, r0
 8004e4c:	460c      	mov	r4, r1
 8004e4e:	469a      	mov	sl, r3
 8004e50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004e52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004e56:	d807      	bhi.n	8004e68 <_printf_i+0x28>
 8004e58:	2f62      	cmp	r7, #98	@ 0x62
 8004e5a:	d80a      	bhi.n	8004e72 <_printf_i+0x32>
 8004e5c:	2f00      	cmp	r7, #0
 8004e5e:	f000 80d3 	beq.w	8005008 <_printf_i+0x1c8>
 8004e62:	2f58      	cmp	r7, #88	@ 0x58
 8004e64:	f000 80ba 	beq.w	8004fdc <_printf_i+0x19c>
 8004e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004e6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004e70:	e03a      	b.n	8004ee8 <_printf_i+0xa8>
 8004e72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004e76:	2b15      	cmp	r3, #21
 8004e78:	d8f6      	bhi.n	8004e68 <_printf_i+0x28>
 8004e7a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e80 <_printf_i+0x40>)
 8004e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e80:	08004ed9 	.word	0x08004ed9
 8004e84:	08004eed 	.word	0x08004eed
 8004e88:	08004e69 	.word	0x08004e69
 8004e8c:	08004e69 	.word	0x08004e69
 8004e90:	08004e69 	.word	0x08004e69
 8004e94:	08004e69 	.word	0x08004e69
 8004e98:	08004eed 	.word	0x08004eed
 8004e9c:	08004e69 	.word	0x08004e69
 8004ea0:	08004e69 	.word	0x08004e69
 8004ea4:	08004e69 	.word	0x08004e69
 8004ea8:	08004e69 	.word	0x08004e69
 8004eac:	08004fef 	.word	0x08004fef
 8004eb0:	08004f17 	.word	0x08004f17
 8004eb4:	08004fa9 	.word	0x08004fa9
 8004eb8:	08004e69 	.word	0x08004e69
 8004ebc:	08004e69 	.word	0x08004e69
 8004ec0:	08005011 	.word	0x08005011
 8004ec4:	08004e69 	.word	0x08004e69
 8004ec8:	08004f17 	.word	0x08004f17
 8004ecc:	08004e69 	.word	0x08004e69
 8004ed0:	08004e69 	.word	0x08004e69
 8004ed4:	08004fb1 	.word	0x08004fb1
 8004ed8:	6833      	ldr	r3, [r6, #0]
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	6032      	str	r2, [r6, #0]
 8004ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e09e      	b.n	800502a <_printf_i+0x1ea>
 8004eec:	6833      	ldr	r3, [r6, #0]
 8004eee:	6820      	ldr	r0, [r4, #0]
 8004ef0:	1d19      	adds	r1, r3, #4
 8004ef2:	6031      	str	r1, [r6, #0]
 8004ef4:	0606      	lsls	r6, r0, #24
 8004ef6:	d501      	bpl.n	8004efc <_printf_i+0xbc>
 8004ef8:	681d      	ldr	r5, [r3, #0]
 8004efa:	e003      	b.n	8004f04 <_printf_i+0xc4>
 8004efc:	0645      	lsls	r5, r0, #25
 8004efe:	d5fb      	bpl.n	8004ef8 <_printf_i+0xb8>
 8004f00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f04:	2d00      	cmp	r5, #0
 8004f06:	da03      	bge.n	8004f10 <_printf_i+0xd0>
 8004f08:	232d      	movs	r3, #45	@ 0x2d
 8004f0a:	426d      	negs	r5, r5
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f10:	230a      	movs	r3, #10
 8004f12:	4859      	ldr	r0, [pc, #356]	@ (8005078 <_printf_i+0x238>)
 8004f14:	e011      	b.n	8004f3a <_printf_i+0xfa>
 8004f16:	6821      	ldr	r1, [r4, #0]
 8004f18:	6833      	ldr	r3, [r6, #0]
 8004f1a:	0608      	lsls	r0, r1, #24
 8004f1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f20:	d402      	bmi.n	8004f28 <_printf_i+0xe8>
 8004f22:	0649      	lsls	r1, r1, #25
 8004f24:	bf48      	it	mi
 8004f26:	b2ad      	uxthmi	r5, r5
 8004f28:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	bf14      	ite	ne
 8004f2e:	230a      	movne	r3, #10
 8004f30:	2308      	moveq	r3, #8
 8004f32:	4851      	ldr	r0, [pc, #324]	@ (8005078 <_printf_i+0x238>)
 8004f34:	2100      	movs	r1, #0
 8004f36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004f3a:	6866      	ldr	r6, [r4, #4]
 8004f3c:	2e00      	cmp	r6, #0
 8004f3e:	bfa8      	it	ge
 8004f40:	6821      	ldrge	r1, [r4, #0]
 8004f42:	60a6      	str	r6, [r4, #8]
 8004f44:	bfa4      	itt	ge
 8004f46:	f021 0104 	bicge.w	r1, r1, #4
 8004f4a:	6021      	strge	r1, [r4, #0]
 8004f4c:	b90d      	cbnz	r5, 8004f52 <_printf_i+0x112>
 8004f4e:	2e00      	cmp	r6, #0
 8004f50:	d04b      	beq.n	8004fea <_printf_i+0x1aa>
 8004f52:	4616      	mov	r6, r2
 8004f54:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f58:	fb03 5711 	mls	r7, r3, r1, r5
 8004f5c:	5dc7      	ldrb	r7, [r0, r7]
 8004f5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f62:	462f      	mov	r7, r5
 8004f64:	42bb      	cmp	r3, r7
 8004f66:	460d      	mov	r5, r1
 8004f68:	d9f4      	bls.n	8004f54 <_printf_i+0x114>
 8004f6a:	2b08      	cmp	r3, #8
 8004f6c:	d10b      	bne.n	8004f86 <_printf_i+0x146>
 8004f6e:	6823      	ldr	r3, [r4, #0]
 8004f70:	07df      	lsls	r7, r3, #31
 8004f72:	d508      	bpl.n	8004f86 <_printf_i+0x146>
 8004f74:	6923      	ldr	r3, [r4, #16]
 8004f76:	6861      	ldr	r1, [r4, #4]
 8004f78:	4299      	cmp	r1, r3
 8004f7a:	bfde      	ittt	le
 8004f7c:	2330      	movle	r3, #48	@ 0x30
 8004f7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f86:	1b92      	subs	r2, r2, r6
 8004f88:	6122      	str	r2, [r4, #16]
 8004f8a:	464b      	mov	r3, r9
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f8cd a000 	str.w	sl, [sp]
 8004f94:	aa03      	add	r2, sp, #12
 8004f96:	f7ff fee1 	bl	8004d5c <_printf_common>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d14a      	bne.n	8005034 <_printf_i+0x1f4>
 8004f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa2:	b004      	add	sp, #16
 8004fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	f043 0320 	orr.w	r3, r3, #32
 8004fae:	6023      	str	r3, [r4, #0]
 8004fb0:	2778      	movs	r7, #120	@ 0x78
 8004fb2:	4832      	ldr	r0, [pc, #200]	@ (800507c <_printf_i+0x23c>)
 8004fb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	6831      	ldr	r1, [r6, #0]
 8004fbc:	061f      	lsls	r7, r3, #24
 8004fbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8004fc2:	d402      	bmi.n	8004fca <_printf_i+0x18a>
 8004fc4:	065f      	lsls	r7, r3, #25
 8004fc6:	bf48      	it	mi
 8004fc8:	b2ad      	uxthmi	r5, r5
 8004fca:	6031      	str	r1, [r6, #0]
 8004fcc:	07d9      	lsls	r1, r3, #31
 8004fce:	bf44      	itt	mi
 8004fd0:	f043 0320 	orrmi.w	r3, r3, #32
 8004fd4:	6023      	strmi	r3, [r4, #0]
 8004fd6:	b11d      	cbz	r5, 8004fe0 <_printf_i+0x1a0>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	e7ab      	b.n	8004f34 <_printf_i+0xf4>
 8004fdc:	4826      	ldr	r0, [pc, #152]	@ (8005078 <_printf_i+0x238>)
 8004fde:	e7e9      	b.n	8004fb4 <_printf_i+0x174>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	f023 0320 	bic.w	r3, r3, #32
 8004fe6:	6023      	str	r3, [r4, #0]
 8004fe8:	e7f6      	b.n	8004fd8 <_printf_i+0x198>
 8004fea:	4616      	mov	r6, r2
 8004fec:	e7bd      	b.n	8004f6a <_printf_i+0x12a>
 8004fee:	6833      	ldr	r3, [r6, #0]
 8004ff0:	6825      	ldr	r5, [r4, #0]
 8004ff2:	1d18      	adds	r0, r3, #4
 8004ff4:	6961      	ldr	r1, [r4, #20]
 8004ff6:	6030      	str	r0, [r6, #0]
 8004ff8:	062e      	lsls	r6, r5, #24
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	d501      	bpl.n	8005002 <_printf_i+0x1c2>
 8004ffe:	6019      	str	r1, [r3, #0]
 8005000:	e002      	b.n	8005008 <_printf_i+0x1c8>
 8005002:	0668      	lsls	r0, r5, #25
 8005004:	d5fb      	bpl.n	8004ffe <_printf_i+0x1be>
 8005006:	8019      	strh	r1, [r3, #0]
 8005008:	2300      	movs	r3, #0
 800500a:	4616      	mov	r6, r2
 800500c:	6123      	str	r3, [r4, #16]
 800500e:	e7bc      	b.n	8004f8a <_printf_i+0x14a>
 8005010:	6833      	ldr	r3, [r6, #0]
 8005012:	2100      	movs	r1, #0
 8005014:	1d1a      	adds	r2, r3, #4
 8005016:	6032      	str	r2, [r6, #0]
 8005018:	681e      	ldr	r6, [r3, #0]
 800501a:	6862      	ldr	r2, [r4, #4]
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f8ed 	bl	80051fc <memchr>
 8005022:	b108      	cbz	r0, 8005028 <_printf_i+0x1e8>
 8005024:	1b80      	subs	r0, r0, r6
 8005026:	6060      	str	r0, [r4, #4]
 8005028:	6863      	ldr	r3, [r4, #4]
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	2300      	movs	r3, #0
 800502e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005032:	e7aa      	b.n	8004f8a <_printf_i+0x14a>
 8005034:	4632      	mov	r2, r6
 8005036:	4649      	mov	r1, r9
 8005038:	4640      	mov	r0, r8
 800503a:	6923      	ldr	r3, [r4, #16]
 800503c:	47d0      	blx	sl
 800503e:	3001      	adds	r0, #1
 8005040:	d0ad      	beq.n	8004f9e <_printf_i+0x15e>
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	079b      	lsls	r3, r3, #30
 8005046:	d413      	bmi.n	8005070 <_printf_i+0x230>
 8005048:	68e0      	ldr	r0, [r4, #12]
 800504a:	9b03      	ldr	r3, [sp, #12]
 800504c:	4298      	cmp	r0, r3
 800504e:	bfb8      	it	lt
 8005050:	4618      	movlt	r0, r3
 8005052:	e7a6      	b.n	8004fa2 <_printf_i+0x162>
 8005054:	2301      	movs	r3, #1
 8005056:	4632      	mov	r2, r6
 8005058:	4649      	mov	r1, r9
 800505a:	4640      	mov	r0, r8
 800505c:	47d0      	blx	sl
 800505e:	3001      	adds	r0, #1
 8005060:	d09d      	beq.n	8004f9e <_printf_i+0x15e>
 8005062:	3501      	adds	r5, #1
 8005064:	68e3      	ldr	r3, [r4, #12]
 8005066:	9903      	ldr	r1, [sp, #12]
 8005068:	1a5b      	subs	r3, r3, r1
 800506a:	42ab      	cmp	r3, r5
 800506c:	dcf2      	bgt.n	8005054 <_printf_i+0x214>
 800506e:	e7eb      	b.n	8005048 <_printf_i+0x208>
 8005070:	2500      	movs	r5, #0
 8005072:	f104 0619 	add.w	r6, r4, #25
 8005076:	e7f5      	b.n	8005064 <_printf_i+0x224>
 8005078:	08005b20 	.word	0x08005b20
 800507c:	08005b31 	.word	0x08005b31

08005080 <__swbuf_r>:
 8005080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005082:	460e      	mov	r6, r1
 8005084:	4614      	mov	r4, r2
 8005086:	4605      	mov	r5, r0
 8005088:	b118      	cbz	r0, 8005092 <__swbuf_r+0x12>
 800508a:	6a03      	ldr	r3, [r0, #32]
 800508c:	b90b      	cbnz	r3, 8005092 <__swbuf_r+0x12>
 800508e:	f7ff f97b 	bl	8004388 <__sinit>
 8005092:	69a3      	ldr	r3, [r4, #24]
 8005094:	60a3      	str	r3, [r4, #8]
 8005096:	89a3      	ldrh	r3, [r4, #12]
 8005098:	071a      	lsls	r2, r3, #28
 800509a:	d501      	bpl.n	80050a0 <__swbuf_r+0x20>
 800509c:	6923      	ldr	r3, [r4, #16]
 800509e:	b943      	cbnz	r3, 80050b2 <__swbuf_r+0x32>
 80050a0:	4621      	mov	r1, r4
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 f82a 	bl	80050fc <__swsetup_r>
 80050a8:	b118      	cbz	r0, 80050b2 <__swbuf_r+0x32>
 80050aa:	f04f 37ff 	mov.w	r7, #4294967295
 80050ae:	4638      	mov	r0, r7
 80050b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b2:	6823      	ldr	r3, [r4, #0]
 80050b4:	6922      	ldr	r2, [r4, #16]
 80050b6:	b2f6      	uxtb	r6, r6
 80050b8:	1a98      	subs	r0, r3, r2
 80050ba:	6963      	ldr	r3, [r4, #20]
 80050bc:	4637      	mov	r7, r6
 80050be:	4283      	cmp	r3, r0
 80050c0:	dc05      	bgt.n	80050ce <__swbuf_r+0x4e>
 80050c2:	4621      	mov	r1, r4
 80050c4:	4628      	mov	r0, r5
 80050c6:	f7ff f897 	bl	80041f8 <_fflush_r>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d1ed      	bne.n	80050aa <__swbuf_r+0x2a>
 80050ce:	68a3      	ldr	r3, [r4, #8]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	60a3      	str	r3, [r4, #8]
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	1c5a      	adds	r2, r3, #1
 80050d8:	6022      	str	r2, [r4, #0]
 80050da:	701e      	strb	r6, [r3, #0]
 80050dc:	6962      	ldr	r2, [r4, #20]
 80050de:	1c43      	adds	r3, r0, #1
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d004      	beq.n	80050ee <__swbuf_r+0x6e>
 80050e4:	89a3      	ldrh	r3, [r4, #12]
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d5e1      	bpl.n	80050ae <__swbuf_r+0x2e>
 80050ea:	2e0a      	cmp	r6, #10
 80050ec:	d1df      	bne.n	80050ae <__swbuf_r+0x2e>
 80050ee:	4621      	mov	r1, r4
 80050f0:	4628      	mov	r0, r5
 80050f2:	f7ff f881 	bl	80041f8 <_fflush_r>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	d0d9      	beq.n	80050ae <__swbuf_r+0x2e>
 80050fa:	e7d6      	b.n	80050aa <__swbuf_r+0x2a>

080050fc <__swsetup_r>:
 80050fc:	b538      	push	{r3, r4, r5, lr}
 80050fe:	4b29      	ldr	r3, [pc, #164]	@ (80051a4 <__swsetup_r+0xa8>)
 8005100:	4605      	mov	r5, r0
 8005102:	6818      	ldr	r0, [r3, #0]
 8005104:	460c      	mov	r4, r1
 8005106:	b118      	cbz	r0, 8005110 <__swsetup_r+0x14>
 8005108:	6a03      	ldr	r3, [r0, #32]
 800510a:	b90b      	cbnz	r3, 8005110 <__swsetup_r+0x14>
 800510c:	f7ff f93c 	bl	8004388 <__sinit>
 8005110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005114:	0719      	lsls	r1, r3, #28
 8005116:	d422      	bmi.n	800515e <__swsetup_r+0x62>
 8005118:	06da      	lsls	r2, r3, #27
 800511a:	d407      	bmi.n	800512c <__swsetup_r+0x30>
 800511c:	2209      	movs	r2, #9
 800511e:	602a      	str	r2, [r5, #0]
 8005120:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005124:	f04f 30ff 	mov.w	r0, #4294967295
 8005128:	81a3      	strh	r3, [r4, #12]
 800512a:	e033      	b.n	8005194 <__swsetup_r+0x98>
 800512c:	0758      	lsls	r0, r3, #29
 800512e:	d512      	bpl.n	8005156 <__swsetup_r+0x5a>
 8005130:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005132:	b141      	cbz	r1, 8005146 <__swsetup_r+0x4a>
 8005134:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005138:	4299      	cmp	r1, r3
 800513a:	d002      	beq.n	8005142 <__swsetup_r+0x46>
 800513c:	4628      	mov	r0, r5
 800513e:	f7ff fa7f 	bl	8004640 <_free_r>
 8005142:	2300      	movs	r3, #0
 8005144:	6363      	str	r3, [r4, #52]	@ 0x34
 8005146:	89a3      	ldrh	r3, [r4, #12]
 8005148:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800514c:	81a3      	strh	r3, [r4, #12]
 800514e:	2300      	movs	r3, #0
 8005150:	6063      	str	r3, [r4, #4]
 8005152:	6923      	ldr	r3, [r4, #16]
 8005154:	6023      	str	r3, [r4, #0]
 8005156:	89a3      	ldrh	r3, [r4, #12]
 8005158:	f043 0308 	orr.w	r3, r3, #8
 800515c:	81a3      	strh	r3, [r4, #12]
 800515e:	6923      	ldr	r3, [r4, #16]
 8005160:	b94b      	cbnz	r3, 8005176 <__swsetup_r+0x7a>
 8005162:	89a3      	ldrh	r3, [r4, #12]
 8005164:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005168:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516c:	d003      	beq.n	8005176 <__swsetup_r+0x7a>
 800516e:	4621      	mov	r1, r4
 8005170:	4628      	mov	r0, r5
 8005172:	f000 f8b2 	bl	80052da <__smakebuf_r>
 8005176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800517a:	f013 0201 	ands.w	r2, r3, #1
 800517e:	d00a      	beq.n	8005196 <__swsetup_r+0x9a>
 8005180:	2200      	movs	r2, #0
 8005182:	60a2      	str	r2, [r4, #8]
 8005184:	6962      	ldr	r2, [r4, #20]
 8005186:	4252      	negs	r2, r2
 8005188:	61a2      	str	r2, [r4, #24]
 800518a:	6922      	ldr	r2, [r4, #16]
 800518c:	b942      	cbnz	r2, 80051a0 <__swsetup_r+0xa4>
 800518e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005192:	d1c5      	bne.n	8005120 <__swsetup_r+0x24>
 8005194:	bd38      	pop	{r3, r4, r5, pc}
 8005196:	0799      	lsls	r1, r3, #30
 8005198:	bf58      	it	pl
 800519a:	6962      	ldrpl	r2, [r4, #20]
 800519c:	60a2      	str	r2, [r4, #8]
 800519e:	e7f4      	b.n	800518a <__swsetup_r+0x8e>
 80051a0:	2000      	movs	r0, #0
 80051a2:	e7f7      	b.n	8005194 <__swsetup_r+0x98>
 80051a4:	200002b8 	.word	0x200002b8

080051a8 <memmove>:
 80051a8:	4288      	cmp	r0, r1
 80051aa:	b510      	push	{r4, lr}
 80051ac:	eb01 0402 	add.w	r4, r1, r2
 80051b0:	d902      	bls.n	80051b8 <memmove+0x10>
 80051b2:	4284      	cmp	r4, r0
 80051b4:	4623      	mov	r3, r4
 80051b6:	d807      	bhi.n	80051c8 <memmove+0x20>
 80051b8:	1e43      	subs	r3, r0, #1
 80051ba:	42a1      	cmp	r1, r4
 80051bc:	d008      	beq.n	80051d0 <memmove+0x28>
 80051be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80051c6:	e7f8      	b.n	80051ba <memmove+0x12>
 80051c8:	4601      	mov	r1, r0
 80051ca:	4402      	add	r2, r0
 80051cc:	428a      	cmp	r2, r1
 80051ce:	d100      	bne.n	80051d2 <memmove+0x2a>
 80051d0:	bd10      	pop	{r4, pc}
 80051d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80051d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80051da:	e7f7      	b.n	80051cc <memmove+0x24>

080051dc <_sbrk_r>:
 80051dc:	b538      	push	{r3, r4, r5, lr}
 80051de:	2300      	movs	r3, #0
 80051e0:	4d05      	ldr	r5, [pc, #20]	@ (80051f8 <_sbrk_r+0x1c>)
 80051e2:	4604      	mov	r4, r0
 80051e4:	4608      	mov	r0, r1
 80051e6:	602b      	str	r3, [r5, #0]
 80051e8:	f7fb fa3e 	bl	8000668 <_sbrk>
 80051ec:	1c43      	adds	r3, r0, #1
 80051ee:	d102      	bne.n	80051f6 <_sbrk_r+0x1a>
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	b103      	cbz	r3, 80051f6 <_sbrk_r+0x1a>
 80051f4:	6023      	str	r3, [r4, #0]
 80051f6:	bd38      	pop	{r3, r4, r5, pc}
 80051f8:	200006e4 	.word	0x200006e4

080051fc <memchr>:
 80051fc:	4603      	mov	r3, r0
 80051fe:	b510      	push	{r4, lr}
 8005200:	b2c9      	uxtb	r1, r1
 8005202:	4402      	add	r2, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	4618      	mov	r0, r3
 8005208:	d101      	bne.n	800520e <memchr+0x12>
 800520a:	2000      	movs	r0, #0
 800520c:	e003      	b.n	8005216 <memchr+0x1a>
 800520e:	7804      	ldrb	r4, [r0, #0]
 8005210:	3301      	adds	r3, #1
 8005212:	428c      	cmp	r4, r1
 8005214:	d1f6      	bne.n	8005204 <memchr+0x8>
 8005216:	bd10      	pop	{r4, pc}

08005218 <memcpy>:
 8005218:	440a      	add	r2, r1
 800521a:	4291      	cmp	r1, r2
 800521c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005220:	d100      	bne.n	8005224 <memcpy+0xc>
 8005222:	4770      	bx	lr
 8005224:	b510      	push	{r4, lr}
 8005226:	f811 4b01 	ldrb.w	r4, [r1], #1
 800522a:	4291      	cmp	r1, r2
 800522c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005230:	d1f9      	bne.n	8005226 <memcpy+0xe>
 8005232:	bd10      	pop	{r4, pc}

08005234 <_realloc_r>:
 8005234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005238:	4680      	mov	r8, r0
 800523a:	4615      	mov	r5, r2
 800523c:	460c      	mov	r4, r1
 800523e:	b921      	cbnz	r1, 800524a <_realloc_r+0x16>
 8005240:	4611      	mov	r1, r2
 8005242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005246:	f7ff ba65 	b.w	8004714 <_malloc_r>
 800524a:	b92a      	cbnz	r2, 8005258 <_realloc_r+0x24>
 800524c:	f7ff f9f8 	bl	8004640 <_free_r>
 8005250:	2400      	movs	r4, #0
 8005252:	4620      	mov	r0, r4
 8005254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005258:	f000 f89e 	bl	8005398 <_malloc_usable_size_r>
 800525c:	4285      	cmp	r5, r0
 800525e:	4606      	mov	r6, r0
 8005260:	d802      	bhi.n	8005268 <_realloc_r+0x34>
 8005262:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005266:	d8f4      	bhi.n	8005252 <_realloc_r+0x1e>
 8005268:	4629      	mov	r1, r5
 800526a:	4640      	mov	r0, r8
 800526c:	f7ff fa52 	bl	8004714 <_malloc_r>
 8005270:	4607      	mov	r7, r0
 8005272:	2800      	cmp	r0, #0
 8005274:	d0ec      	beq.n	8005250 <_realloc_r+0x1c>
 8005276:	42b5      	cmp	r5, r6
 8005278:	462a      	mov	r2, r5
 800527a:	4621      	mov	r1, r4
 800527c:	bf28      	it	cs
 800527e:	4632      	movcs	r2, r6
 8005280:	f7ff ffca 	bl	8005218 <memcpy>
 8005284:	4621      	mov	r1, r4
 8005286:	4640      	mov	r0, r8
 8005288:	f7ff f9da 	bl	8004640 <_free_r>
 800528c:	463c      	mov	r4, r7
 800528e:	e7e0      	b.n	8005252 <_realloc_r+0x1e>

08005290 <__swhatbuf_r>:
 8005290:	b570      	push	{r4, r5, r6, lr}
 8005292:	460c      	mov	r4, r1
 8005294:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005298:	4615      	mov	r5, r2
 800529a:	2900      	cmp	r1, #0
 800529c:	461e      	mov	r6, r3
 800529e:	b096      	sub	sp, #88	@ 0x58
 80052a0:	da0c      	bge.n	80052bc <__swhatbuf_r+0x2c>
 80052a2:	89a3      	ldrh	r3, [r4, #12]
 80052a4:	2100      	movs	r1, #0
 80052a6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052aa:	bf14      	ite	ne
 80052ac:	2340      	movne	r3, #64	@ 0x40
 80052ae:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052b2:	2000      	movs	r0, #0
 80052b4:	6031      	str	r1, [r6, #0]
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	b016      	add	sp, #88	@ 0x58
 80052ba:	bd70      	pop	{r4, r5, r6, pc}
 80052bc:	466a      	mov	r2, sp
 80052be:	f000 f849 	bl	8005354 <_fstat_r>
 80052c2:	2800      	cmp	r0, #0
 80052c4:	dbed      	blt.n	80052a2 <__swhatbuf_r+0x12>
 80052c6:	9901      	ldr	r1, [sp, #4]
 80052c8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80052cc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80052d0:	4259      	negs	r1, r3
 80052d2:	4159      	adcs	r1, r3
 80052d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80052d8:	e7eb      	b.n	80052b2 <__swhatbuf_r+0x22>

080052da <__smakebuf_r>:
 80052da:	898b      	ldrh	r3, [r1, #12]
 80052dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052de:	079d      	lsls	r5, r3, #30
 80052e0:	4606      	mov	r6, r0
 80052e2:	460c      	mov	r4, r1
 80052e4:	d507      	bpl.n	80052f6 <__smakebuf_r+0x1c>
 80052e6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80052ea:	6023      	str	r3, [r4, #0]
 80052ec:	6123      	str	r3, [r4, #16]
 80052ee:	2301      	movs	r3, #1
 80052f0:	6163      	str	r3, [r4, #20]
 80052f2:	b003      	add	sp, #12
 80052f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052f6:	466a      	mov	r2, sp
 80052f8:	ab01      	add	r3, sp, #4
 80052fa:	f7ff ffc9 	bl	8005290 <__swhatbuf_r>
 80052fe:	9f00      	ldr	r7, [sp, #0]
 8005300:	4605      	mov	r5, r0
 8005302:	4639      	mov	r1, r7
 8005304:	4630      	mov	r0, r6
 8005306:	f7ff fa05 	bl	8004714 <_malloc_r>
 800530a:	b948      	cbnz	r0, 8005320 <__smakebuf_r+0x46>
 800530c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005310:	059a      	lsls	r2, r3, #22
 8005312:	d4ee      	bmi.n	80052f2 <__smakebuf_r+0x18>
 8005314:	f023 0303 	bic.w	r3, r3, #3
 8005318:	f043 0302 	orr.w	r3, r3, #2
 800531c:	81a3      	strh	r3, [r4, #12]
 800531e:	e7e2      	b.n	80052e6 <__smakebuf_r+0xc>
 8005320:	89a3      	ldrh	r3, [r4, #12]
 8005322:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800532a:	81a3      	strh	r3, [r4, #12]
 800532c:	9b01      	ldr	r3, [sp, #4]
 800532e:	6020      	str	r0, [r4, #0]
 8005330:	b15b      	cbz	r3, 800534a <__smakebuf_r+0x70>
 8005332:	4630      	mov	r0, r6
 8005334:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005338:	f000 f81e 	bl	8005378 <_isatty_r>
 800533c:	b128      	cbz	r0, 800534a <__smakebuf_r+0x70>
 800533e:	89a3      	ldrh	r3, [r4, #12]
 8005340:	f023 0303 	bic.w	r3, r3, #3
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	81a3      	strh	r3, [r4, #12]
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	431d      	orrs	r5, r3
 800534e:	81a5      	strh	r5, [r4, #12]
 8005350:	e7cf      	b.n	80052f2 <__smakebuf_r+0x18>
	...

08005354 <_fstat_r>:
 8005354:	b538      	push	{r3, r4, r5, lr}
 8005356:	2300      	movs	r3, #0
 8005358:	4d06      	ldr	r5, [pc, #24]	@ (8005374 <_fstat_r+0x20>)
 800535a:	4604      	mov	r4, r0
 800535c:	4608      	mov	r0, r1
 800535e:	4611      	mov	r1, r2
 8005360:	602b      	str	r3, [r5, #0]
 8005362:	f7fe fcc0 	bl	8003ce6 <_fstat>
 8005366:	1c43      	adds	r3, r0, #1
 8005368:	d102      	bne.n	8005370 <_fstat_r+0x1c>
 800536a:	682b      	ldr	r3, [r5, #0]
 800536c:	b103      	cbz	r3, 8005370 <_fstat_r+0x1c>
 800536e:	6023      	str	r3, [r4, #0]
 8005370:	bd38      	pop	{r3, r4, r5, pc}
 8005372:	bf00      	nop
 8005374:	200006e4 	.word	0x200006e4

08005378 <_isatty_r>:
 8005378:	b538      	push	{r3, r4, r5, lr}
 800537a:	2300      	movs	r3, #0
 800537c:	4d05      	ldr	r5, [pc, #20]	@ (8005394 <_isatty_r+0x1c>)
 800537e:	4604      	mov	r4, r0
 8005380:	4608      	mov	r0, r1
 8005382:	602b      	str	r3, [r5, #0]
 8005384:	f7fe fe12 	bl	8003fac <_isatty>
 8005388:	1c43      	adds	r3, r0, #1
 800538a:	d102      	bne.n	8005392 <_isatty_r+0x1a>
 800538c:	682b      	ldr	r3, [r5, #0]
 800538e:	b103      	cbz	r3, 8005392 <_isatty_r+0x1a>
 8005390:	6023      	str	r3, [r4, #0]
 8005392:	bd38      	pop	{r3, r4, r5, pc}
 8005394:	200006e4 	.word	0x200006e4

08005398 <_malloc_usable_size_r>:
 8005398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800539c:	1f18      	subs	r0, r3, #4
 800539e:	2b00      	cmp	r3, #0
 80053a0:	bfbc      	itt	lt
 80053a2:	580b      	ldrlt	r3, [r1, r0]
 80053a4:	18c0      	addlt	r0, r0, r3
 80053a6:	4770      	bx	lr

080053a8 <_init>:
 80053a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053aa:	bf00      	nop
 80053ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ae:	bc08      	pop	{r3}
 80053b0:	469e      	mov	lr, r3
 80053b2:	4770      	bx	lr

080053b4 <_fini>:
 80053b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053b6:	bf00      	nop
 80053b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ba:	bc08      	pop	{r3}
 80053bc:	469e      	mov	lr, r3
 80053be:	4770      	bx	lr
