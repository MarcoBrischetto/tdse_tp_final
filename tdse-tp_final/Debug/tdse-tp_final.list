
tdse-tp_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000662c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008d0  0800673c  0800673c  0000773c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800700c  0800700c  00009310  2**0
                  CONTENTS
  4 .ARM          00000008  0800700c  0800700c  0000800c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007014  08007014  00009310  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007014  08007014  00008014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007018  08007018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000310  20000000  0800701c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000444  20000310  0800732c  00009310  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000754  0800732c  00009754  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009310  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf3f  00000000  00000000  00009339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cb1  00000000  00000000  00015278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00017f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000754  00000000  00000000  00018920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a181  00000000  00000000  00019074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000117df  00000000  00000000  000331f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a297  00000000  00000000  000449d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cec6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003310  00000000  00000000  000cecb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d1fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000310 	.word	0x20000310
 800012c:	00000000 	.word	0x00000000
 8000130:	08006724 	.word	0x08006724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000314 	.word	0x20000314
 800014c:	08006724 	.word	0x08006724

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2f>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000904:	bf24      	itt	cs
 8000906:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800090a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800090e:	d90d      	bls.n	800092c <__aeabi_d2f+0x30>
 8000910:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000914:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000918:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800091c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000920:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000924:	bf08      	it	eq
 8000926:	f020 0001 	biceq.w	r0, r0, #1
 800092a:	4770      	bx	lr
 800092c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000930:	d121      	bne.n	8000976 <__aeabi_d2f+0x7a>
 8000932:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000936:	bfbc      	itt	lt
 8000938:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800093c:	4770      	bxlt	lr
 800093e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000942:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000946:	f1c2 0218 	rsb	r2, r2, #24
 800094a:	f1c2 0c20 	rsb	ip, r2, #32
 800094e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000952:	fa20 f002 	lsr.w	r0, r0, r2
 8000956:	bf18      	it	ne
 8000958:	f040 0001 	orrne.w	r0, r0, #1
 800095c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000960:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000964:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000968:	ea40 000c 	orr.w	r0, r0, ip
 800096c:	fa23 f302 	lsr.w	r3, r3, r2
 8000970:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000974:	e7cc      	b.n	8000910 <__aeabi_d2f+0x14>
 8000976:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800097a:	d107      	bne.n	800098c <__aeabi_d2f+0x90>
 800097c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000980:	bf1e      	ittt	ne
 8000982:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000986:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800098a:	4770      	bxne	lr
 800098c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000990:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_frsub>:
 800099c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009a0:	e002      	b.n	80009a8 <__addsf3>
 80009a2:	bf00      	nop

080009a4 <__aeabi_fsub>:
 80009a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009a8 <__addsf3>:
 80009a8:	0042      	lsls	r2, r0, #1
 80009aa:	bf1f      	itttt	ne
 80009ac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b0:	ea92 0f03 	teqne	r2, r3
 80009b4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009b8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009bc:	d06a      	beq.n	8000a94 <__addsf3+0xec>
 80009be:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009c2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009c6:	bfc1      	itttt	gt
 80009c8:	18d2      	addgt	r2, r2, r3
 80009ca:	4041      	eorgt	r1, r0
 80009cc:	4048      	eorgt	r0, r1
 80009ce:	4041      	eorgt	r1, r0
 80009d0:	bfb8      	it	lt
 80009d2:	425b      	neglt	r3, r3
 80009d4:	2b19      	cmp	r3, #25
 80009d6:	bf88      	it	hi
 80009d8:	4770      	bxhi	lr
 80009da:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009de:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009e2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4240      	negne	r0, r0
 80009ea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009ee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009f2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4249      	negne	r1, r1
 80009fa:	ea92 0f03 	teq	r2, r3
 80009fe:	d03f      	beq.n	8000a80 <__addsf3+0xd8>
 8000a00:	f1a2 0201 	sub.w	r2, r2, #1
 8000a04:	fa41 fc03 	asr.w	ip, r1, r3
 8000a08:	eb10 000c 	adds.w	r0, r0, ip
 8000a0c:	f1c3 0320 	rsb	r3, r3, #32
 8000a10:	fa01 f103 	lsl.w	r1, r1, r3
 8000a14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a18:	d502      	bpl.n	8000a20 <__addsf3+0x78>
 8000a1a:	4249      	negs	r1, r1
 8000a1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a24:	d313      	bcc.n	8000a4e <__addsf3+0xa6>
 8000a26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a2a:	d306      	bcc.n	8000a3a <__addsf3+0x92>
 8000a2c:	0840      	lsrs	r0, r0, #1
 8000a2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a32:	f102 0201 	add.w	r2, r2, #1
 8000a36:	2afe      	cmp	r2, #254	@ 0xfe
 8000a38:	d251      	bcs.n	8000ade <__addsf3+0x136>
 8000a3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a42:	bf08      	it	eq
 8000a44:	f020 0001 	biceq.w	r0, r0, #1
 8000a48:	ea40 0003 	orr.w	r0, r0, r3
 8000a4c:	4770      	bx	lr
 8000a4e:	0049      	lsls	r1, r1, #1
 8000a50:	eb40 0000 	adc.w	r0, r0, r0
 8000a54:	3a01      	subs	r2, #1
 8000a56:	bf28      	it	cs
 8000a58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a5c:	d2ed      	bcs.n	8000a3a <__addsf3+0x92>
 8000a5e:	fab0 fc80 	clz	ip, r0
 8000a62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a66:	ebb2 020c 	subs.w	r2, r2, ip
 8000a6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a6e:	bfaa      	itet	ge
 8000a70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a74:	4252      	neglt	r2, r2
 8000a76:	4318      	orrge	r0, r3
 8000a78:	bfbc      	itt	lt
 8000a7a:	40d0      	lsrlt	r0, r2
 8000a7c:	4318      	orrlt	r0, r3
 8000a7e:	4770      	bx	lr
 8000a80:	f092 0f00 	teq	r2, #0
 8000a84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a88:	bf06      	itte	eq
 8000a8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a8e:	3201      	addeq	r2, #1
 8000a90:	3b01      	subne	r3, #1
 8000a92:	e7b5      	b.n	8000a00 <__addsf3+0x58>
 8000a94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a9c:	bf18      	it	ne
 8000a9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa2:	d021      	beq.n	8000ae8 <__addsf3+0x140>
 8000aa4:	ea92 0f03 	teq	r2, r3
 8000aa8:	d004      	beq.n	8000ab4 <__addsf3+0x10c>
 8000aaa:	f092 0f00 	teq	r2, #0
 8000aae:	bf08      	it	eq
 8000ab0:	4608      	moveq	r0, r1
 8000ab2:	4770      	bx	lr
 8000ab4:	ea90 0f01 	teq	r0, r1
 8000ab8:	bf1c      	itt	ne
 8000aba:	2000      	movne	r0, #0
 8000abc:	4770      	bxne	lr
 8000abe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ac2:	d104      	bne.n	8000ace <__addsf3+0x126>
 8000ac4:	0040      	lsls	r0, r0, #1
 8000ac6:	bf28      	it	cs
 8000ac8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000acc:	4770      	bx	lr
 8000ace:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ad2:	bf3c      	itt	cc
 8000ad4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ad8:	4770      	bxcc	lr
 8000ada:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ade:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ae2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae6:	4770      	bx	lr
 8000ae8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aec:	bf16      	itet	ne
 8000aee:	4608      	movne	r0, r1
 8000af0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000af4:	4601      	movne	r1, r0
 8000af6:	0242      	lsls	r2, r0, #9
 8000af8:	bf06      	itte	eq
 8000afa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000afe:	ea90 0f01 	teqeq	r0, r1
 8000b02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_ui2f>:
 8000b08:	f04f 0300 	mov.w	r3, #0
 8000b0c:	e004      	b.n	8000b18 <__aeabi_i2f+0x8>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_i2f>:
 8000b10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b14:	bf48      	it	mi
 8000b16:	4240      	negmi	r0, r0
 8000b18:	ea5f 0c00 	movs.w	ip, r0
 8000b1c:	bf08      	it	eq
 8000b1e:	4770      	bxeq	lr
 8000b20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b24:	4601      	mov	r1, r0
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	e01c      	b.n	8000b66 <__aeabi_l2f+0x2a>

08000b2c <__aeabi_ul2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	e00a      	b.n	8000b50 <__aeabi_l2f+0x14>
 8000b3a:	bf00      	nop

08000b3c <__aeabi_l2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b48:	d502      	bpl.n	8000b50 <__aeabi_l2f+0x14>
 8000b4a:	4240      	negs	r0, r0
 8000b4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b50:	ea5f 0c01 	movs.w	ip, r1
 8000b54:	bf02      	ittt	eq
 8000b56:	4684      	moveq	ip, r0
 8000b58:	4601      	moveq	r1, r0
 8000b5a:	2000      	moveq	r0, #0
 8000b5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b60:	bf08      	it	eq
 8000b62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b6a:	fabc f28c 	clz	r2, ip
 8000b6e:	3a08      	subs	r2, #8
 8000b70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b74:	db10      	blt.n	8000b98 <__aeabi_l2f+0x5c>
 8000b76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b7a:	4463      	add	r3, ip
 8000b7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b88:	fa20 f202 	lsr.w	r2, r0, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	f020 0001 	biceq.w	r0, r0, #1
 8000b96:	4770      	bx	lr
 8000b98:	f102 0220 	add.w	r2, r2, #32
 8000b9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba0:	f1c2 0220 	rsb	r2, r2, #32
 8000ba4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ba8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bac:	eb43 0002 	adc.w	r0, r3, r2
 8000bb0:	bf08      	it	eq
 8000bb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_f2iz>:
 8000bb8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bbc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000bc0:	d30f      	bcc.n	8000be2 <__aeabi_f2iz+0x2a>
 8000bc2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000bc6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_f2iz+0x30>
 8000bcc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000bd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000bd8:	fa23 f002 	lsr.w	r0, r3, r2
 8000bdc:	bf18      	it	ne
 8000bde:	4240      	negne	r0, r0
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr
 8000be8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000bec:	d101      	bne.n	8000bf2 <__aeabi_f2iz+0x3a>
 8000bee:	0242      	lsls	r2, r0, #9
 8000bf0:	d105      	bne.n	8000bfe <__aeabi_f2iz+0x46>
 8000bf2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000bf6:	bf08      	it	eq
 8000bf8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bfc:	4770      	bx	lr
 8000bfe:	f04f 0000 	mov.w	r0, #0
 8000c02:	4770      	bx	lr

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000c08:	f004 fb2e 	bl	8005268 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fb6c 	bl	80012e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f80d 	bl	8000c2e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f90a 	bl	8000e2c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c18:	f000 f8de 	bl	8000dd8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c1c:	f000 f860 	bl	8000ce0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c20:	f000 f89c 	bl	8000d5c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
  app_init();
 8000c24:	f002 f88a 	bl	8002d3c <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000c28:	f002 f946 	bl	8002eb8 <app_update>
 8000c2c:	e7fc      	b.n	8000c28 <main+0x24>

08000c2e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b094      	sub	sp, #80	@ 0x50
 8000c32:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c34:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c38:	2228      	movs	r2, #40	@ 0x28
 8000c3a:	2100      	movs	r1, #0
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f004 fe40 	bl	80058c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c42:	f107 0314 	add.w	r3, r7, #20
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
 8000c50:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c62:	2301      	movs	r3, #1
 8000c64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c66:	2310      	movs	r3, #16
 8000c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000c72:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c78:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f001 fab9 	bl	80021f4 <HAL_RCC_OscConfig>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000c88:	f000 f99c 	bl	8000fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c9c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000c9e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ca2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ca4:	f107 0314 	add.w	r3, r7, #20
 8000ca8:	2102      	movs	r1, #2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fd24 	bl	80026f8 <HAL_RCC_ClockConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cb6:	f000 f985 	bl	8000fc4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cba:	2302      	movs	r3, #2
 8000cbc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000cbe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000cc2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f001 fea4 	bl	8002a14 <HAL_RCCEx_PeriphCLKConfig>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000cd2:	f000 f977 	bl	8000fc4 <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	3750      	adds	r7, #80	@ 0x50
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ce6:	1d3b      	adds	r3, r7, #4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000cf2:	4a19      	ldr	r2, [pc, #100]	@ (8000d58 <MX_ADC1_Init+0x78>)
 8000cf4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000cf6:	4b17      	ldr	r3, [pc, #92]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cfc:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d02:	4b14      	ldr	r3, [pc, #80]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d08:	4b12      	ldr	r3, [pc, #72]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000d0a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d0e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b10      	ldr	r3, [pc, #64]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d1c:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000d1e:	f000 fb69 	bl	80013f4 <HAL_ADC_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d28:	f000 f94c 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d2c:	2310      	movs	r3, #16
 8000d2e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d30:	2301      	movs	r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000d34:	2306      	movs	r3, #6
 8000d36:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4805      	ldr	r0, [pc, #20]	@ (8000d54 <MX_ADC1_Init+0x74>)
 8000d3e:	f000 fdbb 	bl	80018b8 <HAL_ADC_ConfigChannel>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d48:	f000 f93c 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	2000032c 	.word	0x2000032c
 8000d58:	40012400 	.word	0x40012400

08000d5c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000d6c:	4b18      	ldr	r3, [pc, #96]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d6e:	4a19      	ldr	r2, [pc, #100]	@ (8000dd4 <MX_ADC2_Init+0x78>)
 8000d70:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d72:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d78:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d7e:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d86:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d8a:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d8c:	4b10      	ldr	r3, [pc, #64]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000d92:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d98:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000d9a:	f000 fb2b 	bl	80013f4 <HAL_ADC_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000da4:	f000 f90e 	bl	8000fc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000da8:	2300      	movs	r3, #0
 8000daa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dac:	2301      	movs	r3, #1
 8000dae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000db0:	2306      	movs	r3, #6
 8000db2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000db4:	1d3b      	adds	r3, r7, #4
 8000db6:	4619      	mov	r1, r3
 8000db8:	4805      	ldr	r0, [pc, #20]	@ (8000dd0 <MX_ADC2_Init+0x74>)
 8000dba:	f000 fd7d 	bl	80018b8 <HAL_ADC_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000dc4:	f000 f8fe 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	2000035c 	.word	0x2000035c
 8000dd4:	40012800 	.word	0x40012800

08000dd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <MX_USART2_UART_Init+0x50>)
 8000de0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000de2:	4b10      	ldr	r3, [pc, #64]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b0e      	ldr	r3, [pc, #56]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b09      	ldr	r3, [pc, #36]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e08:	4b06      	ldr	r3, [pc, #24]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e0e:	4805      	ldr	r0, [pc, #20]	@ (8000e24 <MX_USART2_UART_Init+0x4c>)
 8000e10:	f001 feb6 	bl	8002b80 <HAL_UART_Init>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e1a:	f000 f8d3 	bl	8000fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	2000038c 	.word	0x2000038c
 8000e28:	40004400 	.word	0x40004400

08000e2c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e32:	f107 0310 	add.w	r3, r7, #16
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
 8000e3a:	605a      	str	r2, [r3, #4]
 8000e3c:	609a      	str	r2, [r3, #8]
 8000e3e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e40:	4b5b      	ldr	r3, [pc, #364]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e42:	699b      	ldr	r3, [r3, #24]
 8000e44:	4a5a      	ldr	r2, [pc, #360]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e46:	f043 0310 	orr.w	r3, r3, #16
 8000e4a:	6193      	str	r3, [r2, #24]
 8000e4c:	4b58      	ldr	r3, [pc, #352]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e4e:	699b      	ldr	r3, [r3, #24]
 8000e50:	f003 0310 	and.w	r3, r3, #16
 8000e54:	60fb      	str	r3, [r7, #12]
 8000e56:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e58:	4b55      	ldr	r3, [pc, #340]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e5a:	699b      	ldr	r3, [r3, #24]
 8000e5c:	4a54      	ldr	r2, [pc, #336]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e5e:	f043 0320 	orr.w	r3, r3, #32
 8000e62:	6193      	str	r3, [r2, #24]
 8000e64:	4b52      	ldr	r3, [pc, #328]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e66:	699b      	ldr	r3, [r3, #24]
 8000e68:	f003 0320 	and.w	r3, r3, #32
 8000e6c:	60bb      	str	r3, [r7, #8]
 8000e6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b4f      	ldr	r3, [pc, #316]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a4e      	ldr	r2, [pc, #312]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e88:	4b49      	ldr	r3, [pc, #292]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e8a:	699b      	ldr	r3, [r3, #24]
 8000e8c:	4a48      	ldr	r2, [pc, #288]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e8e:	f043 0308 	orr.w	r3, r3, #8
 8000e92:	6193      	str	r3, [r2, #24]
 8000e94:	4b46      	ldr	r3, [pc, #280]	@ (8000fb0 <MX_GPIO_Init+0x184>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	f003 0308 	and.w	r3, r3, #8
 8000e9c:	603b      	str	r3, [r7, #0]
 8000e9e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000ea6:	4843      	ldr	r0, [pc, #268]	@ (8000fb4 <MX_GPIO_Init+0x188>)
 8000ea8:	f001 f951 	bl	800214e <HAL_GPIO_WritePin>
                          |D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D9_Pin|O1_Pin|O2_Pin|O3_Pin
 8000eac:	2200      	movs	r2, #0
 8000eae:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8000eb2:	4841      	ldr	r0, [pc, #260]	@ (8000fb8 <MX_GPIO_Init+0x18c>)
 8000eb4:	f001 f94b 	bl	800214e <HAL_GPIO_WritePin>
                          |O4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ebe:	483e      	ldr	r0, [pc, #248]	@ (8000fb8 <MX_GPIO_Init+0x18c>)
 8000ec0:	f001 f945 	bl	800214e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2140      	movs	r1, #64	@ 0x40
 8000ec8:	483c      	ldr	r0, [pc, #240]	@ (8000fbc <MX_GPIO_Init+0x190>)
 8000eca:	f001 f940 	bl	800214e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ece:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ed2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	@ (8000fc0 <MX_GPIO_Init+0x194>)
 8000ed6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4835      	ldr	r0, [pc, #212]	@ (8000fb8 <MX_GPIO_Init+0x18c>)
 8000ee4:	f000 ff98 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin I5_Pin I3_Pin
                           I4_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin|I5_Pin|I3_Pin
 8000ee8:	237c      	movs	r3, #124	@ 0x7c
 8000eea:	613b      	str	r3, [r7, #16]
                          |I4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eec:	2300      	movs	r3, #0
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0310 	add.w	r3, r7, #16
 8000ef8:	4619      	mov	r1, r3
 8000efa:	482f      	ldr	r0, [pc, #188]	@ (8000fb8 <MX_GPIO_Init+0x18c>)
 8000efc:	f000 ff8c 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D12_Pin D11_Pin D7_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 8000f00:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000f04:	613b      	str	r3, [r7, #16]
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2302      	movs	r3, #2
 8000f10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f12:	f107 0310 	add.w	r3, r7, #16
 8000f16:	4619      	mov	r1, r3
 8000f18:	4826      	ldr	r0, [pc, #152]	@ (8000fb4 <MX_GPIO_Init+0x188>)
 8000f1a:	f000 ff7d 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000f1e:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000f22:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f24:	2300      	movs	r3, #0
 8000f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0310 	add.w	r3, r7, #16
 8000f30:	4619      	mov	r1, r3
 8000f32:	4822      	ldr	r0, [pc, #136]	@ (8000fbc <MX_GPIO_Init+0x190>)
 8000f34:	f000 ff70 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : D9_Pin O1_Pin O2_Pin O3_Pin
                           O4_Pin O5_Pin */
  GPIO_InitStruct.Pin = D9_Pin|O1_Pin|O2_Pin|O3_Pin
 8000f38:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 8000f3c:	613b      	str	r3, [r7, #16]
                          |O4_Pin|O5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f42:	2300      	movs	r3, #0
 8000f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f46:	2302      	movs	r3, #2
 8000f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4a:	f107 0310 	add.w	r3, r7, #16
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4819      	ldr	r0, [pc, #100]	@ (8000fb8 <MX_GPIO_Init+0x18c>)
 8000f52:	f000 ff61 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 8000f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f60:	2301      	movs	r3, #1
 8000f62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4812      	ldr	r0, [pc, #72]	@ (8000fb4 <MX_GPIO_Init+0x188>)
 8000f6c:	f000 ff54 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000f70:	2340      	movs	r3, #64	@ 0x40
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	480d      	ldr	r0, [pc, #52]	@ (8000fbc <MX_GPIO_Init+0x190>)
 8000f88:	f000 ff46 	bl	8001e18 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2028      	movs	r0, #40	@ 0x28
 8000f92:	f000 ff04 	bl	8001d9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f96:	2028      	movs	r0, #40	@ 0x28
 8000f98:	f000 ff1d 	bl	8001dd6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa2:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_GPIO_Init+0x18c>)
 8000fa4:	f001 f8d3 	bl	800214e <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	40010c00 	.word	0x40010c00
 8000fc0:	10110000 	.word	0x10110000

08000fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc8:	b672      	cpsid	i
}
 8000fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <Error_Handler+0x8>

08000fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_MspInit+0x5c>)
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	4a14      	ldr	r2, [pc, #80]	@ (800102c <HAL_MspInit+0x5c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	6193      	str	r3, [r2, #24]
 8000fe2:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_MspInit+0x5c>)
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	4b0f      	ldr	r3, [pc, #60]	@ (800102c <HAL_MspInit+0x5c>)
 8000ff0:	69db      	ldr	r3, [r3, #28]
 8000ff2:	4a0e      	ldr	r2, [pc, #56]	@ (800102c <HAL_MspInit+0x5c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff8:	61d3      	str	r3, [r2, #28]
 8000ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800102c <HAL_MspInit+0x5c>)
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001006:	4b0a      	ldr	r3, [pc, #40]	@ (8001030 <HAL_MspInit+0x60>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	60fb      	str	r3, [r7, #12]
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <HAL_MspInit+0x60>)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000
 8001030:	40010000 	.word	0x40010000

08001034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0318 	add.w	r3, r7, #24
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a30      	ldr	r2, [pc, #192]	@ (8001110 <HAL_ADC_MspInit+0xdc>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d12a      	bne.n	80010aa <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001054:	4b2f      	ldr	r3, [pc, #188]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a2e      	ldr	r2, [pc, #184]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 800105a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b2c      	ldr	r3, [pc, #176]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800106c:	4b29      	ldr	r3, [pc, #164]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 800106e:	699b      	ldr	r3, [r3, #24]
 8001070:	4a28      	ldr	r2, [pc, #160]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 8001072:	f043 0304 	orr.w	r3, r3, #4
 8001076:	6193      	str	r3, [r2, #24]
 8001078:	4b26      	ldr	r3, [pc, #152]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	f003 0304 	and.w	r3, r3, #4
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001084:	2301      	movs	r3, #1
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001088:	2303      	movs	r3, #3
 800108a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4619      	mov	r1, r3
 8001092:	4821      	ldr	r0, [pc, #132]	@ (8001118 <HAL_ADC_MspInit+0xe4>)
 8001094:	f000 fec0 	bl	8001e18 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001098:	2200      	movs	r2, #0
 800109a:	2100      	movs	r1, #0
 800109c:	2012      	movs	r0, #18
 800109e:	f000 fe7e 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010a2:	2012      	movs	r0, #18
 80010a4:	f000 fe97 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010a8:	e02e      	b.n	8001108 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	4a1b      	ldr	r2, [pc, #108]	@ (800111c <HAL_ADC_MspInit+0xe8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d129      	bne.n	8001108 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010b4:	4b17      	ldr	r3, [pc, #92]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a16      	ldr	r2, [pc, #88]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 80010ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b14      	ldr	r3, [pc, #80]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80010c8:	60fb      	str	r3, [r7, #12]
 80010ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b11      	ldr	r3, [pc, #68]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a10      	ldr	r2, [pc, #64]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001114 <HAL_ADC_MspInit+0xe0>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010e8:	2303      	movs	r3, #3
 80010ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ec:	f107 0318 	add.w	r3, r7, #24
 80010f0:	4619      	mov	r1, r3
 80010f2:	4809      	ldr	r0, [pc, #36]	@ (8001118 <HAL_ADC_MspInit+0xe4>)
 80010f4:	f000 fe90 	bl	8001e18 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010f8:	2200      	movs	r2, #0
 80010fa:	2100      	movs	r1, #0
 80010fc:	2012      	movs	r0, #18
 80010fe:	f000 fe4e 	bl	8001d9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001102:	2012      	movs	r0, #18
 8001104:	f000 fe67 	bl	8001dd6 <HAL_NVIC_EnableIRQ>
}
 8001108:	bf00      	nop
 800110a:	3728      	adds	r7, #40	@ 0x28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40012400 	.word	0x40012400
 8001114:	40021000 	.word	0x40021000
 8001118:	40010800 	.word	0x40010800
 800111c:	40012800 	.word	0x40012800

08001120 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0310 	add.w	r3, r7, #16
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a15      	ldr	r2, [pc, #84]	@ (8001190 <HAL_UART_MspInit+0x70>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d123      	bne.n	8001188 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001140:	4b14      	ldr	r3, [pc, #80]	@ (8001194 <HAL_UART_MspInit+0x74>)
 8001142:	69db      	ldr	r3, [r3, #28]
 8001144:	4a13      	ldr	r2, [pc, #76]	@ (8001194 <HAL_UART_MspInit+0x74>)
 8001146:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800114a:	61d3      	str	r3, [r2, #28]
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_UART_MspInit+0x74>)
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <HAL_UART_MspInit+0x74>)
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_UART_MspInit+0x74>)
 800115e:	f043 0304 	orr.w	r3, r3, #4
 8001162:	6193      	str	r3, [r2, #24]
 8001164:	4b0b      	ldr	r3, [pc, #44]	@ (8001194 <HAL_UART_MspInit+0x74>)
 8001166:	699b      	ldr	r3, [r3, #24]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001170:	230c      	movs	r3, #12
 8001172:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001178:	2302      	movs	r3, #2
 800117a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800117c:	f107 0310 	add.w	r3, r7, #16
 8001180:	4619      	mov	r1, r3
 8001182:	4805      	ldr	r0, [pc, #20]	@ (8001198 <HAL_UART_MspInit+0x78>)
 8001184:	f000 fe48 	bl	8001e18 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40004400 	.word	0x40004400
 8001194:	40021000 	.word	0x40021000
 8001198:	40010800 	.word	0x40010800

0800119c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <NMI_Handler+0x4>

080011a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a8:	bf00      	nop
 80011aa:	e7fd      	b.n	80011a8 <HardFault_Handler+0x4>

080011ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b0:	bf00      	nop
 80011b2:	e7fd      	b.n	80011b0 <MemManage_Handler+0x4>

080011b4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <BusFault_Handler+0x4>

080011bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c0:	bf00      	nop
 80011c2:	e7fd      	b.n	80011c0 <UsageFault_Handler+0x4>

080011c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e0:	bf00      	nop
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bc80      	pop	{r7}
 80011e6:	4770      	bx	lr

080011e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ec:	f000 f8c2 	bl	8001374 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 80011f0:	f000 fe0b 	bl	8001e0a <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f4:	bf00      	nop
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <ADC1_2_IRQHandler+0x14>)
 80011fe:	f000 fa93 	bl	8001728 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001202:	4803      	ldr	r0, [pc, #12]	@ (8001210 <ADC1_2_IRQHandler+0x18>)
 8001204:	f000 fa90 	bl	8001728 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	2000032c 	.word	0x2000032c
 8001210:	2000035c 	.word	0x2000035c

08001214 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001218:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800121c:	f000 ffc8 	bl	80021b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	bd80      	pop	{r7, pc}

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f004 fb84 	bl	8005960 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20005000 	.word	0x20005000
 8001284:	00000400 	.word	0x00000400
 8001288:	200003d4 	.word	0x200003d4
 800128c:	20000758 	.word	0x20000758

08001290 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr

0800129c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800129c:	f7ff fff8 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a0:	480b      	ldr	r0, [pc, #44]	@ (80012d0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012a2:	490c      	ldr	r1, [pc, #48]	@ (80012d4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012a4:	4a0c      	ldr	r2, [pc, #48]	@ (80012d8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a8:	e002      	b.n	80012b0 <LoopCopyDataInit>

080012aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ae:	3304      	adds	r3, #4

080012b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b4:	d3f9      	bcc.n	80012aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012b6:	4a09      	ldr	r2, [pc, #36]	@ (80012dc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012b8:	4c09      	ldr	r4, [pc, #36]	@ (80012e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012bc:	e001      	b.n	80012c2 <LoopFillZerobss>

080012be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c0:	3204      	adds	r2, #4

080012c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c4:	d3fb      	bcc.n	80012be <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012c6:	f004 fb51 	bl	800596c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012ca:	f7ff fc9b 	bl	8000c04 <main>
  bx lr
 80012ce:	4770      	bx	lr
  ldr r0, =_sdata
 80012d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012d4:	20000310 	.word	0x20000310
  ldr r2, =_sidata
 80012d8:	0800701c 	.word	0x0800701c
  ldr r2, =_sbss
 80012dc:	20000310 	.word	0x20000310
  ldr r4, =_ebss
 80012e0:	20000754 	.word	0x20000754

080012e4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012e4:	e7fe      	b.n	80012e4 <CAN1_RX1_IRQHandler>
	...

080012e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ec:	4b08      	ldr	r3, [pc, #32]	@ (8001310 <HAL_Init+0x28>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a07      	ldr	r2, [pc, #28]	@ (8001310 <HAL_Init+0x28>)
 80012f2:	f043 0310 	orr.w	r3, r3, #16
 80012f6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f8:	2003      	movs	r0, #3
 80012fa:	f000 fd45 	bl	8001d88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012fe:	2000      	movs	r0, #0
 8001300:	f000 f808 	bl	8001314 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001304:	f7ff fe64 	bl	8000fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40022000 	.word	0x40022000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800131c:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_InitTick+0x54>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	4b12      	ldr	r3, [pc, #72]	@ (800136c <HAL_InitTick+0x58>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	4619      	mov	r1, r3
 8001326:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800132a:	fbb3 f3f1 	udiv	r3, r3, r1
 800132e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001332:	4618      	mov	r0, r3
 8001334:	f000 fd5d 	bl	8001df2 <HAL_SYSTICK_Config>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e00e      	b.n	8001360 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b0f      	cmp	r3, #15
 8001346:	d80a      	bhi.n	800135e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001348:	2200      	movs	r2, #0
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	f04f 30ff 	mov.w	r0, #4294967295
 8001350:	f000 fd25 	bl	8001d9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001354:	4a06      	ldr	r2, [pc, #24]	@ (8001370 <HAL_InitTick+0x5c>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	e000      	b.n	8001360 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800135e:	2301      	movs	r3, #1
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000000 	.word	0x20000000
 800136c:	20000008 	.word	0x20000008
 8001370:	20000004 	.word	0x20000004

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b05      	ldr	r3, [pc, #20]	@ (8001390 <HAL_IncTick+0x1c>)
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_IncTick+0x20>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4413      	add	r3, r2
 8001384:	4a03      	ldr	r2, [pc, #12]	@ (8001394 <HAL_IncTick+0x20>)
 8001386:	6013      	str	r3, [r2, #0]
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	20000008 	.word	0x20000008
 8001394:	200003d8 	.word	0x200003d8

08001398 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  return uwTick;
 800139c:	4b02      	ldr	r3, [pc, #8]	@ (80013a8 <HAL_GetTick+0x10>)
 800139e:	681b      	ldr	r3, [r3, #0]
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr
 80013a8:	200003d8 	.word	0x200003d8

080013ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b084      	sub	sp, #16
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013b4:	f7ff fff0 	bl	8001398 <HAL_GetTick>
 80013b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013c4:	d005      	beq.n	80013d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013c6:	4b0a      	ldr	r3, [pc, #40]	@ (80013f0 <HAL_Delay+0x44>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4413      	add	r3, r2
 80013d0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013d2:	bf00      	nop
 80013d4:	f7ff ffe0 	bl	8001398 <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d8f7      	bhi.n	80013d4 <HAL_Delay+0x28>
  {
  }
}
 80013e4:	bf00      	nop
 80013e6:	bf00      	nop
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001400:	2300      	movs	r3, #0
 8001402:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001404:	2300      	movs	r3, #0
 8001406:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001408:	2300      	movs	r3, #0
 800140a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e0be      	b.n	8001594 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	2b00      	cmp	r3, #0
 8001422:	d109      	bne.n	8001438 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2200      	movs	r2, #0
 8001428:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fdfe 	bl	8001034 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 fb8f 	bl	8001b5c <ADC_ConversionStop_Disable>
 800143e:	4603      	mov	r3, r0
 8001440:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	2b00      	cmp	r3, #0
 800144c:	f040 8099 	bne.w	8001582 <HAL_ADC_Init+0x18e>
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	2b00      	cmp	r3, #0
 8001454:	f040 8095 	bne.w	8001582 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800145c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001460:	f023 0302 	bic.w	r3, r3, #2
 8001464:	f043 0202 	orr.w	r2, r3, #2
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001474:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	7b1b      	ldrb	r3, [r3, #12]
 800147a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800147c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4313      	orrs	r3, r2
 8001482:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800148c:	d003      	beq.n	8001496 <HAL_ADC_Init+0xa2>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d102      	bne.n	800149c <HAL_ADC_Init+0xa8>
 8001496:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800149a:	e000      	b.n	800149e <HAL_ADC_Init+0xaa>
 800149c:	2300      	movs	r3, #0
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	7d1b      	ldrb	r3, [r3, #20]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d119      	bne.n	80014e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	7b1b      	ldrb	r3, [r3, #12]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d109      	bne.n	80014c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	3b01      	subs	r3, #1
 80014ba:	035a      	lsls	r2, r3, #13
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4313      	orrs	r3, r2
 80014c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	e00b      	b.n	80014e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014cc:	f043 0220 	orr.w	r2, r3, #32
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014d8:	f043 0201 	orr.w	r2, r3, #1
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	430a      	orrs	r2, r1
 80014f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	4b28      	ldr	r3, [pc, #160]	@ (800159c <HAL_ADC_Init+0x1a8>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6812      	ldr	r2, [r2, #0]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	430b      	orrs	r3, r1
 8001506:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001510:	d003      	beq.n	800151a <HAL_ADC_Init+0x126>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d104      	bne.n	8001524 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	3b01      	subs	r3, #1
 8001520:	051b      	lsls	r3, r3, #20
 8001522:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	430a      	orrs	r2, r1
 8001536:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	4b18      	ldr	r3, [pc, #96]	@ (80015a0 <HAL_ADC_Init+0x1ac>)
 8001540:	4013      	ands	r3, r2
 8001542:	68ba      	ldr	r2, [r7, #8]
 8001544:	429a      	cmp	r2, r3
 8001546:	d10b      	bne.n	8001560 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2200      	movs	r2, #0
 800154c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001552:	f023 0303 	bic.w	r3, r3, #3
 8001556:	f043 0201 	orr.w	r2, r3, #1
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800155e:	e018      	b.n	8001592 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001564:	f023 0312 	bic.w	r3, r3, #18
 8001568:	f043 0210 	orr.w	r2, r3, #16
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001574:	f043 0201 	orr.w	r2, r3, #1
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001580:	e007      	b.n	8001592 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001592:	7dfb      	ldrb	r3, [r7, #23]
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	ffe1f7fd 	.word	0xffe1f7fd
 80015a0:	ff1f0efe 	.word	0xff1f0efe

080015a4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ac:	2300      	movs	r3, #0
 80015ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015b6:	2b01      	cmp	r3, #1
 80015b8:	d101      	bne.n	80015be <HAL_ADC_Start_IT+0x1a>
 80015ba:	2302      	movs	r3, #2
 80015bc:	e0a0      	b.n	8001700 <HAL_ADC_Start_IT+0x15c>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 fa6e 	bl	8001aa8 <ADC_Enable>
 80015cc:	4603      	mov	r3, r0
 80015ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f040 808f 	bne.w	80016f6 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80015e0:	f023 0301 	bic.w	r3, r3, #1
 80015e4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a45      	ldr	r2, [pc, #276]	@ (8001708 <HAL_ADC_Start_IT+0x164>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d105      	bne.n	8001602 <HAL_ADC_Start_IT+0x5e>
 80015f6:	4b45      	ldr	r3, [pc, #276]	@ (800170c <HAL_ADC_Start_IT+0x168>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d115      	bne.n	800162e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001606:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001618:	2b00      	cmp	r3, #0
 800161a:	d026      	beq.n	800166a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001620:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001624:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800162c:	e01d      	b.n	800166a <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001632:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a33      	ldr	r2, [pc, #204]	@ (800170c <HAL_ADC_Start_IT+0x168>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d004      	beq.n	800164e <HAL_ADC_Start_IT+0xaa>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a2f      	ldr	r2, [pc, #188]	@ (8001708 <HAL_ADC_Start_IT+0x164>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d10d      	bne.n	800166a <HAL_ADC_Start_IT+0xc6>
 800164e:	4b2f      	ldr	r3, [pc, #188]	@ (800170c <HAL_ADC_Start_IT+0x168>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001656:	2b00      	cmp	r3, #0
 8001658:	d007      	beq.n	800166a <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001662:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800166e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800167a:	f023 0206 	bic.w	r2, r3, #6
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001682:	e002      	b.n	800168a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2200      	movs	r2, #0
 800168e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f06f 0202 	mvn.w	r2, #2
 800169a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f042 0220 	orr.w	r2, r2, #32
 80016aa:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016ba:	d113      	bne.n	80016e4 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016c0:	4a11      	ldr	r2, [pc, #68]	@ (8001708 <HAL_ADC_Start_IT+0x164>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d105      	bne.n	80016d2 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <HAL_ADC_Start_IT+0x168>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d108      	bne.n	80016e4 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80016e0:	609a      	str	r2, [r3, #8]
 80016e2:	e00c      	b.n	80016fe <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	689a      	ldr	r2, [r3, #8]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	e003      	b.n	80016fe <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3710      	adds	r7, #16
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40012800 	.word	0x40012800
 800170c:	40012400 	.word	0x40012400

08001710 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	bc80      	pop	{r7}
 8001726:	4770      	bx	lr

08001728 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d03e      	beq.n	80017c8 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d039      	beq.n	80017c8 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f003 0310 	and.w	r3, r3, #16
 800175c:	2b00      	cmp	r3, #0
 800175e:	d105      	bne.n	800176c <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001764:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001776:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800177a:	d11d      	bne.n	80017b8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001780:	2b00      	cmp	r3, #0
 8001782:	d119      	bne.n	80017b8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685a      	ldr	r2, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0220 	bic.w	r2, r2, #32
 8001792:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f003 fb09 	bl	8004dd0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f06f 0212 	mvn.w	r2, #18
 80017c6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d04d      	beq.n	800186e <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f003 0304 	and.w	r3, r3, #4
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d048      	beq.n	800186e <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d105      	bne.n	80017f4 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017ec:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 80017fe:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001802:	d012      	beq.n	800182a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800180e:	2b00      	cmp	r3, #0
 8001810:	d125      	bne.n	800185e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800181c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001820:	d11d      	bne.n	800185e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001826:	2b00      	cmp	r3, #0
 8001828:	d119      	bne.n	800185e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001838:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800184a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d105      	bne.n	800185e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001856:	f043 0201 	orr.w	r2, r3, #1
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f9bd 	bl	8001bde <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f06f 020c 	mvn.w	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001874:	2b00      	cmp	r3, #0
 8001876:	d012      	beq.n	800189e <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00d      	beq.n	800189e <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001886:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 f809 	bl	80018a6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0201 	mvn.w	r2, #1
 800189c:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b083      	sub	sp, #12
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018c2:	2300      	movs	r3, #0
 80018c4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d101      	bne.n	80018d8 <HAL_ADC_ConfigChannel+0x20>
 80018d4:	2302      	movs	r3, #2
 80018d6:	e0dc      	b.n	8001a92 <HAL_ADC_ConfigChannel+0x1da>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b06      	cmp	r3, #6
 80018e6:	d81c      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	685a      	ldr	r2, [r3, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	3b05      	subs	r3, #5
 80018fa:	221f      	movs	r2, #31
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	4019      	ands	r1, r3
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	6818      	ldr	r0, [r3, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b05      	subs	r3, #5
 8001914:	fa00 f203 	lsl.w	r2, r0, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	430a      	orrs	r2, r1
 800191e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001920:	e03c      	b.n	800199c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d81c      	bhi.n	8001964 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	4413      	add	r3, r2
 800193a:	3b23      	subs	r3, #35	@ 0x23
 800193c:	221f      	movs	r2, #31
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	4019      	ands	r1, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	6818      	ldr	r0, [r3, #0]
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	4613      	mov	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	4413      	add	r3, r2
 8001954:	3b23      	subs	r3, #35	@ 0x23
 8001956:	fa00 f203 	lsl.w	r2, r0, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	631a      	str	r2, [r3, #48]	@ 0x30
 8001962:	e01b      	b.n	800199c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	3b41      	subs	r3, #65	@ 0x41
 8001976:	221f      	movs	r2, #31
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	4019      	ands	r1, r3
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	6818      	ldr	r0, [r3, #0]
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685a      	ldr	r2, [r3, #4]
 8001988:	4613      	mov	r3, r2
 800198a:	009b      	lsls	r3, r3, #2
 800198c:	4413      	add	r3, r2
 800198e:	3b41      	subs	r3, #65	@ 0x41
 8001990:	fa00 f203 	lsl.w	r2, r0, r3
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b09      	cmp	r3, #9
 80019a2:	d91c      	bls.n	80019de <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68d9      	ldr	r1, [r3, #12]
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	3b1e      	subs	r3, #30
 80019b6:	2207      	movs	r2, #7
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6898      	ldr	r0, [r3, #8]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	4413      	add	r3, r2
 80019ce:	3b1e      	subs	r3, #30
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
 80019dc:	e019      	b.n	8001a12 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6919      	ldr	r1, [r3, #16]
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	4413      	add	r3, r2
 80019ee:	2207      	movs	r2, #7
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	4019      	ands	r1, r3
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	6898      	ldr	r0, [r3, #8]
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	4613      	mov	r3, r2
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	4413      	add	r3, r2
 8001a06:	fa00 f203 	lsl.w	r2, r0, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	2b10      	cmp	r3, #16
 8001a18:	d003      	beq.n	8001a22 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a1e:	2b11      	cmp	r3, #17
 8001a20:	d132      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a1d      	ldr	r2, [pc, #116]	@ (8001a9c <HAL_ADC_ConfigChannel+0x1e4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d125      	bne.n	8001a78 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d126      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a48:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d11a      	bne.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a52:	4b13      	ldr	r3, [pc, #76]	@ (8001aa0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a13      	ldr	r2, [pc, #76]	@ (8001aa4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a58:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5c:	0c9a      	lsrs	r2, r3, #18
 8001a5e:	4613      	mov	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	4413      	add	r3, r2
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a68:	e002      	b.n	8001a70 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	3b01      	subs	r3, #1
 8001a6e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1f9      	bne.n	8001a6a <HAL_ADC_ConfigChannel+0x1b2>
 8001a76:	e007      	b.n	8001a88 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a7c:	f043 0220 	orr.w	r2, r3, #32
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	40012400 	.word	0x40012400
 8001aa0:	20000000 	.word	0x20000000
 8001aa4:	431bde83 	.word	0x431bde83

08001aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d040      	beq.n	8001b48 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f042 0201 	orr.w	r2, r2, #1
 8001ad4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <ADC_Enable+0xac>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a1f      	ldr	r2, [pc, #124]	@ (8001b58 <ADC_Enable+0xb0>)
 8001adc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ae0:	0c9b      	lsrs	r3, r3, #18
 8001ae2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001ae4:	e002      	b.n	8001aec <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f9      	bne.n	8001ae6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001af2:	f7ff fc51 	bl	8001398 <HAL_GetTick>
 8001af6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001af8:	e01f      	b.n	8001b3a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001afa:	f7ff fc4d 	bl	8001398 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d918      	bls.n	8001b3a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d011      	beq.n	8001b3a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	f043 0210 	orr.w	r2, r3, #16
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e007      	b.n	8001b4a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d1d8      	bne.n	8001afa <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000000 	.word	0x20000000
 8001b58:	431bde83 	.word	0x431bde83

08001b5c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b64:	2300      	movs	r3, #0
 8001b66:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d12e      	bne.n	8001bd4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 0201 	bic.w	r2, r2, #1
 8001b84:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b86:	f7ff fc07 	bl	8001398 <HAL_GetTick>
 8001b8a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001b8c:	e01b      	b.n	8001bc6 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001b8e:	f7ff fc03 	bl	8001398 <HAL_GetTick>
 8001b92:	4602      	mov	r2, r0
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	2b02      	cmp	r3, #2
 8001b9a:	d914      	bls.n	8001bc6 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d10d      	bne.n	8001bc6 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bae:	f043 0210 	orr.w	r2, r3, #16
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bba:	f043 0201 	orr.w	r2, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e007      	b.n	8001bd6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d0dc      	beq.n	8001b8e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3710      	adds	r7, #16
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c00:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c22:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <__NVIC_SetPriorityGrouping+0x44>)
 8001c24:	68bb      	ldr	r3, [r7, #8]
 8001c26:	60d3      	str	r3, [r2, #12]
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c3c:	4b04      	ldr	r3, [pc, #16]	@ (8001c50 <__NVIC_GetPriorityGrouping+0x18>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	f003 0307 	and.w	r3, r3, #7
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bc80      	pop	{r7}
 8001c4c:	4770      	bx	lr
 8001c4e:	bf00      	nop
 8001c50:	e000ed00 	.word	0xe000ed00

08001c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	db0b      	blt.n	8001c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c66:	79fb      	ldrb	r3, [r7, #7]
 8001c68:	f003 021f 	and.w	r2, r3, #31
 8001c6c:	4906      	ldr	r1, [pc, #24]	@ (8001c88 <__NVIC_EnableIRQ+0x34>)
 8001c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c72:	095b      	lsrs	r3, r3, #5
 8001c74:	2001      	movs	r0, #1
 8001c76:	fa00 f202 	lsl.w	r2, r0, r2
 8001c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	e000e100 	.word	0xe000e100

08001c8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	db0a      	blt.n	8001cb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2da      	uxtb	r2, r3
 8001ca4:	490c      	ldr	r1, [pc, #48]	@ (8001cd8 <__NVIC_SetPriority+0x4c>)
 8001ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001caa:	0112      	lsls	r2, r2, #4
 8001cac:	b2d2      	uxtb	r2, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb4:	e00a      	b.n	8001ccc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	b2da      	uxtb	r2, r3
 8001cba:	4908      	ldr	r1, [pc, #32]	@ (8001cdc <__NVIC_SetPriority+0x50>)
 8001cbc:	79fb      	ldrb	r3, [r7, #7]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	3b04      	subs	r3, #4
 8001cc4:	0112      	lsls	r2, r2, #4
 8001cc6:	b2d2      	uxtb	r2, r2
 8001cc8:	440b      	add	r3, r1
 8001cca:	761a      	strb	r2, [r3, #24]
}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bc80      	pop	{r7}
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000e100 	.word	0xe000e100
 8001cdc:	e000ed00 	.word	0xe000ed00

08001ce0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b089      	sub	sp, #36	@ 0x24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f1c3 0307 	rsb	r3, r3, #7
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	bf28      	it	cs
 8001cfe:	2304      	movcs	r3, #4
 8001d00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	3304      	adds	r3, #4
 8001d06:	2b06      	cmp	r3, #6
 8001d08:	d902      	bls.n	8001d10 <NVIC_EncodePriority+0x30>
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3b03      	subs	r3, #3
 8001d0e:	e000      	b.n	8001d12 <NVIC_EncodePriority+0x32>
 8001d10:	2300      	movs	r3, #0
 8001d12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d14:	f04f 32ff 	mov.w	r2, #4294967295
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43da      	mvns	r2, r3
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	401a      	ands	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d28:	f04f 31ff 	mov.w	r1, #4294967295
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d32:	43d9      	mvns	r1, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	4313      	orrs	r3, r2
         );
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3724      	adds	r7, #36	@ 0x24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d54:	d301      	bcc.n	8001d5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00f      	b.n	8001d7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d84 <SysTick_Config+0x40>)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d62:	210f      	movs	r1, #15
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f7ff ff90 	bl	8001c8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d6c:	4b05      	ldr	r3, [pc, #20]	@ (8001d84 <SysTick_Config+0x40>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d72:	4b04      	ldr	r3, [pc, #16]	@ (8001d84 <SysTick_Config+0x40>)
 8001d74:	2207      	movs	r2, #7
 8001d76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	e000e010 	.word	0xe000e010

08001d88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff ff2d 	bl	8001bf0 <__NVIC_SetPriorityGrouping>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b086      	sub	sp, #24
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	60b9      	str	r1, [r7, #8]
 8001da8:	607a      	str	r2, [r7, #4]
 8001daa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db0:	f7ff ff42 	bl	8001c38 <__NVIC_GetPriorityGrouping>
 8001db4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	6978      	ldr	r0, [r7, #20]
 8001dbc:	f7ff ff90 	bl	8001ce0 <NVIC_EncodePriority>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dc6:	4611      	mov	r1, r2
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7ff ff5f 	bl	8001c8c <__NVIC_SetPriority>
}
 8001dce:	bf00      	nop
 8001dd0:	3718      	adds	r7, #24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7ff ff35 	bl	8001c54 <__NVIC_EnableIRQ>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f7ff ffa2 	bl	8001d44 <SysTick_Config>
 8001e00:	4603      	mov	r3, r0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3708      	adds	r7, #8
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001e0e:	f001 f8c9 	bl	8002fa4 <HAL_SYSTICK_Callback>
}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
	...

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b08b      	sub	sp, #44	@ 0x2c
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e22:	2300      	movs	r3, #0
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e26:	2300      	movs	r3, #0
 8001e28:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e2a:	e169      	b.n	8002100 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	69fa      	ldr	r2, [r7, #28]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	69fb      	ldr	r3, [r7, #28]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	f040 8158 	bne.w	80020fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	4a9a      	ldr	r2, [pc, #616]	@ (80020b8 <HAL_GPIO_Init+0x2a0>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d05e      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e54:	4a98      	ldr	r2, [pc, #608]	@ (80020b8 <HAL_GPIO_Init+0x2a0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d875      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e5a:	4a98      	ldr	r2, [pc, #608]	@ (80020bc <HAL_GPIO_Init+0x2a4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d058      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e60:	4a96      	ldr	r2, [pc, #600]	@ (80020bc <HAL_GPIO_Init+0x2a4>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d86f      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e66:	4a96      	ldr	r2, [pc, #600]	@ (80020c0 <HAL_GPIO_Init+0x2a8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d052      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e6c:	4a94      	ldr	r2, [pc, #592]	@ (80020c0 <HAL_GPIO_Init+0x2a8>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d869      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e72:	4a94      	ldr	r2, [pc, #592]	@ (80020c4 <HAL_GPIO_Init+0x2ac>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d04c      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e78:	4a92      	ldr	r2, [pc, #584]	@ (80020c4 <HAL_GPIO_Init+0x2ac>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d863      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e7e:	4a92      	ldr	r2, [pc, #584]	@ (80020c8 <HAL_GPIO_Init+0x2b0>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d046      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
 8001e84:	4a90      	ldr	r2, [pc, #576]	@ (80020c8 <HAL_GPIO_Init+0x2b0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d85d      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e8a:	2b12      	cmp	r3, #18
 8001e8c:	d82a      	bhi.n	8001ee4 <HAL_GPIO_Init+0xcc>
 8001e8e:	2b12      	cmp	r3, #18
 8001e90:	d859      	bhi.n	8001f46 <HAL_GPIO_Init+0x12e>
 8001e92:	a201      	add	r2, pc, #4	@ (adr r2, 8001e98 <HAL_GPIO_Init+0x80>)
 8001e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e98:	08001f13 	.word	0x08001f13
 8001e9c:	08001eed 	.word	0x08001eed
 8001ea0:	08001eff 	.word	0x08001eff
 8001ea4:	08001f41 	.word	0x08001f41
 8001ea8:	08001f47 	.word	0x08001f47
 8001eac:	08001f47 	.word	0x08001f47
 8001eb0:	08001f47 	.word	0x08001f47
 8001eb4:	08001f47 	.word	0x08001f47
 8001eb8:	08001f47 	.word	0x08001f47
 8001ebc:	08001f47 	.word	0x08001f47
 8001ec0:	08001f47 	.word	0x08001f47
 8001ec4:	08001f47 	.word	0x08001f47
 8001ec8:	08001f47 	.word	0x08001f47
 8001ecc:	08001f47 	.word	0x08001f47
 8001ed0:	08001f47 	.word	0x08001f47
 8001ed4:	08001f47 	.word	0x08001f47
 8001ed8:	08001f47 	.word	0x08001f47
 8001edc:	08001ef5 	.word	0x08001ef5
 8001ee0:	08001f09 	.word	0x08001f09
 8001ee4:	4a79      	ldr	r2, [pc, #484]	@ (80020cc <HAL_GPIO_Init+0x2b4>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d013      	beq.n	8001f12 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001eea:	e02c      	b.n	8001f46 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	623b      	str	r3, [r7, #32]
          break;
 8001ef2:	e029      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	623b      	str	r3, [r7, #32]
          break;
 8001efc:	e024      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	3308      	adds	r3, #8
 8001f04:	623b      	str	r3, [r7, #32]
          break;
 8001f06:	e01f      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	330c      	adds	r3, #12
 8001f0e:	623b      	str	r3, [r7, #32]
          break;
 8001f10:	e01a      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d102      	bne.n	8001f20 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f1a:	2304      	movs	r3, #4
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e013      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d105      	bne.n	8001f34 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f28:	2308      	movs	r3, #8
 8001f2a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	611a      	str	r2, [r3, #16]
          break;
 8001f32:	e009      	b.n	8001f48 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f34:	2308      	movs	r3, #8
 8001f36:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	615a      	str	r2, [r3, #20]
          break;
 8001f3e:	e003      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
          break;
 8001f44:	e000      	b.n	8001f48 <HAL_GPIO_Init+0x130>
          break;
 8001f46:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	2bff      	cmp	r3, #255	@ 0xff
 8001f4c:	d801      	bhi.n	8001f52 <HAL_GPIO_Init+0x13a>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	e001      	b.n	8001f56 <HAL_GPIO_Init+0x13e>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3304      	adds	r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	2bff      	cmp	r3, #255	@ 0xff
 8001f5c:	d802      	bhi.n	8001f64 <HAL_GPIO_Init+0x14c>
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	e002      	b.n	8001f6a <HAL_GPIO_Init+0x152>
 8001f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f66:	3b08      	subs	r3, #8
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	210f      	movs	r1, #15
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	6a39      	ldr	r1, [r7, #32]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	fa01 f303 	lsl.w	r3, r1, r3
 8001f84:	431a      	orrs	r2, r3
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f000 80b1 	beq.w	80020fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f98:	4b4d      	ldr	r3, [pc, #308]	@ (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a4c      	ldr	r2, [pc, #304]	@ (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001f9e:	f043 0301 	orr.w	r3, r3, #1
 8001fa2:	6193      	str	r3, [r2, #24]
 8001fa4:	4b4a      	ldr	r3, [pc, #296]	@ (80020d0 <HAL_GPIO_Init+0x2b8>)
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fb0:	4a48      	ldr	r2, [pc, #288]	@ (80020d4 <HAL_GPIO_Init+0x2bc>)
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fbc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	220f      	movs	r2, #15
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a40      	ldr	r2, [pc, #256]	@ (80020d8 <HAL_GPIO_Init+0x2c0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_GPIO_Init+0x1ec>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a3f      	ldr	r2, [pc, #252]	@ (80020dc <HAL_GPIO_Init+0x2c4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1e8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a3e      	ldr	r2, [pc, #248]	@ (80020e0 <HAL_GPIO_Init+0x2c8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1e4>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a3d      	ldr	r2, [pc, #244]	@ (80020e4 <HAL_GPIO_Init+0x2cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1e0>
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e006      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e004      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	e002      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8002000:	2301      	movs	r3, #1
 8002002:	e000      	b.n	8002006 <HAL_GPIO_Init+0x1ee>
 8002004:	2300      	movs	r3, #0
 8002006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002008:	f002 0203 	and.w	r2, r2, #3
 800200c:	0092      	lsls	r2, r2, #2
 800200e:	4093      	lsls	r3, r2
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002016:	492f      	ldr	r1, [pc, #188]	@ (80020d4 <HAL_GPIO_Init+0x2bc>)
 8002018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d006      	beq.n	800203e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002030:	4b2d      	ldr	r3, [pc, #180]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	492c      	ldr	r1, [pc, #176]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	608b      	str	r3, [r1, #8]
 800203c:	e006      	b.n	800204c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800203e:	4b2a      	ldr	r3, [pc, #168]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002040:	689a      	ldr	r2, [r3, #8]
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	43db      	mvns	r3, r3
 8002046:	4928      	ldr	r1, [pc, #160]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002048:	4013      	ands	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d006      	beq.n	8002066 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002058:	4b23      	ldr	r3, [pc, #140]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4922      	ldr	r1, [pc, #136]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e006      	b.n	8002074 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002066:	4b20      	ldr	r3, [pc, #128]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	43db      	mvns	r3, r3
 800206e:	491e      	ldr	r1, [pc, #120]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002070:	4013      	ands	r3, r2
 8002072:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d006      	beq.n	800208e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002080:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	4918      	ldr	r1, [pc, #96]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
 800208c:	e006      	b.n	800209c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002090:	685a      	ldr	r2, [r3, #4]
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	43db      	mvns	r3, r3
 8002096:	4914      	ldr	r1, [pc, #80]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 8002098:	4013      	ands	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d021      	beq.n	80020ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020a8:	4b0f      	ldr	r3, [pc, #60]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	490e      	ldr	r1, [pc, #56]	@ (80020e8 <HAL_GPIO_Init+0x2d0>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	600b      	str	r3, [r1, #0]
 80020b4:	e021      	b.n	80020fa <HAL_GPIO_Init+0x2e2>
 80020b6:	bf00      	nop
 80020b8:	10320000 	.word	0x10320000
 80020bc:	10310000 	.word	0x10310000
 80020c0:	10220000 	.word	0x10220000
 80020c4:	10210000 	.word	0x10210000
 80020c8:	10120000 	.word	0x10120000
 80020cc:	10110000 	.word	0x10110000
 80020d0:	40021000 	.word	0x40021000
 80020d4:	40010000 	.word	0x40010000
 80020d8:	40010800 	.word	0x40010800
 80020dc:	40010c00 	.word	0x40010c00
 80020e0:	40011000 	.word	0x40011000
 80020e4:	40011400 	.word	0x40011400
 80020e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020ec:	4b0b      	ldr	r3, [pc, #44]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	43db      	mvns	r3, r3
 80020f4:	4909      	ldr	r1, [pc, #36]	@ (800211c <HAL_GPIO_Init+0x304>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020fc:	3301      	adds	r3, #1
 80020fe:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	fa22 f303 	lsr.w	r3, r2, r3
 800210a:	2b00      	cmp	r3, #0
 800210c:	f47f ae8e 	bne.w	8001e2c <HAL_GPIO_Init+0x14>
  }
}
 8002110:	bf00      	nop
 8002112:	bf00      	nop
 8002114:	372c      	adds	r7, #44	@ 0x2c
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	40010400 	.word	0x40010400

08002120 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	887b      	ldrh	r3, [r7, #2]
 8002132:	4013      	ands	r3, r2
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
 800213c:	e001      	b.n	8002142 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002142:	7bfb      	ldrb	r3, [r7, #15]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	bc80      	pop	{r7}
 800214c:	4770      	bx	lr

0800214e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800214e:	b480      	push	{r7}
 8002150:	b083      	sub	sp, #12
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	460b      	mov	r3, r1
 8002158:	807b      	strh	r3, [r7, #2]
 800215a:	4613      	mov	r3, r2
 800215c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800215e:	787b      	ldrb	r3, [r7, #1]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800216a:	e003      	b.n	8002174 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800216c:	887b      	ldrh	r3, [r7, #2]
 800216e:	041a      	lsls	r2, r3, #16
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	611a      	str	r2, [r3, #16]
}
 8002174:	bf00      	nop
 8002176:	370c      	adds	r7, #12
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr

0800217e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800217e:	b480      	push	{r7}
 8002180:	b085      	sub	sp, #20
 8002182:	af00      	add	r7, sp, #0
 8002184:	6078      	str	r0, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002190:	887a      	ldrh	r2, [r7, #2]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	4013      	ands	r3, r2
 8002196:	041a      	lsls	r2, r3, #16
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	43d9      	mvns	r1, r3
 800219c:	887b      	ldrh	r3, [r7, #2]
 800219e:	400b      	ands	r3, r1
 80021a0:	431a      	orrs	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	611a      	str	r2, [r3, #16]
}
 80021a6:	bf00      	nop
 80021a8:	3714      	adds	r7, #20
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bc80      	pop	{r7}
 80021ae:	4770      	bx	lr

080021b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021ba:	4b08      	ldr	r3, [pc, #32]	@ (80021dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021bc:	695a      	ldr	r2, [r3, #20]
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d006      	beq.n	80021d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c6:	4a05      	ldr	r2, [pc, #20]	@ (80021dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021cc:	88fb      	ldrh	r3, [r7, #6]
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 f806 	bl	80021e0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d4:	bf00      	nop
 80021d6:	3708      	adds	r7, #8
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40010400 	.word	0x40010400

080021e0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80021ea:	bf00      	nop
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e272      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 8087 	beq.w	8002322 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002214:	4b92      	ldr	r3, [pc, #584]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	2b04      	cmp	r3, #4
 800221e:	d00c      	beq.n	800223a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002220:	4b8f      	ldr	r3, [pc, #572]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 030c 	and.w	r3, r3, #12
 8002228:	2b08      	cmp	r3, #8
 800222a:	d112      	bne.n	8002252 <HAL_RCC_OscConfig+0x5e>
 800222c:	4b8c      	ldr	r3, [pc, #560]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002238:	d10b      	bne.n	8002252 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800223a:	4b89      	ldr	r3, [pc, #548]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d06c      	beq.n	8002320 <HAL_RCC_OscConfig+0x12c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d168      	bne.n	8002320 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e24c      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800225a:	d106      	bne.n	800226a <HAL_RCC_OscConfig+0x76>
 800225c:	4b80      	ldr	r3, [pc, #512]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a7f      	ldr	r2, [pc, #508]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002266:	6013      	str	r3, [r2, #0]
 8002268:	e02e      	b.n	80022c8 <HAL_RCC_OscConfig+0xd4>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d10c      	bne.n	800228c <HAL_RCC_OscConfig+0x98>
 8002272:	4b7b      	ldr	r3, [pc, #492]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a7a      	ldr	r2, [pc, #488]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002278:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b78      	ldr	r3, [pc, #480]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a77      	ldr	r2, [pc, #476]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002284:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e01d      	b.n	80022c8 <HAL_RCC_OscConfig+0xd4>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002294:	d10c      	bne.n	80022b0 <HAL_RCC_OscConfig+0xbc>
 8002296:	4b72      	ldr	r3, [pc, #456]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a71      	ldr	r2, [pc, #452]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800229c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a0:	6013      	str	r3, [r2, #0]
 80022a2:	4b6f      	ldr	r3, [pc, #444]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ac:	6013      	str	r3, [r2, #0]
 80022ae:	e00b      	b.n	80022c8 <HAL_RCC_OscConfig+0xd4>
 80022b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ba:	6013      	str	r3, [r2, #0]
 80022bc:	4b68      	ldr	r3, [pc, #416]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a67      	ldr	r2, [pc, #412]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d013      	beq.n	80022f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff f862 	bl	8001398 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d8:	f7ff f85e 	bl	8001398 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b64      	cmp	r3, #100	@ 0x64
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e200      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ea:	4b5d      	ldr	r3, [pc, #372]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0xe4>
 80022f6:	e014      	b.n	8002322 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f8:	f7ff f84e 	bl	8001398 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022fe:	e008      	b.n	8002312 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002300:	f7ff f84a 	bl	8001398 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b64      	cmp	r3, #100	@ 0x64
 800230c:	d901      	bls.n	8002312 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e1ec      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002312:	4b53      	ldr	r3, [pc, #332]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d1f0      	bne.n	8002300 <HAL_RCC_OscConfig+0x10c>
 800231e:	e000      	b.n	8002322 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002320:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d063      	beq.n	80023f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800232e:	4b4c      	ldr	r3, [pc, #304]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002330:	685b      	ldr	r3, [r3, #4]
 8002332:	f003 030c 	and.w	r3, r3, #12
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00b      	beq.n	8002352 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800233a:	4b49      	ldr	r3, [pc, #292]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 030c 	and.w	r3, r3, #12
 8002342:	2b08      	cmp	r3, #8
 8002344:	d11c      	bne.n	8002380 <HAL_RCC_OscConfig+0x18c>
 8002346:	4b46      	ldr	r3, [pc, #280]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d116      	bne.n	8002380 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002352:	4b43      	ldr	r3, [pc, #268]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d005      	beq.n	800236a <HAL_RCC_OscConfig+0x176>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d001      	beq.n	800236a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e1c0      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236a:	4b3d      	ldr	r3, [pc, #244]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4939      	ldr	r1, [pc, #228]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800237a:	4313      	orrs	r3, r2
 800237c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800237e:	e03a      	b.n	80023f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d020      	beq.n	80023ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002388:	4b36      	ldr	r3, [pc, #216]	@ (8002464 <HAL_RCC_OscConfig+0x270>)
 800238a:	2201      	movs	r2, #1
 800238c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800238e:	f7ff f803 	bl	8001398 <HAL_GetTick>
 8002392:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002394:	e008      	b.n	80023a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002396:	f7fe ffff 	bl	8001398 <HAL_GetTick>
 800239a:	4602      	mov	r2, r0
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e1a1      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023a8:	4b2d      	ldr	r3, [pc, #180]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0f0      	beq.n	8002396 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	695b      	ldr	r3, [r3, #20]
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4927      	ldr	r1, [pc, #156]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	600b      	str	r3, [r1, #0]
 80023c8:	e015      	b.n	80023f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023ca:	4b26      	ldr	r3, [pc, #152]	@ (8002464 <HAL_RCC_OscConfig+0x270>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d0:	f7fe ffe2 	bl	8001398 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d8:	f7fe ffde 	bl	8001398 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e180      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1f0      	bne.n	80023d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d03a      	beq.n	8002478 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	699b      	ldr	r3, [r3, #24]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d019      	beq.n	800243e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800240a:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002410:	f7fe ffc2 	bl	8001398 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002418:	f7fe ffbe 	bl	8001398 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b02      	cmp	r3, #2
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e160      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800242a:	4b0d      	ldr	r3, [pc, #52]	@ (8002460 <HAL_RCC_OscConfig+0x26c>)
 800242c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800242e:	f003 0302 	and.w	r3, r3, #2
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002436:	2001      	movs	r0, #1
 8002438:	f000 face 	bl	80029d8 <RCC_Delay>
 800243c:	e01c      	b.n	8002478 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800243e:	4b0a      	ldr	r3, [pc, #40]	@ (8002468 <HAL_RCC_OscConfig+0x274>)
 8002440:	2200      	movs	r2, #0
 8002442:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002444:	f7fe ffa8 	bl	8001398 <HAL_GetTick>
 8002448:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800244a:	e00f      	b.n	800246c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800244c:	f7fe ffa4 	bl	8001398 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	2b02      	cmp	r3, #2
 8002458:	d908      	bls.n	800246c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e146      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000
 8002464:	42420000 	.word	0x42420000
 8002468:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800246c:	4b92      	ldr	r3, [pc, #584]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d1e9      	bne.n	800244c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80a6 	beq.w	80025d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002486:	2300      	movs	r3, #0
 8002488:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800248a:	4b8b      	ldr	r3, [pc, #556]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d10d      	bne.n	80024b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002496:	4b88      	ldr	r3, [pc, #544]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002498:	69db      	ldr	r3, [r3, #28]
 800249a:	4a87      	ldr	r2, [pc, #540]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800249c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024a0:	61d3      	str	r3, [r2, #28]
 80024a2:	4b85      	ldr	r3, [pc, #532]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80024a4:	69db      	ldr	r3, [r3, #28]
 80024a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ae:	2301      	movs	r3, #1
 80024b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b2:	4b82      	ldr	r3, [pc, #520]	@ (80026bc <HAL_RCC_OscConfig+0x4c8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d118      	bne.n	80024f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024be:	4b7f      	ldr	r3, [pc, #508]	@ (80026bc <HAL_RCC_OscConfig+0x4c8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7e      	ldr	r2, [pc, #504]	@ (80026bc <HAL_RCC_OscConfig+0x4c8>)
 80024c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024ca:	f7fe ff65 	bl	8001398 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024d2:	f7fe ff61 	bl	8001398 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b64      	cmp	r3, #100	@ 0x64
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e103      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e4:	4b75      	ldr	r3, [pc, #468]	@ (80026bc <HAL_RCC_OscConfig+0x4c8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d106      	bne.n	8002506 <HAL_RCC_OscConfig+0x312>
 80024f8:	4b6f      	ldr	r3, [pc, #444]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	4a6e      	ldr	r2, [pc, #440]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80024fe:	f043 0301 	orr.w	r3, r3, #1
 8002502:	6213      	str	r3, [r2, #32]
 8002504:	e02d      	b.n	8002562 <HAL_RCC_OscConfig+0x36e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d10c      	bne.n	8002528 <HAL_RCC_OscConfig+0x334>
 800250e:	4b6a      	ldr	r3, [pc, #424]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	4a69      	ldr	r2, [pc, #420]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002514:	f023 0301 	bic.w	r3, r3, #1
 8002518:	6213      	str	r3, [r2, #32]
 800251a:	4b67      	ldr	r3, [pc, #412]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800251c:	6a1b      	ldr	r3, [r3, #32]
 800251e:	4a66      	ldr	r2, [pc, #408]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	f023 0304 	bic.w	r3, r3, #4
 8002524:	6213      	str	r3, [r2, #32]
 8002526:	e01c      	b.n	8002562 <HAL_RCC_OscConfig+0x36e>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	2b05      	cmp	r3, #5
 800252e:	d10c      	bne.n	800254a <HAL_RCC_OscConfig+0x356>
 8002530:	4b61      	ldr	r3, [pc, #388]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4a60      	ldr	r2, [pc, #384]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002536:	f043 0304 	orr.w	r3, r3, #4
 800253a:	6213      	str	r3, [r2, #32]
 800253c:	4b5e      	ldr	r3, [pc, #376]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	6a1b      	ldr	r3, [r3, #32]
 8002540:	4a5d      	ldr	r2, [pc, #372]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6213      	str	r3, [r2, #32]
 8002548:	e00b      	b.n	8002562 <HAL_RCC_OscConfig+0x36e>
 800254a:	4b5b      	ldr	r3, [pc, #364]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4a5a      	ldr	r2, [pc, #360]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002550:	f023 0301 	bic.w	r3, r3, #1
 8002554:	6213      	str	r3, [r2, #32]
 8002556:	4b58      	ldr	r3, [pc, #352]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002558:	6a1b      	ldr	r3, [r3, #32]
 800255a:	4a57      	ldr	r2, [pc, #348]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	f023 0304 	bic.w	r3, r3, #4
 8002560:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d015      	beq.n	8002596 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800256a:	f7fe ff15 	bl	8001398 <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe ff11 	bl	8001398 <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0b1      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002588:	4b4b      	ldr	r3, [pc, #300]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0ee      	beq.n	8002572 <HAL_RCC_OscConfig+0x37e>
 8002594:	e014      	b.n	80025c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002596:	f7fe feff 	bl	8001398 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800259c:	e00a      	b.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800259e:	f7fe fefb 	bl	8001398 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e09b      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b4:	4b40      	ldr	r3, [pc, #256]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80025b6:	6a1b      	ldr	r3, [r3, #32]
 80025b8:	f003 0302 	and.w	r3, r3, #2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d1ee      	bne.n	800259e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80025c0:	7dfb      	ldrb	r3, [r7, #23]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d105      	bne.n	80025d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c6:	4b3c      	ldr	r3, [pc, #240]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	4a3b      	ldr	r2, [pc, #236]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80025cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 8087 	beq.w	80026ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025dc:	4b36      	ldr	r3, [pc, #216]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f003 030c 	and.w	r3, r3, #12
 80025e4:	2b08      	cmp	r3, #8
 80025e6:	d061      	beq.n	80026ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d146      	bne.n	800267e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f0:	4b33      	ldr	r3, [pc, #204]	@ (80026c0 <HAL_RCC_OscConfig+0x4cc>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fecf 	bl	8001398 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025fc:	e008      	b.n	8002610 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025fe:	f7fe fecb 	bl	8001398 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	2b02      	cmp	r3, #2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e06d      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002610:	4b29      	ldr	r3, [pc, #164]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1f0      	bne.n	80025fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002624:	d108      	bne.n	8002638 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002626:	4b24      	ldr	r3, [pc, #144]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	4921      	ldr	r1, [pc, #132]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002638:	4b1f      	ldr	r3, [pc, #124]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a19      	ldr	r1, [r3, #32]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002648:	430b      	orrs	r3, r1
 800264a:	491b      	ldr	r1, [pc, #108]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	4313      	orrs	r3, r2
 800264e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002650:	4b1b      	ldr	r3, [pc, #108]	@ (80026c0 <HAL_RCC_OscConfig+0x4cc>)
 8002652:	2201      	movs	r2, #1
 8002654:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002656:	f7fe fe9f 	bl	8001398 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7fe fe9b 	bl	8001398 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e03d      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x46a>
 800267c:	e035      	b.n	80026ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800267e:	4b10      	ldr	r3, [pc, #64]	@ (80026c0 <HAL_RCC_OscConfig+0x4cc>)
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fe88 	bl	8001398 <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800268c:	f7fe fe84 	bl	8001398 <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e026      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800269e:	4b06      	ldr	r3, [pc, #24]	@ (80026b8 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x498>
 80026aa:	e01e      	b.n	80026ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d107      	bne.n	80026c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80026b4:	2301      	movs	r3, #1
 80026b6:	e019      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
 80026c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCC_OscConfig+0x500>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e000      	b.n	80026ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000

080026f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b084      	sub	sp, #16
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0d0      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800270c:	4b6a      	ldr	r3, [pc, #424]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0307 	and.w	r3, r3, #7
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d910      	bls.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271a:	4b67      	ldr	r3, [pc, #412]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 0207 	bic.w	r2, r3, #7
 8002722:	4965      	ldr	r1, [pc, #404]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272a:	4b63      	ldr	r3, [pc, #396]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	429a      	cmp	r2, r3
 8002736:	d001      	beq.n	800273c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e0b8      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	d005      	beq.n	8002760 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002754:	4b59      	ldr	r3, [pc, #356]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	4a58      	ldr	r2, [pc, #352]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800275e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0308 	and.w	r3, r3, #8
 8002768:	2b00      	cmp	r3, #0
 800276a:	d005      	beq.n	8002778 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800276c:	4b53      	ldr	r3, [pc, #332]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	4a52      	ldr	r2, [pc, #328]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002776:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002778:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	494d      	ldr	r1, [pc, #308]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	4313      	orrs	r3, r2
 8002788:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d040      	beq.n	8002818 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d107      	bne.n	80027ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800279e:	4b47      	ldr	r3, [pc, #284]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d115      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e07f      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b6:	4b41      	ldr	r3, [pc, #260]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e073      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c6:	4b3d      	ldr	r3, [pc, #244]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d101      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e06b      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b39      	ldr	r3, [pc, #228]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4936      	ldr	r1, [pc, #216]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fdd6 	bl	8001398 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fdd2 	bl	8001398 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e053      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b2d      	ldr	r3, [pc, #180]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002818:	4b27      	ldr	r3, [pc, #156]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0307 	and.w	r3, r3, #7
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d210      	bcs.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b24      	ldr	r3, [pc, #144]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f023 0207 	bic.w	r2, r3, #7
 800282e:	4922      	ldr	r1, [pc, #136]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002836:	4b20      	ldr	r3, [pc, #128]	@ (80028b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d001      	beq.n	8002848 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e032      	b.n	80028ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002854:	4b19      	ldr	r3, [pc, #100]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	4916      	ldr	r1, [pc, #88]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0308 	and.w	r3, r3, #8
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002872:	4b12      	ldr	r3, [pc, #72]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	490e      	ldr	r1, [pc, #56]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002886:	f000 f821 	bl	80028cc <HAL_RCC_GetSysClockFreq>
 800288a:	4602      	mov	r2, r0
 800288c:	4b0b      	ldr	r3, [pc, #44]	@ (80028bc <HAL_RCC_ClockConfig+0x1c4>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f003 030f 	and.w	r3, r3, #15
 8002896:	490a      	ldr	r1, [pc, #40]	@ (80028c0 <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	5ccb      	ldrb	r3, [r1, r3]
 800289a:	fa22 f303 	lsr.w	r3, r2, r3
 800289e:	4a09      	ldr	r2, [pc, #36]	@ (80028c4 <HAL_RCC_ClockConfig+0x1cc>)
 80028a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028a2:	4b09      	ldr	r3, [pc, #36]	@ (80028c8 <HAL_RCC_ClockConfig+0x1d0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7fe fd34 	bl	8001314 <HAL_InitTick>

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	40022000 	.word	0x40022000
 80028bc:	40021000 	.word	0x40021000
 80028c0:	08006d00 	.word	0x08006d00
 80028c4:	20000000 	.word	0x20000000
 80028c8:	20000004 	.word	0x20000004

080028cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b087      	sub	sp, #28
 80028d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80028d2:	2300      	movs	r3, #0
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	2300      	movs	r3, #0
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	2300      	movs	r3, #0
 80028e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x94>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f003 030c 	and.w	r3, r3, #12
 80028f2:	2b04      	cmp	r3, #4
 80028f4:	d002      	beq.n	80028fc <HAL_RCC_GetSysClockFreq+0x30>
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d003      	beq.n	8002902 <HAL_RCC_GetSysClockFreq+0x36>
 80028fa:	e027      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028fc:	4b19      	ldr	r3, [pc, #100]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x98>)
 80028fe:	613b      	str	r3, [r7, #16]
      break;
 8002900:	e027      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	0c9b      	lsrs	r3, r3, #18
 8002906:	f003 030f 	and.w	r3, r3, #15
 800290a:	4a17      	ldr	r2, [pc, #92]	@ (8002968 <HAL_RCC_GetSysClockFreq+0x9c>)
 800290c:	5cd3      	ldrb	r3, [r2, r3]
 800290e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d010      	beq.n	800293c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800291a:	4b11      	ldr	r3, [pc, #68]	@ (8002960 <HAL_RCC_GetSysClockFreq+0x94>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	0c5b      	lsrs	r3, r3, #17
 8002920:	f003 0301 	and.w	r3, r3, #1
 8002924:	4a11      	ldr	r2, [pc, #68]	@ (800296c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002926:	5cd3      	ldrb	r3, [r2, r3]
 8002928:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a0d      	ldr	r2, [pc, #52]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x98>)
 800292e:	fb03 f202 	mul.w	r2, r3, r2
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	e004      	b.n	8002946 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a0c      	ldr	r2, [pc, #48]	@ (8002970 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002940:	fb02 f303 	mul.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	613b      	str	r3, [r7, #16]
      break;
 800294a:	e002      	b.n	8002952 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800294c:	4b05      	ldr	r3, [pc, #20]	@ (8002964 <HAL_RCC_GetSysClockFreq+0x98>)
 800294e:	613b      	str	r3, [r7, #16]
      break;
 8002950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002952:	693b      	ldr	r3, [r7, #16]
}
 8002954:	4618      	mov	r0, r3
 8002956:	371c      	adds	r7, #28
 8002958:	46bd      	mov	sp, r7
 800295a:	bc80      	pop	{r7}
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	40021000 	.word	0x40021000
 8002964:	007a1200 	.word	0x007a1200
 8002968:	08006d18 	.word	0x08006d18
 800296c:	08006d28 	.word	0x08006d28
 8002970:	003d0900 	.word	0x003d0900

08002974 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002978:	4b02      	ldr	r3, [pc, #8]	@ (8002984 <HAL_RCC_GetHCLKFreq+0x10>)
 800297a:	681b      	ldr	r3, [r3, #0]
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	bc80      	pop	{r7}
 8002982:	4770      	bx	lr
 8002984:	20000000 	.word	0x20000000

08002988 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800298c:	f7ff fff2 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 8002990:	4602      	mov	r2, r0
 8002992:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	4903      	ldr	r1, [pc, #12]	@ (80029ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800299e:	5ccb      	ldrb	r3, [r1, r3]
 80029a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40021000 	.word	0x40021000
 80029ac:	08006d10 	.word	0x08006d10

080029b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029b4:	f7ff ffde 	bl	8002974 <HAL_RCC_GetHCLKFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b05      	ldr	r3, [pc, #20]	@ (80029d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	0adb      	lsrs	r3, r3, #11
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	4903      	ldr	r1, [pc, #12]	@ (80029d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	40021000 	.word	0x40021000
 80029d4:	08006d10 	.word	0x08006d10

080029d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029d8:	b480      	push	{r7}
 80029da:	b085      	sub	sp, #20
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029e0:	4b0a      	ldr	r3, [pc, #40]	@ (8002a0c <RCC_Delay+0x34>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <RCC_Delay+0x38>)
 80029e6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ea:	0a5b      	lsrs	r3, r3, #9
 80029ec:	687a      	ldr	r2, [r7, #4]
 80029ee:	fb02 f303 	mul.w	r3, r2, r3
 80029f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80029f4:	bf00      	nop
  }
  while (Delay --);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e5a      	subs	r2, r3, #1
 80029fa:	60fa      	str	r2, [r7, #12]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d1f9      	bne.n	80029f4 <RCC_Delay+0x1c>
}
 8002a00:	bf00      	nop
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	20000000 	.word	0x20000000
 8002a10:	10624dd3 	.word	0x10624dd3

08002a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	613b      	str	r3, [r7, #16]
 8002a20:	2300      	movs	r3, #0
 8002a22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d07d      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002a30:	2300      	movs	r3, #0
 8002a32:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a34:	4b4f      	ldr	r3, [pc, #316]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	69db      	ldr	r3, [r3, #28]
 8002a38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d10d      	bne.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a40:	4b4c      	ldr	r3, [pc, #304]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	69db      	ldr	r3, [r3, #28]
 8002a44:	4a4b      	ldr	r2, [pc, #300]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a4a:	61d3      	str	r3, [r2, #28]
 8002a4c:	4b49      	ldr	r3, [pc, #292]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a5c:	4b46      	ldr	r3, [pc, #280]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d118      	bne.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a68:	4b43      	ldr	r3, [pc, #268]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a42      	ldr	r2, [pc, #264]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a6e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a74:	f7fe fc90 	bl	8001398 <HAL_GetTick>
 8002a78:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a7a:	e008      	b.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a7c:	f7fe fc8c 	bl	8001398 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	693b      	ldr	r3, [r7, #16]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b64      	cmp	r3, #100	@ 0x64
 8002a88:	d901      	bls.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e06d      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8e:	4b3a      	ldr	r3, [pc, #232]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d0f0      	beq.n	8002a7c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a9a:	4b36      	ldr	r3, [pc, #216]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9c:	6a1b      	ldr	r3, [r3, #32]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002aa2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d02e      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab2:	68fa      	ldr	r2, [r7, #12]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	d027      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ac2:	4b2e      	ldr	r3, [pc, #184]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002ac8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b7c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ace:	4a29      	ldr	r2, [pc, #164]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d014      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ade:	f7fe fc5b 	bl	8001398 <HAL_GetTick>
 8002ae2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e00a      	b.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe fc57 	bl	8001398 <HAL_GetTick>
 8002aea:	4602      	mov	r2, r0
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d901      	bls.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e036      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ee      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b08:	4b1a      	ldr	r3, [pc, #104]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	4917      	ldr	r1, [pc, #92]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b1a:	7dfb      	ldrb	r3, [r7, #23]
 8002b1c:	2b01      	cmp	r3, #1
 8002b1e:	d105      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b20:	4b14      	ldr	r3, [pc, #80]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	4a13      	ldr	r2, [pc, #76]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0302 	and.w	r3, r3, #2
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d008      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b38:	4b0e      	ldr	r3, [pc, #56]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	490b      	ldr	r1, [pc, #44]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d008      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b56:	4b07      	ldr	r3, [pc, #28]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4904      	ldr	r1, [pc, #16]	@ (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002b68:	2300      	movs	r3, #0
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3718      	adds	r7, #24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	40021000 	.word	0x40021000
 8002b78:	40007000 	.word	0x40007000
 8002b7c:	42420440 	.word	0x42420440

08002b80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e042      	b.n	8002c18 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d106      	bne.n	8002bac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7fe faba 	bl	8001120 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2224      	movs	r2, #36	@ 0x24
 8002bb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002bc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f000 f82b 	bl	8002c20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	691a      	ldr	r2, [r3, #16]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002bd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695a      	ldr	r2, [r3, #20]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002be8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	430a      	orrs	r2, r1
 8002c3c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	689a      	ldr	r2, [r3, #8]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	431a      	orrs	r2, r3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	695b      	ldr	r3, [r3, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002c5a:	f023 030c 	bic.w	r3, r3, #12
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	68b9      	ldr	r1, [r7, #8]
 8002c64:	430b      	orrs	r3, r1
 8002c66:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699a      	ldr	r2, [r3, #24]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <UART_SetConfig+0x114>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d103      	bne.n	8002c90 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff fe92 	bl	80029b0 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	60f8      	str	r0, [r7, #12]
 8002c8e:	e002      	b.n	8002c96 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c90:	f7ff fe7a 	bl	8002988 <HAL_RCC_GetPCLK1Freq>
 8002c94:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c96:	68fa      	ldr	r2, [r7, #12]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009a      	lsls	r2, r3, #2
 8002ca0:	441a      	add	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <UART_SetConfig+0x118>)
 8002cae:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb2:	095b      	lsrs	r3, r3, #5
 8002cb4:	0119      	lsls	r1, r3, #4
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	4413      	add	r3, r2
 8002cbe:	009a      	lsls	r2, r3, #2
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8002d38 <UART_SetConfig+0x118>)
 8002cce:	fba3 0302 	umull	r0, r3, r3, r2
 8002cd2:	095b      	lsrs	r3, r3, #5
 8002cd4:	2064      	movs	r0, #100	@ 0x64
 8002cd6:	fb00 f303 	mul.w	r3, r0, r3
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	3332      	adds	r3, #50	@ 0x32
 8002ce0:	4a15      	ldr	r2, [pc, #84]	@ (8002d38 <UART_SetConfig+0x118>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cec:	4419      	add	r1, r3
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009a      	lsls	r2, r3, #2
 8002cf8:	441a      	add	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d04:	4b0c      	ldr	r3, [pc, #48]	@ (8002d38 <UART_SetConfig+0x118>)
 8002d06:	fba3 0302 	umull	r0, r3, r3, r2
 8002d0a:	095b      	lsrs	r3, r3, #5
 8002d0c:	2064      	movs	r0, #100	@ 0x64
 8002d0e:	fb00 f303 	mul.w	r3, r0, r3
 8002d12:	1ad3      	subs	r3, r2, r3
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	3332      	adds	r3, #50	@ 0x32
 8002d18:	4a07      	ldr	r2, [pc, #28]	@ (8002d38 <UART_SetConfig+0x118>)
 8002d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	f003 020f 	and.w	r2, r3, #15
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	440a      	add	r2, r1
 8002d2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d2c:	bf00      	nop
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40013800 	.word	0x40013800
 8002d38:	51eb851f 	.word	0x51eb851f

08002d3c <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8002d3c:	b590      	push	{r4, r7, lr}
 8002d3e:	b085      	sub	sp, #20
 8002d40:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 8002d42:	b672      	cpsid	i
 8002d44:	4b4d      	ldr	r3, [pc, #308]	@ (8002e7c <app_init+0x140>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a4d      	ldr	r2, [pc, #308]	@ (8002e80 <app_init+0x144>)
 8002d4a:	213f      	movs	r1, #63	@ 0x3f
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f002 fd21 	bl	8005794 <sniprintf>
 8002d52:	4603      	mov	r3, r0
 8002d54:	4a4b      	ldr	r2, [pc, #300]	@ (8002e84 <app_init+0x148>)
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	4b48      	ldr	r3, [pc, #288]	@ (8002e7c <app_init+0x140>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fc97 	bl	8003690 <logger_log_print_>
 8002d62:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 8002d64:	b672      	cpsid	i
 8002d66:	4b45      	ldr	r3, [pc, #276]	@ (8002e7c <app_init+0x140>)
 8002d68:	681c      	ldr	r4, [r3, #0]
 8002d6a:	f7fe fb15 	bl	8001398 <HAL_GetTick>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	9300      	str	r3, [sp, #0]
 8002d72:	4b45      	ldr	r3, [pc, #276]	@ (8002e88 <app_init+0x14c>)
 8002d74:	4a45      	ldr	r2, [pc, #276]	@ (8002e8c <app_init+0x150>)
 8002d76:	213f      	movs	r1, #63	@ 0x3f
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f002 fd0b 	bl	8005794 <sniprintf>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	4a40      	ldr	r2, [pc, #256]	@ (8002e84 <app_init+0x148>)
 8002d82:	6013      	str	r3, [r2, #0]
 8002d84:	4b3d      	ldr	r3, [pc, #244]	@ (8002e7c <app_init+0x140>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 fc81 	bl	8003690 <logger_log_print_>
 8002d8e:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8002d90:	b672      	cpsid	i
 8002d92:	4b3a      	ldr	r3, [pc, #232]	@ (8002e7c <app_init+0x140>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a3e      	ldr	r2, [pc, #248]	@ (8002e90 <app_init+0x154>)
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	213f      	movs	r1, #63	@ 0x3f
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f002 fcf9 	bl	8005794 <sniprintf>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4a37      	ldr	r2, [pc, #220]	@ (8002e84 <app_init+0x148>)
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b34      	ldr	r3, [pc, #208]	@ (8002e7c <app_init+0x140>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fc6f 	bl	8003690 <logger_log_print_>
 8002db2:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8002db4:	b672      	cpsid	i
 8002db6:	4b31      	ldr	r3, [pc, #196]	@ (8002e7c <app_init+0x140>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a36      	ldr	r2, [pc, #216]	@ (8002e94 <app_init+0x158>)
 8002dbc:	6812      	ldr	r2, [r2, #0]
 8002dbe:	213f      	movs	r1, #63	@ 0x3f
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f002 fce7 	bl	8005794 <sniprintf>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <app_init+0x148>)
 8002dca:	6013      	str	r3, [r2, #0]
 8002dcc:	4b2b      	ldr	r3, [pc, #172]	@ (8002e7c <app_init+0x140>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f000 fc5d 	bl	8003690 <logger_log_print_>
 8002dd6:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8002dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8002e98 <app_init+0x15c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8002dde:	b672      	cpsid	i
 8002de0:	4b26      	ldr	r3, [pc, #152]	@ (8002e7c <app_init+0x140>)
 8002de2:	6818      	ldr	r0, [r3, #0]
 8002de4:	4b2c      	ldr	r3, [pc, #176]	@ (8002e98 <app_init+0x15c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	4b2c      	ldr	r3, [pc, #176]	@ (8002e9c <app_init+0x160>)
 8002dec:	4a2c      	ldr	r2, [pc, #176]	@ (8002ea0 <app_init+0x164>)
 8002dee:	213f      	movs	r1, #63	@ 0x3f
 8002df0:	f002 fcd0 	bl	8005794 <sniprintf>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4a23      	ldr	r2, [pc, #140]	@ (8002e84 <app_init+0x148>)
 8002df8:	6013      	str	r3, [r2, #0]
 8002dfa:	4b20      	ldr	r3, [pc, #128]	@ (8002e7c <app_init+0x140>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 fc46 	bl	8003690 <logger_log_print_>
 8002e04:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	e020      	b.n	8002e4e <app_init+0x112>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8002e0c:	4925      	ldr	r1, [pc, #148]	@ (8002ea4 <app_init+0x168>)
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	005b      	lsls	r3, r3, #1
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	6819      	ldr	r1, [r3, #0]
 8002e1c:	4821      	ldr	r0, [pc, #132]	@ (8002ea4 <app_init+0x168>)
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	4413      	add	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4403      	add	r3, r0
 8002e2a:	3308      	adds	r3, #8
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 8002e32:	4a1d      	ldr	r2, [pc, #116]	@ (8002ea8 <app_init+0x16c>)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2100      	movs	r1, #0
 8002e38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		task_dta_list[index].BCET = TASK_X_BCET_INI;
 8002e3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002ea8 <app_init+0x16c>)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	4413      	add	r3, r2
 8002e44:	4a19      	ldr	r2, [pc, #100]	@ (8002eac <app_init+0x170>)
 8002e46:	605a      	str	r2, [r3, #4]
	for (index = 0; TASK_QTY > index; index++)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d9db      	bls.n	8002e0c <app_init+0xd0>
	}

	cycle_counter_init();
 8002e54:	4b16      	ldr	r3, [pc, #88]	@ (8002eb0 <app_init+0x174>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a15      	ldr	r2, [pc, #84]	@ (8002eb0 <app_init+0x174>)
 8002e5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e5e:	60d3      	str	r3, [r2, #12]
 8002e60:	4b14      	ldr	r3, [pc, #80]	@ (8002eb4 <app_init+0x178>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	605a      	str	r2, [r3, #4]
 8002e66:	4b13      	ldr	r3, [pc, #76]	@ (8002eb4 <app_init+0x178>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a12      	ldr	r2, [pc, #72]	@ (8002eb4 <app_init+0x178>)
 8002e6c:	f043 0301 	orr.w	r3, r3, #1
 8002e70:	6013      	str	r3, [r2, #0]
}
 8002e72:	bf00      	nop
 8002e74:	370c      	adds	r7, #12
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd90      	pop	{r4, r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	08006d68 	.word	0x08006d68
 8002e80:	08006788 	.word	0x08006788
 8002e84:	20000468 	.word	0x20000468
 8002e88:	0800678c 	.word	0x0800678c
 8002e8c:	08006798 	.word	0x08006798
 8002e90:	2000000c 	.word	0x2000000c
 8002e94:	20000010 	.word	0x20000010
 8002e98:	200003dc 	.word	0x200003dc
 8002e9c:	080067bc 	.word	0x080067bc
 8002ea0:	080067c8 	.word	0x080067c8
 8002ea4:	08006d2c 	.word	0x08006d2c
 8002ea8:	200003e8 	.word	0x200003e8
 8002eac:	0007a120 	.word	0x0007a120
 8002eb0:	e000edf0 	.word	0xe000edf0
 8002eb4:	e0001000 	.word	0xe0001000

08002eb8 <app_update>:

void app_update(void)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8002ebe:	4b31      	ldr	r3, [pc, #196]	@ (8002f84 <app_update+0xcc>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d05a      	beq.n	8002f7c <app_update+0xc4>
    {
    	g_app_tick_cnt--;
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	@ (8002f84 <app_update+0xcc>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8002f84 <app_update+0xcc>)
 8002ece:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <app_update+0xd0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8002f88 <app_update+0xd0>)
 8002ed8:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 8002eda:	4b2c      	ldr	r3, [pc, #176]	@ (8002f8c <app_update+0xd4>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	60fb      	str	r3, [r7, #12]
 8002ee4:	e047      	b.n	8002f76 <app_update+0xbe>
    	{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 8002ee6:	4b2a      	ldr	r3, [pc, #168]	@ (8002f90 <app_update+0xd8>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8002eec:	4929      	ldr	r1, [pc, #164]	@ (8002f94 <app_update+0xdc>)
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	005b      	lsls	r3, r3, #1
 8002ef4:	4413      	add	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	3304      	adds	r3, #4
 8002efc:	6819      	ldr	r1, [r3, #0]
 8002efe:	4825      	ldr	r0, [pc, #148]	@ (8002f94 <app_update+0xdc>)
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4403      	add	r3, r0
 8002f0c:	3308      	adds	r3, #8
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4618      	mov	r0, r3
 8002f12:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8002f14:	4b1e      	ldr	r3, [pc, #120]	@ (8002f90 <app_update+0xd8>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002f90 <app_update+0xd8>)
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <app_update+0xe0>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	491e      	ldr	r1, [pc, #120]	@ (8002f9c <app_update+0xe4>)
 8002f24:	fba1 1303 	umull	r1, r3, r1, r3
 8002f28:	0c9b      	lsrs	r3, r3, #18
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8002f30:	4b16      	ldr	r3, [pc, #88]	@ (8002f8c <app_update+0xd4>)
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	4a14      	ldr	r2, [pc, #80]	@ (8002f8c <app_update+0xd4>)
 8002f3a:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 8002f3c:	4a18      	ldr	r2, [pc, #96]	@ (8002fa0 <app_update+0xe8>)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d904      	bls.n	8002f54 <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 8002f4a:	4915      	ldr	r1, [pc, #84]	@ (8002fa0 <app_update+0xe8>)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			}
			if (task_dta_list[index].BCET > cycle_counter_time_us)
 8002f54:	4a12      	ldr	r2, [pc, #72]	@ (8002fa0 <app_update+0xe8>)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4413      	add	r3, r2
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d205      	bcs.n	8002f70 <app_update+0xb8>
			{
				task_dta_list[index].BCET = cycle_counter_time_us;
 8002f64:	4a0e      	ldr	r2, [pc, #56]	@ (8002fa0 <app_update+0xe8>)
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	687a      	ldr	r2, [r7, #4]
 8002f6e:	605a      	str	r2, [r3, #4]
    	for (index = 0; TASK_QTY > index; index++)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	3301      	adds	r3, #1
 8002f74:	60fb      	str	r3, [r7, #12]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2b04      	cmp	r3, #4
 8002f7a:	d9b4      	bls.n	8002ee6 <app_update+0x2e>
			}
	    }
    }
}
 8002f7c:	bf00      	nop
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	200003e4 	.word	0x200003e4
 8002f88:	200003dc 	.word	0x200003dc
 8002f8c:	200003e0 	.word	0x200003e0
 8002f90:	e0001000 	.word	0xe0001000
 8002f94:	08006d2c 	.word	0x08006d2c
 8002f98:	20000000 	.word	0x20000000
 8002f9c:	431bde83 	.word	0x431bde83
 8002fa0:	200003e8 	.word	0x200003e8

08002fa4 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 8002fa8:	4b10      	ldr	r3, [pc, #64]	@ (8002fec <HAL_SYSTICK_Callback+0x48>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3301      	adds	r3, #1
 8002fae:	4a0f      	ldr	r2, [pc, #60]	@ (8002fec <HAL_SYSTICK_Callback+0x48>)
 8002fb0:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8002fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_SYSTICK_Callback+0x4c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <HAL_SYSTICK_Callback+0x4c>)
 8002fba:	6013      	str	r3, [r2, #0]
	g_task_set_up_tick_cnt++;
 8002fbc:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff4 <HAL_SYSTICK_Callback+0x50>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a0c      	ldr	r2, [pc, #48]	@ (8002ff4 <HAL_SYSTICK_Callback+0x50>)
 8002fc4:	6013      	str	r3, [r2, #0]
	g_task_normal_tick_cnt++;
 8002fc6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <HAL_SYSTICK_Callback+0x54>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff8 <HAL_SYSTICK_Callback+0x54>)
 8002fce:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ffc <HAL_SYSTICK_Callback+0x58>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a09      	ldr	r2, [pc, #36]	@ (8002ffc <HAL_SYSTICK_Callback+0x58>)
 8002fd8:	6013      	str	r3, [r2, #0]
	g_task_temperature_tick_cnt++;
 8002fda:	4b09      	ldr	r3, [pc, #36]	@ (8003000 <HAL_SYSTICK_Callback+0x5c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	4a07      	ldr	r2, [pc, #28]	@ (8003000 <HAL_SYSTICK_Callback+0x5c>)
 8002fe2:	6013      	str	r3, [r2, #0]


	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	200003e4 	.word	0x200003e4
 8002ff0:	200004ec 	.word	0x200004ec
 8002ff4:	200004f4 	.word	0x200004f4
 8002ff8:	20000480 	.word	0x20000480
 8002ffc:	20000470 	.word	0x20000470
 8003000:	20000558 	.word	0x20000558

08003004 <displayInit>:

/********************** internal data definition *****************************/
/********************** external data declaration ****************************/
/********************** external functions definition ************************/
void displayInit( displayConnection_t connection )
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	4603      	mov	r3, r0
 800300c:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 800300e:	4a38      	ldr	r2, [pc, #224]	@ (80030f0 <displayInit+0xec>)
 8003010:	79fb      	ldrb	r3, [r7, #7]
 8003012:	7013      	strb	r3, [r2, #0]

    if( display.connection == DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER) {
 8003014:	4b36      	ldr	r3, [pc, #216]	@ (80030f0 <displayInit+0xec>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d109      	bne.n	8003030 <displayInit+0x2c>
        pcf8574.address = PCF8574_I2C_BUS_8BIT_WRITE_ADDRESS ;
 800301c:	4b35      	ldr	r3, [pc, #212]	@ (80030f4 <displayInit+0xf0>)
 800301e:	224e      	movs	r2, #78	@ 0x4e
 8003020:	601a      	str	r2, [r3, #0]
        pcf8574.data = 0b00000000;
 8003022:	4b34      	ldr	r3, [pc, #208]	@ (80030f4 <displayInit+0xf0>)
 8003024:	2200      	movs	r2, #0
 8003026:	711a      	strb	r2, [r3, #4]
        /*Definido en el .ioc*/
        //i2cPcf8574.frequency(100000);

        displayPinWrite( DISPLAY_PIN_A_PCF8574,  ON );
 8003028:	2101      	movs	r1, #1
 800302a:	2003      	movs	r0, #3
 800302c:	f000 f8f6 	bl	800321c <displayPinWrite>
    }

    initial8BitCommunicationIsCompleted = false;
 8003030:	4b31      	ldr	r3, [pc, #196]	@ (80030f8 <displayInit+0xf4>)
 8003032:	2200      	movs	r2, #0
 8003034:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8003036:	2032      	movs	r0, #50	@ 0x32
 8003038:	f7fe f9b8 	bl	80013ac <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800303c:	2130      	movs	r1, #48	@ 0x30
 800303e:	2000      	movs	r0, #0
 8003040:	f000 f8c8 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8003044:	2005      	movs	r0, #5
 8003046:	f7fe f9b1 	bl	80013ac <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800304a:	2130      	movs	r1, #48	@ 0x30
 800304c:	2000      	movs	r0, #0
 800304e:	f000 f8c1 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8003052:	2001      	movs	r0, #1
 8003054:	f7fe f9aa 	bl	80013ac <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003058:	2130      	movs	r1, #48	@ 0x30
 800305a:	2000      	movs	r0, #0
 800305c:	f000 f8ba 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8003060:	2001      	movs	r0, #1
 8003062:	f7fe f9a3 	bl	80013ac <HAL_Delay>

    switch( display.connection ) {
 8003066:	4b22      	ldr	r3, [pc, #136]	@ (80030f0 <displayInit+0xec>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d00d      	beq.n	800308a <displayInit+0x86>
 800306e:	2b02      	cmp	r3, #2
 8003070:	dc1d      	bgt.n	80030ae <displayInit+0xaa>
 8003072:	2b00      	cmp	r3, #0
 8003074:	d009      	beq.n	800308a <displayInit+0x86>
 8003076:	2b01      	cmp	r3, #1
 8003078:	d119      	bne.n	80030ae <displayInit+0xaa>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800307a:	2138      	movs	r1, #56	@ 0x38
 800307c:	2000      	movs	r0, #0
 800307e:	f000 f8a9 	bl	80031d4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8003082:	2001      	movs	r0, #1
 8003084:	f7fe f992 	bl	80013ac <HAL_Delay>
        break;
 8003088:	e011      	b.n	80030ae <displayInit+0xaa>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800308a:	2120      	movs	r1, #32
 800308c:	2000      	movs	r0, #0
 800308e:	f000 f8a1 	bl	80031d4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 8003092:	2001      	movs	r0, #1
 8003094:	f7fe f98a 	bl	80013ac <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 8003098:	4b17      	ldr	r3, [pc, #92]	@ (80030f8 <displayInit+0xf4>)
 800309a:	2201      	movs	r2, #1
 800309c:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800309e:	2128      	movs	r1, #40	@ 0x28
 80030a0:	2000      	movs	r0, #0
 80030a2:	f000 f897 	bl	80031d4 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fe f980 	bl	80013ac <HAL_Delay>
        break;
 80030ac:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80030ae:	2108      	movs	r1, #8
 80030b0:	2000      	movs	r0, #0
 80030b2:	f000 f88f 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80030b6:	2001      	movs	r0, #1
 80030b8:	f7fe f978 	bl	80013ac <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80030bc:	2101      	movs	r1, #1
 80030be:	2000      	movs	r0, #0
 80030c0:	f000 f888 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7fe f971 	bl	80013ac <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80030ca:	2106      	movs	r1, #6
 80030cc:	2000      	movs	r0, #0
 80030ce:	f000 f881 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 80030d2:	2001      	movs	r0, #1
 80030d4:	f7fe f96a 	bl	80013ac <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80030d8:	210c      	movs	r1, #12
 80030da:	2000      	movs	r0, #0
 80030dc:	f000 f87a 	bl	80031d4 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80030e0:	2001      	movs	r0, #1
 80030e2:	f7fe f963 	bl	80013ac <HAL_Delay>
}
 80030e6:	bf00      	nop
 80030e8:	3708      	adds	r7, #8
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000410 	.word	0x20000410
 80030f4:	20000414 	.word	0x20000414
 80030f8:	20000424 	.word	0x20000424

080030fc <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	460a      	mov	r2, r1
 8003106:	71fb      	strb	r3, [r7, #7]
 8003108:	4613      	mov	r3, r2
 800310a:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 800310c:	79bb      	ldrb	r3, [r7, #6]
 800310e:	2b03      	cmp	r3, #3
 8003110:	d846      	bhi.n	80031a0 <displayCharPositionWrite+0xa4>
 8003112:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <displayCharPositionWrite+0x1c>)
 8003114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003118:	08003129 	.word	0x08003129
 800311c:	08003141 	.word	0x08003141
 8003120:	08003161 	.word	0x08003161
 8003124:	08003181 	.word	0x08003181
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4619      	mov	r1, r3
 8003132:	2000      	movs	r0, #0
 8003134:	f000 f84e 	bl	80031d4 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            HAL_Delay(1);
 8003138:	2001      	movs	r0, #1
 800313a:	f7fe f937 	bl	80013ac <HAL_Delay>
        break;
 800313e:	e02f      	b.n	80031a0 <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	3340      	adds	r3, #64	@ 0x40
 8003144:	b2db      	uxtb	r3, r3
 8003146:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003148:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800314c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800314e:	b2db      	uxtb	r3, r3
 8003150:	4619      	mov	r1, r3
 8003152:	2000      	movs	r0, #0
 8003154:	f000 f83e 	bl	80031d4 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8003158:	2001      	movs	r0, #1
 800315a:	f7fe f927 	bl	80013ac <HAL_Delay>
        break;
 800315e:	e01f      	b.n	80031a0 <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8003160:	79fb      	ldrb	r3, [r7, #7]
 8003162:	3314      	adds	r3, #20
 8003164:	b2db      	uxtb	r3, r3
 8003166:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003168:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800316c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	2000      	movs	r0, #0
 8003174:	f000 f82e 	bl	80031d4 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8003178:	2001      	movs	r0, #1
 800317a:	f7fe f917 	bl	80013ac <HAL_Delay>
        break;
 800317e:	e00f      	b.n	80031a0 <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8003180:	79fb      	ldrb	r3, [r7, #7]
 8003182:	3354      	adds	r3, #84	@ 0x54
 8003184:	b2db      	uxtb	r3, r3
 8003186:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003188:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800318c:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800318e:	b2db      	uxtb	r3, r3
 8003190:	4619      	mov	r1, r3
 8003192:	2000      	movs	r0, #0
 8003194:	f000 f81e 	bl	80031d4 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8003198:	2001      	movs	r0, #1
 800319a:	f7fe f907 	bl	80013ac <HAL_Delay>
        break;
 800319e:	bf00      	nop
    }
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
    while (*str) {
 80031b0:	e007      	b.n	80031c2 <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	1c5a      	adds	r2, r3, #1
 80031b6:	607a      	str	r2, [r7, #4]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	4619      	mov	r1, r3
 80031bc:	2001      	movs	r0, #1
 80031be:	f000 f809 	bl	80031d4 <displayCodeWrite>
    while (*str) {
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1f3      	bne.n	80031b2 <displayStringWrite+0xa>
    }
}
 80031ca:	bf00      	nop
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <displayCodeWrite>:
/********************** internal functions definition ************************/
static void displayCodeWrite( bool type, uint8_t dataBus) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	460a      	mov	r2, r1
 80031de:	71fb      	strb	r3, [r7, #7]
 80031e0:	4613      	mov	r3, r2
 80031e2:	71bb      	strb	r3, [r7, #6]
	if (type == DISPLAY_RS_INSTRUCTION)
 80031e4:	79fb      	ldrb	r3, [r7, #7]
 80031e6:	f083 0301 	eor.w	r3, r3, #1
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d004      	beq.n	80031fa <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION);
 80031f0:	2100      	movs	r1, #0
 80031f2:	2004      	movs	r0, #4
 80031f4:	f000 f812 	bl	800321c <displayPinWrite>
 80031f8:	e003      	b.n	8003202 <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA);
 80031fa:	2101      	movs	r1, #1
 80031fc:	2004      	movs	r0, #4
 80031fe:	f000 f80d 	bl	800321c <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE);
 8003202:	2100      	movs	r1, #0
 8003204:	2005      	movs	r0, #5
 8003206:	f000 f809 	bl	800321c <displayPinWrite>
	displayDataBusWrite(dataBus);
 800320a:	79bb      	ldrb	r3, [r7, #6]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f9ad 	bl	800356c <displayDataBusWrite>
}
 8003212:	bf00      	nop
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
	...

0800321c <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	6039      	str	r1, [r7, #0]
 8003226:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8003228:	4b99      	ldr	r3, [pc, #612]	@ (8003490 <displayPinWrite+0x274>)
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b02      	cmp	r3, #2
 800322e:	f000 80ab 	beq.w	8003388 <displayPinWrite+0x16c>
 8003232:	2b02      	cmp	r3, #2
 8003234:	f300 8193 	bgt.w	800355e <displayPinWrite+0x342>
 8003238:	2b00      	cmp	r3, #0
 800323a:	d053      	beq.n	80032e4 <displayPinWrite+0xc8>
 800323c:	2b01      	cmp	r3, #1
 800323e:	f040 818e 	bne.w	800355e <displayPinWrite+0x342>

    	case DISPLAY_CONNECTION_GPIO_8BITS:
            switch( pinName ) {
 8003242:	79fb      	ldrb	r3, [r7, #7]
 8003244:	3b04      	subs	r3, #4
 8003246:	2b0a      	cmp	r3, #10
 8003248:	d84a      	bhi.n	80032e0 <displayPinWrite+0xc4>
 800324a:	a201      	add	r2, pc, #4	@ (adr r2, 8003250 <displayPinWrite+0x34>)
 800324c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003250:	080032c1 	.word	0x080032c1
 8003254:	080032e1 	.word	0x080032e1
 8003258:	080032d1 	.word	0x080032d1
 800325c:	080032e1 	.word	0x080032e1
 8003260:	080032e1 	.word	0x080032e1
 8003264:	080032e1 	.word	0x080032e1
 8003268:	080032e1 	.word	0x080032e1
 800326c:	0800327d 	.word	0x0800327d
 8003270:	0800328f 	.word	0x0800328f
 8003274:	080032a1 	.word	0x080032a1
 8003278:	080032b1 	.word	0x080032b1
//                case DISPLAY_PIN_D0: HAL_GPIO_WritePin(D2_GPIO_Port,  D2_Pin,  value);   break;
//                case DISPLAY_PIN_D1: HAL_GPIO_WritePin(D4_GPIO_Port,  D4_Pin,  value);   break;
//                case DISPLAY_PIN_D2: HAL_GPIO_WritePin(D5_GPIO_Port,  D5_Pin,  value);   break;
//                case DISPLAY_PIN_D3: HAL_GPIO_WritePin(D6_GPIO_Port,  D6_Pin,  value);   break;
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003286:	4883      	ldr	r0, [pc, #524]	@ (8003494 <displayPinWrite+0x278>)
 8003288:	f7fe ff61 	bl	800214e <HAL_GPIO_WritePin>
 800328c:	e029      	b.n	80032e2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003298:	487e      	ldr	r0, [pc, #504]	@ (8003494 <displayPinWrite+0x278>)
 800329a:	f7fe ff58 	bl	800214e <HAL_GPIO_WritePin>
 800329e:	e020      	b.n	80032e2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	461a      	mov	r2, r3
 80032a6:	2180      	movs	r1, #128	@ 0x80
 80032a8:	487b      	ldr	r0, [pc, #492]	@ (8003498 <displayPinWrite+0x27c>)
 80032aa:	f7fe ff50 	bl	800214e <HAL_GPIO_WritePin>
 80032ae:	e018      	b.n	80032e2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
 80032b6:	2140      	movs	r1, #64	@ 0x40
 80032b8:	4878      	ldr	r0, [pc, #480]	@ (800349c <displayPinWrite+0x280>)
 80032ba:	f7fe ff48 	bl	800214e <HAL_GPIO_WritePin>
 80032be:	e010      	b.n	80032e2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
 80032c6:	2180      	movs	r1, #128	@ 0x80
 80032c8:	4872      	ldr	r0, [pc, #456]	@ (8003494 <displayPinWrite+0x278>)
 80032ca:	f7fe ff40 	bl	800214e <HAL_GPIO_WritePin>
 80032ce:	e008      	b.n	80032e2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	461a      	mov	r2, r3
 80032d6:	2140      	movs	r1, #64	@ 0x40
 80032d8:	486e      	ldr	r0, [pc, #440]	@ (8003494 <displayPinWrite+0x278>)
 80032da:	f7fe ff38 	bl	800214e <HAL_GPIO_WritePin>
 80032de:	e000      	b.n	80032e2 <displayPinWrite+0xc6>
                case DISPLAY_PIN_RW: break;
                default: break;
 80032e0:	bf00      	nop
            }
            break;
 80032e2:	e13c      	b.n	800355e <displayPinWrite+0x342>


        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 80032e4:	79fb      	ldrb	r3, [r7, #7]
 80032e6:	3b04      	subs	r3, #4
 80032e8:	2b0a      	cmp	r3, #10
 80032ea:	d84b      	bhi.n	8003384 <displayPinWrite+0x168>
 80032ec:	a201      	add	r2, pc, #4	@ (adr r2, 80032f4 <displayPinWrite+0xd8>)
 80032ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f2:	bf00      	nop
 80032f4:	08003365 	.word	0x08003365
 80032f8:	08003385 	.word	0x08003385
 80032fc:	08003375 	.word	0x08003375
 8003300:	08003385 	.word	0x08003385
 8003304:	08003385 	.word	0x08003385
 8003308:	08003385 	.word	0x08003385
 800330c:	08003385 	.word	0x08003385
 8003310:	08003321 	.word	0x08003321
 8003314:	08003333 	.word	0x08003333
 8003318:	08003345 	.word	0x08003345
 800331c:	08003355 	.word	0x08003355
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800332a:	485a      	ldr	r0, [pc, #360]	@ (8003494 <displayPinWrite+0x278>)
 800332c:	f7fe ff0f 	bl	800214e <HAL_GPIO_WritePin>
 8003330:	e029      	b.n	8003386 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800333c:	4855      	ldr	r0, [pc, #340]	@ (8003494 <displayPinWrite+0x278>)
 800333e:	f7fe ff06 	bl	800214e <HAL_GPIO_WritePin>
 8003342:	e020      	b.n	8003386 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	b2db      	uxtb	r3, r3
 8003348:	461a      	mov	r2, r3
 800334a:	2180      	movs	r1, #128	@ 0x80
 800334c:	4852      	ldr	r0, [pc, #328]	@ (8003498 <displayPinWrite+0x27c>)
 800334e:	f7fe fefe 	bl	800214e <HAL_GPIO_WritePin>
 8003352:	e018      	b.n	8003386 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
 800335a:	2140      	movs	r1, #64	@ 0x40
 800335c:	484f      	ldr	r0, [pc, #316]	@ (800349c <displayPinWrite+0x280>)
 800335e:	f7fe fef6 	bl	800214e <HAL_GPIO_WritePin>
 8003362:	e010      	b.n	8003386 <displayPinWrite+0x16a>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	2180      	movs	r1, #128	@ 0x80
 800336c:	4849      	ldr	r0, [pc, #292]	@ (8003494 <displayPinWrite+0x278>)
 800336e:	f7fe feee 	bl	800214e <HAL_GPIO_WritePin>
 8003372:	e008      	b.n	8003386 <displayPinWrite+0x16a>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	2140      	movs	r1, #64	@ 0x40
 800337c:	4845      	ldr	r0, [pc, #276]	@ (8003494 <displayPinWrite+0x278>)
 800337e:	f7fe fee6 	bl	800214e <HAL_GPIO_WritePin>
 8003382:	e000      	b.n	8003386 <displayPinWrite+0x16a>
                case DISPLAY_PIN_RW: break;
                default: break;
 8003384:	bf00      	nop
            }
            break;
 8003386:	e0ea      	b.n	800355e <displayPinWrite+0x342>

        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
           if ( value ) {
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d03e      	beq.n	800340c <displayPinWrite+0x1f0>
                switch( pinName ) {
 800338e:	79fb      	ldrb	r3, [r7, #7]
 8003390:	3b03      	subs	r3, #3
 8003392:	2b0b      	cmp	r3, #11
 8003394:	d87a      	bhi.n	800348c <displayPinWrite+0x270>
 8003396:	a201      	add	r2, pc, #4	@ (adr r2, 800339c <displayPinWrite+0x180>)
 8003398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800339c:	08003405 	.word	0x08003405
 80033a0:	080033ed 	.word	0x080033ed
 80033a4:	080033fd 	.word	0x080033fd
 80033a8:	080033f5 	.word	0x080033f5
 80033ac:	0800348d 	.word	0x0800348d
 80033b0:	0800348d 	.word	0x0800348d
 80033b4:	0800348d 	.word	0x0800348d
 80033b8:	0800348d 	.word	0x0800348d
 80033bc:	080033cd 	.word	0x080033cd
 80033c0:	080033d5 	.word	0x080033d5
 80033c4:	080033dd 	.word	0x080033dd
 80033c8:	080033e5 	.word	0x080033e5
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = ON; break;
 80033cc:	4b34      	ldr	r3, [pc, #208]	@ (80034a0 <displayPinWrite+0x284>)
 80033ce:	2201      	movs	r2, #1
 80033d0:	725a      	strb	r2, [r3, #9]
 80033d2:	e068      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = ON; break;
 80033d4:	4b32      	ldr	r3, [pc, #200]	@ (80034a0 <displayPinWrite+0x284>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	729a      	strb	r2, [r3, #10]
 80033da:	e064      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = ON; break;
 80033dc:	4b30      	ldr	r3, [pc, #192]	@ (80034a0 <displayPinWrite+0x284>)
 80033de:	2201      	movs	r2, #1
 80033e0:	72da      	strb	r2, [r3, #11]
 80033e2:	e060      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = ON; break;
 80033e4:	4b2e      	ldr	r3, [pc, #184]	@ (80034a0 <displayPinWrite+0x284>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	731a      	strb	r2, [r3, #12]
 80033ea:	e05c      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = ON; break;
 80033ec:	4b2c      	ldr	r3, [pc, #176]	@ (80034a0 <displayPinWrite+0x284>)
 80033ee:	2201      	movs	r2, #1
 80033f0:	715a      	strb	r2, [r3, #5]
 80033f2:	e058      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = ON; break;
 80033f4:	4b2a      	ldr	r3, [pc, #168]	@ (80034a0 <displayPinWrite+0x284>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	71da      	strb	r2, [r3, #7]
 80033fa:	e054      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = ON; break;
 80033fc:	4b28      	ldr	r3, [pc, #160]	@ (80034a0 <displayPinWrite+0x284>)
 80033fe:	2201      	movs	r2, #1
 8003400:	719a      	strb	r2, [r3, #6]
 8003402:	e050      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = ON; break;
 8003404:	4b26      	ldr	r3, [pc, #152]	@ (80034a0 <displayPinWrite+0x284>)
 8003406:	2201      	movs	r2, #1
 8003408:	721a      	strb	r2, [r3, #8]
 800340a:	e04c      	b.n	80034a6 <displayPinWrite+0x28a>
                    default: break;
                }
            }
            else {
                switch( pinName ) {
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	3b03      	subs	r3, #3
 8003410:	2b0b      	cmp	r3, #11
 8003412:	d847      	bhi.n	80034a4 <displayPinWrite+0x288>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <displayPinWrite+0x200>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003485 	.word	0x08003485
 8003420:	0800346d 	.word	0x0800346d
 8003424:	0800347d 	.word	0x0800347d
 8003428:	08003475 	.word	0x08003475
 800342c:	080034a5 	.word	0x080034a5
 8003430:	080034a5 	.word	0x080034a5
 8003434:	080034a5 	.word	0x080034a5
 8003438:	080034a5 	.word	0x080034a5
 800343c:	0800344d 	.word	0x0800344d
 8003440:	08003455 	.word	0x08003455
 8003444:	0800345d 	.word	0x0800345d
 8003448:	08003465 	.word	0x08003465
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = OFF; break;
 800344c:	4b14      	ldr	r3, [pc, #80]	@ (80034a0 <displayPinWrite+0x284>)
 800344e:	2200      	movs	r2, #0
 8003450:	725a      	strb	r2, [r3, #9]
 8003452:	e028      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = OFF; break;
 8003454:	4b12      	ldr	r3, [pc, #72]	@ (80034a0 <displayPinWrite+0x284>)
 8003456:	2200      	movs	r2, #0
 8003458:	729a      	strb	r2, [r3, #10]
 800345a:	e024      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = OFF; break;
 800345c:	4b10      	ldr	r3, [pc, #64]	@ (80034a0 <displayPinWrite+0x284>)
 800345e:	2200      	movs	r2, #0
 8003460:	72da      	strb	r2, [r3, #11]
 8003462:	e020      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = OFF; break;
 8003464:	4b0e      	ldr	r3, [pc, #56]	@ (80034a0 <displayPinWrite+0x284>)
 8003466:	2200      	movs	r2, #0
 8003468:	731a      	strb	r2, [r3, #12]
 800346a:	e01c      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = OFF; break;
 800346c:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <displayPinWrite+0x284>)
 800346e:	2200      	movs	r2, #0
 8003470:	715a      	strb	r2, [r3, #5]
 8003472:	e018      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = OFF; break;
 8003474:	4b0a      	ldr	r3, [pc, #40]	@ (80034a0 <displayPinWrite+0x284>)
 8003476:	2200      	movs	r2, #0
 8003478:	71da      	strb	r2, [r3, #7]
 800347a:	e014      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = OFF; break;
 800347c:	4b08      	ldr	r3, [pc, #32]	@ (80034a0 <displayPinWrite+0x284>)
 800347e:	2200      	movs	r2, #0
 8003480:	719a      	strb	r2, [r3, #6]
 8003482:	e010      	b.n	80034a6 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = OFF; break;
 8003484:	4b06      	ldr	r3, [pc, #24]	@ (80034a0 <displayPinWrite+0x284>)
 8003486:	2200      	movs	r2, #0
 8003488:	721a      	strb	r2, [r3, #8]
 800348a:	e00c      	b.n	80034a6 <displayPinWrite+0x28a>
                    default: break;
 800348c:	bf00      	nop
 800348e:	e00a      	b.n	80034a6 <displayPinWrite+0x28a>
 8003490:	20000410 	.word	0x20000410
 8003494:	40010800 	.word	0x40010800
 8003498:	40011000 	.word	0x40011000
 800349c:	40010c00 	.word	0x40010c00
 80034a0:	20000414 	.word	0x20000414
                    default: break;
 80034a4:	bf00      	nop
                }
            }
            pcf8574.data = 0b00000000;
 80034a6:	4b30      	ldr	r3, [pc, #192]	@ (8003568 <displayPinWrite+0x34c>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRs ) pcf8574.data |= 0b00000001;
 80034ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003568 <displayPinWrite+0x34c>)
 80034ae:	795b      	ldrb	r3, [r3, #5]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d006      	beq.n	80034c2 <displayPinWrite+0x2a6>
 80034b4:	4b2c      	ldr	r3, [pc, #176]	@ (8003568 <displayPinWrite+0x34c>)
 80034b6:	791b      	ldrb	r3, [r3, #4]
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4b2a      	ldr	r3, [pc, #168]	@ (8003568 <displayPinWrite+0x34c>)
 80034c0:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRw ) pcf8574.data |= 0b00000010;
 80034c2:	4b29      	ldr	r3, [pc, #164]	@ (8003568 <displayPinWrite+0x34c>)
 80034c4:	799b      	ldrb	r3, [r3, #6]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d006      	beq.n	80034d8 <displayPinWrite+0x2bc>
 80034ca:	4b27      	ldr	r3, [pc, #156]	@ (8003568 <displayPinWrite+0x34c>)
 80034cc:	791b      	ldrb	r3, [r3, #4]
 80034ce:	f043 0302 	orr.w	r3, r3, #2
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <displayPinWrite+0x34c>)
 80034d6:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinEn ) pcf8574.data |= 0b00000100;
 80034d8:	4b23      	ldr	r3, [pc, #140]	@ (8003568 <displayPinWrite+0x34c>)
 80034da:	79db      	ldrb	r3, [r3, #7]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d006      	beq.n	80034ee <displayPinWrite+0x2d2>
 80034e0:	4b21      	ldr	r3, [pc, #132]	@ (8003568 <displayPinWrite+0x34c>)
 80034e2:	791b      	ldrb	r3, [r3, #4]
 80034e4:	f043 0304 	orr.w	r3, r3, #4
 80034e8:	b2da      	uxtb	r2, r3
 80034ea:	4b1f      	ldr	r3, [pc, #124]	@ (8003568 <displayPinWrite+0x34c>)
 80034ec:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinA  ) pcf8574.data |= 0b00001000;
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <displayPinWrite+0x34c>)
 80034f0:	7a1b      	ldrb	r3, [r3, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <displayPinWrite+0x2e8>
 80034f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003568 <displayPinWrite+0x34c>)
 80034f8:	791b      	ldrb	r3, [r3, #4]
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	4b19      	ldr	r3, [pc, #100]	@ (8003568 <displayPinWrite+0x34c>)
 8003502:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD4 ) pcf8574.data |= 0b00010000;
 8003504:	4b18      	ldr	r3, [pc, #96]	@ (8003568 <displayPinWrite+0x34c>)
 8003506:	7a5b      	ldrb	r3, [r3, #9]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <displayPinWrite+0x2fe>
 800350c:	4b16      	ldr	r3, [pc, #88]	@ (8003568 <displayPinWrite+0x34c>)
 800350e:	791b      	ldrb	r3, [r3, #4]
 8003510:	f043 0310 	orr.w	r3, r3, #16
 8003514:	b2da      	uxtb	r2, r3
 8003516:	4b14      	ldr	r3, [pc, #80]	@ (8003568 <displayPinWrite+0x34c>)
 8003518:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD5 ) pcf8574.data |= 0b00100000;
 800351a:	4b13      	ldr	r3, [pc, #76]	@ (8003568 <displayPinWrite+0x34c>)
 800351c:	7a9b      	ldrb	r3, [r3, #10]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <displayPinWrite+0x314>
 8003522:	4b11      	ldr	r3, [pc, #68]	@ (8003568 <displayPinWrite+0x34c>)
 8003524:	791b      	ldrb	r3, [r3, #4]
 8003526:	f043 0320 	orr.w	r3, r3, #32
 800352a:	b2da      	uxtb	r2, r3
 800352c:	4b0e      	ldr	r3, [pc, #56]	@ (8003568 <displayPinWrite+0x34c>)
 800352e:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD6 ) pcf8574.data |= 0b01000000;
 8003530:	4b0d      	ldr	r3, [pc, #52]	@ (8003568 <displayPinWrite+0x34c>)
 8003532:	7adb      	ldrb	r3, [r3, #11]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <displayPinWrite+0x32a>
 8003538:	4b0b      	ldr	r3, [pc, #44]	@ (8003568 <displayPinWrite+0x34c>)
 800353a:	791b      	ldrb	r3, [r3, #4]
 800353c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b09      	ldr	r3, [pc, #36]	@ (8003568 <displayPinWrite+0x34c>)
 8003544:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD7 ) pcf8574.data |= 0b10000000;
 8003546:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <displayPinWrite+0x34c>)
 8003548:	7b1b      	ldrb	r3, [r3, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d006      	beq.n	800355c <displayPinWrite+0x340>
 800354e:	4b06      	ldr	r3, [pc, #24]	@ (8003568 <displayPinWrite+0x34c>)
 8003550:	791b      	ldrb	r3, [r3, #4]
 8003552:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003556:	b2da      	uxtb	r2, r3
 8003558:	4b03      	ldr	r3, [pc, #12]	@ (8003568 <displayPinWrite+0x34c>)
 800355a:	711a      	strb	r2, [r3, #4]

            //i2cPcf8574.write( pcf8574.address, &pcf8574.data, 1);
            //HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)pcf8574.address<<1, (uint8_t *)&pcf8574.data, (uint16_t)16, HAL_MAX_DELAY);

            break;
 800355c:	bf00      	nop
    }
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	20000414 	.word	0x20000414

0800356c <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8003576:	2100      	movs	r1, #0
 8003578:	2006      	movs	r0, #6
 800357a:	f7ff fe4f 	bl	800321c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003584:	4619      	mov	r1, r3
 8003586:	200e      	movs	r0, #14
 8003588:	f7ff fe48 	bl	800321c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003592:	4619      	mov	r1, r3
 8003594:	200d      	movs	r0, #13
 8003596:	f7ff fe41 	bl	800321c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 0320 	and.w	r3, r3, #32
 80035a0:	4619      	mov	r1, r3
 80035a2:	200c      	movs	r0, #12
 80035a4:	f7ff fe3a 	bl	800321c <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f003 0310 	and.w	r3, r3, #16
 80035ae:	4619      	mov	r1, r3
 80035b0:	200b      	movs	r0, #11
 80035b2:	f7ff fe33 	bl	800321c <displayPinWrite>
    switch( display.connection ) {
 80035b6:	4b34      	ldr	r3, [pc, #208]	@ (8003688 <displayDataBusWrite+0x11c>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d022      	beq.n	8003604 <displayDataBusWrite+0x98>
 80035be:	2b02      	cmp	r3, #2
 80035c0:	dc4f      	bgt.n	8003662 <displayDataBusWrite+0xf6>
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d01e      	beq.n	8003604 <displayDataBusWrite+0x98>
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d14b      	bne.n	8003662 <displayDataBusWrite+0xf6>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 80035ca:	79fb      	ldrb	r3, [r7, #7]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	4619      	mov	r1, r3
 80035d2:	200a      	movs	r0, #10
 80035d4:	f7ff fe22 	bl	800321c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	2009      	movs	r0, #9
 80035e2:	f7ff fe1b 	bl	800321c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 80035e6:	79fb      	ldrb	r3, [r7, #7]
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	4619      	mov	r1, r3
 80035ee:	2008      	movs	r0, #8
 80035f0:	f7ff fe14 	bl	800321c <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	4619      	mov	r1, r3
 80035fc:	2007      	movs	r0, #7
 80035fe:	f7ff fe0d 	bl	800321c <displayPinWrite>
        break;
 8003602:	e02e      	b.n	8003662 <displayDataBusWrite+0xf6>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            if ( initial8BitCommunicationIsCompleted == true) {
 8003604:	4b21      	ldr	r3, [pc, #132]	@ (800368c <displayDataBusWrite+0x120>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d029      	beq.n	8003660 <displayDataBusWrite+0xf4>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 800360c:	2101      	movs	r1, #1
 800360e:	2006      	movs	r0, #6
 8003610:	f7ff fe04 	bl	800321c <displayPinWrite>
                HAL_Delay(1);
 8003614:	2001      	movs	r0, #1
 8003616:	f7fd fec9 	bl	80013ac <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 800361a:	2100      	movs	r1, #0
 800361c:	2006      	movs	r0, #6
 800361e:	f7ff fdfd 	bl	800321c <displayPinWrite>
                HAL_Delay(1);
 8003622:	2001      	movs	r0, #1
 8003624:	f7fd fec2 	bl	80013ac <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8003628:	79fb      	ldrb	r3, [r7, #7]
 800362a:	f003 0308 	and.w	r3, r3, #8
 800362e:	4619      	mov	r1, r3
 8003630:	200e      	movs	r0, #14
 8003632:	f7ff fdf3 	bl	800321c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8003636:	79fb      	ldrb	r3, [r7, #7]
 8003638:	f003 0304 	and.w	r3, r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	200d      	movs	r0, #13
 8003640:	f7ff fdec 	bl	800321c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8003644:	79fb      	ldrb	r3, [r7, #7]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	4619      	mov	r1, r3
 800364c:	200c      	movs	r0, #12
 800364e:	f7ff fde5 	bl	800321c <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8003652:	79fb      	ldrb	r3, [r7, #7]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	4619      	mov	r1, r3
 800365a:	200b      	movs	r0, #11
 800365c:	f7ff fdde 	bl	800321c <displayPinWrite>
            }
        break;
 8003660:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8003662:	2101      	movs	r1, #1
 8003664:	2006      	movs	r0, #6
 8003666:	f7ff fdd9 	bl	800321c <displayPinWrite>
    HAL_Delay(1);
 800366a:	2001      	movs	r0, #1
 800366c:	f7fd fe9e 	bl	80013ac <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8003670:	2100      	movs	r1, #0
 8003672:	2006      	movs	r0, #6
 8003674:	f7ff fdd2 	bl	800321c <displayPinWrite>
    HAL_Delay(1);
 8003678:	2001      	movs	r0, #1
 800367a:	f7fd fe97 	bl	80013ac <HAL_Delay>
}
 800367e:	bf00      	nop
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000410 	.word	0x20000410
 800368c:	20000424 	.word	0x20000424

08003690 <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f002 f869 	bl	8005770 <iprintf>
	fflush(stdout);
 800369e:	4b05      	ldr	r3, [pc, #20]	@ (80036b4 <logger_log_print_+0x24>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f001 ff8d 	bl	80055c4 <fflush>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	200002c0 	.word	0x200002c0

080036b8 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b088      	sub	sp, #32
 80036bc:	af02      	add	r7, sp, #8
 80036be:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 80036c0:	b672      	cpsid	i
 80036c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003840 <task_actuator_init+0x188>)
 80036c4:	6818      	ldr	r0, [r3, #0]
 80036c6:	4b5f      	ldr	r3, [pc, #380]	@ (8003844 <task_actuator_init+0x18c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4b5e      	ldr	r3, [pc, #376]	@ (8003848 <task_actuator_init+0x190>)
 80036ce:	4a5f      	ldr	r2, [pc, #380]	@ (800384c <task_actuator_init+0x194>)
 80036d0:	213f      	movs	r1, #63	@ 0x3f
 80036d2:	f002 f85f 	bl	8005794 <sniprintf>
 80036d6:	4603      	mov	r3, r0
 80036d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003850 <task_actuator_init+0x198>)
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	4b58      	ldr	r3, [pc, #352]	@ (8003840 <task_actuator_init+0x188>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f7ff ffd5 	bl	8003690 <logger_log_print_>
 80036e6:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 80036e8:	b672      	cpsid	i
 80036ea:	4b55      	ldr	r3, [pc, #340]	@ (8003840 <task_actuator_init+0x188>)
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	4b59      	ldr	r3, [pc, #356]	@ (8003854 <task_actuator_init+0x19c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	4b58      	ldr	r3, [pc, #352]	@ (8003858 <task_actuator_init+0x1a0>)
 80036f6:	4a59      	ldr	r2, [pc, #356]	@ (800385c <task_actuator_init+0x1a4>)
 80036f8:	213f      	movs	r1, #63	@ 0x3f
 80036fa:	f002 f84b 	bl	8005794 <sniprintf>
 80036fe:	4603      	mov	r3, r0
 8003700:	4a53      	ldr	r2, [pc, #332]	@ (8003850 <task_actuator_init+0x198>)
 8003702:	6013      	str	r3, [r2, #0]
 8003704:	4b4e      	ldr	r3, [pc, #312]	@ (8003840 <task_actuator_init+0x188>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ffc1 	bl	8003690 <logger_log_print_>
 800370e:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8003710:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <task_actuator_init+0x1a8>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8003716:	b672      	cpsid	i
 8003718:	4b49      	ldr	r3, [pc, #292]	@ (8003840 <task_actuator_init+0x188>)
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	4b50      	ldr	r3, [pc, #320]	@ (8003860 <task_actuator_init+0x1a8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4b50      	ldr	r3, [pc, #320]	@ (8003864 <task_actuator_init+0x1ac>)
 8003724:	4a50      	ldr	r2, [pc, #320]	@ (8003868 <task_actuator_init+0x1b0>)
 8003726:	213f      	movs	r1, #63	@ 0x3f
 8003728:	f002 f834 	bl	8005794 <sniprintf>
 800372c:	4603      	mov	r3, r0
 800372e:	4a48      	ldr	r2, [pc, #288]	@ (8003850 <task_actuator_init+0x198>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	4b43      	ldr	r3, [pc, #268]	@ (8003840 <task_actuator_init+0x188>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ffaa 	bl	8003690 <logger_log_print_>
 800373c:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	e072      	b.n	800382a <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	4613      	mov	r3, r2
 8003748:	009b      	lsls	r3, r3, #2
 800374a:	4413      	add	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4a47      	ldr	r2, [pc, #284]	@ (800386c <task_actuator_init+0x1b4>)
 8003750:	4413      	add	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	4a45      	ldr	r2, [pc, #276]	@ (8003870 <task_actuator_init+0x1b8>)
 800375a:	4413      	add	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800375e:	b672      	cpsid	i
 8003760:	4b37      	ldr	r3, [pc, #220]	@ (8003840 <task_actuator_init+0x188>)
 8003762:	6818      	ldr	r0, [r3, #0]
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	4b42      	ldr	r3, [pc, #264]	@ (8003874 <task_actuator_init+0x1bc>)
 800376a:	4a43      	ldr	r2, [pc, #268]	@ (8003878 <task_actuator_init+0x1c0>)
 800376c:	213f      	movs	r1, #63	@ 0x3f
 800376e:	f002 f811 	bl	8005794 <sniprintf>
 8003772:	4603      	mov	r3, r0
 8003774:	4a36      	ldr	r2, [pc, #216]	@ (8003850 <task_actuator_init+0x198>)
 8003776:	6013      	str	r3, [r2, #0]
 8003778:	4b31      	ldr	r3, [pc, #196]	@ (8003840 <task_actuator_init+0x188>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4618      	mov	r0, r3
 800377e:	f7ff ff87 	bl	8003690 <logger_log_print_>
 8003782:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	791b      	ldrb	r3, [r3, #4]
 8003788:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800378a:	b672      	cpsid	i
 800378c:	4b2c      	ldr	r3, [pc, #176]	@ (8003840 <task_actuator_init+0x188>)
 800378e:	6818      	ldr	r0, [r3, #0]
 8003790:	7afb      	ldrb	r3, [r7, #11]
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	4b39      	ldr	r3, [pc, #228]	@ (800387c <task_actuator_init+0x1c4>)
 8003796:	4a38      	ldr	r2, [pc, #224]	@ (8003878 <task_actuator_init+0x1c0>)
 8003798:	213f      	movs	r1, #63	@ 0x3f
 800379a:	f001 fffb 	bl	8005794 <sniprintf>
 800379e:	4603      	mov	r3, r0
 80037a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003850 <task_actuator_init+0x198>)
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	4b26      	ldr	r3, [pc, #152]	@ (8003840 <task_actuator_init+0x188>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f7ff ff71 	bl	8003690 <logger_log_print_>
 80037ae:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	795b      	ldrb	r3, [r3, #5]
 80037b4:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80037b6:	b672      	cpsid	i
 80037b8:	4b21      	ldr	r3, [pc, #132]	@ (8003840 <task_actuator_init+0x188>)
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	7abb      	ldrb	r3, [r7, #10]
 80037be:	9300      	str	r3, [sp, #0]
 80037c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003880 <task_actuator_init+0x1c8>)
 80037c2:	4a2d      	ldr	r2, [pc, #180]	@ (8003878 <task_actuator_init+0x1c0>)
 80037c4:	213f      	movs	r1, #63	@ 0x3f
 80037c6:	f001 ffe5 	bl	8005794 <sniprintf>
 80037ca:	4603      	mov	r3, r0
 80037cc:	4a20      	ldr	r2, [pc, #128]	@ (8003850 <task_actuator_init+0x198>)
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003840 <task_actuator_init+0x188>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff5b 	bl	8003690 <logger_log_print_>
 80037da:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	799b      	ldrb	r3, [r3, #6]
 80037e0:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80037e2:	b672      	cpsid	i
 80037e4:	4b16      	ldr	r3, [pc, #88]	@ (8003840 <task_actuator_init+0x188>)
 80037e6:	6818      	ldr	r0, [r3, #0]
 80037e8:	7a7b      	ldrb	r3, [r7, #9]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <task_actuator_init+0x13a>
 80037ee:	4b25      	ldr	r3, [pc, #148]	@ (8003884 <task_actuator_init+0x1cc>)
 80037f0:	e000      	b.n	80037f4 <task_actuator_init+0x13c>
 80037f2:	4b25      	ldr	r3, [pc, #148]	@ (8003888 <task_actuator_init+0x1d0>)
 80037f4:	9300      	str	r3, [sp, #0]
 80037f6:	4b25      	ldr	r3, [pc, #148]	@ (800388c <task_actuator_init+0x1d4>)
 80037f8:	4a25      	ldr	r2, [pc, #148]	@ (8003890 <task_actuator_init+0x1d8>)
 80037fa:	213f      	movs	r1, #63	@ 0x3f
 80037fc:	f001 ffca 	bl	8005794 <sniprintf>
 8003800:	4603      	mov	r3, r0
 8003802:	4a13      	ldr	r2, [pc, #76]	@ (8003850 <task_actuator_init+0x198>)
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	4b0e      	ldr	r3, [pc, #56]	@ (8003840 <task_actuator_init+0x188>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7ff ff40 	bl	8003690 <logger_log_print_>
 8003810:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	6858      	ldr	r0, [r3, #4]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	8919      	ldrh	r1, [r3, #8]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	7adb      	ldrb	r3, [r3, #11]
 800381e:	461a      	mov	r2, r3
 8003820:	f7fe fc95 	bl	800214e <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	3301      	adds	r3, #1
 8003828:	617b      	str	r3, [r7, #20]
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	2b05      	cmp	r3, #5
 800382e:	d989      	bls.n	8003744 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 8003830:	4b18      	ldr	r3, [pc, #96]	@ (8003894 <task_actuator_init+0x1dc>)
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
}
 8003836:	bf00      	nop
 8003838:	3718      	adds	r7, #24
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	08006d68 	.word	0x08006d68
 8003844:	20000048 	.word	0x20000048
 8003848:	0800681c 	.word	0x0800681c
 800384c:	08006830 	.word	0x08006830
 8003850:	20000468 	.word	0x20000468
 8003854:	2000004c 	.word	0x2000004c
 8003858:	08006848 	.word	0x08006848
 800385c:	08006858 	.word	0x08006858
 8003860:	2000046c 	.word	0x2000046c
 8003864:	08006868 	.word	0x08006868
 8003868:	0800687c 	.word	0x0800687c
 800386c:	08006d6c 	.word	0x08006d6c
 8003870:	20000018 	.word	0x20000018
 8003874:	0800688c 	.word	0x0800688c
 8003878:	08006894 	.word	0x08006894
 800387c:	080068a0 	.word	0x080068a0
 8003880:	080068a8 	.word	0x080068a8
 8003884:	080068b0 	.word	0x080068b0
 8003888:	080068b8 	.word	0x080068b8
 800388c:	080068c0 	.word	0x080068c0
 8003890:	080068c8 	.word	0x080068c8
 8003894:	20000470 	.word	0x20000470

08003898 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 80038a0:	2300      	movs	r3, #0
 80038a2:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 80038a4:	4b90      	ldr	r3, [pc, #576]	@ (8003ae8 <task_actuator_update+0x250>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a8f      	ldr	r2, [pc, #572]	@ (8003ae8 <task_actuator_update+0x250>)
 80038ac:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 80038ae:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 80038b0:	4b8e      	ldr	r3, [pc, #568]	@ (8003aec <task_actuator_update+0x254>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 80038b8:	4b8c      	ldr	r3, [pc, #560]	@ (8003aec <task_actuator_update+0x254>)
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	4a8b      	ldr	r2, [pc, #556]	@ (8003aec <task_actuator_update+0x254>)
 80038c0:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80038c2:	2301      	movs	r3, #1
 80038c4:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80038c6:	b662      	cpsie	i

    while (b_time_update_required)
 80038c8:	e15f      	b.n	8003b8a <task_actuator_update+0x2f2>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 80038ca:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 80038cc:	4b87      	ldr	r3, [pc, #540]	@ (8003aec <task_actuator_update+0x254>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d007      	beq.n	80038e4 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 80038d4:	4b85      	ldr	r3, [pc, #532]	@ (8003aec <task_actuator_update+0x254>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3b01      	subs	r3, #1
 80038da:	4a84      	ldr	r2, [pc, #528]	@ (8003aec <task_actuator_update+0x254>)
 80038dc:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80038de:	2301      	movs	r3, #1
 80038e0:	74fb      	strb	r3, [r7, #19]
 80038e2:	e001      	b.n	80038e8 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80038e4:	2300      	movs	r3, #0
 80038e6:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80038e8:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 80038ea:	2300      	movs	r3, #0
 80038ec:	617b      	str	r3, [r7, #20]
 80038ee:	e148      	b.n	8003b82 <task_actuator_update+0x2ea>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 80038f0:	697a      	ldr	r2, [r7, #20]
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	4a7d      	ldr	r2, [pc, #500]	@ (8003af0 <task_actuator_update+0x258>)
 80038fc:	4413      	add	r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	00db      	lsls	r3, r3, #3
 8003904:	4a7b      	ldr	r2, [pc, #492]	@ (8003af4 <task_actuator_update+0x25c>)
 8003906:	4413      	add	r3, r2
 8003908:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	791b      	ldrb	r3, [r3, #4]
 800390e:	2b04      	cmp	r3, #4
 8003910:	f200 8129 	bhi.w	8003b66 <task_actuator_update+0x2ce>
 8003914:	a201      	add	r2, pc, #4	@ (adr r2, 800391c <task_actuator_update+0x84>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	08003931 	.word	0x08003931
 8003920:	080039d7 	.word	0x080039d7
 8003924:	08003a0b 	.word	0x08003a0b
 8003928:	08003a7b 	.word	0x08003a7b
 800392c:	08003af9 	.word	0x08003af9
			{
				case ST_LED_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	799b      	ldrb	r3, [r3, #6]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d013      	beq.n	8003960 <task_actuator_update+0xc8>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d10f      	bne.n	8003960 <task_actuator_update+0xc8>
					{
						p_task_actuator_dta->flag = false;
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	6858      	ldr	r0, [r3, #4]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8919      	ldrh	r1, [r3, #8]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	7a9b      	ldrb	r3, [r3, #10]
 8003952:	461a      	mov	r2, r3
 8003954:	f7fe fbfb 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_ON;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	2201      	movs	r2, #1
 800395c:	711a      	strb	r2, [r3, #4]
 800395e:	e039      	b.n	80039d4 <task_actuator_update+0x13c>
					}
					else if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_BLINK == p_task_actuator_dta->event))
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	799b      	ldrb	r3, [r3, #6]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d017      	beq.n	8003998 <task_actuator_update+0x100>
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	795b      	ldrb	r3, [r3, #5]
 800396c:	2b03      	cmp	r3, #3
 800396e:	d113      	bne.n	8003998 <task_actuator_update+0x100>
					{
						p_task_actuator_dta->flag = false;
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	2200      	movs	r2, #0
 8003974:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	68da      	ldr	r2, [r3, #12]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6858      	ldr	r0, [r3, #4]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8919      	ldrh	r1, [r3, #8]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	7a9b      	ldrb	r3, [r3, #10]
 800398a:	461a      	mov	r2, r3
 800398c:	f7fe fbdf 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	2202      	movs	r2, #2
 8003994:	711a      	strb	r2, [r3, #4]
 8003996:	e01d      	b.n	80039d4 <task_actuator_update+0x13c>
					}
					else if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_PULSE == p_task_actuator_dta->event))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	799b      	ldrb	r3, [r3, #6]
 800399c:	2b00      	cmp	r3, #0
 800399e:	f000 80e4 	beq.w	8003b6a <task_actuator_update+0x2d2>
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	795b      	ldrb	r3, [r3, #5]
 80039a6:	2b04      	cmp	r3, #4
 80039a8:	f040 80df 	bne.w	8003b6a <task_actuator_update+0x2d2>
					{
						p_task_actuator_dta->flag = false;
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2200      	movs	r2, #0
 80039b0:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_pulse;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6858      	ldr	r0, [r3, #4]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	8919      	ldrh	r1, [r3, #8]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	7a9b      	ldrb	r3, [r3, #10]
 80039c6:	461a      	mov	r2, r3
 80039c8:	f7fe fbc1 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_PULSE;
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	2204      	movs	r2, #4
 80039d0:	711a      	strb	r2, [r3, #4]
					}

					break;
 80039d2:	e0ca      	b.n	8003b6a <task_actuator_update+0x2d2>
 80039d4:	e0c9      	b.n	8003b6a <task_actuator_update+0x2d2>

				case ST_LED_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	799b      	ldrb	r3, [r3, #6]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	f000 80c7 	beq.w	8003b6e <task_actuator_update+0x2d6>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	795b      	ldrb	r3, [r3, #5]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f040 80c2 	bne.w	8003b6e <task_actuator_update+0x2d6>
					{
						p_task_actuator_dta->flag = false;
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6858      	ldr	r0, [r3, #4]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8919      	ldrh	r1, [r3, #8]
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	7adb      	ldrb	r3, [r3, #11]
 80039fc:	461a      	mov	r2, r3
 80039fe:	f7fe fba6 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	2200      	movs	r2, #0
 8003a06:	711a      	strb	r2, [r3, #4]
					}

					break;
 8003a08:	e0b1      	b.n	8003b6e <task_actuator_update+0x2d6>

				case ST_LED_XX_BLINK_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	799b      	ldrb	r3, [r3, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d013      	beq.n	8003a3a <task_actuator_update+0x1a2>
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	795b      	ldrb	r3, [r3, #5]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10f      	bne.n	8003a3a <task_actuator_update+0x1a2>
					{
						p_task_actuator_dta->flag = false;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6858      	ldr	r0, [r3, #4]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8919      	ldrh	r1, [r3, #8]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	7adb      	ldrb	r3, [r3, #11]
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	f7fe fb8e 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	2200      	movs	r2, #0
 8003a36:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8003a38:	e09b      	b.n	8003b72 <task_actuator_update+0x2da>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d110      	bne.n	8003a64 <task_actuator_update+0x1cc>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	6858      	ldr	r0, [r3, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8919      	ldrh	r1, [r3, #8]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	7adb      	ldrb	r3, [r3, #11]
 8003a56:	461a      	mov	r2, r3
 8003a58:	f7fe fb79 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_OFF;
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	2203      	movs	r2, #3
 8003a60:	711a      	strb	r2, [r3, #4]
					break;
 8003a62:	e086      	b.n	8003b72 <task_actuator_update+0x2da>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 8082 	beq.w	8003b72 <task_actuator_update+0x2da>
						p_task_actuator_dta->tick--;
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	1e5a      	subs	r2, r3, #1
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	601a      	str	r2, [r3, #0]
					break;
 8003a78:	e07b      	b.n	8003b72 <task_actuator_update+0x2da>

				case ST_LED_XX_BLINK_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	799b      	ldrb	r3, [r3, #6]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d013      	beq.n	8003aaa <task_actuator_update+0x212>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	795b      	ldrb	r3, [r3, #5]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10f      	bne.n	8003aaa <task_actuator_update+0x212>
					{
						p_task_actuator_dta->flag = false;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6858      	ldr	r0, [r3, #4]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8919      	ldrh	r1, [r3, #8]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	7adb      	ldrb	r3, [r3, #11]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	f7fe fb56 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8003aa8:	e065      	b.n	8003b76 <task_actuator_update+0x2de>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d110      	bne.n	8003ad4 <task_actuator_update+0x23c>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68da      	ldr	r2, [r3, #12]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6858      	ldr	r0, [r3, #4]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8919      	ldrh	r1, [r3, #8]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	7a9b      	ldrb	r3, [r3, #10]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f7fe fb41 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	2202      	movs	r2, #2
 8003ad0:	711a      	strb	r2, [r3, #4]
					break;
 8003ad2:	e050      	b.n	8003b76 <task_actuator_update+0x2de>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d04c      	beq.n	8003b76 <task_actuator_update+0x2de>
						p_task_actuator_dta->tick--;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	1e5a      	subs	r2, r3, #1
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	601a      	str	r2, [r3, #0]
					break;
 8003ae6:	e046      	b.n	8003b76 <task_actuator_update+0x2de>
 8003ae8:	2000046c 	.word	0x2000046c
 8003aec:	20000470 	.word	0x20000470
 8003af0:	08006d6c 	.word	0x08006d6c
 8003af4:	20000018 	.word	0x20000018

				case ST_LED_XX_PULSE:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	799b      	ldrb	r3, [r3, #6]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <task_actuator_update+0x290>
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	795b      	ldrb	r3, [r3, #5]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10f      	bne.n	8003b28 <task_actuator_update+0x290>
					{
						p_task_actuator_dta->flag = false;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6858      	ldr	r0, [r3, #4]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8919      	ldrh	r1, [r3, #8]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	7adb      	ldrb	r3, [r3, #11]
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f7fe fb17 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2200      	movs	r2, #0
 8003b24:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8003b26:	e028      	b.n	8003b7a <task_actuator_update+0x2e2>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d110      	bne.n	8003b52 <task_actuator_update+0x2ba>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	68da      	ldr	r2, [r3, #12]
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6858      	ldr	r0, [r3, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8919      	ldrh	r1, [r3, #8]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	7adb      	ldrb	r3, [r3, #11]
 8003b44:	461a      	mov	r2, r3
 8003b46:	f7fe fb02 	bl	800214e <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	711a      	strb	r2, [r3, #4]
					break;
 8003b50:	e013      	b.n	8003b7a <task_actuator_update+0x2e2>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d00f      	beq.n	8003b7a <task_actuator_update+0x2e2>
						p_task_actuator_dta->tick--;
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	1e5a      	subs	r2, r3, #1
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	601a      	str	r2, [r3, #0]
					break;
 8003b64:	e009      	b.n	8003b7a <task_actuator_update+0x2e2>

				default:

					break;
 8003b66:	bf00      	nop
 8003b68:	e008      	b.n	8003b7c <task_actuator_update+0x2e4>
					break;
 8003b6a:	bf00      	nop
 8003b6c:	e006      	b.n	8003b7c <task_actuator_update+0x2e4>
					break;
 8003b6e:	bf00      	nop
 8003b70:	e004      	b.n	8003b7c <task_actuator_update+0x2e4>
					break;
 8003b72:	bf00      	nop
 8003b74:	e002      	b.n	8003b7c <task_actuator_update+0x2e4>
					break;
 8003b76:	bf00      	nop
 8003b78:	e000      	b.n	8003b7c <task_actuator_update+0x2e4>
					break;
 8003b7a:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	3301      	adds	r3, #1
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b05      	cmp	r3, #5
 8003b86:	f67f aeb3 	bls.w	80038f0 <task_actuator_update+0x58>
    while (b_time_update_required)
 8003b8a:	7cfb      	ldrb	r3, [r7, #19]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f47f ae9c 	bne.w	80038ca <task_actuator_update+0x32>
			}
		}
    }
}
 8003b92:	bf00      	nop
 8003b94:	bf00      	nop
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	460a      	mov	r2, r1
 8003ba6:	71fb      	strb	r3, [r7, #7]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8003bac:	79bb      	ldrb	r3, [r7, #6]
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	4a06      	ldr	r2, [pc, #24]	@ (8003bcc <put_event_task_actuator+0x30>)
 8003bb2:	4413      	add	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	79fa      	ldrb	r2, [r7, #7]
 8003bba:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	719a      	strb	r2, [r3, #6]
}
 8003bc2:	bf00      	nop
 8003bc4:	3714      	adds	r7, #20
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bc80      	pop	{r7}
 8003bca:	4770      	bx	lr
 8003bcc:	20000018 	.word	0x20000018

08003bd0 <task_normal_init>:
uint32_t g_task_normal_cnt;
volatile uint32_t g_task_normal_tick_cnt;

/********************** external functions definition ************************/
void task_normal_init(void *parameters)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b086      	sub	sp, #24
 8003bd4:	af02      	add	r7, sp, #8
 8003bd6:	6078      	str	r0, [r7, #4]
	task_normal_st_t	state;
	task_normal_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_normal_init), p_task_normal);
 8003bd8:	b672      	cpsid	i
 8003bda:	4b48      	ldr	r3, [pc, #288]	@ (8003cfc <task_normal_init+0x12c>)
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	4b48      	ldr	r3, [pc, #288]	@ (8003d00 <task_normal_init+0x130>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	4b47      	ldr	r3, [pc, #284]	@ (8003d04 <task_normal_init+0x134>)
 8003be6:	4a48      	ldr	r2, [pc, #288]	@ (8003d08 <task_normal_init+0x138>)
 8003be8:	213f      	movs	r1, #63	@ 0x3f
 8003bea:	f001 fdd3 	bl	8005794 <sniprintf>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	4a46      	ldr	r2, [pc, #280]	@ (8003d0c <task_normal_init+0x13c>)
 8003bf2:	6013      	str	r3, [r2, #0]
 8003bf4:	4b41      	ldr	r3, [pc, #260]	@ (8003cfc <task_normal_init+0x12c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7ff fd49 	bl	8003690 <logger_log_print_>
 8003bfe:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_normal), p_task_normal_);
 8003c00:	b672      	cpsid	i
 8003c02:	4b3e      	ldr	r3, [pc, #248]	@ (8003cfc <task_normal_init+0x12c>)
 8003c04:	6818      	ldr	r0, [r3, #0]
 8003c06:	4b42      	ldr	r3, [pc, #264]	@ (8003d10 <task_normal_init+0x140>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4b41      	ldr	r3, [pc, #260]	@ (8003d14 <task_normal_init+0x144>)
 8003c0e:	4a42      	ldr	r2, [pc, #264]	@ (8003d18 <task_normal_init+0x148>)
 8003c10:	213f      	movs	r1, #63	@ 0x3f
 8003c12:	f001 fdbf 	bl	8005794 <sniprintf>
 8003c16:	4603      	mov	r3, r0
 8003c18:	4a3c      	ldr	r2, [pc, #240]	@ (8003d0c <task_normal_init+0x13c>)
 8003c1a:	6013      	str	r3, [r2, #0]
 8003c1c:	4b37      	ldr	r3, [pc, #220]	@ (8003cfc <task_normal_init+0x12c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff fd35 	bl	8003690 <logger_log_print_>
 8003c26:	b662      	cpsie	i

	g_task_normal_cnt = G_TASK_SYS_CNT_INI;
 8003c28:	4b3c      	ldr	r3, [pc, #240]	@ (8003d1c <task_normal_init+0x14c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_normal_cnt), g_task_normal_cnt);
 8003c2e:	b672      	cpsid	i
 8003c30:	4b32      	ldr	r3, [pc, #200]	@ (8003cfc <task_normal_init+0x12c>)
 8003c32:	6818      	ldr	r0, [r3, #0]
 8003c34:	4b39      	ldr	r3, [pc, #228]	@ (8003d1c <task_normal_init+0x14c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	4b39      	ldr	r3, [pc, #228]	@ (8003d20 <task_normal_init+0x150>)
 8003c3c:	4a39      	ldr	r2, [pc, #228]	@ (8003d24 <task_normal_init+0x154>)
 8003c3e:	213f      	movs	r1, #63	@ 0x3f
 8003c40:	f001 fda8 	bl	8005794 <sniprintf>
 8003c44:	4603      	mov	r3, r0
 8003c46:	4a31      	ldr	r2, [pc, #196]	@ (8003d0c <task_normal_init+0x13c>)
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b2c      	ldr	r3, [pc, #176]	@ (8003cfc <task_normal_init+0x12c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7ff fd1e 	bl	8003690 <logger_log_print_>
 8003c54:	b662      	cpsie	i

	init_queue_event_task_normal();
 8003c56:	f000 f95f 	bl	8003f18 <init_queue_event_task_normal>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_normal_dta = &task_normal_dta;
 8003c5a:	4b33      	ldr	r3, [pc, #204]	@ (8003d28 <task_normal_init+0x158>)
 8003c5c:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_normal_dta->state;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	791b      	ldrb	r3, [r3, #4]
 8003c62:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8003c64:	b672      	cpsid	i
 8003c66:	4b25      	ldr	r3, [pc, #148]	@ (8003cfc <task_normal_init+0x12c>)
 8003c68:	6818      	ldr	r0, [r3, #0]
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d2c <task_normal_init+0x15c>)
 8003c70:	4a2f      	ldr	r2, [pc, #188]	@ (8003d30 <task_normal_init+0x160>)
 8003c72:	213f      	movs	r1, #63	@ 0x3f
 8003c74:	f001 fd8e 	bl	8005794 <sniprintf>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	4a24      	ldr	r2, [pc, #144]	@ (8003d0c <task_normal_init+0x13c>)
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b1f      	ldr	r3, [pc, #124]	@ (8003cfc <task_normal_init+0x12c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fd04 	bl	8003690 <logger_log_print_>
 8003c88:	b662      	cpsie	i

	event = p_task_normal_dta->event;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	795b      	ldrb	r3, [r3, #5]
 8003c8e:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8003c90:	b672      	cpsid	i
 8003c92:	4b1a      	ldr	r3, [pc, #104]	@ (8003cfc <task_normal_init+0x12c>)
 8003c94:	6818      	ldr	r0, [r3, #0]
 8003c96:	7abb      	ldrb	r3, [r7, #10]
 8003c98:	9300      	str	r3, [sp, #0]
 8003c9a:	4b26      	ldr	r3, [pc, #152]	@ (8003d34 <task_normal_init+0x164>)
 8003c9c:	4a24      	ldr	r2, [pc, #144]	@ (8003d30 <task_normal_init+0x160>)
 8003c9e:	213f      	movs	r1, #63	@ 0x3f
 8003ca0:	f001 fd78 	bl	8005794 <sniprintf>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	4a19      	ldr	r2, [pc, #100]	@ (8003d0c <task_normal_init+0x13c>)
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	4b14      	ldr	r3, [pc, #80]	@ (8003cfc <task_normal_init+0x12c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff fcee 	bl	8003690 <logger_log_print_>
 8003cb4:	b662      	cpsie	i

	b_event = p_task_normal_dta->flag;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	799b      	ldrb	r3, [r3, #6]
 8003cba:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8003cbc:	b672      	cpsid	i
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8003cfc <task_normal_init+0x12c>)
 8003cc0:	6818      	ldr	r0, [r3, #0]
 8003cc2:	7a7b      	ldrb	r3, [r7, #9]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <task_normal_init+0xfc>
 8003cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8003d38 <task_normal_init+0x168>)
 8003cca:	e000      	b.n	8003cce <task_normal_init+0xfe>
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <task_normal_init+0x16c>)
 8003cce:	9300      	str	r3, [sp, #0]
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d40 <task_normal_init+0x170>)
 8003cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8003d44 <task_normal_init+0x174>)
 8003cd4:	213f      	movs	r1, #63	@ 0x3f
 8003cd6:	f001 fd5d 	bl	8005794 <sniprintf>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	4a0b      	ldr	r2, [pc, #44]	@ (8003d0c <task_normal_init+0x13c>)
 8003cde:	6013      	str	r3, [r2, #0]
 8003ce0:	4b06      	ldr	r3, [pc, #24]	@ (8003cfc <task_normal_init+0x12c>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff fcd3 	bl	8003690 <logger_log_print_>
 8003cea:	b662      	cpsie	i

	g_task_normal_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8003cec:	4b16      	ldr	r3, [pc, #88]	@ (8003d48 <task_normal_init+0x178>)
 8003cee:	2200      	movs	r2, #0
 8003cf0:	601a      	str	r2, [r3, #0]
}
 8003cf2:	bf00      	nop
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	08006d68 	.word	0x08006d68
 8003d00:	20000050 	.word	0x20000050
 8003d04:	0800691c 	.word	0x0800691c
 8003d08:	08006930 	.word	0x08006930
 8003d0c:	20000468 	.word	0x20000468
 8003d10:	20000054 	.word	0x20000054
 8003d14:	08006948 	.word	0x08006948
 8003d18:	08006954 	.word	0x08006954
 8003d1c:	2000047c 	.word	0x2000047c
 8003d20:	08006964 	.word	0x08006964
 8003d24:	08006978 	.word	0x08006978
 8003d28:	20000474 	.word	0x20000474
 8003d2c:	08006988 	.word	0x08006988
 8003d30:	08006990 	.word	0x08006990
 8003d34:	0800699c 	.word	0x0800699c
 8003d38:	080069a4 	.word	0x080069a4
 8003d3c:	080069ac 	.word	0x080069ac
 8003d40:	080069b4 	.word	0x080069b4
 8003d44:	080069bc 	.word	0x080069bc
 8003d48:	20000480 	.word	0x20000480

08003d4c <task_normal_update>:

void task_normal_update(void *parameters)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
	task_normal_dta_t *p_task_normal_dta;
	bool b_time_update_required = false;
 8003d54:	2300      	movs	r3, #0
 8003d56:	73fb      	strb	r3, [r7, #15]

	/* Update Task normal Counter */
	g_task_normal_cnt++;
 8003d58:	4b6c      	ldr	r3, [pc, #432]	@ (8003f0c <task_normal_update+0x1c0>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	4a6b      	ldr	r2, [pc, #428]	@ (8003f0c <task_normal_update+0x1c0>)
 8003d60:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_normal_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8003d62:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8003d64:	4b6a      	ldr	r3, [pc, #424]	@ (8003f10 <task_normal_update+0x1c4>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d006      	beq.n	8003d7a <task_normal_update+0x2e>
    {
    	g_task_normal_tick_cnt--;
 8003d6c:	4b68      	ldr	r3, [pc, #416]	@ (8003f10 <task_normal_update+0x1c4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3b01      	subs	r3, #1
 8003d72:	4a67      	ldr	r2, [pc, #412]	@ (8003f10 <task_normal_update+0x1c4>)
 8003d74:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8003d76:	2301      	movs	r3, #1
 8003d78:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8003d7a:	b662      	cpsie	i

    while (b_time_update_required)
 8003d7c:	e0bd      	b.n	8003efa <task_normal_update+0x1ae>
    {
		/* Protect shared resource (g_task_normal_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8003d7e:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8003d80:	4b63      	ldr	r3, [pc, #396]	@ (8003f10 <task_normal_update+0x1c4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d007      	beq.n	8003d98 <task_normal_update+0x4c>
		{
			g_task_normal_tick_cnt--;
 8003d88:	4b61      	ldr	r3, [pc, #388]	@ (8003f10 <task_normal_update+0x1c4>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	4a60      	ldr	r2, [pc, #384]	@ (8003f10 <task_normal_update+0x1c4>)
 8003d90:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
 8003d96:	e001      	b.n	8003d9c <task_normal_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8003d9c:	b662      	cpsie	i

    	/* Update Task normal Data Pointer */
		p_task_normal_dta = &task_normal_dta;
 8003d9e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f14 <task_normal_update+0x1c8>)
 8003da0:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_normal())
 8003da2:	f000 f925 	bl	8003ff0 <any_event_task_normal>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <task_normal_update+0x72>
		{
			p_task_normal_dta->flag = true;
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2201      	movs	r2, #1
 8003db0:	719a      	strb	r2, [r3, #6]
			p_task_normal_dta->event = get_event_task_normal();
 8003db2:	f000 f8f7 	bl	8003fa4 <get_event_task_normal>
 8003db6:	4603      	mov	r3, r0
 8003db8:	461a      	mov	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_normal_dta->state)
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	791b      	ldrb	r3, [r3, #4]
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	f200 8092 	bhi.w	8003eec <task_normal_update+0x1a0>
 8003dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8003dd0 <task_normal_update+0x84>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003e1b 	.word	0x08003e1b
 8003dd8:	08003e51 	.word	0x08003e51
 8003ddc:	08003e89 	.word	0x08003e89
 8003de0:	08003eed 	.word	0x08003eed
 8003de4:	08003eed 	.word	0x08003eed
 8003de8:	08003eed 	.word	0x08003eed
 8003dec:	08003eed 	.word	0x08003eed
 8003df0:	08003eed 	.word	0x08003eed
		{

		case ST_SYS_01_ESPERAR_INGRESO:

			if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_INGRESO_DOWN ==  p_task_normal_dta->event))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	799b      	ldrb	r3, [r3, #6]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d079      	beq.n	8003ef0 <task_normal_update+0x1a4>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	795b      	ldrb	r3, [r3, #5]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d175      	bne.n	8003ef0 <task_normal_update+0x1a4>
			{
				p_task_normal_dta->flag = false;
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	2200      	movs	r2, #0
 8003e08:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_ABRIR);
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	2003      	movs	r0, #3
 8003e0e:	f7ff fec5 	bl	8003b9c <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ABRIENDO_INGRESO;
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2201      	movs	r2, #1
 8003e16:	711a      	strb	r2, [r3, #4]

			}

			break;
 8003e18:	e06a      	b.n	8003ef0 <task_normal_update+0x1a4>


		case ST_SYS_01_ABRIENDO_INGRESO:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_INGRESO_ABIERTA ==  p_task_normal_dta->event))
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	799b      	ldrb	r3, [r3, #6]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d068      	beq.n	8003ef4 <task_normal_update+0x1a8>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	795b      	ldrb	r3, [r3, #5]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d164      	bne.n	8003ef4 <task_normal_update+0x1a8>
			{
				p_task_normal_dta->flag = false;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	719a      	strb	r2, [r3, #6]

				p_task_normal_dta->tick = DEL_SYS_01_ESPERA;
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e36:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_ABRIR);
 8003e38:	2101      	movs	r1, #1
 8003e3a:	2000      	movs	r0, #0
 8003e3c:	f7ff feae 	bl	8003b9c <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_ON, ID_SEMAFORO_INGRESO);
 8003e40:	2103      	movs	r1, #3
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7ff feaa 	bl	8003b9c <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_ESPERANDO_INGRESO;
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	711a      	strb	r2, [r3, #4]

			}
			break;
 8003e4e:	e051      	b.n	8003ef4 <task_normal_update+0x1a8>

		case ST_SYS_01_ESPERANDO_INGRESO:

			if((true == p_task_normal_dta->flag) && (p_task_normal_dta->tick == 0))
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	799b      	ldrb	r3, [r3, #6]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d011      	beq.n	8003e7c <task_normal_update+0x130>
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <task_normal_update+0x130>
			{
				p_task_normal_dta->flag = false;
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2200      	movs	r2, #0
 8003e64:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_CERRAR);
 8003e66:	2102      	movs	r1, #2
 8003e68:	2003      	movs	r0, #3
 8003e6a:	f7ff fe97 	bl	8003b9c <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_INGRESO);
 8003e6e:	2103      	movs	r1, #3
 8003e70:	2000      	movs	r0, #0
 8003e72:	f7ff fe93 	bl	8003b9c <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_CERRANDO_INGRESO;
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2203      	movs	r2, #3
 8003e7a:	711a      	strb	r2, [r3, #4]

			}

			p_task_normal_dta->tick--;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	1e5a      	subs	r2, r3, #1
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	601a      	str	r2, [r3, #0]

			break;
 8003e86:	e038      	b.n	8003efa <task_normal_update+0x1ae>

		case ST_SYS_01_CERRANDO_INGRESO:
			//Corregir esto, no va a funcionar aca. Hacer checkeo en dos pasos
			if((true == p_task_normal_dta->flag) &&
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	799b      	ldrb	r3, [r3, #6]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d012      	beq.n	8003eb6 <task_normal_update+0x16a>
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	795b      	ldrb	r3, [r3, #5]
			if((true == p_task_normal_dta->flag) &&
 8003e94:	2b06      	cmp	r3, #6
 8003e96:	d10e      	bne.n	8003eb6 <task_normal_update+0x16a>
			(EV_SYS_01_BARRERA_INACTIVA ==  p_task_normal_dta->event))
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	795b      	ldrb	r3, [r3, #5]
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8003e9c:	2b08      	cmp	r3, #8
 8003e9e:	d10a      	bne.n	8003eb6 <task_normal_update+0x16a>
			{
				p_task_normal_dta->flag = false;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_CERRAR);
 8003ea6:	2102      	movs	r1, #2
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	f7ff fe77 	bl	8003b9c <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ESPERAR_INGRESO;
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	711a      	strb	r2, [r3, #4]
				p_task_normal_dta->tick = DEL_SYS_01_PERMANENCIA;
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_CERRAR);
				p_task_normal_dta->state = ST_SYS_01_PERSONA_ADENTRO;
			}

			break;
 8003eb4:	e020      	b.n	8003ef8 <task_normal_update+0x1ac>
			else if((true == p_task_normal_dta->flag) &&
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	799b      	ldrb	r3, [r3, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d01c      	beq.n	8003ef8 <task_normal_update+0x1ac>
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	795b      	ldrb	r3, [r3, #5]
			else if((true == p_task_normal_dta->flag) &&
 8003ec2:	2b06      	cmp	r3, #6
 8003ec4:	d118      	bne.n	8003ef8 <task_normal_update+0x1ac>
			(EV_SYS_01_BARRERA_ACTIVA ==  p_task_normal_dta->event))
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	795b      	ldrb	r3, [r3, #5]
			(EV_SYS_01_PUERTA_INGRESO_CERRADA ==  p_task_normal_dta->event) &&
 8003eca:	2b07      	cmp	r3, #7
 8003ecc:	d114      	bne.n	8003ef8 <task_normal_update+0x1ac>
				p_task_normal_dta->flag = false;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	719a      	strb	r2, [r3, #6]
				p_task_normal_dta->tick = DEL_SYS_01_PERMANENCIA;
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8003eda:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_CERRAR);
 8003edc:	2102      	movs	r1, #2
 8003ede:	2000      	movs	r0, #0
 8003ee0:	f7ff fe5c 	bl	8003b9c <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_PERSONA_ADENTRO;
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	2204      	movs	r2, #4
 8003ee8:	711a      	strb	r2, [r3, #4]
			break;
 8003eea:	e005      	b.n	8003ef8 <task_normal_update+0x1ac>

				break;
			 */
			default:

				break;
 8003eec:	bf00      	nop
 8003eee:	e004      	b.n	8003efa <task_normal_update+0x1ae>
			break;
 8003ef0:	bf00      	nop
 8003ef2:	e002      	b.n	8003efa <task_normal_update+0x1ae>
			break;
 8003ef4:	bf00      	nop
 8003ef6:	e000      	b.n	8003efa <task_normal_update+0x1ae>
			break;
 8003ef8:	bf00      	nop
    while (b_time_update_required)
 8003efa:	7bfb      	ldrb	r3, [r7, #15]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	f47f af3e 	bne.w	8003d7e <task_normal_update+0x32>
		}
	}
}
 8003f02:	bf00      	nop
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	2000047c 	.word	0x2000047c
 8003f10:	20000480 	.word	0x20000480
 8003f14:	20000474 	.word	0x20000474

08003f18 <init_queue_event_task_normal>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_normal(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8003f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003f5c <init_queue_event_task_normal+0x44>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8003f24:	4b0d      	ldr	r3, [pc, #52]	@ (8003f5c <init_queue_event_task_normal+0x44>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8003f2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f5c <init_queue_event_task_normal+0x44>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8003f30:	2300      	movs	r3, #0
 8003f32:	607b      	str	r3, [r7, #4]
 8003f34:	e008      	b.n	8003f48 <init_queue_event_task_normal+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8003f36:	4a09      	ldr	r2, [pc, #36]	@ (8003f5c <init_queue_event_task_normal+0x44>)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	330c      	adds	r3, #12
 8003f3e:	22ff      	movs	r2, #255	@ 0xff
 8003f40:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	3301      	adds	r3, #1
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b0f      	cmp	r3, #15
 8003f4c:	d9f3      	bls.n	8003f36 <init_queue_event_task_normal+0x1e>
}
 8003f4e:	bf00      	nop
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bc80      	pop	{r7}
 8003f58:	4770      	bx	lr
 8003f5a:	bf00      	nop
 8003f5c:	20000484 	.word	0x20000484

08003f60 <put_event_task_normal>:

void put_event_task_normal(task_normal_ev_t event)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	4603      	mov	r3, r0
 8003f68:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a0b      	ldr	r2, [pc, #44]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f72:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1c5a      	adds	r2, r3, #1
 8003f7a:	4909      	ldr	r1, [pc, #36]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f7c:	600a      	str	r2, [r1, #0]
 8003f7e:	4a08      	ldr	r2, [pc, #32]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f80:	4413      	add	r3, r2
 8003f82:	79fa      	ldrb	r2, [r7, #7]
 8003f84:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2b10      	cmp	r3, #16
 8003f8c:	d102      	bne.n	8003f94 <put_event_task_normal+0x34>
		queue_task_a.head = 0;
 8003f8e:	4b04      	ldr	r3, [pc, #16]	@ (8003fa0 <put_event_task_normal+0x40>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bc80      	pop	{r7}
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	20000484 	.word	0x20000484

08003fa4 <get_event_task_normal>:

task_normal_ev_t get_event_task_normal(void)

{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
	task_normal_ev_t event;

	queue_task_a.count--;
 8003faa:	4b10      	ldr	r3, [pc, #64]	@ (8003fec <get_event_task_normal+0x48>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	4a0e      	ldr	r2, [pc, #56]	@ (8003fec <get_event_task_normal+0x48>)
 8003fb2:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8003fb4:	4b0d      	ldr	r3, [pc, #52]	@ (8003fec <get_event_task_normal+0x48>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	4a0c      	ldr	r2, [pc, #48]	@ (8003fec <get_event_task_normal+0x48>)
 8003fba:	4413      	add	r3, r2
 8003fbc:	7b1b      	ldrb	r3, [r3, #12]
 8003fbe:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8003fc0:	4b0a      	ldr	r3, [pc, #40]	@ (8003fec <get_event_task_normal+0x48>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	4909      	ldr	r1, [pc, #36]	@ (8003fec <get_event_task_normal+0x48>)
 8003fc8:	604a      	str	r2, [r1, #4]
 8003fca:	4a08      	ldr	r2, [pc, #32]	@ (8003fec <get_event_task_normal+0x48>)
 8003fcc:	4413      	add	r3, r2
 8003fce:	22ff      	movs	r2, #255	@ 0xff
 8003fd0:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8003fd2:	4b06      	ldr	r3, [pc, #24]	@ (8003fec <get_event_task_normal+0x48>)
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b10      	cmp	r3, #16
 8003fd8:	d102      	bne.n	8003fe0 <get_event_task_normal+0x3c>
		queue_task_a.tail = 0;
 8003fda:	4b04      	ldr	r3, [pc, #16]	@ (8003fec <get_event_task_normal+0x48>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	605a      	str	r2, [r3, #4]

	return event;
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bc80      	pop	{r7}
 8003fea:	4770      	bx	lr
 8003fec:	20000484 	.word	0x20000484

08003ff0 <any_event_task_normal>:

bool any_event_task_normal(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8003ff4:	4b06      	ldr	r3, [pc, #24]	@ (8004010 <any_event_task_normal+0x20>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	4b05      	ldr	r3, [pc, #20]	@ (8004010 <any_event_task_normal+0x20>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
}
 8004006:	4618      	mov	r0, r3
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	20000484 	.word	0x20000484

08004014 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af02      	add	r7, sp, #8
 800401a:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 800401c:	b672      	cpsid	i
 800401e:	4b49      	ldr	r3, [pc, #292]	@ (8004144 <task_sensor_init+0x130>)
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	4b49      	ldr	r3, [pc, #292]	@ (8004148 <task_sensor_init+0x134>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	9300      	str	r3, [sp, #0]
 8004028:	4b48      	ldr	r3, [pc, #288]	@ (800414c <task_sensor_init+0x138>)
 800402a:	4a49      	ldr	r2, [pc, #292]	@ (8004150 <task_sensor_init+0x13c>)
 800402c:	213f      	movs	r1, #63	@ 0x3f
 800402e:	f001 fbb1 	bl	8005794 <sniprintf>
 8004032:	4603      	mov	r3, r0
 8004034:	4a47      	ldr	r2, [pc, #284]	@ (8004154 <task_sensor_init+0x140>)
 8004036:	6013      	str	r3, [r2, #0]
 8004038:	4b42      	ldr	r3, [pc, #264]	@ (8004144 <task_sensor_init+0x130>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff fb27 	bl	8003690 <logger_log_print_>
 8004042:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8004044:	b672      	cpsid	i
 8004046:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <task_sensor_init+0x130>)
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	4b43      	ldr	r3, [pc, #268]	@ (8004158 <task_sensor_init+0x144>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	9300      	str	r3, [sp, #0]
 8004050:	4b42      	ldr	r3, [pc, #264]	@ (800415c <task_sensor_init+0x148>)
 8004052:	4a43      	ldr	r2, [pc, #268]	@ (8004160 <task_sensor_init+0x14c>)
 8004054:	213f      	movs	r1, #63	@ 0x3f
 8004056:	f001 fb9d 	bl	8005794 <sniprintf>
 800405a:	4603      	mov	r3, r0
 800405c:	4a3d      	ldr	r2, [pc, #244]	@ (8004154 <task_sensor_init+0x140>)
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b38      	ldr	r3, [pc, #224]	@ (8004144 <task_sensor_init+0x130>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fb13 	bl	8003690 <logger_log_print_>
 800406a:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 800406c:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <task_sensor_init+0x150>)
 800406e:	2200      	movs	r2, #0
 8004070:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8004072:	b672      	cpsid	i
 8004074:	4b33      	ldr	r3, [pc, #204]	@ (8004144 <task_sensor_init+0x130>)
 8004076:	6818      	ldr	r0, [r3, #0]
 8004078:	4b3a      	ldr	r3, [pc, #232]	@ (8004164 <task_sensor_init+0x150>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	4b3a      	ldr	r3, [pc, #232]	@ (8004168 <task_sensor_init+0x154>)
 8004080:	4a3a      	ldr	r2, [pc, #232]	@ (800416c <task_sensor_init+0x158>)
 8004082:	213f      	movs	r1, #63	@ 0x3f
 8004084:	f001 fb86 	bl	8005794 <sniprintf>
 8004088:	4603      	mov	r3, r0
 800408a:	4a32      	ldr	r2, [pc, #200]	@ (8004154 <task_sensor_init+0x140>)
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	4b2d      	ldr	r3, [pc, #180]	@ (8004144 <task_sensor_init+0x130>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4618      	mov	r0, r3
 8004094:	f7ff fafc 	bl	8003690 <logger_log_print_>
 8004098:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800409a:	2300      	movs	r3, #0
 800409c:	617b      	str	r3, [r7, #20]
 800409e:	e046      	b.n	800412e <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	00db      	lsls	r3, r3, #3
 80040a4:	4a32      	ldr	r2, [pc, #200]	@ (8004170 <task_sensor_init+0x15c>)
 80040a6:	4413      	add	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 80040aa:	b672      	cpsid	i
 80040ac:	4b25      	ldr	r3, [pc, #148]	@ (8004144 <task_sensor_init+0x130>)
 80040ae:	6818      	ldr	r0, [r3, #0]
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4b2f      	ldr	r3, [pc, #188]	@ (8004174 <task_sensor_init+0x160>)
 80040b6:	4a30      	ldr	r2, [pc, #192]	@ (8004178 <task_sensor_init+0x164>)
 80040b8:	213f      	movs	r1, #63	@ 0x3f
 80040ba:	f001 fb6b 	bl	8005794 <sniprintf>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a24      	ldr	r2, [pc, #144]	@ (8004154 <task_sensor_init+0x140>)
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <task_sensor_init+0x130>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7ff fae1 	bl	8003690 <logger_log_print_>
 80040ce:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	791b      	ldrb	r3, [r3, #4]
 80040d4:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80040d6:	b672      	cpsid	i
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <task_sensor_init+0x130>)
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	7bfb      	ldrb	r3, [r7, #15]
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	4b26      	ldr	r3, [pc, #152]	@ (800417c <task_sensor_init+0x168>)
 80040e2:	4a25      	ldr	r2, [pc, #148]	@ (8004178 <task_sensor_init+0x164>)
 80040e4:	213f      	movs	r1, #63	@ 0x3f
 80040e6:	f001 fb55 	bl	8005794 <sniprintf>
 80040ea:	4603      	mov	r3, r0
 80040ec:	4a19      	ldr	r2, [pc, #100]	@ (8004154 <task_sensor_init+0x140>)
 80040ee:	6013      	str	r3, [r2, #0]
 80040f0:	4b14      	ldr	r3, [pc, #80]	@ (8004144 <task_sensor_init+0x130>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7ff facb 	bl	8003690 <logger_log_print_>
 80040fa:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	795b      	ldrb	r3, [r3, #5]
 8004100:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 8004102:	b672      	cpsid	i
 8004104:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <task_sensor_init+0x130>)
 8004106:	6818      	ldr	r0, [r3, #0]
 8004108:	7bbb      	ldrb	r3, [r7, #14]
 800410a:	9300      	str	r3, [sp, #0]
 800410c:	4b1c      	ldr	r3, [pc, #112]	@ (8004180 <task_sensor_init+0x16c>)
 800410e:	4a17      	ldr	r2, [pc, #92]	@ (800416c <task_sensor_init+0x158>)
 8004110:	213f      	movs	r1, #63	@ 0x3f
 8004112:	f001 fb3f 	bl	8005794 <sniprintf>
 8004116:	4603      	mov	r3, r0
 8004118:	4a0e      	ldr	r2, [pc, #56]	@ (8004154 <task_sensor_init+0x140>)
 800411a:	6013      	str	r3, [r2, #0]
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <task_sensor_init+0x130>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7ff fab5 	bl	8003690 <logger_log_print_>
 8004126:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3301      	adds	r3, #1
 800412c:	617b      	str	r3, [r7, #20]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2b08      	cmp	r3, #8
 8004132:	d9b5      	bls.n	80040a0 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8004134:	4b13      	ldr	r3, [pc, #76]	@ (8004184 <task_sensor_init+0x170>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]
}
 800413a:	bf00      	nop
 800413c:	3718      	adds	r7, #24
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	08006d68 	.word	0x08006d68
 8004148:	20000058 	.word	0x20000058
 800414c:	08006a10 	.word	0x08006a10
 8004150:	08006a24 	.word	0x08006a24
 8004154:	20000468 	.word	0x20000468
 8004158:	2000005c 	.word	0x2000005c
 800415c:	08006a3c 	.word	0x08006a3c
 8004160:	08006a48 	.word	0x08006a48
 8004164:	200004e8 	.word	0x200004e8
 8004168:	08006a58 	.word	0x08006a58
 800416c:	08006a6c 	.word	0x08006a6c
 8004170:	200004a0 	.word	0x200004a0
 8004174:	08006a7c 	.word	0x08006a7c
 8004178:	08006a84 	.word	0x08006a84
 800417c:	08006a90 	.word	0x08006a90
 8004180:	08006a98 	.word	0x08006a98
 8004184:	200004ec 	.word	0x200004ec

08004188 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8004188:	b590      	push	{r4, r7, lr}
 800418a:	b087      	sub	sp, #28
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8004190:	2300      	movs	r3, #0
 8004192:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8004194:	4b62      	ldr	r3, [pc, #392]	@ (8004320 <task_sensor_update+0x198>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	3301      	adds	r3, #1
 800419a:	4a61      	ldr	r2, [pc, #388]	@ (8004320 <task_sensor_update+0x198>)
 800419c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800419e:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80041a0:	4b60      	ldr	r3, [pc, #384]	@ (8004324 <task_sensor_update+0x19c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d006      	beq.n	80041b6 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 80041a8:	4b5e      	ldr	r3, [pc, #376]	@ (8004324 <task_sensor_update+0x19c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3b01      	subs	r3, #1
 80041ae:	4a5d      	ldr	r2, [pc, #372]	@ (8004324 <task_sensor_update+0x19c>)
 80041b0:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80041b2:	2301      	movs	r3, #1
 80041b4:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80041b6:	b662      	cpsie	i

    while (b_time_update_required)
 80041b8:	e0a8      	b.n	800430c <task_sensor_update+0x184>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 80041ba:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80041bc:	4b59      	ldr	r3, [pc, #356]	@ (8004324 <task_sensor_update+0x19c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d007      	beq.n	80041d4 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 80041c4:	4b57      	ldr	r3, [pc, #348]	@ (8004324 <task_sensor_update+0x19c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	4a56      	ldr	r2, [pc, #344]	@ (8004324 <task_sensor_update+0x19c>)
 80041cc:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80041ce:	2301      	movs	r3, #1
 80041d0:	74fb      	strb	r3, [r7, #19]
 80041d2:	e001      	b.n	80041d8 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80041d4:	2300      	movs	r3, #0
 80041d6:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80041d8:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80041da:	2300      	movs	r3, #0
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e091      	b.n	8004304 <task_sensor_update+0x17c>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4613      	mov	r3, r2
 80041e4:	005b      	lsls	r3, r3, #1
 80041e6:	4413      	add	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4a4f      	ldr	r2, [pc, #316]	@ (8004328 <task_sensor_update+0x1a0>)
 80041ec:	4413      	add	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	00db      	lsls	r3, r3, #3
 80041f4:	4a4d      	ldr	r2, [pc, #308]	@ (800432c <task_sensor_update+0x1a4>)
 80041f6:	4413      	add	r3, r2
 80041f8:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	7a9c      	ldrb	r4, [r3, #10]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	685a      	ldr	r2, [r3, #4]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	891b      	ldrh	r3, [r3, #8]
 8004206:	4619      	mov	r1, r3
 8004208:	4610      	mov	r0, r2
 800420a:	f7fd ff89 	bl	8002120 <HAL_GPIO_ReadPin>
 800420e:	4603      	mov	r3, r0
 8004210:	429c      	cmp	r4, r3
 8004212:	d103      	bne.n	800421c <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2201      	movs	r2, #1
 8004218:	715a      	strb	r2, [r3, #5]
 800421a:	e002      	b.n	8004222 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	2200      	movs	r2, #0
 8004220:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	791b      	ldrb	r3, [r3, #4]
 8004226:	2b03      	cmp	r3, #3
 8004228:	d858      	bhi.n	80042dc <task_sensor_update+0x154>
 800422a:	a201      	add	r2, pc, #4	@ (adr r2, 8004230 <task_sensor_update+0xa8>)
 800422c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004230:	08004241 	.word	0x08004241
 8004234:	08004259 	.word	0x08004259
 8004238:	0800428f 	.word	0x0800428f
 800423c:	080042a7 	.word	0x080042a7
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	795b      	ldrb	r3, [r3, #5]
 8004244:	2b01      	cmp	r3, #1
 8004246:	d153      	bne.n	80042f0 <task_sensor_update+0x168>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2201      	movs	r2, #1
 800424c:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68da      	ldr	r2, [r3, #12]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	601a      	str	r2, [r3, #0]
					}

					break;
 8004256:	e04b      	b.n	80042f0 <task_sensor_update+0x168>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	1e5a      	subs	r2, r3, #1
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d144      	bne.n	80042f4 <task_sensor_update+0x16c>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	795b      	ldrb	r3, [r3, #5]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d109      	bne.n	8004286 <task_sensor_update+0xfe>
						{
							p_task_sensor_cfg->f_put_event(p_task_sensor_cfg->signal_down);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	7c52      	ldrb	r2, [r2, #17]
 800427a:	4610      	mov	r0, r2
 800427c:	4798      	blx	r3
							//put_event_task_set_up(p_task_sensor_cfg->signal_down);
							//put_event_task_normal(p_task_sensor_cfg->signal_down);

							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	2202      	movs	r2, #2
 8004282:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 8004284:	e036      	b.n	80042f4 <task_sensor_update+0x16c>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2200      	movs	r2, #0
 800428a:	711a      	strb	r2, [r3, #4]
					break;
 800428c:	e032      	b.n	80042f4 <task_sensor_update+0x16c>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	795b      	ldrb	r3, [r3, #5]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d130      	bne.n	80042f8 <task_sensor_update+0x170>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	68da      	ldr	r2, [r3, #12]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2203      	movs	r2, #3
 80042a2:	711a      	strb	r2, [r3, #4]
					}

					break;
 80042a4:	e028      	b.n	80042f8 <task_sensor_update+0x170>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	1e5a      	subs	r2, r3, #1
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d121      	bne.n	80042fc <task_sensor_update+0x174>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	795b      	ldrb	r3, [r3, #5]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d109      	bne.n	80042d4 <task_sensor_update+0x14c>
						{
							//put_event_task_set_up(p_task_sensor_cfg->signal_up);
							//put_event_task_normal(p_task_sensor_cfg->signal_up);
							p_task_sensor_cfg->f_put_event(p_task_sensor_cfg->signal_up);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	7c12      	ldrb	r2, [r2, #16]
 80042c8:	4610      	mov	r0, r2
 80042ca:	4798      	blx	r3
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	2200      	movs	r2, #0
 80042d0:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 80042d2:	e013      	b.n	80042fc <task_sensor_update+0x174>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	2202      	movs	r2, #2
 80042d8:	711a      	strb	r2, [r3, #4]
					break;
 80042da:	e00f      	b.n	80042fc <task_sensor_update+0x174>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	2200      	movs	r2, #0
 80042e6:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	2200      	movs	r2, #0
 80042ec:	715a      	strb	r2, [r3, #5]

					break;
 80042ee:	e006      	b.n	80042fe <task_sensor_update+0x176>
					break;
 80042f0:	bf00      	nop
 80042f2:	e004      	b.n	80042fe <task_sensor_update+0x176>
					break;
 80042f4:	bf00      	nop
 80042f6:	e002      	b.n	80042fe <task_sensor_update+0x176>
					break;
 80042f8:	bf00      	nop
 80042fa:	e000      	b.n	80042fe <task_sensor_update+0x176>
					break;
 80042fc:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	3301      	adds	r3, #1
 8004302:	617b      	str	r3, [r7, #20]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	2b08      	cmp	r3, #8
 8004308:	f67f af6a 	bls.w	80041e0 <task_sensor_update+0x58>
    while (b_time_update_required)
 800430c:	7cfb      	ldrb	r3, [r7, #19]
 800430e:	2b00      	cmp	r3, #0
 8004310:	f47f af53 	bne.w	80041ba <task_sensor_update+0x32>
			}
		}
    }
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	371c      	adds	r7, #28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd90      	pop	{r4, r7, pc}
 800431e:	bf00      	nop
 8004320:	200004e8 	.word	0x200004e8
 8004324:	200004ec 	.word	0x200004ec
 8004328:	08006de4 	.word	0x08006de4
 800432c:	200004a0 	.word	0x200004a0

08004330 <task_set_up_init>:
char aux1[16];
char aux2[16];

/********************** external functions definition ************************/
void task_set_up_init(void *parameters)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af02      	add	r7, sp, #8
 8004336:	6078      	str	r0, [r7, #4]
	task_set_up_st_t	state;
	task_set_up_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_set_up_init), p_task_set_up);
 8004338:	b672      	cpsid	i
 800433a:	4b65      	ldr	r3, [pc, #404]	@ (80044d0 <task_set_up_init+0x1a0>)
 800433c:	6818      	ldr	r0, [r3, #0]
 800433e:	4b65      	ldr	r3, [pc, #404]	@ (80044d4 <task_set_up_init+0x1a4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4b64      	ldr	r3, [pc, #400]	@ (80044d8 <task_set_up_init+0x1a8>)
 8004346:	4a65      	ldr	r2, [pc, #404]	@ (80044dc <task_set_up_init+0x1ac>)
 8004348:	213f      	movs	r1, #63	@ 0x3f
 800434a:	f001 fa23 	bl	8005794 <sniprintf>
 800434e:	4603      	mov	r3, r0
 8004350:	4a63      	ldr	r2, [pc, #396]	@ (80044e0 <task_set_up_init+0x1b0>)
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	4b5e      	ldr	r3, [pc, #376]	@ (80044d0 <task_set_up_init+0x1a0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f7ff f999 	bl	8003690 <logger_log_print_>
 800435e:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_set_up), p_task_set_up_);
 8004360:	b672      	cpsid	i
 8004362:	4b5b      	ldr	r3, [pc, #364]	@ (80044d0 <task_set_up_init+0x1a0>)
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	4b5f      	ldr	r3, [pc, #380]	@ (80044e4 <task_set_up_init+0x1b4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	4b5e      	ldr	r3, [pc, #376]	@ (80044e8 <task_set_up_init+0x1b8>)
 800436e:	4a5f      	ldr	r2, [pc, #380]	@ (80044ec <task_set_up_init+0x1bc>)
 8004370:	213f      	movs	r1, #63	@ 0x3f
 8004372:	f001 fa0f 	bl	8005794 <sniprintf>
 8004376:	4603      	mov	r3, r0
 8004378:	4a59      	ldr	r2, [pc, #356]	@ (80044e0 <task_set_up_init+0x1b0>)
 800437a:	6013      	str	r3, [r2, #0]
 800437c:	4b54      	ldr	r3, [pc, #336]	@ (80044d0 <task_set_up_init+0x1a0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7ff f985 	bl	8003690 <logger_log_print_>
 8004386:	b662      	cpsie	i

	g_task_set_up_cnt = G_TASK_MEN_CNT_INI;
 8004388:	4b59      	ldr	r3, [pc, #356]	@ (80044f0 <task_set_up_init+0x1c0>)
 800438a:	2200      	movs	r2, #0
 800438c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_set_up_cnt), g_task_set_up_cnt);
 800438e:	b672      	cpsid	i
 8004390:	4b4f      	ldr	r3, [pc, #316]	@ (80044d0 <task_set_up_init+0x1a0>)
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	4b56      	ldr	r3, [pc, #344]	@ (80044f0 <task_set_up_init+0x1c0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	4b56      	ldr	r3, [pc, #344]	@ (80044f4 <task_set_up_init+0x1c4>)
 800439c:	4a56      	ldr	r2, [pc, #344]	@ (80044f8 <task_set_up_init+0x1c8>)
 800439e:	213f      	movs	r1, #63	@ 0x3f
 80043a0:	f001 f9f8 	bl	8005794 <sniprintf>
 80043a4:	4603      	mov	r3, r0
 80043a6:	4a4e      	ldr	r2, [pc, #312]	@ (80044e0 <task_set_up_init+0x1b0>)
 80043a8:	6013      	str	r3, [r2, #0]
 80043aa:	4b49      	ldr	r3, [pc, #292]	@ (80044d0 <task_set_up_init+0x1a0>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4618      	mov	r0, r3
 80043b0:	f7ff f96e 	bl	8003690 <logger_log_print_>
 80043b4:	b662      	cpsie	i

	init_queue_event_task_set_up();
 80043b6:	f000 fad3 	bl	8004960 <init_queue_event_task_set_up>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_set_up_dta = &task_set_up_dta;
 80043ba:	4b50      	ldr	r3, [pc, #320]	@ (80044fc <task_set_up_init+0x1cc>)
 80043bc:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_set_up_dta->state;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	791b      	ldrb	r3, [r3, #4]
 80043c2:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80043c4:	b672      	cpsid	i
 80043c6:	4b42      	ldr	r3, [pc, #264]	@ (80044d0 <task_set_up_init+0x1a0>)
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	7afb      	ldrb	r3, [r7, #11]
 80043cc:	9300      	str	r3, [sp, #0]
 80043ce:	4b4c      	ldr	r3, [pc, #304]	@ (8004500 <task_set_up_init+0x1d0>)
 80043d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004504 <task_set_up_init+0x1d4>)
 80043d2:	213f      	movs	r1, #63	@ 0x3f
 80043d4:	f001 f9de 	bl	8005794 <sniprintf>
 80043d8:	4603      	mov	r3, r0
 80043da:	4a41      	ldr	r2, [pc, #260]	@ (80044e0 <task_set_up_init+0x1b0>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	4b3c      	ldr	r3, [pc, #240]	@ (80044d0 <task_set_up_init+0x1a0>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff f954 	bl	8003690 <logger_log_print_>
 80043e8:	b662      	cpsie	i

	event = p_task_set_up_dta->event;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	795b      	ldrb	r3, [r3, #5]
 80043ee:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80043f0:	b672      	cpsid	i
 80043f2:	4b37      	ldr	r3, [pc, #220]	@ (80044d0 <task_set_up_init+0x1a0>)
 80043f4:	6818      	ldr	r0, [r3, #0]
 80043f6:	7abb      	ldrb	r3, [r7, #10]
 80043f8:	9300      	str	r3, [sp, #0]
 80043fa:	4b43      	ldr	r3, [pc, #268]	@ (8004508 <task_set_up_init+0x1d8>)
 80043fc:	4a41      	ldr	r2, [pc, #260]	@ (8004504 <task_set_up_init+0x1d4>)
 80043fe:	213f      	movs	r1, #63	@ 0x3f
 8004400:	f001 f9c8 	bl	8005794 <sniprintf>
 8004404:	4603      	mov	r3, r0
 8004406:	4a36      	ldr	r2, [pc, #216]	@ (80044e0 <task_set_up_init+0x1b0>)
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	4b31      	ldr	r3, [pc, #196]	@ (80044d0 <task_set_up_init+0x1a0>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f7ff f93e 	bl	8003690 <logger_log_print_>
 8004414:	b662      	cpsie	i

	b_event = p_task_set_up_dta->flag;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	799b      	ldrb	r3, [r3, #6]
 800441a:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 800441c:	b672      	cpsid	i
 800441e:	4b2c      	ldr	r3, [pc, #176]	@ (80044d0 <task_set_up_init+0x1a0>)
 8004420:	6818      	ldr	r0, [r3, #0]
 8004422:	7a7b      	ldrb	r3, [r7, #9]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d001      	beq.n	800442c <task_set_up_init+0xfc>
 8004428:	4b38      	ldr	r3, [pc, #224]	@ (800450c <task_set_up_init+0x1dc>)
 800442a:	e000      	b.n	800442e <task_set_up_init+0xfe>
 800442c:	4b38      	ldr	r3, [pc, #224]	@ (8004510 <task_set_up_init+0x1e0>)
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	4b38      	ldr	r3, [pc, #224]	@ (8004514 <task_set_up_init+0x1e4>)
 8004432:	4a39      	ldr	r2, [pc, #228]	@ (8004518 <task_set_up_init+0x1e8>)
 8004434:	213f      	movs	r1, #63	@ 0x3f
 8004436:	f001 f9ad 	bl	8005794 <sniprintf>
 800443a:	4603      	mov	r3, r0
 800443c:	4a28      	ldr	r2, [pc, #160]	@ (80044e0 <task_set_up_init+0x1b0>)
 800443e:	6013      	str	r3, [r2, #0]
 8004440:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <task_set_up_init+0x1a0>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff f923 	bl	8003690 <logger_log_print_>
 800444a:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 800444c:	2000      	movs	r0, #0
 800444e:	f7fe fdd9 	bl	8003004 <displayInit>

    sprintf(aux1,"Config: %d %d", configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 8004452:	4b32      	ldr	r3, [pc, #200]	@ (800451c <task_set_up_init+0x1ec>)
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	4b30      	ldr	r3, [pc, #192]	@ (800451c <task_set_up_init+0x1ec>)
 800445a:	785b      	ldrb	r3, [r3, #1]
 800445c:	4930      	ldr	r1, [pc, #192]	@ (8004520 <task_set_up_init+0x1f0>)
 800445e:	4831      	ldr	r0, [pc, #196]	@ (8004524 <task_set_up_init+0x1f4>)
 8004460:	f001 f9cc 	bl	80057fc <siprintf>
    sprintf(aux2,"Temp:");
 8004464:	4930      	ldr	r1, [pc, #192]	@ (8004528 <task_set_up_init+0x1f8>)
 8004466:	4831      	ldr	r0, [pc, #196]	@ (800452c <task_set_up_init+0x1fc>)
 8004468:	f001 f9c8 	bl	80057fc <siprintf>

    linea1=aux1;
 800446c:	4b30      	ldr	r3, [pc, #192]	@ (8004530 <task_set_up_init+0x200>)
 800446e:	4a2d      	ldr	r2, [pc, #180]	@ (8004524 <task_set_up_init+0x1f4>)
 8004470:	601a      	str	r2, [r3, #0]
    linea2=aux2;
 8004472:	4b30      	ldr	r3, [pc, #192]	@ (8004534 <task_set_up_init+0x204>)
 8004474:	4a2d      	ldr	r2, [pc, #180]	@ (800452c <task_set_up_init+0x1fc>)
 8004476:	601a      	str	r2, [r3, #0]

    displayCharPositionWrite(0, 0);
 8004478:	2100      	movs	r1, #0
 800447a:	2000      	movs	r0, #0
 800447c:	f7fe fe3e 	bl	80030fc <displayCharPositionWrite>
	displayStringWrite("                ");
 8004480:	482d      	ldr	r0, [pc, #180]	@ (8004538 <task_set_up_init+0x208>)
 8004482:	f7fe fe91 	bl	80031a8 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 8004486:	2101      	movs	r1, #1
 8004488:	2000      	movs	r0, #0
 800448a:	f7fe fe37 	bl	80030fc <displayCharPositionWrite>
	displayStringWrite("                ");
 800448e:	482a      	ldr	r0, [pc, #168]	@ (8004538 <task_set_up_init+0x208>)
 8004490:	f7fe fe8a 	bl	80031a8 <displayStringWrite>

	displayCharPositionWrite(0, 0);
 8004494:	2100      	movs	r1, #0
 8004496:	2000      	movs	r0, #0
 8004498:	f7fe fe30 	bl	80030fc <displayCharPositionWrite>
	displayStringWrite(linea1);
 800449c:	4b24      	ldr	r3, [pc, #144]	@ (8004530 <task_set_up_init+0x200>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4618      	mov	r0, r3
 80044a2:	f7fe fe81 	bl	80031a8 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 80044a6:	2101      	movs	r1, #1
 80044a8:	2000      	movs	r0, #0
 80044aa:	f7fe fe27 	bl	80030fc <displayCharPositionWrite>
	displayStringWrite(linea2);
 80044ae:	4b21      	ldr	r3, [pc, #132]	@ (8004534 <task_set_up_init+0x204>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fe fe78 	bl	80031a8 <displayStringWrite>

	HAL_GPIO_WritePin(LED_A_PORT, LED_A_PIN, LED_A_ON);
 80044b8:	2201      	movs	r2, #1
 80044ba:	2120      	movs	r1, #32
 80044bc:	481f      	ldr	r0, [pc, #124]	@ (800453c <task_set_up_init+0x20c>)
 80044be:	f7fd fe46 	bl	800214e <HAL_GPIO_WritePin>

	g_task_set_up_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 80044c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004540 <task_set_up_init+0x210>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]
}
 80044c8:	bf00      	nop
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	08006d68 	.word	0x08006d68
 80044d4:	2000006c 	.word	0x2000006c
 80044d8:	08006ae4 	.word	0x08006ae4
 80044dc:	08006af8 	.word	0x08006af8
 80044e0:	20000468 	.word	0x20000468
 80044e4:	20000070 	.word	0x20000070
 80044e8:	08006b10 	.word	0x08006b10
 80044ec:	08006b1c 	.word	0x08006b1c
 80044f0:	200004f0 	.word	0x200004f0
 80044f4:	08006b2c 	.word	0x08006b2c
 80044f8:	08006b40 	.word	0x08006b40
 80044fc:	20000060 	.word	0x20000060
 8004500:	08006b50 	.word	0x08006b50
 8004504:	08006b58 	.word	0x08006b58
 8004508:	08006b64 	.word	0x08006b64
 800450c:	08006b6c 	.word	0x08006b6c
 8004510:	08006b74 	.word	0x08006b74
 8004514:	08006b7c 	.word	0x08006b7c
 8004518:	08006b84 	.word	0x08006b84
 800451c:	20000014 	.word	0x20000014
 8004520:	08006b94 	.word	0x08006b94
 8004524:	20000500 	.word	0x20000500
 8004528:	08006ba4 	.word	0x08006ba4
 800452c:	20000510 	.word	0x20000510
 8004530:	200004f8 	.word	0x200004f8
 8004534:	200004fc 	.word	0x200004fc
 8004538:	08006bac 	.word	0x08006bac
 800453c:	40010800 	.word	0x40010800
 8004540:	200004f4 	.word	0x200004f4

08004544 <task_set_up_update>:

void task_set_up_update(void *parameters)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
	task_set_up_dta_t *p_task_set_up_dta;
	bool b_time_update_required = false;
 800454c:	2300      	movs	r3, #0
 800454e:	73fb      	strb	r3, [r7, #15]

	/* Update Task Menu Counter */
	g_task_set_up_cnt++;
 8004550:	4b9b      	ldr	r3, [pc, #620]	@ (80047c0 <task_set_up_update+0x27c>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3301      	adds	r3, #1
 8004556:	4a9a      	ldr	r2, [pc, #616]	@ (80047c0 <task_set_up_update+0x27c>)
 8004558:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_set_up_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 800455a:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_set_up_tick_cnt)
 800455c:	4b99      	ldr	r3, [pc, #612]	@ (80047c4 <task_set_up_update+0x280>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d006      	beq.n	8004572 <task_set_up_update+0x2e>
    {
    	g_task_set_up_tick_cnt--;
 8004564:	4b97      	ldr	r3, [pc, #604]	@ (80047c4 <task_set_up_update+0x280>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3b01      	subs	r3, #1
 800456a:	4a96      	ldr	r2, [pc, #600]	@ (80047c4 <task_set_up_update+0x280>)
 800456c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800456e:	2301      	movs	r3, #1
 8004570:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8004572:	b662      	cpsie	i

    while (b_time_update_required)
 8004574:	e1d5      	b.n	8004922 <task_set_up_update+0x3de>
    {
		/* Protect shared resource (g_task_set_up_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8004576:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_set_up_tick_cnt)
 8004578:	4b92      	ldr	r3, [pc, #584]	@ (80047c4 <task_set_up_update+0x280>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <task_set_up_update+0x4c>
		{
			g_task_set_up_tick_cnt--;
 8004580:	4b90      	ldr	r3, [pc, #576]	@ (80047c4 <task_set_up_update+0x280>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3b01      	subs	r3, #1
 8004586:	4a8f      	ldr	r2, [pc, #572]	@ (80047c4 <task_set_up_update+0x280>)
 8004588:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800458a:	2301      	movs	r3, #1
 800458c:	73fb      	strb	r3, [r7, #15]
 800458e:	e001      	b.n	8004594 <task_set_up_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8004590:	2300      	movs	r3, #0
 8004592:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8004594:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_set_up_dta = &task_set_up_dta;
 8004596:	4b8c      	ldr	r3, [pc, #560]	@ (80047c8 <task_set_up_update+0x284>)
 8004598:	60bb      	str	r3, [r7, #8]

    	if (DEL_MEN_XX_MIN < p_task_set_up_dta->tick)
 800459a:	68bb      	ldr	r3, [r7, #8]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d005      	beq.n	80045ae <task_set_up_update+0x6a>
		{
			p_task_set_up_dta->tick--;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1e5a      	subs	r2, r3, #1
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	601a      	str	r2, [r3, #0]
 80045ac:	e1b9      	b.n	8004922 <task_set_up_update+0x3de>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 80045ae:	2120      	movs	r1, #32
 80045b0:	4886      	ldr	r0, [pc, #536]	@ (80047cc <task_set_up_update+0x288>)
 80045b2:	f7fd fde4 	bl	800217e <HAL_GPIO_TogglePin>

			//snprintf(set_up_str, sizeof(set_up_str), "%lu", (g_task_set_up_cnt/1000ul));
			//displayCharPositionWrite(10, 1);
			//displayStringWrite(set_up_str);

			p_task_set_up_dta->tick = DEL_MEN_XX_MAX;
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80045bc:	601a      	str	r2, [r3, #0]
				p_task_set_up_dta->flag = true;
				p_task_set_up_dta->event = get_event_task_set_up();
			}
			*/

			if(true == any_event_task_set_up()){
 80045be:	f000 fa3b 	bl	8004a38 <any_event_task_set_up>
 80045c2:	4603      	mov	r3, r0
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 81ac 	beq.w	8004922 <task_set_up_update+0x3de>
				p_task_set_up_dta->flag = true;
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2201      	movs	r2, #1
 80045ce:	719a      	strb	r2, [r3, #6]
				p_task_set_up_dta->event = get_event_task_set_up();
 80045d0:	f000 fa0c 	bl	80049ec <get_event_task_set_up>
 80045d4:	4603      	mov	r3, r0
 80045d6:	461a      	mov	r2, r3
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	715a      	strb	r2, [r3, #5]

				switch (p_task_set_up_dta->state)
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	791b      	ldrb	r3, [r3, #4]
 80045e0:	3b02      	subs	r3, #2
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	f200 8169 	bhi.w	80048ba <task_set_up_update+0x376>
 80045e8:	a201      	add	r2, pc, #4	@ (adr r2, 80045f0 <task_set_up_update+0xac>)
 80045ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ee:	bf00      	nop
 80045f0:	08004601 	.word	0x08004601
 80045f4:	08004639 	.word	0x08004639
 80045f8:	080046fb 	.word	0x080046fb
 80045fc:	08004801 	.word	0x08004801
						}

						break;
				 	 */
					case ST_SET_UP_02_MAIN:
						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_CONF_ACTIVE == p_task_set_up_dta->event))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	799b      	ldrb	r3, [r3, #6]
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8165 	beq.w	80048d4 <task_set_up_update+0x390>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	795b      	ldrb	r3, [r3, #5]
 800460e:	2b01      	cmp	r3, #1
 8004610:	f040 8160 	bne.w	80048d4 <task_set_up_update+0x390>
						{
							linea1 = set_up_fijo;
 8004614:	4b6e      	ldr	r3, [pc, #440]	@ (80047d0 <task_set_up_update+0x28c>)
 8004616:	4a6f      	ldr	r2, [pc, #444]	@ (80047d4 <task_set_up_update+0x290>)
 8004618:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	79db      	ldrb	r3, [r3, #7]
 800461e:	3b01      	subs	r3, #1
 8004620:	011b      	lsls	r3, r3, #4
 8004622:	4a6d      	ldr	r2, [pc, #436]	@ (80047d8 <task_set_up_update+0x294>)
 8004624:	4413      	add	r3, r2
 8004626:	4a6d      	ldr	r2, [pc, #436]	@ (80047dc <task_set_up_update+0x298>)
 8004628:	6013      	str	r3, [r2, #0]
							p_task_set_up_dta->flag = false;
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	2200      	movs	r2, #0
 800462e:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MENU;
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	2203      	movs	r2, #3
 8004634:	711a      	strb	r2, [r3, #4]
						}

						break;
 8004636:	e14d      	b.n	80048d4 <task_set_up_update+0x390>

					case ST_SET_UP_02_MENU:
						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event))
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	799b      	ldrb	r3, [r3, #6]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d026      	beq.n	800468e <task_set_up_update+0x14a>
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	795b      	ldrb	r3, [r3, #5]
 8004644:	2b03      	cmp	r3, #3
 8004646:	d122      	bne.n	800468e <task_set_up_update+0x14a>
						{
							p_task_set_up_dta->flag = false;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2200      	movs	r2, #0
 800464c:	719a      	strb	r2, [r3, #6]
							if(p_task_set_up_dta->option == 1){
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	79db      	ldrb	r3, [r3, #7]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d10b      	bne.n	800466e <task_set_up_update+0x12a>
								p_task_set_up_dta->state = ST_SET_UP_02_PUERTA;
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2204      	movs	r2, #4
 800465a:	711a      	strb	r2, [r3, #4]
								linea2 = set_up2[p_task_set_up_dta->opt_tiempo_puerta - 1];
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	7a1b      	ldrb	r3, [r3, #8]
 8004660:	3b01      	subs	r3, #1
 8004662:	011b      	lsls	r3, r3, #4
 8004664:	4a5e      	ldr	r2, [pc, #376]	@ (80047e0 <task_set_up_update+0x29c>)
 8004666:	4413      	add	r3, r2
 8004668:	4a5c      	ldr	r2, [pc, #368]	@ (80047dc <task_set_up_update+0x298>)
 800466a:	6013      	str	r3, [r2, #0]
							if(p_task_set_up_dta->option == 1){
 800466c:	e043      	b.n	80046f6 <task_set_up_update+0x1b2>
							}
							else if(p_task_set_up_dta->option == 2){
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	79db      	ldrb	r3, [r3, #7]
 8004672:	2b02      	cmp	r3, #2
 8004674:	d13f      	bne.n	80046f6 <task_set_up_update+0x1b2>
								p_task_set_up_dta->state = ST_SET_UP_02_PERMANENCIA;
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2205      	movs	r2, #5
 800467a:	711a      	strb	r2, [r3, #4]
								linea2 = set_up3[p_task_set_up_dta->opt_tiempo_permanencia - 1];
 800467c:	68bb      	ldr	r3, [r7, #8]
 800467e:	7a5b      	ldrb	r3, [r3, #9]
 8004680:	3b01      	subs	r3, #1
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	4a57      	ldr	r2, [pc, #348]	@ (80047e4 <task_set_up_update+0x2a0>)
 8004686:	4413      	add	r3, r2
 8004688:	4a54      	ldr	r2, [pc, #336]	@ (80047dc <task_set_up_update+0x298>)
 800468a:	6013      	str	r3, [r2, #0]
							if(p_task_set_up_dta->option == 1){
 800468c:	e033      	b.n	80046f6 <task_set_up_update+0x1b2>
							}

						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	799b      	ldrb	r3, [r3, #6]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d010      	beq.n	80046b8 <task_set_up_update+0x174>
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	795b      	ldrb	r3, [r3, #5]
 800469a:	2b07      	cmp	r3, #7
 800469c:	d10c      	bne.n	80046b8 <task_set_up_update+0x174>
						{
							p_task_set_up_dta->flag = false;
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	2200      	movs	r2, #0
 80046a2:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MAIN;
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2202      	movs	r2, #2
 80046a8:	711a      	strb	r2, [r3, #4]
							linea1 = aux1;
 80046aa:	4b49      	ldr	r3, [pc, #292]	@ (80047d0 <task_set_up_update+0x28c>)
 80046ac:	4a4e      	ldr	r2, [pc, #312]	@ (80047e8 <task_set_up_update+0x2a4>)
 80046ae:	601a      	str	r2, [r3, #0]
							linea2 = aux2;
 80046b0:	4b4a      	ldr	r3, [pc, #296]	@ (80047dc <task_set_up_update+0x298>)
 80046b2:	4a4e      	ldr	r2, [pc, #312]	@ (80047ec <task_set_up_update+0x2a8>)
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	e01f      	b.n	80046f8 <task_set_up_update+0x1b4>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	799b      	ldrb	r3, [r3, #6]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 810b 	beq.w	80048d8 <task_set_up_update+0x394>
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	795b      	ldrb	r3, [r3, #5]
 80046c6:	2b05      	cmp	r3, #5
 80046c8:	f040 8106 	bne.w	80048d8 <task_set_up_update+0x394>
							p_task_set_up_dta->option = (p_task_set_up_dta->option%CNT_OPT) + 1;
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	79db      	ldrb	r3, [r3, #7]
 80046d0:	f003 0301 	and.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	3301      	adds	r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	71da      	strb	r2, [r3, #7]
							p_task_set_up_dta->flag = false;
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2200      	movs	r2, #0
 80046e2:	719a      	strb	r2, [r3, #6]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	79db      	ldrb	r3, [r3, #7]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	4a3a      	ldr	r2, [pc, #232]	@ (80047d8 <task_set_up_update+0x294>)
 80046ee:	4413      	add	r3, r2
 80046f0:	4a3a      	ldr	r2, [pc, #232]	@ (80047dc <task_set_up_update+0x298>)
 80046f2:	6013      	str	r3, [r2, #0]
						}

						break;
 80046f4:	e0f0      	b.n	80048d8 <task_set_up_update+0x394>
							if(p_task_set_up_dta->option == 1){
 80046f6:	bf00      	nop
						break;
 80046f8:	e0ee      	b.n	80048d8 <task_set_up_update+0x394>

					case ST_SET_UP_02_PUERTA:

						if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event)){
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	799b      	ldrb	r3, [r3, #6]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d01a      	beq.n	8004738 <task_set_up_update+0x1f4>
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	795b      	ldrb	r3, [r3, #5]
 8004706:	2b03      	cmp	r3, #3
 8004708:	d116      	bne.n	8004738 <task_set_up_update+0x1f4>
							//Agregar guardado
							configuracion.tiempo_puerta = atoi(string_tiempos_puerta[p_task_set_up_dta->opt_tiempo_puerta-1]);
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	7a1b      	ldrb	r3, [r3, #8]
 800470e:	3b01      	subs	r3, #1
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	4a37      	ldr	r2, [pc, #220]	@ (80047f0 <task_set_up_update+0x2ac>)
 8004714:	4413      	add	r3, r2
 8004716:	4618      	mov	r0, r3
 8004718:	f000 fe23 	bl	8005362 <atoi>
 800471c:	4603      	mov	r3, r0
 800471e:	b2da      	uxtb	r2, r3
 8004720:	4b34      	ldr	r3, [pc, #208]	@ (80047f4 <task_set_up_update+0x2b0>)
 8004722:	701a      	strb	r2, [r3, #0]
							sprintf(aux1,"Config: %d %d",configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 8004724:	4b33      	ldr	r3, [pc, #204]	@ (80047f4 <task_set_up_update+0x2b0>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	461a      	mov	r2, r3
 800472a:	4b32      	ldr	r3, [pc, #200]	@ (80047f4 <task_set_up_update+0x2b0>)
 800472c:	785b      	ldrb	r3, [r3, #1]
 800472e:	4932      	ldr	r1, [pc, #200]	@ (80047f8 <task_set_up_update+0x2b4>)
 8004730:	482d      	ldr	r0, [pc, #180]	@ (80047e8 <task_set_up_update+0x2a4>)
 8004732:	f001 f863 	bl	80057fc <siprintf>
 8004736:	e041      	b.n	80047bc <task_set_up_update+0x278>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	799b      	ldrb	r3, [r3, #6]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d021      	beq.n	8004784 <task_set_up_update+0x240>
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	795b      	ldrb	r3, [r3, #5]
 8004744:	2b05      	cmp	r3, #5
 8004746:	d11d      	bne.n	8004784 <task_set_up_update+0x240>
							p_task_set_up_dta->opt_tiempo_puerta = (p_task_set_up_dta->opt_tiempo_puerta%CNT_OPT_PUERTA) + 1;
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	7a1a      	ldrb	r2, [r3, #8]
 800474c:	4b2b      	ldr	r3, [pc, #172]	@ (80047fc <task_set_up_update+0x2b8>)
 800474e:	fba3 1302 	umull	r1, r3, r3, r2
 8004752:	1ad1      	subs	r1, r2, r3
 8004754:	0849      	lsrs	r1, r1, #1
 8004756:	440b      	add	r3, r1
 8004758:	0899      	lsrs	r1, r3, #2
 800475a:	460b      	mov	r3, r1
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	1a5b      	subs	r3, r3, r1
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	3301      	adds	r3, #1
 8004766:	b2da      	uxtb	r2, r3
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	721a      	strb	r2, [r3, #8]
							p_task_set_up_dta->flag = false;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2200      	movs	r2, #0
 8004770:	719a      	strb	r2, [r3, #6]
							linea2 = set_up2[p_task_set_up_dta->opt_tiempo_puerta - 1];
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	7a1b      	ldrb	r3, [r3, #8]
 8004776:	3b01      	subs	r3, #1
 8004778:	011b      	lsls	r3, r3, #4
 800477a:	4a19      	ldr	r2, [pc, #100]	@ (80047e0 <task_set_up_update+0x29c>)
 800477c:	4413      	add	r3, r2
 800477e:	4a17      	ldr	r2, [pc, #92]	@ (80047dc <task_set_up_update+0x298>)
 8004780:	6013      	str	r3, [r2, #0]
 8004782:	e01b      	b.n	80047bc <task_set_up_update+0x278>
						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	799b      	ldrb	r3, [r3, #6]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 80a7 	beq.w	80048dc <task_set_up_update+0x398>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	795b      	ldrb	r3, [r3, #5]
 8004792:	2b07      	cmp	r3, #7
 8004794:	f040 80a2 	bne.w	80048dc <task_set_up_update+0x398>
						{
							p_task_set_up_dta->flag = false;
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2200      	movs	r2, #0
 800479c:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MENU;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2203      	movs	r2, #3
 80047a2:	711a      	strb	r2, [r3, #4]
							linea1 = set_up_fijo;
 80047a4:	4b0a      	ldr	r3, [pc, #40]	@ (80047d0 <task_set_up_update+0x28c>)
 80047a6:	4a0b      	ldr	r2, [pc, #44]	@ (80047d4 <task_set_up_update+0x290>)
 80047a8:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	79db      	ldrb	r3, [r3, #7]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	4a09      	ldr	r2, [pc, #36]	@ (80047d8 <task_set_up_update+0x294>)
 80047b4:	4413      	add	r3, r2
 80047b6:	4a09      	ldr	r2, [pc, #36]	@ (80047dc <task_set_up_update+0x298>)
 80047b8:	6013      	str	r3, [r2, #0]

						}

						break;
 80047ba:	e08f      	b.n	80048dc <task_set_up_update+0x398>
 80047bc:	e08e      	b.n	80048dc <task_set_up_update+0x398>
 80047be:	bf00      	nop
 80047c0:	200004f0 	.word	0x200004f0
 80047c4:	200004f4 	.word	0x200004f4
 80047c8:	20000060 	.word	0x20000060
 80047cc:	40010800 	.word	0x40010800
 80047d0:	200004f8 	.word	0x200004f8
 80047d4:	20000074 	.word	0x20000074
 80047d8:	20000084 	.word	0x20000084
 80047dc:	200004fc 	.word	0x200004fc
 80047e0:	200000a4 	.word	0x200000a4
 80047e4:	20000114 	.word	0x20000114
 80047e8:	20000500 	.word	0x20000500
 80047ec:	20000510 	.word	0x20000510
 80047f0:	200001a4 	.word	0x200001a4
 80047f4:	20000014 	.word	0x20000014
 80047f8:	08006b94 	.word	0x08006b94
 80047fc:	24924925 	.word	0x24924925

					case ST_SET_UP_02_PERMANENCIA:

						if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event)){
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	799b      	ldrb	r3, [r3, #6]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d01a      	beq.n	800483e <task_set_up_update+0x2fa>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	795b      	ldrb	r3, [r3, #5]
 800480c:	2b03      	cmp	r3, #3
 800480e:	d116      	bne.n	800483e <task_set_up_update+0x2fa>
							configuracion.tiempo_permanencia = atoi(string_tiempos_permanencia[p_task_set_up_dta->opt_tiempo_permanencia-1]);
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	7a5b      	ldrb	r3, [r3, #9]
 8004814:	3b01      	subs	r3, #1
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	4a46      	ldr	r2, [pc, #280]	@ (8004934 <task_set_up_update+0x3f0>)
 800481a:	4413      	add	r3, r2
 800481c:	4618      	mov	r0, r3
 800481e:	f000 fda0 	bl	8005362 <atoi>
 8004822:	4603      	mov	r3, r0
 8004824:	b2da      	uxtb	r2, r3
 8004826:	4b44      	ldr	r3, [pc, #272]	@ (8004938 <task_set_up_update+0x3f4>)
 8004828:	705a      	strb	r2, [r3, #1]
							sprintf(aux1,"Config: %d %d",configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 800482a:	4b43      	ldr	r3, [pc, #268]	@ (8004938 <task_set_up_update+0x3f4>)
 800482c:	781b      	ldrb	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	4b41      	ldr	r3, [pc, #260]	@ (8004938 <task_set_up_update+0x3f4>)
 8004832:	785b      	ldrb	r3, [r3, #1]
 8004834:	4941      	ldr	r1, [pc, #260]	@ (800493c <task_set_up_update+0x3f8>)
 8004836:	4842      	ldr	r0, [pc, #264]	@ (8004940 <task_set_up_update+0x3fc>)
 8004838:	f000 ffe0 	bl	80057fc <siprintf>
 800483c:	e03c      	b.n	80048b8 <task_set_up_update+0x374>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	799b      	ldrb	r3, [r3, #6]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d01e      	beq.n	8004884 <task_set_up_update+0x340>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	2b05      	cmp	r3, #5
 800484c:	d11a      	bne.n	8004884 <task_set_up_update+0x340>
							p_task_set_up_dta->opt_tiempo_permanencia = (p_task_set_up_dta->opt_tiempo_permanencia%CNT_OPT_PERMANENCIA) + 1;
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	7a5a      	ldrb	r2, [r3, #9]
 8004852:	4b3c      	ldr	r3, [pc, #240]	@ (8004944 <task_set_up_update+0x400>)
 8004854:	fba3 1302 	umull	r1, r3, r3, r2
 8004858:	0859      	lsrs	r1, r3, #1
 800485a:	460b      	mov	r3, r1
 800485c:	00db      	lsls	r3, r3, #3
 800485e:	440b      	add	r3, r1
 8004860:	1ad3      	subs	r3, r2, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	3301      	adds	r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	725a      	strb	r2, [r3, #9]
							p_task_set_up_dta->flag = false;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2200      	movs	r2, #0
 8004870:	719a      	strb	r2, [r3, #6]
							linea2 = set_up3[p_task_set_up_dta->opt_tiempo_permanencia - 1];
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	7a5b      	ldrb	r3, [r3, #9]
 8004876:	3b01      	subs	r3, #1
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	4a33      	ldr	r2, [pc, #204]	@ (8004948 <task_set_up_update+0x404>)
 800487c:	4413      	add	r3, r2
 800487e:	4a33      	ldr	r2, [pc, #204]	@ (800494c <task_set_up_update+0x408>)
 8004880:	6013      	str	r3, [r2, #0]
 8004882:	e019      	b.n	80048b8 <task_set_up_update+0x374>
						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	799b      	ldrb	r3, [r3, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d029      	beq.n	80048e0 <task_set_up_update+0x39c>
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	795b      	ldrb	r3, [r3, #5]
 8004890:	2b07      	cmp	r3, #7
 8004892:	d125      	bne.n	80048e0 <task_set_up_update+0x39c>
						{
							p_task_set_up_dta->flag = false;
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	2200      	movs	r2, #0
 8004898:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SET_UP_02_MENU;
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	2203      	movs	r2, #3
 800489e:	711a      	strb	r2, [r3, #4]
							linea1 = set_up_fijo;
 80048a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004950 <task_set_up_update+0x40c>)
 80048a2:	4a2c      	ldr	r2, [pc, #176]	@ (8004954 <task_set_up_update+0x410>)
 80048a4:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	79db      	ldrb	r3, [r3, #7]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	011b      	lsls	r3, r3, #4
 80048ae:	4a2a      	ldr	r2, [pc, #168]	@ (8004958 <task_set_up_update+0x414>)
 80048b0:	4413      	add	r3, r2
 80048b2:	4a26      	ldr	r2, [pc, #152]	@ (800494c <task_set_up_update+0x408>)
 80048b4:	6013      	str	r3, [r2, #0]

						}

						break;
 80048b6:	e013      	b.n	80048e0 <task_set_up_update+0x39c>
 80048b8:	e012      	b.n	80048e0 <task_set_up_update+0x39c>

					default:

						p_task_set_up_dta->tick  = DEL_MEN_XX_MIN;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]
						p_task_set_up_dta->state = ST_MEN_XX_IDLE;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	711a      	strb	r2, [r3, #4]
						p_task_set_up_dta->event = ST_SET_UP_02_MAIN;
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2202      	movs	r2, #2
 80048ca:	715a      	strb	r2, [r3, #5]
						p_task_set_up_dta->flag  = false;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2200      	movs	r2, #0
 80048d0:	719a      	strb	r2, [r3, #6]

						break;
 80048d2:	e006      	b.n	80048e2 <task_set_up_update+0x39e>
						break;
 80048d4:	bf00      	nop
 80048d6:	e004      	b.n	80048e2 <task_set_up_update+0x39e>
						break;
 80048d8:	bf00      	nop
 80048da:	e002      	b.n	80048e2 <task_set_up_update+0x39e>
						break;
 80048dc:	bf00      	nop
 80048de:	e000      	b.n	80048e2 <task_set_up_update+0x39e>
						break;
 80048e0:	bf00      	nop
				}
				displayCharPositionWrite(0, 0);
 80048e2:	2100      	movs	r1, #0
 80048e4:	2000      	movs	r0, #0
 80048e6:	f7fe fc09 	bl	80030fc <displayCharPositionWrite>
				displayStringWrite("                ");
 80048ea:	481c      	ldr	r0, [pc, #112]	@ (800495c <task_set_up_update+0x418>)
 80048ec:	f7fe fc5c 	bl	80031a8 <displayStringWrite>
				displayCharPositionWrite(0, 1);
 80048f0:	2101      	movs	r1, #1
 80048f2:	2000      	movs	r0, #0
 80048f4:	f7fe fc02 	bl	80030fc <displayCharPositionWrite>
				displayStringWrite("                ");
 80048f8:	4818      	ldr	r0, [pc, #96]	@ (800495c <task_set_up_update+0x418>)
 80048fa:	f7fe fc55 	bl	80031a8 <displayStringWrite>

				displayCharPositionWrite(0, 0);
 80048fe:	2100      	movs	r1, #0
 8004900:	2000      	movs	r0, #0
 8004902:	f7fe fbfb 	bl	80030fc <displayCharPositionWrite>
				displayStringWrite(linea1);
 8004906:	4b12      	ldr	r3, [pc, #72]	@ (8004950 <task_set_up_update+0x40c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f7fe fc4c 	bl	80031a8 <displayStringWrite>
				displayCharPositionWrite(0, 1);
 8004910:	2101      	movs	r1, #1
 8004912:	2000      	movs	r0, #0
 8004914:	f7fe fbf2 	bl	80030fc <displayCharPositionWrite>
				displayStringWrite(linea2);
 8004918:	4b0c      	ldr	r3, [pc, #48]	@ (800494c <task_set_up_update+0x408>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7fe fc43 	bl	80031a8 <displayStringWrite>
    while (b_time_update_required)
 8004922:	7bfb      	ldrb	r3, [r7, #15]
 8004924:	2b00      	cmp	r3, #0
 8004926:	f47f ae26 	bne.w	8004576 <task_set_up_update+0x32>
			}
		}
	}
}
 800492a:	bf00      	nop
 800492c:	bf00      	nop
 800492e:	3710      	adds	r7, #16
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	20000214 	.word	0x20000214
 8004938:	20000014 	.word	0x20000014
 800493c:	08006b94 	.word	0x08006b94
 8004940:	20000500 	.word	0x20000500
 8004944:	38e38e39 	.word	0x38e38e39
 8004948:	20000114 	.word	0x20000114
 800494c:	200004fc 	.word	0x200004fc
 8004950:	200004f8 	.word	0x200004f8
 8004954:	20000074 	.word	0x20000074
 8004958:	20000084 	.word	0x20000084
 800495c:	08006bac 	.word	0x08006bac

08004960 <init_queue_event_task_set_up>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_set_up(void)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8004966:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <init_queue_event_task_set_up+0x44>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 800496c:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <init_queue_event_task_set_up+0x44>)
 800496e:	2200      	movs	r2, #0
 8004970:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8004972:	4b0c      	ldr	r3, [pc, #48]	@ (80049a4 <init_queue_event_task_set_up+0x44>)
 8004974:	2200      	movs	r2, #0
 8004976:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8004978:	2300      	movs	r3, #0
 800497a:	607b      	str	r3, [r7, #4]
 800497c:	e008      	b.n	8004990 <init_queue_event_task_set_up+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 800497e:	4a09      	ldr	r2, [pc, #36]	@ (80049a4 <init_queue_event_task_set_up+0x44>)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	330c      	adds	r3, #12
 8004986:	22ff      	movs	r2, #255	@ 0xff
 8004988:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3301      	adds	r3, #1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b0f      	cmp	r3, #15
 8004994:	d9f3      	bls.n	800497e <init_queue_event_task_set_up+0x1e>
}
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	bc80      	pop	{r7}
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	20000520 	.word	0x20000520

080049a8 <put_event_task_set_up>:

void put_event_task_set_up(task_set_up_ev_t event)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	4603      	mov	r3, r0
 80049b0:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 80049b2:	4b0d      	ldr	r3, [pc, #52]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	3301      	adds	r3, #1
 80049b8:	4a0b      	ldr	r2, [pc, #44]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049ba:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 80049bc:	4b0a      	ldr	r3, [pc, #40]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	1c5a      	adds	r2, r3, #1
 80049c2:	4909      	ldr	r1, [pc, #36]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049c4:	600a      	str	r2, [r1, #0]
 80049c6:	4a08      	ldr	r2, [pc, #32]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049c8:	4413      	add	r3, r2
 80049ca:	79fa      	ldrb	r2, [r7, #7]
 80049cc:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 80049ce:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b10      	cmp	r3, #16
 80049d4:	d102      	bne.n	80049dc <put_event_task_set_up+0x34>
		queue_task_a.head = 0;
 80049d6:	4b04      	ldr	r3, [pc, #16]	@ (80049e8 <put_event_task_set_up+0x40>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bc80      	pop	{r7}
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000520 	.word	0x20000520

080049ec <get_event_task_set_up>:

task_set_up_ev_t get_event_task_set_up(void)

{
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
	task_set_up_ev_t event;

	queue_task_a.count--;
 80049f2:	4b10      	ldr	r3, [pc, #64]	@ (8004a34 <get_event_task_set_up+0x48>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	3b01      	subs	r3, #1
 80049f8:	4a0e      	ldr	r2, [pc, #56]	@ (8004a34 <get_event_task_set_up+0x48>)
 80049fa:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 80049fc:	4b0d      	ldr	r3, [pc, #52]	@ (8004a34 <get_event_task_set_up+0x48>)
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	4a0c      	ldr	r2, [pc, #48]	@ (8004a34 <get_event_task_set_up+0x48>)
 8004a02:	4413      	add	r3, r2
 8004a04:	7b1b      	ldrb	r3, [r3, #12]
 8004a06:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8004a08:	4b0a      	ldr	r3, [pc, #40]	@ (8004a34 <get_event_task_set_up+0x48>)
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	4909      	ldr	r1, [pc, #36]	@ (8004a34 <get_event_task_set_up+0x48>)
 8004a10:	604a      	str	r2, [r1, #4]
 8004a12:	4a08      	ldr	r2, [pc, #32]	@ (8004a34 <get_event_task_set_up+0x48>)
 8004a14:	4413      	add	r3, r2
 8004a16:	22ff      	movs	r2, #255	@ 0xff
 8004a18:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <get_event_task_set_up+0x48>)
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2b10      	cmp	r3, #16
 8004a20:	d102      	bne.n	8004a28 <get_event_task_set_up+0x3c>
		queue_task_a.tail = 0;
 8004a22:	4b04      	ldr	r3, [pc, #16]	@ (8004a34 <get_event_task_set_up+0x48>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	605a      	str	r2, [r3, #4]

	return event;
 8004a28:	79fb      	ldrb	r3, [r7, #7]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	370c      	adds	r7, #12
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bc80      	pop	{r7}
 8004a32:	4770      	bx	lr
 8004a34:	20000520 	.word	0x20000520

08004a38 <any_event_task_set_up>:

bool any_event_task_set_up(void)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8004a3c:	4b06      	ldr	r3, [pc, #24]	@ (8004a58 <any_event_task_set_up+0x20>)
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	4b05      	ldr	r3, [pc, #20]	@ (8004a58 <any_event_task_set_up+0x20>)
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	bf14      	ite	ne
 8004a48:	2301      	movne	r3, #1
 8004a4a:	2300      	moveq	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	20000520 	.word	0x20000520

08004a5c <task_temperature_init>:
extern ADC_HandleTypeDef hadc2;


/********************** external functions definition ************************/
void task_temperature_init(void *parameters)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	6078      	str	r0, [r7, #4]
	task_temperature_st_t	state;
	task_temperature_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_temperature_init), p_task_temperature);
 8004a64:	b672      	cpsid	i
 8004a66:	4b47      	ldr	r3, [pc, #284]	@ (8004b84 <task_temperature_init+0x128>)
 8004a68:	6818      	ldr	r0, [r3, #0]
 8004a6a:	4b47      	ldr	r3, [pc, #284]	@ (8004b88 <task_temperature_init+0x12c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	9300      	str	r3, [sp, #0]
 8004a70:	4b46      	ldr	r3, [pc, #280]	@ (8004b8c <task_temperature_init+0x130>)
 8004a72:	4a47      	ldr	r2, [pc, #284]	@ (8004b90 <task_temperature_init+0x134>)
 8004a74:	213f      	movs	r1, #63	@ 0x3f
 8004a76:	f000 fe8d 	bl	8005794 <sniprintf>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	4a45      	ldr	r2, [pc, #276]	@ (8004b94 <task_temperature_init+0x138>)
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b40      	ldr	r3, [pc, #256]	@ (8004b84 <task_temperature_init+0x128>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe fe03 	bl	8003690 <logger_log_print_>
 8004a8a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_temperature), p_task_temperature_);
 8004a8c:	b672      	cpsid	i
 8004a8e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b84 <task_temperature_init+0x128>)
 8004a90:	6818      	ldr	r0, [r3, #0]
 8004a92:	4b41      	ldr	r3, [pc, #260]	@ (8004b98 <task_temperature_init+0x13c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	9300      	str	r3, [sp, #0]
 8004a98:	4b40      	ldr	r3, [pc, #256]	@ (8004b9c <task_temperature_init+0x140>)
 8004a9a:	4a41      	ldr	r2, [pc, #260]	@ (8004ba0 <task_temperature_init+0x144>)
 8004a9c:	213f      	movs	r1, #63	@ 0x3f
 8004a9e:	f000 fe79 	bl	8005794 <sniprintf>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	4a3b      	ldr	r2, [pc, #236]	@ (8004b94 <task_temperature_init+0x138>)
 8004aa6:	6013      	str	r3, [r2, #0]
 8004aa8:	4b36      	ldr	r3, [pc, #216]	@ (8004b84 <task_temperature_init+0x128>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fdef 	bl	8003690 <logger_log_print_>
 8004ab2:	b662      	cpsie	i

	g_task_temperature_cnt = G_TASK_SYS_CNT_INI;
 8004ab4:	4b3b      	ldr	r3, [pc, #236]	@ (8004ba4 <task_temperature_init+0x148>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_temperature_cnt), g_task_temperature_cnt);
 8004aba:	b672      	cpsid	i
 8004abc:	4b31      	ldr	r3, [pc, #196]	@ (8004b84 <task_temperature_init+0x128>)
 8004abe:	6818      	ldr	r0, [r3, #0]
 8004ac0:	4b38      	ldr	r3, [pc, #224]	@ (8004ba4 <task_temperature_init+0x148>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	9300      	str	r3, [sp, #0]
 8004ac6:	4b38      	ldr	r3, [pc, #224]	@ (8004ba8 <task_temperature_init+0x14c>)
 8004ac8:	4a38      	ldr	r2, [pc, #224]	@ (8004bac <task_temperature_init+0x150>)
 8004aca:	213f      	movs	r1, #63	@ 0x3f
 8004acc:	f000 fe62 	bl	8005794 <sniprintf>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4a30      	ldr	r2, [pc, #192]	@ (8004b94 <task_temperature_init+0x138>)
 8004ad4:	6013      	str	r3, [r2, #0]
 8004ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8004b84 <task_temperature_init+0x128>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f7fe fdd8 	bl	8003690 <logger_log_print_>
 8004ae0:	b662      	cpsie	i

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_temperature_dta = &task_temperature_dta;
 8004ae2:	4b33      	ldr	r3, [pc, #204]	@ (8004bb0 <task_temperature_init+0x154>)
 8004ae4:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_temperature_dta->state;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	791b      	ldrb	r3, [r3, #4]
 8004aea:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8004aec:	b672      	cpsid	i
 8004aee:	4b25      	ldr	r3, [pc, #148]	@ (8004b84 <task_temperature_init+0x128>)
 8004af0:	6818      	ldr	r0, [r3, #0]
 8004af2:	7afb      	ldrb	r3, [r7, #11]
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4b2f      	ldr	r3, [pc, #188]	@ (8004bb4 <task_temperature_init+0x158>)
 8004af8:	4a2f      	ldr	r2, [pc, #188]	@ (8004bb8 <task_temperature_init+0x15c>)
 8004afa:	213f      	movs	r1, #63	@ 0x3f
 8004afc:	f000 fe4a 	bl	8005794 <sniprintf>
 8004b00:	4603      	mov	r3, r0
 8004b02:	4a24      	ldr	r2, [pc, #144]	@ (8004b94 <task_temperature_init+0x138>)
 8004b04:	6013      	str	r3, [r2, #0]
 8004b06:	4b1f      	ldr	r3, [pc, #124]	@ (8004b84 <task_temperature_init+0x128>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7fe fdc0 	bl	8003690 <logger_log_print_>
 8004b10:	b662      	cpsie	i

	event = p_task_temperature_dta->event;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	795b      	ldrb	r3, [r3, #5]
 8004b16:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8004b18:	b672      	cpsid	i
 8004b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004b84 <task_temperature_init+0x128>)
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	7abb      	ldrb	r3, [r7, #10]
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	4b26      	ldr	r3, [pc, #152]	@ (8004bbc <task_temperature_init+0x160>)
 8004b24:	4a24      	ldr	r2, [pc, #144]	@ (8004bb8 <task_temperature_init+0x15c>)
 8004b26:	213f      	movs	r1, #63	@ 0x3f
 8004b28:	f000 fe34 	bl	8005794 <sniprintf>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	4a19      	ldr	r2, [pc, #100]	@ (8004b94 <task_temperature_init+0x138>)
 8004b30:	6013      	str	r3, [r2, #0]
 8004b32:	4b14      	ldr	r3, [pc, #80]	@ (8004b84 <task_temperature_init+0x128>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fe fdaa 	bl	8003690 <logger_log_print_>
 8004b3c:	b662      	cpsie	i

	b_event = p_task_temperature_dta->flag;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	799b      	ldrb	r3, [r3, #6]
 8004b42:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8004b44:	b672      	cpsid	i
 8004b46:	4b0f      	ldr	r3, [pc, #60]	@ (8004b84 <task_temperature_init+0x128>)
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	7a7b      	ldrb	r3, [r7, #9]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d001      	beq.n	8004b54 <task_temperature_init+0xf8>
 8004b50:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc0 <task_temperature_init+0x164>)
 8004b52:	e000      	b.n	8004b56 <task_temperature_init+0xfa>
 8004b54:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc4 <task_temperature_init+0x168>)
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	4b1b      	ldr	r3, [pc, #108]	@ (8004bc8 <task_temperature_init+0x16c>)
 8004b5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004bcc <task_temperature_init+0x170>)
 8004b5c:	213f      	movs	r1, #63	@ 0x3f
 8004b5e:	f000 fe19 	bl	8005794 <sniprintf>
 8004b62:	4603      	mov	r3, r0
 8004b64:	4a0b      	ldr	r2, [pc, #44]	@ (8004b94 <task_temperature_init+0x138>)
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <task_temperature_init+0x128>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f7fe fd8f 	bl	8003690 <logger_log_print_>
 8004b72:	b662      	cpsie	i

	g_task_temperature_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8004b74:	4b16      	ldr	r3, [pc, #88]	@ (8004bd0 <task_temperature_init+0x174>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
}
 8004b7a:	bf00      	nop
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	08006d68 	.word	0x08006d68
 8004b88:	200002a4 	.word	0x200002a4
 8004b8c:	08006c10 	.word	0x08006c10
 8004b90:	08006c28 	.word	0x08006c28
 8004b94:	20000468 	.word	0x20000468
 8004b98:	200002a8 	.word	0x200002a8
 8004b9c:	08006c40 	.word	0x08006c40
 8004ba0:	08006c54 	.word	0x08006c54
 8004ba4:	20000554 	.word	0x20000554
 8004ba8:	08006c64 	.word	0x08006c64
 8004bac:	08006c7c 	.word	0x08006c7c
 8004bb0:	2000053c 	.word	0x2000053c
 8004bb4:	08006c8c 	.word	0x08006c8c
 8004bb8:	08006c94 	.word	0x08006c94
 8004bbc:	08006ca0 	.word	0x08006ca0
 8004bc0:	08006ca8 	.word	0x08006ca8
 8004bc4:	08006cb0 	.word	0x08006cb0
 8004bc8:	08006cb8 	.word	0x08006cb8
 8004bcc:	08006cc0 	.word	0x08006cc0
 8004bd0:	20000558 	.word	0x20000558
 8004bd4:	00000000 	.word	0x00000000

08004bd8 <task_temperature_update>:

void task_temperature_update(void *parameters)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b086      	sub	sp, #24
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
	task_temperature_dta_t *p_task_temperature_dta;
	bool b_time_update_required = false;
 8004be0:	2300      	movs	r3, #0
 8004be2:	75fb      	strb	r3, [r7, #23]
	int temp_aux;

	/* Update Task temperature Counter */
	g_task_temperature_cnt++;
 8004be4:	4b6a      	ldr	r3, [pc, #424]	@ (8004d90 <task_temperature_update+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3301      	adds	r3, #1
 8004bea:	4a69      	ldr	r2, [pc, #420]	@ (8004d90 <task_temperature_update+0x1b8>)
 8004bec:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_temperature_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8004bee:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_temperature_tick_cnt)
 8004bf0:	4b68      	ldr	r3, [pc, #416]	@ (8004d94 <task_temperature_update+0x1bc>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <task_temperature_update+0x2e>
    {
    	g_task_temperature_tick_cnt--;
 8004bf8:	4b66      	ldr	r3, [pc, #408]	@ (8004d94 <task_temperature_update+0x1bc>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	3b01      	subs	r3, #1
 8004bfe:	4a65      	ldr	r2, [pc, #404]	@ (8004d94 <task_temperature_update+0x1bc>)
 8004c00:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8004c02:	2301      	movs	r3, #1
 8004c04:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8004c06:	b662      	cpsie	i

    while (b_time_update_required)
 8004c08:	e0ac      	b.n	8004d64 <task_temperature_update+0x18c>
    {
		/* Protect shared resource (g_task_temperature_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8004c0a:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_temperature_tick_cnt)
 8004c0c:	4b61      	ldr	r3, [pc, #388]	@ (8004d94 <task_temperature_update+0x1bc>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <task_temperature_update+0x4c>
		{
			g_task_temperature_tick_cnt--;
 8004c14:	4b5f      	ldr	r3, [pc, #380]	@ (8004d94 <task_temperature_update+0x1bc>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	4a5e      	ldr	r2, [pc, #376]	@ (8004d94 <task_temperature_update+0x1bc>)
 8004c1c:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
 8004c22:	e001      	b.n	8004c28 <task_temperature_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8004c24:	2300      	movs	r3, #0
 8004c26:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8004c28:	b662      	cpsie	i

    	/* Update Task temperature Data Pointer */
		p_task_temperature_dta = &task_temperature_dta;
 8004c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d98 <task_temperature_update+0x1c0>)
 8004c2c:	613b      	str	r3, [r7, #16]


		if(!flag_conversion1){
 8004c2e:	4b5b      	ldr	r3, [pc, #364]	@ (8004d9c <task_temperature_update+0x1c4>)
 8004c30:	781b      	ldrb	r3, [r3, #0]
 8004c32:	f083 0301 	eor.w	r3, r3, #1
 8004c36:	b2db      	uxtb	r3, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d002      	beq.n	8004c42 <task_temperature_update+0x6a>
			HAL_ADC_Start_IT(&hadc1);
 8004c3c:	4858      	ldr	r0, [pc, #352]	@ (8004da0 <task_temperature_update+0x1c8>)
 8004c3e:	f7fc fcb1 	bl	80015a4 <HAL_ADC_Start_IT>
		}

		if(flag_conversion1){
 8004c42:	4b56      	ldr	r3, [pc, #344]	@ (8004d9c <task_temperature_update+0x1c4>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d04b      	beq.n	8004ce2 <task_temperature_update+0x10a>
			flag_conversion1 = false;
 8004c4a:	4b54      	ldr	r3, [pc, #336]	@ (8004d9c <task_temperature_update+0x1c4>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	701a      	strb	r2, [r3, #0]
			temperatura.micro = 25 + (1.43 - (3.30/4096.0)*(float)sample1)/(4.3e-3);
 8004c50:	4b54      	ldr	r3, [pc, #336]	@ (8004da4 <task_temperature_update+0x1cc>)
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	4618      	mov	r0, r3
 8004c58:	f7fb ff56 	bl	8000b08 <__aeabi_ui2f>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fb fbe2 	bl	8000428 <__aeabi_f2d>
 8004c64:	a344      	add	r3, pc, #272	@ (adr r3, 8004d78 <task_temperature_update+0x1a0>)
 8004c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6a:	f7fb fc35 	bl	80004d8 <__aeabi_dmul>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	a143      	add	r1, pc, #268	@ (adr r1, 8004d80 <task_temperature_update+0x1a8>)
 8004c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c78:	f7fb fa76 	bl	8000168 <__aeabi_dsub>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4610      	mov	r0, r2
 8004c82:	4619      	mov	r1, r3
 8004c84:	a340      	add	r3, pc, #256	@ (adr r3, 8004d88 <task_temperature_update+0x1b0>)
 8004c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8a:	f7fb fd4f 	bl	800072c <__aeabi_ddiv>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4610      	mov	r0, r2
 8004c94:	4619      	mov	r1, r3
 8004c96:	f04f 0200 	mov.w	r2, #0
 8004c9a:	4b43      	ldr	r3, [pc, #268]	@ (8004da8 <task_temperature_update+0x1d0>)
 8004c9c:	f7fb fa66 	bl	800016c <__adddf3>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	460b      	mov	r3, r1
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	f7fb fe28 	bl	80008fc <__aeabi_d2f>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4a3f      	ldr	r2, [pc, #252]	@ (8004dac <task_temperature_update+0x1d4>)
 8004cb0:	6053      	str	r3, [r2, #4]
			temp_aux = (int)temperatura.micro;
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <task_temperature_update+0x1d4>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb ff7e 	bl	8000bb8 <__aeabi_f2iz>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	60fb      	str	r3, [r7, #12]
			LOGGER_LOG("Grados micro = %d \n", temp_aux);
 8004cc0:	b672      	cpsid	i
 8004cc2:	4b3b      	ldr	r3, [pc, #236]	@ (8004db0 <task_temperature_update+0x1d8>)
 8004cc4:	6818      	ldr	r0, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a3a      	ldr	r2, [pc, #232]	@ (8004db4 <task_temperature_update+0x1dc>)
 8004cca:	213f      	movs	r1, #63	@ 0x3f
 8004ccc:	f000 fd62 	bl	8005794 <sniprintf>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4a39      	ldr	r2, [pc, #228]	@ (8004db8 <task_temperature_update+0x1e0>)
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <task_temperature_update+0x1d8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f7fe fcd8 	bl	8003690 <logger_log_print_>
 8004ce0:	b662      	cpsie	i
			//LOGGER_LOG("conversion = %d \n", sample1);
		}


		if(!flag_conversion2){
 8004ce2:	4b36      	ldr	r3, [pc, #216]	@ (8004dbc <task_temperature_update+0x1e4>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	f083 0301 	eor.w	r3, r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <task_temperature_update+0x11e>
			HAL_ADC_Start_IT(&hadc2);
 8004cf0:	4833      	ldr	r0, [pc, #204]	@ (8004dc0 <task_temperature_update+0x1e8>)
 8004cf2:	f7fc fc57 	bl	80015a4 <HAL_ADC_Start_IT>
		}

		if(flag_conversion2){
 8004cf6:	4b31      	ldr	r3, [pc, #196]	@ (8004dbc <task_temperature_update+0x1e4>)
 8004cf8:	781b      	ldrb	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d032      	beq.n	8004d64 <task_temperature_update+0x18c>
			flag_conversion2 = false;
 8004cfe:	4b2f      	ldr	r3, [pc, #188]	@ (8004dbc <task_temperature_update+0x1e4>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	701a      	strb	r2, [r3, #0]
			temperatura.ambiente = (330.0/4096.0)*(float)sample2;
 8004d04:	4b2f      	ldr	r3, [pc, #188]	@ (8004dc4 <task_temperature_update+0x1ec>)
 8004d06:	881b      	ldrh	r3, [r3, #0]
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fefc 	bl	8000b08 <__aeabi_ui2f>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fb88 	bl	8000428 <__aeabi_f2d>
 8004d18:	f04f 0200 	mov.w	r2, #0
 8004d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <task_temperature_update+0x1f0>)
 8004d1e:	f7fb fbdb 	bl	80004d8 <__aeabi_dmul>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	4610      	mov	r0, r2
 8004d28:	4619      	mov	r1, r3
 8004d2a:	f7fb fde7 	bl	80008fc <__aeabi_d2f>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <task_temperature_update+0x1d4>)
 8004d32:	6013      	str	r3, [r2, #0]
			temp_aux = (int)temperatura.ambiente;
 8004d34:	4b1d      	ldr	r3, [pc, #116]	@ (8004dac <task_temperature_update+0x1d4>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fb ff3d 	bl	8000bb8 <__aeabi_f2iz>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	60fb      	str	r3, [r7, #12]
			LOGGER_LOG("Grados ambiente = %d °C\n", temp_aux);
 8004d42:	b672      	cpsid	i
 8004d44:	4b1a      	ldr	r3, [pc, #104]	@ (8004db0 <task_temperature_update+0x1d8>)
 8004d46:	6818      	ldr	r0, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a20      	ldr	r2, [pc, #128]	@ (8004dcc <task_temperature_update+0x1f4>)
 8004d4c:	213f      	movs	r1, #63	@ 0x3f
 8004d4e:	f000 fd21 	bl	8005794 <sniprintf>
 8004d52:	4603      	mov	r3, r0
 8004d54:	4a18      	ldr	r2, [pc, #96]	@ (8004db8 <task_temperature_update+0x1e0>)
 8004d56:	6013      	str	r3, [r2, #0]
 8004d58:	4b15      	ldr	r3, [pc, #84]	@ (8004db0 <task_temperature_update+0x1d8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fe fc97 	bl	8003690 <logger_log_print_>
 8004d62:	b662      	cpsie	i
    while (b_time_update_required)
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f47f af4f 	bne.w	8004c0a <task_temperature_update+0x32>

				break;
		}
		*/
	}
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	66666666 	.word	0x66666666
 8004d7c:	3f4a6666 	.word	0x3f4a6666
 8004d80:	ae147ae1 	.word	0xae147ae1
 8004d84:	3ff6e147 	.word	0x3ff6e147
 8004d88:	75f6fd22 	.word	0x75f6fd22
 8004d8c:	3f719ce0 	.word	0x3f719ce0
 8004d90:	20000554 	.word	0x20000554
 8004d94:	20000558 	.word	0x20000558
 8004d98:	2000053c 	.word	0x2000053c
 8004d9c:	2000054c 	.word	0x2000054c
 8004da0:	2000032c 	.word	0x2000032c
 8004da4:	2000054e 	.word	0x2000054e
 8004da8:	40390000 	.word	0x40390000
 8004dac:	20000544 	.word	0x20000544
 8004db0:	08006d68 	.word	0x08006d68
 8004db4:	08006cd0 	.word	0x08006cd0
 8004db8:	20000468 	.word	0x20000468
 8004dbc:	2000054d 	.word	0x2000054d
 8004dc0:	2000035c 	.word	0x2000035c
 8004dc4:	20000550 	.word	0x20000550
 8004dc8:	3fb4a000 	.word	0x3fb4a000
 8004dcc:	08006ce4 	.word	0x08006ce4

08004dd0 <HAL_ADC_ConvCpltCallback>:

/*Callback ADC*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == hadc2.Instance){
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	4b10      	ldr	r3, [pc, #64]	@ (8004e20 <HAL_ADC_ConvCpltCallback+0x50>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d109      	bne.n	8004df8 <HAL_ADC_ConvCpltCallback+0x28>
		sample2 = HAL_ADC_GetValue(hadc);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f7fc fc93 	bl	8001710 <HAL_ADC_GetValue>
 8004dea:	4603      	mov	r3, r0
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	4b0d      	ldr	r3, [pc, #52]	@ (8004e24 <HAL_ADC_ConvCpltCallback+0x54>)
 8004df0:	801a      	strh	r2, [r3, #0]
		flag_conversion2 = true;
 8004df2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e28 <HAL_ADC_ConvCpltCallback+0x58>)
 8004df4:	2201      	movs	r2, #1
 8004df6:	701a      	strb	r2, [r3, #0]
	}
	if(hadc->Instance == hadc1.Instance){
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8004e2c <HAL_ADC_ConvCpltCallback+0x5c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d109      	bne.n	8004e18 <HAL_ADC_ConvCpltCallback+0x48>
		sample1 = HAL_ADC_GetValue(hadc);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fc fc83 	bl	8001710 <HAL_ADC_GetValue>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	4b08      	ldr	r3, [pc, #32]	@ (8004e30 <HAL_ADC_ConvCpltCallback+0x60>)
 8004e10:	801a      	strh	r2, [r3, #0]
		flag_conversion1 = true;
 8004e12:	4b08      	ldr	r3, [pc, #32]	@ (8004e34 <HAL_ADC_ConvCpltCallback+0x64>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
	}
}
 8004e18:	bf00      	nop
 8004e1a:	3708      	adds	r7, #8
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	2000035c 	.word	0x2000035c
 8004e24:	20000550 	.word	0x20000550
 8004e28:	2000054d 	.word	0x2000054d
 8004e2c:	2000032c 	.word	0x2000032c
 8004e30:	2000054e 	.word	0x2000054e
 8004e34:	2000054c 	.word	0x2000054c

08004e38 <findslot>:
 8004e38:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <findslot+0x2c>)
 8004e3a:	b510      	push	{r4, lr}
 8004e3c:	4604      	mov	r4, r0
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	b118      	cbz	r0, 8004e4a <findslot+0x12>
 8004e42:	6a03      	ldr	r3, [r0, #32]
 8004e44:	b90b      	cbnz	r3, 8004e4a <findslot+0x12>
 8004e46:	f000 fc5d 	bl	8005704 <__sinit>
 8004e4a:	2c13      	cmp	r4, #19
 8004e4c:	d807      	bhi.n	8004e5e <findslot+0x26>
 8004e4e:	4806      	ldr	r0, [pc, #24]	@ (8004e68 <findslot+0x30>)
 8004e50:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8004e54:	3201      	adds	r2, #1
 8004e56:	d002      	beq.n	8004e5e <findslot+0x26>
 8004e58:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8004e5c:	bd10      	pop	{r4, pc}
 8004e5e:	2000      	movs	r0, #0
 8004e60:	e7fc      	b.n	8004e5c <findslot+0x24>
 8004e62:	bf00      	nop
 8004e64:	200002c0 	.word	0x200002c0
 8004e68:	20000568 	.word	0x20000568

08004e6c <error>:
 8004e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6e:	4604      	mov	r4, r0
 8004e70:	f000 fd76 	bl	8005960 <__errno>
 8004e74:	2613      	movs	r6, #19
 8004e76:	4605      	mov	r5, r0
 8004e78:	2700      	movs	r7, #0
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	4639      	mov	r1, r7
 8004e7e:	beab      	bkpt	0x00ab
 8004e80:	4606      	mov	r6, r0
 8004e82:	4620      	mov	r0, r4
 8004e84:	602e      	str	r6, [r5, #0]
 8004e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e88 <checkerror>:
 8004e88:	1c43      	adds	r3, r0, #1
 8004e8a:	d101      	bne.n	8004e90 <checkerror+0x8>
 8004e8c:	f7ff bfee 	b.w	8004e6c <error>
 8004e90:	4770      	bx	lr

08004e92 <_swiread>:
 8004e92:	b530      	push	{r4, r5, lr}
 8004e94:	b085      	sub	sp, #20
 8004e96:	2406      	movs	r4, #6
 8004e98:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004e9c:	9203      	str	r2, [sp, #12]
 8004e9e:	ad01      	add	r5, sp, #4
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	beab      	bkpt	0x00ab
 8004ea6:	4604      	mov	r4, r0
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7ff ffed 	bl	8004e88 <checkerror>
 8004eae:	b005      	add	sp, #20
 8004eb0:	bd30      	pop	{r4, r5, pc}

08004eb2 <_read>:
 8004eb2:	b570      	push	{r4, r5, r6, lr}
 8004eb4:	460e      	mov	r6, r1
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	f7ff ffbe 	bl	8004e38 <findslot>
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	b930      	cbnz	r0, 8004ece <_read+0x1c>
 8004ec0:	f000 fd4e 	bl	8005960 <__errno>
 8004ec4:	2309      	movs	r3, #9
 8004ec6:	6003      	str	r3, [r0, #0]
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	bd70      	pop	{r4, r5, r6, pc}
 8004ece:	4622      	mov	r2, r4
 8004ed0:	4631      	mov	r1, r6
 8004ed2:	6800      	ldr	r0, [r0, #0]
 8004ed4:	f7ff ffdd 	bl	8004e92 <_swiread>
 8004ed8:	1c43      	adds	r3, r0, #1
 8004eda:	d0f5      	beq.n	8004ec8 <_read+0x16>
 8004edc:	686b      	ldr	r3, [r5, #4]
 8004ede:	1a20      	subs	r0, r4, r0
 8004ee0:	4403      	add	r3, r0
 8004ee2:	606b      	str	r3, [r5, #4]
 8004ee4:	e7f2      	b.n	8004ecc <_read+0x1a>

08004ee6 <_swilseek>:
 8004ee6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ee8:	460c      	mov	r4, r1
 8004eea:	4616      	mov	r6, r2
 8004eec:	f7ff ffa4 	bl	8004e38 <findslot>
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	b940      	cbnz	r0, 8004f06 <_swilseek+0x20>
 8004ef4:	f000 fd34 	bl	8005960 <__errno>
 8004ef8:	2309      	movs	r3, #9
 8004efa:	6003      	str	r3, [r0, #0]
 8004efc:	f04f 34ff 	mov.w	r4, #4294967295
 8004f00:	4620      	mov	r0, r4
 8004f02:	b003      	add	sp, #12
 8004f04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f06:	2e02      	cmp	r6, #2
 8004f08:	d903      	bls.n	8004f12 <_swilseek+0x2c>
 8004f0a:	f000 fd29 	bl	8005960 <__errno>
 8004f0e:	2316      	movs	r3, #22
 8004f10:	e7f3      	b.n	8004efa <_swilseek+0x14>
 8004f12:	2e01      	cmp	r6, #1
 8004f14:	d112      	bne.n	8004f3c <_swilseek+0x56>
 8004f16:	6843      	ldr	r3, [r0, #4]
 8004f18:	18e4      	adds	r4, r4, r3
 8004f1a:	d4f6      	bmi.n	8004f0a <_swilseek+0x24>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	260a      	movs	r6, #10
 8004f20:	466f      	mov	r7, sp
 8004f22:	e9cd 3400 	strd	r3, r4, [sp]
 8004f26:	4630      	mov	r0, r6
 8004f28:	4639      	mov	r1, r7
 8004f2a:	beab      	bkpt	0x00ab
 8004f2c:	4606      	mov	r6, r0
 8004f2e:	4630      	mov	r0, r6
 8004f30:	f7ff ffaa 	bl	8004e88 <checkerror>
 8004f34:	2800      	cmp	r0, #0
 8004f36:	dbe1      	blt.n	8004efc <_swilseek+0x16>
 8004f38:	606c      	str	r4, [r5, #4]
 8004f3a:	e7e1      	b.n	8004f00 <_swilseek+0x1a>
 8004f3c:	2e02      	cmp	r6, #2
 8004f3e:	6803      	ldr	r3, [r0, #0]
 8004f40:	d1ec      	bne.n	8004f1c <_swilseek+0x36>
 8004f42:	260c      	movs	r6, #12
 8004f44:	466f      	mov	r7, sp
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4630      	mov	r0, r6
 8004f4a:	4639      	mov	r1, r7
 8004f4c:	beab      	bkpt	0x00ab
 8004f4e:	4606      	mov	r6, r0
 8004f50:	4630      	mov	r0, r6
 8004f52:	f7ff ff99 	bl	8004e88 <checkerror>
 8004f56:	1c43      	adds	r3, r0, #1
 8004f58:	d0d0      	beq.n	8004efc <_swilseek+0x16>
 8004f5a:	4404      	add	r4, r0
 8004f5c:	e7de      	b.n	8004f1c <_swilseek+0x36>

08004f5e <_lseek>:
 8004f5e:	f7ff bfc2 	b.w	8004ee6 <_swilseek>

08004f62 <_swiwrite>:
 8004f62:	b530      	push	{r4, r5, lr}
 8004f64:	b085      	sub	sp, #20
 8004f66:	2405      	movs	r4, #5
 8004f68:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8004f6c:	9203      	str	r2, [sp, #12]
 8004f6e:	ad01      	add	r5, sp, #4
 8004f70:	4620      	mov	r0, r4
 8004f72:	4629      	mov	r1, r5
 8004f74:	beab      	bkpt	0x00ab
 8004f76:	4604      	mov	r4, r0
 8004f78:	4620      	mov	r0, r4
 8004f7a:	f7ff ff85 	bl	8004e88 <checkerror>
 8004f7e:	b005      	add	sp, #20
 8004f80:	bd30      	pop	{r4, r5, pc}

08004f82 <_write>:
 8004f82:	b570      	push	{r4, r5, r6, lr}
 8004f84:	460e      	mov	r6, r1
 8004f86:	4615      	mov	r5, r2
 8004f88:	f7ff ff56 	bl	8004e38 <findslot>
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	b930      	cbnz	r0, 8004f9e <_write+0x1c>
 8004f90:	f000 fce6 	bl	8005960 <__errno>
 8004f94:	2309      	movs	r3, #9
 8004f96:	6003      	str	r3, [r0, #0]
 8004f98:	f04f 30ff 	mov.w	r0, #4294967295
 8004f9c:	bd70      	pop	{r4, r5, r6, pc}
 8004f9e:	462a      	mov	r2, r5
 8004fa0:	4631      	mov	r1, r6
 8004fa2:	6800      	ldr	r0, [r0, #0]
 8004fa4:	f7ff ffdd 	bl	8004f62 <_swiwrite>
 8004fa8:	1e03      	subs	r3, r0, #0
 8004faa:	dbf5      	blt.n	8004f98 <_write+0x16>
 8004fac:	6862      	ldr	r2, [r4, #4]
 8004fae:	1ae8      	subs	r0, r5, r3
 8004fb0:	4402      	add	r2, r0
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	6062      	str	r2, [r4, #4]
 8004fb6:	d1f1      	bne.n	8004f9c <_write+0x1a>
 8004fb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	f7ff bf55 	b.w	8004e6c <error>

08004fc2 <_swiclose>:
 8004fc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fc4:	2402      	movs	r4, #2
 8004fc6:	9001      	str	r0, [sp, #4]
 8004fc8:	ad01      	add	r5, sp, #4
 8004fca:	4620      	mov	r0, r4
 8004fcc:	4629      	mov	r1, r5
 8004fce:	beab      	bkpt	0x00ab
 8004fd0:	4604      	mov	r4, r0
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f7ff ff58 	bl	8004e88 <checkerror>
 8004fd8:	b003      	add	sp, #12
 8004fda:	bd30      	pop	{r4, r5, pc}

08004fdc <_close>:
 8004fdc:	b538      	push	{r3, r4, r5, lr}
 8004fde:	4605      	mov	r5, r0
 8004fe0:	f7ff ff2a 	bl	8004e38 <findslot>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	b930      	cbnz	r0, 8004ff6 <_close+0x1a>
 8004fe8:	f000 fcba 	bl	8005960 <__errno>
 8004fec:	2309      	movs	r3, #9
 8004fee:	6003      	str	r3, [r0, #0]
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	bd38      	pop	{r3, r4, r5, pc}
 8004ff6:	3d01      	subs	r5, #1
 8004ff8:	2d01      	cmp	r5, #1
 8004ffa:	d809      	bhi.n	8005010 <_close+0x34>
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <_close+0x40>)
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	429a      	cmp	r2, r3
 8005004:	d104      	bne.n	8005010 <_close+0x34>
 8005006:	f04f 33ff 	mov.w	r3, #4294967295
 800500a:	2000      	movs	r0, #0
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	e7f1      	b.n	8004ff4 <_close+0x18>
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	f7ff ffd6 	bl	8004fc2 <_swiclose>
 8005016:	2800      	cmp	r0, #0
 8005018:	d0f5      	beq.n	8005006 <_close+0x2a>
 800501a:	e7eb      	b.n	8004ff4 <_close+0x18>
 800501c:	20000568 	.word	0x20000568

08005020 <_swistat>:
 8005020:	b570      	push	{r4, r5, r6, lr}
 8005022:	460c      	mov	r4, r1
 8005024:	f7ff ff08 	bl	8004e38 <findslot>
 8005028:	4605      	mov	r5, r0
 800502a:	b930      	cbnz	r0, 800503a <_swistat+0x1a>
 800502c:	f000 fc98 	bl	8005960 <__errno>
 8005030:	2309      	movs	r3, #9
 8005032:	6003      	str	r3, [r0, #0]
 8005034:	f04f 30ff 	mov.w	r0, #4294967295
 8005038:	bd70      	pop	{r4, r5, r6, pc}
 800503a:	6863      	ldr	r3, [r4, #4]
 800503c:	260c      	movs	r6, #12
 800503e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005042:	6063      	str	r3, [r4, #4]
 8005044:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005048:	64a3      	str	r3, [r4, #72]	@ 0x48
 800504a:	4630      	mov	r0, r6
 800504c:	4629      	mov	r1, r5
 800504e:	beab      	bkpt	0x00ab
 8005050:	4605      	mov	r5, r0
 8005052:	4628      	mov	r0, r5
 8005054:	f7ff ff18 	bl	8004e88 <checkerror>
 8005058:	1c43      	adds	r3, r0, #1
 800505a:	d0eb      	beq.n	8005034 <_swistat+0x14>
 800505c:	6120      	str	r0, [r4, #16]
 800505e:	2000      	movs	r0, #0
 8005060:	e7ea      	b.n	8005038 <_swistat+0x18>

08005062 <_fstat>:
 8005062:	460b      	mov	r3, r1
 8005064:	b510      	push	{r4, lr}
 8005066:	2100      	movs	r1, #0
 8005068:	4604      	mov	r4, r0
 800506a:	2258      	movs	r2, #88	@ 0x58
 800506c:	4618      	mov	r0, r3
 800506e:	f000 fc28 	bl	80058c2 <memset>
 8005072:	4601      	mov	r1, r0
 8005074:	4620      	mov	r0, r4
 8005076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800507a:	f7ff bfd1 	b.w	8005020 <_swistat>

0800507e <_stat>:
 800507e:	b538      	push	{r3, r4, r5, lr}
 8005080:	460d      	mov	r5, r1
 8005082:	4604      	mov	r4, r0
 8005084:	2258      	movs	r2, #88	@ 0x58
 8005086:	2100      	movs	r1, #0
 8005088:	4628      	mov	r0, r5
 800508a:	f000 fc1a 	bl	80058c2 <memset>
 800508e:	4620      	mov	r0, r4
 8005090:	2100      	movs	r1, #0
 8005092:	f000 f811 	bl	80050b8 <_swiopen>
 8005096:	1c43      	adds	r3, r0, #1
 8005098:	4604      	mov	r4, r0
 800509a:	d00b      	beq.n	80050b4 <_stat+0x36>
 800509c:	686b      	ldr	r3, [r5, #4]
 800509e:	4629      	mov	r1, r5
 80050a0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80050a4:	606b      	str	r3, [r5, #4]
 80050a6:	f7ff ffbb 	bl	8005020 <_swistat>
 80050aa:	4605      	mov	r5, r0
 80050ac:	4620      	mov	r0, r4
 80050ae:	f7ff ff95 	bl	8004fdc <_close>
 80050b2:	462c      	mov	r4, r5
 80050b4:	4620      	mov	r0, r4
 80050b6:	bd38      	pop	{r3, r4, r5, pc}

080050b8 <_swiopen>:
 80050b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	4682      	mov	sl, r0
 80050be:	460e      	mov	r6, r1
 80050c0:	2400      	movs	r4, #0
 80050c2:	4f28      	ldr	r7, [pc, #160]	@ (8005164 <_swiopen+0xac>)
 80050c4:	b096      	sub	sp, #88	@ 0x58
 80050c6:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 80050ca:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 80050ce:	3301      	adds	r3, #1
 80050d0:	d00c      	beq.n	80050ec <_swiopen+0x34>
 80050d2:	3401      	adds	r4, #1
 80050d4:	2c14      	cmp	r4, #20
 80050d6:	d1f6      	bne.n	80050c6 <_swiopen+0xe>
 80050d8:	f000 fc42 	bl	8005960 <__errno>
 80050dc:	2318      	movs	r3, #24
 80050de:	f04f 34ff 	mov.w	r4, #4294967295
 80050e2:	6003      	str	r3, [r0, #0]
 80050e4:	4620      	mov	r0, r4
 80050e6:	b016      	add	sp, #88	@ 0x58
 80050e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050ec:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80050f0:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80050f4:	46e9      	mov	r9, sp
 80050f6:	d109      	bne.n	800510c <_swiopen+0x54>
 80050f8:	4649      	mov	r1, r9
 80050fa:	4650      	mov	r0, sl
 80050fc:	f7ff ffbf 	bl	800507e <_stat>
 8005100:	3001      	adds	r0, #1
 8005102:	d003      	beq.n	800510c <_swiopen+0x54>
 8005104:	f000 fc2c 	bl	8005960 <__errno>
 8005108:	2311      	movs	r3, #17
 800510a:	e7e8      	b.n	80050de <_swiopen+0x26>
 800510c:	f240 6301 	movw	r3, #1537	@ 0x601
 8005110:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8005114:	07b2      	lsls	r2, r6, #30
 8005116:	bf48      	it	mi
 8005118:	f045 0502 	orrmi.w	r5, r5, #2
 800511c:	421e      	tst	r6, r3
 800511e:	bf18      	it	ne
 8005120:	f045 0504 	orrne.w	r5, r5, #4
 8005124:	0733      	lsls	r3, r6, #28
 8005126:	bf48      	it	mi
 8005128:	f025 0504 	bicmi.w	r5, r5, #4
 800512c:	4650      	mov	r0, sl
 800512e:	bf48      	it	mi
 8005130:	f045 0508 	orrmi.w	r5, r5, #8
 8005134:	f8cd a000 	str.w	sl, [sp]
 8005138:	f7fb f80a 	bl	8000150 <strlen>
 800513c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005140:	2501      	movs	r5, #1
 8005142:	4628      	mov	r0, r5
 8005144:	4649      	mov	r1, r9
 8005146:	beab      	bkpt	0x00ab
 8005148:	4605      	mov	r5, r0
 800514a:	2d00      	cmp	r5, #0
 800514c:	db05      	blt.n	800515a <_swiopen+0xa2>
 800514e:	2300      	movs	r3, #0
 8005150:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8005154:	4447      	add	r7, r8
 8005156:	607b      	str	r3, [r7, #4]
 8005158:	e7c4      	b.n	80050e4 <_swiopen+0x2c>
 800515a:	4628      	mov	r0, r5
 800515c:	f7ff fe86 	bl	8004e6c <error>
 8005160:	4604      	mov	r4, r0
 8005162:	e7bf      	b.n	80050e4 <_swiopen+0x2c>
 8005164:	20000568 	.word	0x20000568

08005168 <_get_semihosting_exts>:
 8005168:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800516c:	4606      	mov	r6, r0
 800516e:	460f      	mov	r7, r1
 8005170:	4829      	ldr	r0, [pc, #164]	@ (8005218 <_get_semihosting_exts+0xb0>)
 8005172:	2100      	movs	r1, #0
 8005174:	4615      	mov	r5, r2
 8005176:	f7ff ff9f 	bl	80050b8 <_swiopen>
 800517a:	4604      	mov	r4, r0
 800517c:	462a      	mov	r2, r5
 800517e:	2100      	movs	r1, #0
 8005180:	4630      	mov	r0, r6
 8005182:	f000 fb9e 	bl	80058c2 <memset>
 8005186:	1c63      	adds	r3, r4, #1
 8005188:	d014      	beq.n	80051b4 <_get_semihosting_exts+0x4c>
 800518a:	4620      	mov	r0, r4
 800518c:	f7ff fe54 	bl	8004e38 <findslot>
 8005190:	f04f 080c 	mov.w	r8, #12
 8005194:	4681      	mov	r9, r0
 8005196:	4640      	mov	r0, r8
 8005198:	4649      	mov	r1, r9
 800519a:	beab      	bkpt	0x00ab
 800519c:	4680      	mov	r8, r0
 800519e:	4640      	mov	r0, r8
 80051a0:	f7ff fe72 	bl	8004e88 <checkerror>
 80051a4:	2803      	cmp	r0, #3
 80051a6:	dd02      	ble.n	80051ae <_get_semihosting_exts+0x46>
 80051a8:	1ec3      	subs	r3, r0, #3
 80051aa:	42ab      	cmp	r3, r5
 80051ac:	dc07      	bgt.n	80051be <_get_semihosting_exts+0x56>
 80051ae:	4620      	mov	r0, r4
 80051b0:	f7ff ff14 	bl	8004fdc <_close>
 80051b4:	f04f 30ff 	mov.w	r0, #4294967295
 80051b8:	b003      	add	sp, #12
 80051ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051be:	2204      	movs	r2, #4
 80051c0:	4620      	mov	r0, r4
 80051c2:	eb0d 0102 	add.w	r1, sp, r2
 80051c6:	f7ff fe74 	bl	8004eb2 <_read>
 80051ca:	2803      	cmp	r0, #3
 80051cc:	ddef      	ble.n	80051ae <_get_semihosting_exts+0x46>
 80051ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80051d2:	2b53      	cmp	r3, #83	@ 0x53
 80051d4:	d1eb      	bne.n	80051ae <_get_semihosting_exts+0x46>
 80051d6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80051da:	2b48      	cmp	r3, #72	@ 0x48
 80051dc:	d1e7      	bne.n	80051ae <_get_semihosting_exts+0x46>
 80051de:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80051e2:	2b46      	cmp	r3, #70	@ 0x46
 80051e4:	d1e3      	bne.n	80051ae <_get_semihosting_exts+0x46>
 80051e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051ea:	2b42      	cmp	r3, #66	@ 0x42
 80051ec:	d1df      	bne.n	80051ae <_get_semihosting_exts+0x46>
 80051ee:	2201      	movs	r2, #1
 80051f0:	4639      	mov	r1, r7
 80051f2:	4620      	mov	r0, r4
 80051f4:	f7ff fe77 	bl	8004ee6 <_swilseek>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	dbd8      	blt.n	80051ae <_get_semihosting_exts+0x46>
 80051fc:	462a      	mov	r2, r5
 80051fe:	4631      	mov	r1, r6
 8005200:	4620      	mov	r0, r4
 8005202:	f7ff fe56 	bl	8004eb2 <_read>
 8005206:	4605      	mov	r5, r0
 8005208:	4620      	mov	r0, r4
 800520a:	f7ff fee7 	bl	8004fdc <_close>
 800520e:	4628      	mov	r0, r5
 8005210:	f7ff fe3a 	bl	8004e88 <checkerror>
 8005214:	e7d0      	b.n	80051b8 <_get_semihosting_exts+0x50>
 8005216:	bf00      	nop
 8005218:	08006ebc 	.word	0x08006ebc

0800521c <initialise_semihosting_exts>:
 800521c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800521e:	2100      	movs	r1, #0
 8005220:	2201      	movs	r2, #1
 8005222:	4d09      	ldr	r5, [pc, #36]	@ (8005248 <initialise_semihosting_exts+0x2c>)
 8005224:	4c09      	ldr	r4, [pc, #36]	@ (800524c <initialise_semihosting_exts+0x30>)
 8005226:	a801      	add	r0, sp, #4
 8005228:	6029      	str	r1, [r5, #0]
 800522a:	6022      	str	r2, [r4, #0]
 800522c:	f7ff ff9c 	bl	8005168 <_get_semihosting_exts>
 8005230:	2800      	cmp	r0, #0
 8005232:	dd07      	ble.n	8005244 <initialise_semihosting_exts+0x28>
 8005234:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005238:	f003 0201 	and.w	r2, r3, #1
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	602a      	str	r2, [r5, #0]
 8005242:	6023      	str	r3, [r4, #0]
 8005244:	b003      	add	sp, #12
 8005246:	bd30      	pop	{r4, r5, pc}
 8005248:	200002b0 	.word	0x200002b0
 800524c:	200002ac 	.word	0x200002ac

08005250 <_has_ext_stdout_stderr>:
 8005250:	b510      	push	{r4, lr}
 8005252:	4c04      	ldr	r4, [pc, #16]	@ (8005264 <_has_ext_stdout_stderr+0x14>)
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	2b00      	cmp	r3, #0
 8005258:	da01      	bge.n	800525e <_has_ext_stdout_stderr+0xe>
 800525a:	f7ff ffdf 	bl	800521c <initialise_semihosting_exts>
 800525e:	6820      	ldr	r0, [r4, #0]
 8005260:	bd10      	pop	{r4, pc}
 8005262:	bf00      	nop
 8005264:	200002ac 	.word	0x200002ac

08005268 <initialise_monitor_handles>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	2303      	movs	r3, #3
 800526e:	2400      	movs	r4, #0
 8005270:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8005314 <initialise_monitor_handles+0xac>
 8005274:	b085      	sub	sp, #20
 8005276:	f8cd 9004 	str.w	r9, [sp, #4]
 800527a:	af01      	add	r7, sp, #4
 800527c:	9303      	str	r3, [sp, #12]
 800527e:	2501      	movs	r5, #1
 8005280:	9402      	str	r4, [sp, #8]
 8005282:	4628      	mov	r0, r5
 8005284:	4639      	mov	r1, r7
 8005286:	beab      	bkpt	0x00ab
 8005288:	4605      	mov	r5, r0
 800528a:	f04f 32ff 	mov.w	r2, #4294967295
 800528e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8005318 <initialise_monitor_handles+0xb0>
 8005292:	4623      	mov	r3, r4
 8005294:	4c21      	ldr	r4, [pc, #132]	@ (800531c <initialise_monitor_handles+0xb4>)
 8005296:	f8c8 5000 	str.w	r5, [r8]
 800529a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 800529e:	3301      	adds	r3, #1
 80052a0:	2b14      	cmp	r3, #20
 80052a2:	d1fa      	bne.n	800529a <initialise_monitor_handles+0x32>
 80052a4:	f7ff ffd4 	bl	8005250 <_has_ext_stdout_stderr>
 80052a8:	4d1d      	ldr	r5, [pc, #116]	@ (8005320 <initialise_monitor_handles+0xb8>)
 80052aa:	b1d0      	cbz	r0, 80052e2 <initialise_monitor_handles+0x7a>
 80052ac:	f04f 0a03 	mov.w	sl, #3
 80052b0:	2304      	movs	r3, #4
 80052b2:	f8cd 9004 	str.w	r9, [sp, #4]
 80052b6:	2601      	movs	r6, #1
 80052b8:	f8cd a00c 	str.w	sl, [sp, #12]
 80052bc:	9302      	str	r3, [sp, #8]
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	beab      	bkpt	0x00ab
 80052c4:	4683      	mov	fp, r0
 80052c6:	4b17      	ldr	r3, [pc, #92]	@ (8005324 <initialise_monitor_handles+0xbc>)
 80052c8:	f8cd 9004 	str.w	r9, [sp, #4]
 80052cc:	f8c3 b000 	str.w	fp, [r3]
 80052d0:	2308      	movs	r3, #8
 80052d2:	f8cd a00c 	str.w	sl, [sp, #12]
 80052d6:	9302      	str	r3, [sp, #8]
 80052d8:	4630      	mov	r0, r6
 80052da:	4639      	mov	r1, r7
 80052dc:	beab      	bkpt	0x00ab
 80052de:	4606      	mov	r6, r0
 80052e0:	602e      	str	r6, [r5, #0]
 80052e2:	2600      	movs	r6, #0
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	6066      	str	r6, [r4, #4]
 80052e8:	3301      	adds	r3, #1
 80052ea:	bf02      	ittt	eq
 80052ec:	4b0d      	ldreq	r3, [pc, #52]	@ (8005324 <initialise_monitor_handles+0xbc>)
 80052ee:	681b      	ldreq	r3, [r3, #0]
 80052f0:	602b      	streq	r3, [r5, #0]
 80052f2:	f8d8 3000 	ldr.w	r3, [r8]
 80052f6:	6023      	str	r3, [r4, #0]
 80052f8:	f7ff ffaa 	bl	8005250 <_has_ext_stdout_stderr>
 80052fc:	b130      	cbz	r0, 800530c <initialise_monitor_handles+0xa4>
 80052fe:	4b09      	ldr	r3, [pc, #36]	@ (8005324 <initialise_monitor_handles+0xbc>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800530c:	b005      	add	sp, #20
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	08006ed2 	.word	0x08006ed2
 8005318:	20000564 	.word	0x20000564
 800531c:	20000568 	.word	0x20000568
 8005320:	2000055c 	.word	0x2000055c
 8005324:	20000560 	.word	0x20000560

08005328 <_isatty>:
 8005328:	b570      	push	{r4, r5, r6, lr}
 800532a:	f7ff fd85 	bl	8004e38 <findslot>
 800532e:	2409      	movs	r4, #9
 8005330:	4605      	mov	r5, r0
 8005332:	b920      	cbnz	r0, 800533e <_isatty+0x16>
 8005334:	f000 fb14 	bl	8005960 <__errno>
 8005338:	6004      	str	r4, [r0, #0]
 800533a:	2000      	movs	r0, #0
 800533c:	bd70      	pop	{r4, r5, r6, pc}
 800533e:	4620      	mov	r0, r4
 8005340:	4629      	mov	r1, r5
 8005342:	beab      	bkpt	0x00ab
 8005344:	4604      	mov	r4, r0
 8005346:	2c01      	cmp	r4, #1
 8005348:	4620      	mov	r0, r4
 800534a:	d0f7      	beq.n	800533c <_isatty+0x14>
 800534c:	f000 fb08 	bl	8005960 <__errno>
 8005350:	2513      	movs	r5, #19
 8005352:	4604      	mov	r4, r0
 8005354:	2600      	movs	r6, #0
 8005356:	4628      	mov	r0, r5
 8005358:	4631      	mov	r1, r6
 800535a:	beab      	bkpt	0x00ab
 800535c:	4605      	mov	r5, r0
 800535e:	6025      	str	r5, [r4, #0]
 8005360:	e7eb      	b.n	800533a <_isatty+0x12>

08005362 <atoi>:
 8005362:	220a      	movs	r2, #10
 8005364:	2100      	movs	r1, #0
 8005366:	f000 b87b 	b.w	8005460 <strtol>
	...

0800536c <_strtol_l.constprop.0>:
 800536c:	2b24      	cmp	r3, #36	@ 0x24
 800536e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005372:	4686      	mov	lr, r0
 8005374:	4690      	mov	r8, r2
 8005376:	d801      	bhi.n	800537c <_strtol_l.constprop.0+0x10>
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <_strtol_l.constprop.0+0x1e>
 800537c:	f000 faf0 	bl	8005960 <__errno>
 8005380:	2316      	movs	r3, #22
 8005382:	6003      	str	r3, [r0, #0]
 8005384:	2000      	movs	r0, #0
 8005386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538a:	460d      	mov	r5, r1
 800538c:	4833      	ldr	r0, [pc, #204]	@ (800545c <_strtol_l.constprop.0+0xf0>)
 800538e:	462a      	mov	r2, r5
 8005390:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005394:	5d06      	ldrb	r6, [r0, r4]
 8005396:	f016 0608 	ands.w	r6, r6, #8
 800539a:	d1f8      	bne.n	800538e <_strtol_l.constprop.0+0x22>
 800539c:	2c2d      	cmp	r4, #45	@ 0x2d
 800539e:	d12d      	bne.n	80053fc <_strtol_l.constprop.0+0x90>
 80053a0:	2601      	movs	r6, #1
 80053a2:	782c      	ldrb	r4, [r5, #0]
 80053a4:	1c95      	adds	r5, r2, #2
 80053a6:	f033 0210 	bics.w	r2, r3, #16
 80053aa:	d109      	bne.n	80053c0 <_strtol_l.constprop.0+0x54>
 80053ac:	2c30      	cmp	r4, #48	@ 0x30
 80053ae:	d12a      	bne.n	8005406 <_strtol_l.constprop.0+0x9a>
 80053b0:	782a      	ldrb	r2, [r5, #0]
 80053b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80053b6:	2a58      	cmp	r2, #88	@ 0x58
 80053b8:	d125      	bne.n	8005406 <_strtol_l.constprop.0+0x9a>
 80053ba:	2310      	movs	r3, #16
 80053bc:	786c      	ldrb	r4, [r5, #1]
 80053be:	3502      	adds	r5, #2
 80053c0:	2200      	movs	r2, #0
 80053c2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80053c6:	f10c 3cff 	add.w	ip, ip, #4294967295
 80053ca:	fbbc f9f3 	udiv	r9, ip, r3
 80053ce:	4610      	mov	r0, r2
 80053d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80053d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80053d8:	2f09      	cmp	r7, #9
 80053da:	d81b      	bhi.n	8005414 <_strtol_l.constprop.0+0xa8>
 80053dc:	463c      	mov	r4, r7
 80053de:	42a3      	cmp	r3, r4
 80053e0:	dd27      	ble.n	8005432 <_strtol_l.constprop.0+0xc6>
 80053e2:	1c57      	adds	r7, r2, #1
 80053e4:	d007      	beq.n	80053f6 <_strtol_l.constprop.0+0x8a>
 80053e6:	4581      	cmp	r9, r0
 80053e8:	d320      	bcc.n	800542c <_strtol_l.constprop.0+0xc0>
 80053ea:	d101      	bne.n	80053f0 <_strtol_l.constprop.0+0x84>
 80053ec:	45a2      	cmp	sl, r4
 80053ee:	db1d      	blt.n	800542c <_strtol_l.constprop.0+0xc0>
 80053f0:	2201      	movs	r2, #1
 80053f2:	fb00 4003 	mla	r0, r0, r3, r4
 80053f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053fa:	e7eb      	b.n	80053d4 <_strtol_l.constprop.0+0x68>
 80053fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80053fe:	bf04      	itt	eq
 8005400:	782c      	ldrbeq	r4, [r5, #0]
 8005402:	1c95      	addeq	r5, r2, #2
 8005404:	e7cf      	b.n	80053a6 <_strtol_l.constprop.0+0x3a>
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1da      	bne.n	80053c0 <_strtol_l.constprop.0+0x54>
 800540a:	2c30      	cmp	r4, #48	@ 0x30
 800540c:	bf0c      	ite	eq
 800540e:	2308      	moveq	r3, #8
 8005410:	230a      	movne	r3, #10
 8005412:	e7d5      	b.n	80053c0 <_strtol_l.constprop.0+0x54>
 8005414:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005418:	2f19      	cmp	r7, #25
 800541a:	d801      	bhi.n	8005420 <_strtol_l.constprop.0+0xb4>
 800541c:	3c37      	subs	r4, #55	@ 0x37
 800541e:	e7de      	b.n	80053de <_strtol_l.constprop.0+0x72>
 8005420:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005424:	2f19      	cmp	r7, #25
 8005426:	d804      	bhi.n	8005432 <_strtol_l.constprop.0+0xc6>
 8005428:	3c57      	subs	r4, #87	@ 0x57
 800542a:	e7d8      	b.n	80053de <_strtol_l.constprop.0+0x72>
 800542c:	f04f 32ff 	mov.w	r2, #4294967295
 8005430:	e7e1      	b.n	80053f6 <_strtol_l.constprop.0+0x8a>
 8005432:	1c53      	adds	r3, r2, #1
 8005434:	d108      	bne.n	8005448 <_strtol_l.constprop.0+0xdc>
 8005436:	2322      	movs	r3, #34	@ 0x22
 8005438:	4660      	mov	r0, ip
 800543a:	f8ce 3000 	str.w	r3, [lr]
 800543e:	f1b8 0f00 	cmp.w	r8, #0
 8005442:	d0a0      	beq.n	8005386 <_strtol_l.constprop.0+0x1a>
 8005444:	1e69      	subs	r1, r5, #1
 8005446:	e006      	b.n	8005456 <_strtol_l.constprop.0+0xea>
 8005448:	b106      	cbz	r6, 800544c <_strtol_l.constprop.0+0xe0>
 800544a:	4240      	negs	r0, r0
 800544c:	f1b8 0f00 	cmp.w	r8, #0
 8005450:	d099      	beq.n	8005386 <_strtol_l.constprop.0+0x1a>
 8005452:	2a00      	cmp	r2, #0
 8005454:	d1f6      	bne.n	8005444 <_strtol_l.constprop.0+0xd8>
 8005456:	f8c8 1000 	str.w	r1, [r8]
 800545a:	e794      	b.n	8005386 <_strtol_l.constprop.0+0x1a>
 800545c:	08006ed7 	.word	0x08006ed7

08005460 <strtol>:
 8005460:	4613      	mov	r3, r2
 8005462:	460a      	mov	r2, r1
 8005464:	4601      	mov	r1, r0
 8005466:	4802      	ldr	r0, [pc, #8]	@ (8005470 <strtol+0x10>)
 8005468:	6800      	ldr	r0, [r0, #0]
 800546a:	f7ff bf7f 	b.w	800536c <_strtol_l.constprop.0>
 800546e:	bf00      	nop
 8005470:	200002c0 	.word	0x200002c0

08005474 <__sflush_r>:
 8005474:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	0716      	lsls	r6, r2, #28
 800547c:	4605      	mov	r5, r0
 800547e:	460c      	mov	r4, r1
 8005480:	d454      	bmi.n	800552c <__sflush_r+0xb8>
 8005482:	684b      	ldr	r3, [r1, #4]
 8005484:	2b00      	cmp	r3, #0
 8005486:	dc02      	bgt.n	800548e <__sflush_r+0x1a>
 8005488:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800548a:	2b00      	cmp	r3, #0
 800548c:	dd48      	ble.n	8005520 <__sflush_r+0xac>
 800548e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005490:	2e00      	cmp	r6, #0
 8005492:	d045      	beq.n	8005520 <__sflush_r+0xac>
 8005494:	2300      	movs	r3, #0
 8005496:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800549a:	682f      	ldr	r7, [r5, #0]
 800549c:	6a21      	ldr	r1, [r4, #32]
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	d030      	beq.n	8005504 <__sflush_r+0x90>
 80054a2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80054a4:	89a3      	ldrh	r3, [r4, #12]
 80054a6:	0759      	lsls	r1, r3, #29
 80054a8:	d505      	bpl.n	80054b6 <__sflush_r+0x42>
 80054aa:	6863      	ldr	r3, [r4, #4]
 80054ac:	1ad2      	subs	r2, r2, r3
 80054ae:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80054b0:	b10b      	cbz	r3, 80054b6 <__sflush_r+0x42>
 80054b2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80054b4:	1ad2      	subs	r2, r2, r3
 80054b6:	2300      	movs	r3, #0
 80054b8:	4628      	mov	r0, r5
 80054ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80054bc:	6a21      	ldr	r1, [r4, #32]
 80054be:	47b0      	blx	r6
 80054c0:	1c43      	adds	r3, r0, #1
 80054c2:	89a3      	ldrh	r3, [r4, #12]
 80054c4:	d106      	bne.n	80054d4 <__sflush_r+0x60>
 80054c6:	6829      	ldr	r1, [r5, #0]
 80054c8:	291d      	cmp	r1, #29
 80054ca:	d82b      	bhi.n	8005524 <__sflush_r+0xb0>
 80054cc:	4a28      	ldr	r2, [pc, #160]	@ (8005570 <__sflush_r+0xfc>)
 80054ce:	410a      	asrs	r2, r1
 80054d0:	07d6      	lsls	r6, r2, #31
 80054d2:	d427      	bmi.n	8005524 <__sflush_r+0xb0>
 80054d4:	2200      	movs	r2, #0
 80054d6:	6062      	str	r2, [r4, #4]
 80054d8:	6922      	ldr	r2, [r4, #16]
 80054da:	04d9      	lsls	r1, r3, #19
 80054dc:	6022      	str	r2, [r4, #0]
 80054de:	d504      	bpl.n	80054ea <__sflush_r+0x76>
 80054e0:	1c42      	adds	r2, r0, #1
 80054e2:	d101      	bne.n	80054e8 <__sflush_r+0x74>
 80054e4:	682b      	ldr	r3, [r5, #0]
 80054e6:	b903      	cbnz	r3, 80054ea <__sflush_r+0x76>
 80054e8:	6560      	str	r0, [r4, #84]	@ 0x54
 80054ea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054ec:	602f      	str	r7, [r5, #0]
 80054ee:	b1b9      	cbz	r1, 8005520 <__sflush_r+0xac>
 80054f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054f4:	4299      	cmp	r1, r3
 80054f6:	d002      	beq.n	80054fe <__sflush_r+0x8a>
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 fa5f 	bl	80059bc <_free_r>
 80054fe:	2300      	movs	r3, #0
 8005500:	6363      	str	r3, [r4, #52]	@ 0x34
 8005502:	e00d      	b.n	8005520 <__sflush_r+0xac>
 8005504:	2301      	movs	r3, #1
 8005506:	4628      	mov	r0, r5
 8005508:	47b0      	blx	r6
 800550a:	4602      	mov	r2, r0
 800550c:	1c50      	adds	r0, r2, #1
 800550e:	d1c9      	bne.n	80054a4 <__sflush_r+0x30>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d0c6      	beq.n	80054a4 <__sflush_r+0x30>
 8005516:	2b1d      	cmp	r3, #29
 8005518:	d001      	beq.n	800551e <__sflush_r+0xaa>
 800551a:	2b16      	cmp	r3, #22
 800551c:	d11d      	bne.n	800555a <__sflush_r+0xe6>
 800551e:	602f      	str	r7, [r5, #0]
 8005520:	2000      	movs	r0, #0
 8005522:	e021      	b.n	8005568 <__sflush_r+0xf4>
 8005524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005528:	b21b      	sxth	r3, r3
 800552a:	e01a      	b.n	8005562 <__sflush_r+0xee>
 800552c:	690f      	ldr	r7, [r1, #16]
 800552e:	2f00      	cmp	r7, #0
 8005530:	d0f6      	beq.n	8005520 <__sflush_r+0xac>
 8005532:	0793      	lsls	r3, r2, #30
 8005534:	bf18      	it	ne
 8005536:	2300      	movne	r3, #0
 8005538:	680e      	ldr	r6, [r1, #0]
 800553a:	bf08      	it	eq
 800553c:	694b      	ldreq	r3, [r1, #20]
 800553e:	1bf6      	subs	r6, r6, r7
 8005540:	600f      	str	r7, [r1, #0]
 8005542:	608b      	str	r3, [r1, #8]
 8005544:	2e00      	cmp	r6, #0
 8005546:	ddeb      	ble.n	8005520 <__sflush_r+0xac>
 8005548:	4633      	mov	r3, r6
 800554a:	463a      	mov	r2, r7
 800554c:	4628      	mov	r0, r5
 800554e:	6a21      	ldr	r1, [r4, #32]
 8005550:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005554:	47e0      	blx	ip
 8005556:	2800      	cmp	r0, #0
 8005558:	dc07      	bgt.n	800556a <__sflush_r+0xf6>
 800555a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800555e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005562:	f04f 30ff 	mov.w	r0, #4294967295
 8005566:	81a3      	strh	r3, [r4, #12]
 8005568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800556a:	4407      	add	r7, r0
 800556c:	1a36      	subs	r6, r6, r0
 800556e:	e7e9      	b.n	8005544 <__sflush_r+0xd0>
 8005570:	dfbffffe 	.word	0xdfbffffe

08005574 <_fflush_r>:
 8005574:	b538      	push	{r3, r4, r5, lr}
 8005576:	690b      	ldr	r3, [r1, #16]
 8005578:	4605      	mov	r5, r0
 800557a:	460c      	mov	r4, r1
 800557c:	b913      	cbnz	r3, 8005584 <_fflush_r+0x10>
 800557e:	2500      	movs	r5, #0
 8005580:	4628      	mov	r0, r5
 8005582:	bd38      	pop	{r3, r4, r5, pc}
 8005584:	b118      	cbz	r0, 800558e <_fflush_r+0x1a>
 8005586:	6a03      	ldr	r3, [r0, #32]
 8005588:	b90b      	cbnz	r3, 800558e <_fflush_r+0x1a>
 800558a:	f000 f8bb 	bl	8005704 <__sinit>
 800558e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0f3      	beq.n	800557e <_fflush_r+0xa>
 8005596:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005598:	07d0      	lsls	r0, r2, #31
 800559a:	d404      	bmi.n	80055a6 <_fflush_r+0x32>
 800559c:	0599      	lsls	r1, r3, #22
 800559e:	d402      	bmi.n	80055a6 <_fflush_r+0x32>
 80055a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055a2:	f000 fa08 	bl	80059b6 <__retarget_lock_acquire_recursive>
 80055a6:	4628      	mov	r0, r5
 80055a8:	4621      	mov	r1, r4
 80055aa:	f7ff ff63 	bl	8005474 <__sflush_r>
 80055ae:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80055b0:	4605      	mov	r5, r0
 80055b2:	07da      	lsls	r2, r3, #31
 80055b4:	d4e4      	bmi.n	8005580 <_fflush_r+0xc>
 80055b6:	89a3      	ldrh	r3, [r4, #12]
 80055b8:	059b      	lsls	r3, r3, #22
 80055ba:	d4e1      	bmi.n	8005580 <_fflush_r+0xc>
 80055bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80055be:	f000 f9fb 	bl	80059b8 <__retarget_lock_release_recursive>
 80055c2:	e7dd      	b.n	8005580 <_fflush_r+0xc>

080055c4 <fflush>:
 80055c4:	4601      	mov	r1, r0
 80055c6:	b920      	cbnz	r0, 80055d2 <fflush+0xe>
 80055c8:	4a04      	ldr	r2, [pc, #16]	@ (80055dc <fflush+0x18>)
 80055ca:	4905      	ldr	r1, [pc, #20]	@ (80055e0 <fflush+0x1c>)
 80055cc:	4805      	ldr	r0, [pc, #20]	@ (80055e4 <fflush+0x20>)
 80055ce:	f000 b8b1 	b.w	8005734 <_fwalk_sglue>
 80055d2:	4b05      	ldr	r3, [pc, #20]	@ (80055e8 <fflush+0x24>)
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	f7ff bfcd 	b.w	8005574 <_fflush_r>
 80055da:	bf00      	nop
 80055dc:	200002b4 	.word	0x200002b4
 80055e0:	08005575 	.word	0x08005575
 80055e4:	200002c4 	.word	0x200002c4
 80055e8:	200002c0 	.word	0x200002c0

080055ec <std>:
 80055ec:	2300      	movs	r3, #0
 80055ee:	b510      	push	{r4, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	e9c0 3300 	strd	r3, r3, [r0]
 80055f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055fa:	6083      	str	r3, [r0, #8]
 80055fc:	8181      	strh	r1, [r0, #12]
 80055fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8005600:	81c2      	strh	r2, [r0, #14]
 8005602:	6183      	str	r3, [r0, #24]
 8005604:	4619      	mov	r1, r3
 8005606:	2208      	movs	r2, #8
 8005608:	305c      	adds	r0, #92	@ 0x5c
 800560a:	f000 f95a 	bl	80058c2 <memset>
 800560e:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <std+0x58>)
 8005610:	6224      	str	r4, [r4, #32]
 8005612:	6263      	str	r3, [r4, #36]	@ 0x24
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <std+0x5c>)
 8005616:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005618:	4b0c      	ldr	r3, [pc, #48]	@ (800564c <std+0x60>)
 800561a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800561c:	4b0c      	ldr	r3, [pc, #48]	@ (8005650 <std+0x64>)
 800561e:	6323      	str	r3, [r4, #48]	@ 0x30
 8005620:	4b0c      	ldr	r3, [pc, #48]	@ (8005654 <std+0x68>)
 8005622:	429c      	cmp	r4, r3
 8005624:	d006      	beq.n	8005634 <std+0x48>
 8005626:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800562a:	4294      	cmp	r4, r2
 800562c:	d002      	beq.n	8005634 <std+0x48>
 800562e:	33d0      	adds	r3, #208	@ 0xd0
 8005630:	429c      	cmp	r4, r3
 8005632:	d105      	bne.n	8005640 <std+0x54>
 8005634:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800563c:	f000 b9ba 	b.w	80059b4 <__retarget_lock_init_recursive>
 8005640:	bd10      	pop	{r4, pc}
 8005642:	bf00      	nop
 8005644:	0800583d 	.word	0x0800583d
 8005648:	0800585f 	.word	0x0800585f
 800564c:	08005897 	.word	0x08005897
 8005650:	080058bb 	.word	0x080058bb
 8005654:	20000608 	.word	0x20000608

08005658 <stdio_exit_handler>:
 8005658:	4a02      	ldr	r2, [pc, #8]	@ (8005664 <stdio_exit_handler+0xc>)
 800565a:	4903      	ldr	r1, [pc, #12]	@ (8005668 <stdio_exit_handler+0x10>)
 800565c:	4803      	ldr	r0, [pc, #12]	@ (800566c <stdio_exit_handler+0x14>)
 800565e:	f000 b869 	b.w	8005734 <_fwalk_sglue>
 8005662:	bf00      	nop
 8005664:	200002b4 	.word	0x200002b4
 8005668:	08005575 	.word	0x08005575
 800566c:	200002c4 	.word	0x200002c4

08005670 <cleanup_stdio>:
 8005670:	6841      	ldr	r1, [r0, #4]
 8005672:	4b0c      	ldr	r3, [pc, #48]	@ (80056a4 <cleanup_stdio+0x34>)
 8005674:	b510      	push	{r4, lr}
 8005676:	4299      	cmp	r1, r3
 8005678:	4604      	mov	r4, r0
 800567a:	d001      	beq.n	8005680 <cleanup_stdio+0x10>
 800567c:	f7ff ff7a 	bl	8005574 <_fflush_r>
 8005680:	68a1      	ldr	r1, [r4, #8]
 8005682:	4b09      	ldr	r3, [pc, #36]	@ (80056a8 <cleanup_stdio+0x38>)
 8005684:	4299      	cmp	r1, r3
 8005686:	d002      	beq.n	800568e <cleanup_stdio+0x1e>
 8005688:	4620      	mov	r0, r4
 800568a:	f7ff ff73 	bl	8005574 <_fflush_r>
 800568e:	68e1      	ldr	r1, [r4, #12]
 8005690:	4b06      	ldr	r3, [pc, #24]	@ (80056ac <cleanup_stdio+0x3c>)
 8005692:	4299      	cmp	r1, r3
 8005694:	d004      	beq.n	80056a0 <cleanup_stdio+0x30>
 8005696:	4620      	mov	r0, r4
 8005698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800569c:	f7ff bf6a 	b.w	8005574 <_fflush_r>
 80056a0:	bd10      	pop	{r4, pc}
 80056a2:	bf00      	nop
 80056a4:	20000608 	.word	0x20000608
 80056a8:	20000670 	.word	0x20000670
 80056ac:	200006d8 	.word	0x200006d8

080056b0 <global_stdio_init.part.0>:
 80056b0:	b510      	push	{r4, lr}
 80056b2:	4b0b      	ldr	r3, [pc, #44]	@ (80056e0 <global_stdio_init.part.0+0x30>)
 80056b4:	4c0b      	ldr	r4, [pc, #44]	@ (80056e4 <global_stdio_init.part.0+0x34>)
 80056b6:	4a0c      	ldr	r2, [pc, #48]	@ (80056e8 <global_stdio_init.part.0+0x38>)
 80056b8:	4620      	mov	r0, r4
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	2104      	movs	r1, #4
 80056be:	2200      	movs	r2, #0
 80056c0:	f7ff ff94 	bl	80055ec <std>
 80056c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80056c8:	2201      	movs	r2, #1
 80056ca:	2109      	movs	r1, #9
 80056cc:	f7ff ff8e 	bl	80055ec <std>
 80056d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056d4:	2202      	movs	r2, #2
 80056d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056da:	2112      	movs	r1, #18
 80056dc:	f7ff bf86 	b.w	80055ec <std>
 80056e0:	20000740 	.word	0x20000740
 80056e4:	20000608 	.word	0x20000608
 80056e8:	08005659 	.word	0x08005659

080056ec <__sfp_lock_acquire>:
 80056ec:	4801      	ldr	r0, [pc, #4]	@ (80056f4 <__sfp_lock_acquire+0x8>)
 80056ee:	f000 b962 	b.w	80059b6 <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	20000749 	.word	0x20000749

080056f8 <__sfp_lock_release>:
 80056f8:	4801      	ldr	r0, [pc, #4]	@ (8005700 <__sfp_lock_release+0x8>)
 80056fa:	f000 b95d 	b.w	80059b8 <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	20000749 	.word	0x20000749

08005704 <__sinit>:
 8005704:	b510      	push	{r4, lr}
 8005706:	4604      	mov	r4, r0
 8005708:	f7ff fff0 	bl	80056ec <__sfp_lock_acquire>
 800570c:	6a23      	ldr	r3, [r4, #32]
 800570e:	b11b      	cbz	r3, 8005718 <__sinit+0x14>
 8005710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005714:	f7ff bff0 	b.w	80056f8 <__sfp_lock_release>
 8005718:	4b04      	ldr	r3, [pc, #16]	@ (800572c <__sinit+0x28>)
 800571a:	6223      	str	r3, [r4, #32]
 800571c:	4b04      	ldr	r3, [pc, #16]	@ (8005730 <__sinit+0x2c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f5      	bne.n	8005710 <__sinit+0xc>
 8005724:	f7ff ffc4 	bl	80056b0 <global_stdio_init.part.0>
 8005728:	e7f2      	b.n	8005710 <__sinit+0xc>
 800572a:	bf00      	nop
 800572c:	08005671 	.word	0x08005671
 8005730:	20000740 	.word	0x20000740

08005734 <_fwalk_sglue>:
 8005734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005738:	4607      	mov	r7, r0
 800573a:	4688      	mov	r8, r1
 800573c:	4614      	mov	r4, r2
 800573e:	2600      	movs	r6, #0
 8005740:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005744:	f1b9 0901 	subs.w	r9, r9, #1
 8005748:	d505      	bpl.n	8005756 <_fwalk_sglue+0x22>
 800574a:	6824      	ldr	r4, [r4, #0]
 800574c:	2c00      	cmp	r4, #0
 800574e:	d1f7      	bne.n	8005740 <_fwalk_sglue+0xc>
 8005750:	4630      	mov	r0, r6
 8005752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005756:	89ab      	ldrh	r3, [r5, #12]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d907      	bls.n	800576c <_fwalk_sglue+0x38>
 800575c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005760:	3301      	adds	r3, #1
 8005762:	d003      	beq.n	800576c <_fwalk_sglue+0x38>
 8005764:	4629      	mov	r1, r5
 8005766:	4638      	mov	r0, r7
 8005768:	47c0      	blx	r8
 800576a:	4306      	orrs	r6, r0
 800576c:	3568      	adds	r5, #104	@ 0x68
 800576e:	e7e9      	b.n	8005744 <_fwalk_sglue+0x10>

08005770 <iprintf>:
 8005770:	b40f      	push	{r0, r1, r2, r3}
 8005772:	b507      	push	{r0, r1, r2, lr}
 8005774:	4906      	ldr	r1, [pc, #24]	@ (8005790 <iprintf+0x20>)
 8005776:	ab04      	add	r3, sp, #16
 8005778:	6808      	ldr	r0, [r1, #0]
 800577a:	f853 2b04 	ldr.w	r2, [r3], #4
 800577e:	6881      	ldr	r1, [r0, #8]
 8005780:	9301      	str	r3, [sp, #4]
 8005782:	f000 fb91 	bl	8005ea8 <_vfiprintf_r>
 8005786:	b003      	add	sp, #12
 8005788:	f85d eb04 	ldr.w	lr, [sp], #4
 800578c:	b004      	add	sp, #16
 800578e:	4770      	bx	lr
 8005790:	200002c0 	.word	0x200002c0

08005794 <sniprintf>:
 8005794:	b40c      	push	{r2, r3}
 8005796:	b530      	push	{r4, r5, lr}
 8005798:	4b17      	ldr	r3, [pc, #92]	@ (80057f8 <sniprintf+0x64>)
 800579a:	1e0c      	subs	r4, r1, #0
 800579c:	681d      	ldr	r5, [r3, #0]
 800579e:	b09d      	sub	sp, #116	@ 0x74
 80057a0:	da08      	bge.n	80057b4 <sniprintf+0x20>
 80057a2:	238b      	movs	r3, #139	@ 0x8b
 80057a4:	f04f 30ff 	mov.w	r0, #4294967295
 80057a8:	602b      	str	r3, [r5, #0]
 80057aa:	b01d      	add	sp, #116	@ 0x74
 80057ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80057b0:	b002      	add	sp, #8
 80057b2:	4770      	bx	lr
 80057b4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80057b8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80057bc:	bf0c      	ite	eq
 80057be:	4623      	moveq	r3, r4
 80057c0:	f104 33ff 	addne.w	r3, r4, #4294967295
 80057c4:	9304      	str	r3, [sp, #16]
 80057c6:	9307      	str	r3, [sp, #28]
 80057c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80057cc:	9002      	str	r0, [sp, #8]
 80057ce:	9006      	str	r0, [sp, #24]
 80057d0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80057d4:	4628      	mov	r0, r5
 80057d6:	ab21      	add	r3, sp, #132	@ 0x84
 80057d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80057da:	a902      	add	r1, sp, #8
 80057dc:	9301      	str	r3, [sp, #4]
 80057de:	f000 fa3f 	bl	8005c60 <_svfiprintf_r>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	bfbc      	itt	lt
 80057e6:	238b      	movlt	r3, #139	@ 0x8b
 80057e8:	602b      	strlt	r3, [r5, #0]
 80057ea:	2c00      	cmp	r4, #0
 80057ec:	d0dd      	beq.n	80057aa <sniprintf+0x16>
 80057ee:	2200      	movs	r2, #0
 80057f0:	9b02      	ldr	r3, [sp, #8]
 80057f2:	701a      	strb	r2, [r3, #0]
 80057f4:	e7d9      	b.n	80057aa <sniprintf+0x16>
 80057f6:	bf00      	nop
 80057f8:	200002c0 	.word	0x200002c0

080057fc <siprintf>:
 80057fc:	b40e      	push	{r1, r2, r3}
 80057fe:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005802:	b500      	push	{lr}
 8005804:	b09c      	sub	sp, #112	@ 0x70
 8005806:	ab1d      	add	r3, sp, #116	@ 0x74
 8005808:	9002      	str	r0, [sp, #8]
 800580a:	9006      	str	r0, [sp, #24]
 800580c:	9107      	str	r1, [sp, #28]
 800580e:	9104      	str	r1, [sp, #16]
 8005810:	4808      	ldr	r0, [pc, #32]	@ (8005834 <siprintf+0x38>)
 8005812:	4909      	ldr	r1, [pc, #36]	@ (8005838 <siprintf+0x3c>)
 8005814:	f853 2b04 	ldr.w	r2, [r3], #4
 8005818:	9105      	str	r1, [sp, #20]
 800581a:	6800      	ldr	r0, [r0, #0]
 800581c:	a902      	add	r1, sp, #8
 800581e:	9301      	str	r3, [sp, #4]
 8005820:	f000 fa1e 	bl	8005c60 <_svfiprintf_r>
 8005824:	2200      	movs	r2, #0
 8005826:	9b02      	ldr	r3, [sp, #8]
 8005828:	701a      	strb	r2, [r3, #0]
 800582a:	b01c      	add	sp, #112	@ 0x70
 800582c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005830:	b003      	add	sp, #12
 8005832:	4770      	bx	lr
 8005834:	200002c0 	.word	0x200002c0
 8005838:	ffff0208 	.word	0xffff0208

0800583c <__sread>:
 800583c:	b510      	push	{r4, lr}
 800583e:	460c      	mov	r4, r1
 8005840:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005844:	f000 f868 	bl	8005918 <_read_r>
 8005848:	2800      	cmp	r0, #0
 800584a:	bfab      	itete	ge
 800584c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800584e:	89a3      	ldrhlt	r3, [r4, #12]
 8005850:	181b      	addge	r3, r3, r0
 8005852:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005856:	bfac      	ite	ge
 8005858:	6563      	strge	r3, [r4, #84]	@ 0x54
 800585a:	81a3      	strhlt	r3, [r4, #12]
 800585c:	bd10      	pop	{r4, pc}

0800585e <__swrite>:
 800585e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005862:	461f      	mov	r7, r3
 8005864:	898b      	ldrh	r3, [r1, #12]
 8005866:	4605      	mov	r5, r0
 8005868:	05db      	lsls	r3, r3, #23
 800586a:	460c      	mov	r4, r1
 800586c:	4616      	mov	r6, r2
 800586e:	d505      	bpl.n	800587c <__swrite+0x1e>
 8005870:	2302      	movs	r3, #2
 8005872:	2200      	movs	r2, #0
 8005874:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005878:	f000 f83c 	bl	80058f4 <_lseek_r>
 800587c:	89a3      	ldrh	r3, [r4, #12]
 800587e:	4632      	mov	r2, r6
 8005880:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005884:	81a3      	strh	r3, [r4, #12]
 8005886:	4628      	mov	r0, r5
 8005888:	463b      	mov	r3, r7
 800588a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800588e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005892:	f000 b853 	b.w	800593c <_write_r>

08005896 <__sseek>:
 8005896:	b510      	push	{r4, lr}
 8005898:	460c      	mov	r4, r1
 800589a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800589e:	f000 f829 	bl	80058f4 <_lseek_r>
 80058a2:	1c43      	adds	r3, r0, #1
 80058a4:	89a3      	ldrh	r3, [r4, #12]
 80058a6:	bf15      	itete	ne
 80058a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80058aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80058ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80058b2:	81a3      	strheq	r3, [r4, #12]
 80058b4:	bf18      	it	ne
 80058b6:	81a3      	strhne	r3, [r4, #12]
 80058b8:	bd10      	pop	{r4, pc}

080058ba <__sclose>:
 80058ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058be:	f000 b809 	b.w	80058d4 <_close_r>

080058c2 <memset>:
 80058c2:	4603      	mov	r3, r0
 80058c4:	4402      	add	r2, r0
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d100      	bne.n	80058cc <memset+0xa>
 80058ca:	4770      	bx	lr
 80058cc:	f803 1b01 	strb.w	r1, [r3], #1
 80058d0:	e7f9      	b.n	80058c6 <memset+0x4>
	...

080058d4 <_close_r>:
 80058d4:	b538      	push	{r3, r4, r5, lr}
 80058d6:	2300      	movs	r3, #0
 80058d8:	4d05      	ldr	r5, [pc, #20]	@ (80058f0 <_close_r+0x1c>)
 80058da:	4604      	mov	r4, r0
 80058dc:	4608      	mov	r0, r1
 80058de:	602b      	str	r3, [r5, #0]
 80058e0:	f7ff fb7c 	bl	8004fdc <_close>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_close_r+0x1a>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_close_r+0x1a>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000744 	.word	0x20000744

080058f4 <_lseek_r>:
 80058f4:	b538      	push	{r3, r4, r5, lr}
 80058f6:	4604      	mov	r4, r0
 80058f8:	4608      	mov	r0, r1
 80058fa:	4611      	mov	r1, r2
 80058fc:	2200      	movs	r2, #0
 80058fe:	4d05      	ldr	r5, [pc, #20]	@ (8005914 <_lseek_r+0x20>)
 8005900:	602a      	str	r2, [r5, #0]
 8005902:	461a      	mov	r2, r3
 8005904:	f7ff fb2b 	bl	8004f5e <_lseek>
 8005908:	1c43      	adds	r3, r0, #1
 800590a:	d102      	bne.n	8005912 <_lseek_r+0x1e>
 800590c:	682b      	ldr	r3, [r5, #0]
 800590e:	b103      	cbz	r3, 8005912 <_lseek_r+0x1e>
 8005910:	6023      	str	r3, [r4, #0]
 8005912:	bd38      	pop	{r3, r4, r5, pc}
 8005914:	20000744 	.word	0x20000744

08005918 <_read_r>:
 8005918:	b538      	push	{r3, r4, r5, lr}
 800591a:	4604      	mov	r4, r0
 800591c:	4608      	mov	r0, r1
 800591e:	4611      	mov	r1, r2
 8005920:	2200      	movs	r2, #0
 8005922:	4d05      	ldr	r5, [pc, #20]	@ (8005938 <_read_r+0x20>)
 8005924:	602a      	str	r2, [r5, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	f7ff fac3 	bl	8004eb2 <_read>
 800592c:	1c43      	adds	r3, r0, #1
 800592e:	d102      	bne.n	8005936 <_read_r+0x1e>
 8005930:	682b      	ldr	r3, [r5, #0]
 8005932:	b103      	cbz	r3, 8005936 <_read_r+0x1e>
 8005934:	6023      	str	r3, [r4, #0]
 8005936:	bd38      	pop	{r3, r4, r5, pc}
 8005938:	20000744 	.word	0x20000744

0800593c <_write_r>:
 800593c:	b538      	push	{r3, r4, r5, lr}
 800593e:	4604      	mov	r4, r0
 8005940:	4608      	mov	r0, r1
 8005942:	4611      	mov	r1, r2
 8005944:	2200      	movs	r2, #0
 8005946:	4d05      	ldr	r5, [pc, #20]	@ (800595c <_write_r+0x20>)
 8005948:	602a      	str	r2, [r5, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	f7ff fb19 	bl	8004f82 <_write>
 8005950:	1c43      	adds	r3, r0, #1
 8005952:	d102      	bne.n	800595a <_write_r+0x1e>
 8005954:	682b      	ldr	r3, [r5, #0]
 8005956:	b103      	cbz	r3, 800595a <_write_r+0x1e>
 8005958:	6023      	str	r3, [r4, #0]
 800595a:	bd38      	pop	{r3, r4, r5, pc}
 800595c:	20000744 	.word	0x20000744

08005960 <__errno>:
 8005960:	4b01      	ldr	r3, [pc, #4]	@ (8005968 <__errno+0x8>)
 8005962:	6818      	ldr	r0, [r3, #0]
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200002c0 	.word	0x200002c0

0800596c <__libc_init_array>:
 800596c:	b570      	push	{r4, r5, r6, lr}
 800596e:	2600      	movs	r6, #0
 8005970:	4d0c      	ldr	r5, [pc, #48]	@ (80059a4 <__libc_init_array+0x38>)
 8005972:	4c0d      	ldr	r4, [pc, #52]	@ (80059a8 <__libc_init_array+0x3c>)
 8005974:	1b64      	subs	r4, r4, r5
 8005976:	10a4      	asrs	r4, r4, #2
 8005978:	42a6      	cmp	r6, r4
 800597a:	d109      	bne.n	8005990 <__libc_init_array+0x24>
 800597c:	f000 fed2 	bl	8006724 <_init>
 8005980:	2600      	movs	r6, #0
 8005982:	4d0a      	ldr	r5, [pc, #40]	@ (80059ac <__libc_init_array+0x40>)
 8005984:	4c0a      	ldr	r4, [pc, #40]	@ (80059b0 <__libc_init_array+0x44>)
 8005986:	1b64      	subs	r4, r4, r5
 8005988:	10a4      	asrs	r4, r4, #2
 800598a:	42a6      	cmp	r6, r4
 800598c:	d105      	bne.n	800599a <__libc_init_array+0x2e>
 800598e:	bd70      	pop	{r4, r5, r6, pc}
 8005990:	f855 3b04 	ldr.w	r3, [r5], #4
 8005994:	4798      	blx	r3
 8005996:	3601      	adds	r6, #1
 8005998:	e7ee      	b.n	8005978 <__libc_init_array+0xc>
 800599a:	f855 3b04 	ldr.w	r3, [r5], #4
 800599e:	4798      	blx	r3
 80059a0:	3601      	adds	r6, #1
 80059a2:	e7f2      	b.n	800598a <__libc_init_array+0x1e>
 80059a4:	08007014 	.word	0x08007014
 80059a8:	08007014 	.word	0x08007014
 80059ac:	08007014 	.word	0x08007014
 80059b0:	08007018 	.word	0x08007018

080059b4 <__retarget_lock_init_recursive>:
 80059b4:	4770      	bx	lr

080059b6 <__retarget_lock_acquire_recursive>:
 80059b6:	4770      	bx	lr

080059b8 <__retarget_lock_release_recursive>:
 80059b8:	4770      	bx	lr
	...

080059bc <_free_r>:
 80059bc:	b538      	push	{r3, r4, r5, lr}
 80059be:	4605      	mov	r5, r0
 80059c0:	2900      	cmp	r1, #0
 80059c2:	d040      	beq.n	8005a46 <_free_r+0x8a>
 80059c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c8:	1f0c      	subs	r4, r1, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bfb8      	it	lt
 80059ce:	18e4      	addlt	r4, r4, r3
 80059d0:	f000 f8de 	bl	8005b90 <__malloc_lock>
 80059d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005a48 <_free_r+0x8c>)
 80059d6:	6813      	ldr	r3, [r2, #0]
 80059d8:	b933      	cbnz	r3, 80059e8 <_free_r+0x2c>
 80059da:	6063      	str	r3, [r4, #4]
 80059dc:	6014      	str	r4, [r2, #0]
 80059de:	4628      	mov	r0, r5
 80059e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e4:	f000 b8da 	b.w	8005b9c <__malloc_unlock>
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d908      	bls.n	80059fe <_free_r+0x42>
 80059ec:	6820      	ldr	r0, [r4, #0]
 80059ee:	1821      	adds	r1, r4, r0
 80059f0:	428b      	cmp	r3, r1
 80059f2:	bf01      	itttt	eq
 80059f4:	6819      	ldreq	r1, [r3, #0]
 80059f6:	685b      	ldreq	r3, [r3, #4]
 80059f8:	1809      	addeq	r1, r1, r0
 80059fa:	6021      	streq	r1, [r4, #0]
 80059fc:	e7ed      	b.n	80059da <_free_r+0x1e>
 80059fe:	461a      	mov	r2, r3
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	b10b      	cbz	r3, 8005a08 <_free_r+0x4c>
 8005a04:	42a3      	cmp	r3, r4
 8005a06:	d9fa      	bls.n	80059fe <_free_r+0x42>
 8005a08:	6811      	ldr	r1, [r2, #0]
 8005a0a:	1850      	adds	r0, r2, r1
 8005a0c:	42a0      	cmp	r0, r4
 8005a0e:	d10b      	bne.n	8005a28 <_free_r+0x6c>
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	4401      	add	r1, r0
 8005a14:	1850      	adds	r0, r2, r1
 8005a16:	4283      	cmp	r3, r0
 8005a18:	6011      	str	r1, [r2, #0]
 8005a1a:	d1e0      	bne.n	80059de <_free_r+0x22>
 8005a1c:	6818      	ldr	r0, [r3, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	4408      	add	r0, r1
 8005a22:	6010      	str	r0, [r2, #0]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	e7da      	b.n	80059de <_free_r+0x22>
 8005a28:	d902      	bls.n	8005a30 <_free_r+0x74>
 8005a2a:	230c      	movs	r3, #12
 8005a2c:	602b      	str	r3, [r5, #0]
 8005a2e:	e7d6      	b.n	80059de <_free_r+0x22>
 8005a30:	6820      	ldr	r0, [r4, #0]
 8005a32:	1821      	adds	r1, r4, r0
 8005a34:	428b      	cmp	r3, r1
 8005a36:	bf01      	itttt	eq
 8005a38:	6819      	ldreq	r1, [r3, #0]
 8005a3a:	685b      	ldreq	r3, [r3, #4]
 8005a3c:	1809      	addeq	r1, r1, r0
 8005a3e:	6021      	streq	r1, [r4, #0]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	6054      	str	r4, [r2, #4]
 8005a44:	e7cb      	b.n	80059de <_free_r+0x22>
 8005a46:	bd38      	pop	{r3, r4, r5, pc}
 8005a48:	20000750 	.word	0x20000750

08005a4c <sbrk_aligned>:
 8005a4c:	b570      	push	{r4, r5, r6, lr}
 8005a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8005a8c <sbrk_aligned+0x40>)
 8005a50:	460c      	mov	r4, r1
 8005a52:	6831      	ldr	r1, [r6, #0]
 8005a54:	4605      	mov	r5, r0
 8005a56:	b911      	cbnz	r1, 8005a5e <sbrk_aligned+0x12>
 8005a58:	f000 fd7e 	bl	8006558 <_sbrk_r>
 8005a5c:	6030      	str	r0, [r6, #0]
 8005a5e:	4621      	mov	r1, r4
 8005a60:	4628      	mov	r0, r5
 8005a62:	f000 fd79 	bl	8006558 <_sbrk_r>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	d103      	bne.n	8005a72 <sbrk_aligned+0x26>
 8005a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8005a6e:	4620      	mov	r0, r4
 8005a70:	bd70      	pop	{r4, r5, r6, pc}
 8005a72:	1cc4      	adds	r4, r0, #3
 8005a74:	f024 0403 	bic.w	r4, r4, #3
 8005a78:	42a0      	cmp	r0, r4
 8005a7a:	d0f8      	beq.n	8005a6e <sbrk_aligned+0x22>
 8005a7c:	1a21      	subs	r1, r4, r0
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f000 fd6a 	bl	8006558 <_sbrk_r>
 8005a84:	3001      	adds	r0, #1
 8005a86:	d1f2      	bne.n	8005a6e <sbrk_aligned+0x22>
 8005a88:	e7ef      	b.n	8005a6a <sbrk_aligned+0x1e>
 8005a8a:	bf00      	nop
 8005a8c:	2000074c 	.word	0x2000074c

08005a90 <_malloc_r>:
 8005a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a94:	1ccd      	adds	r5, r1, #3
 8005a96:	f025 0503 	bic.w	r5, r5, #3
 8005a9a:	3508      	adds	r5, #8
 8005a9c:	2d0c      	cmp	r5, #12
 8005a9e:	bf38      	it	cc
 8005aa0:	250c      	movcc	r5, #12
 8005aa2:	2d00      	cmp	r5, #0
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	db01      	blt.n	8005aac <_malloc_r+0x1c>
 8005aa8:	42a9      	cmp	r1, r5
 8005aaa:	d904      	bls.n	8005ab6 <_malloc_r+0x26>
 8005aac:	230c      	movs	r3, #12
 8005aae:	6033      	str	r3, [r6, #0]
 8005ab0:	2000      	movs	r0, #0
 8005ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b8c <_malloc_r+0xfc>
 8005aba:	f000 f869 	bl	8005b90 <__malloc_lock>
 8005abe:	f8d8 3000 	ldr.w	r3, [r8]
 8005ac2:	461c      	mov	r4, r3
 8005ac4:	bb44      	cbnz	r4, 8005b18 <_malloc_r+0x88>
 8005ac6:	4629      	mov	r1, r5
 8005ac8:	4630      	mov	r0, r6
 8005aca:	f7ff ffbf 	bl	8005a4c <sbrk_aligned>
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	d158      	bne.n	8005b86 <_malloc_r+0xf6>
 8005ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8005ad8:	4627      	mov	r7, r4
 8005ada:	2f00      	cmp	r7, #0
 8005adc:	d143      	bne.n	8005b66 <_malloc_r+0xd6>
 8005ade:	2c00      	cmp	r4, #0
 8005ae0:	d04b      	beq.n	8005b7a <_malloc_r+0xea>
 8005ae2:	6823      	ldr	r3, [r4, #0]
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	4630      	mov	r0, r6
 8005ae8:	eb04 0903 	add.w	r9, r4, r3
 8005aec:	f000 fd34 	bl	8006558 <_sbrk_r>
 8005af0:	4581      	cmp	r9, r0
 8005af2:	d142      	bne.n	8005b7a <_malloc_r+0xea>
 8005af4:	6821      	ldr	r1, [r4, #0]
 8005af6:	4630      	mov	r0, r6
 8005af8:	1a6d      	subs	r5, r5, r1
 8005afa:	4629      	mov	r1, r5
 8005afc:	f7ff ffa6 	bl	8005a4c <sbrk_aligned>
 8005b00:	3001      	adds	r0, #1
 8005b02:	d03a      	beq.n	8005b7a <_malloc_r+0xea>
 8005b04:	6823      	ldr	r3, [r4, #0]
 8005b06:	442b      	add	r3, r5
 8005b08:	6023      	str	r3, [r4, #0]
 8005b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8005b0e:	685a      	ldr	r2, [r3, #4]
 8005b10:	bb62      	cbnz	r2, 8005b6c <_malloc_r+0xdc>
 8005b12:	f8c8 7000 	str.w	r7, [r8]
 8005b16:	e00f      	b.n	8005b38 <_malloc_r+0xa8>
 8005b18:	6822      	ldr	r2, [r4, #0]
 8005b1a:	1b52      	subs	r2, r2, r5
 8005b1c:	d420      	bmi.n	8005b60 <_malloc_r+0xd0>
 8005b1e:	2a0b      	cmp	r2, #11
 8005b20:	d917      	bls.n	8005b52 <_malloc_r+0xc2>
 8005b22:	1961      	adds	r1, r4, r5
 8005b24:	42a3      	cmp	r3, r4
 8005b26:	6025      	str	r5, [r4, #0]
 8005b28:	bf18      	it	ne
 8005b2a:	6059      	strne	r1, [r3, #4]
 8005b2c:	6863      	ldr	r3, [r4, #4]
 8005b2e:	bf08      	it	eq
 8005b30:	f8c8 1000 	streq.w	r1, [r8]
 8005b34:	5162      	str	r2, [r4, r5]
 8005b36:	604b      	str	r3, [r1, #4]
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 f82f 	bl	8005b9c <__malloc_unlock>
 8005b3e:	f104 000b 	add.w	r0, r4, #11
 8005b42:	1d23      	adds	r3, r4, #4
 8005b44:	f020 0007 	bic.w	r0, r0, #7
 8005b48:	1ac2      	subs	r2, r0, r3
 8005b4a:	bf1c      	itt	ne
 8005b4c:	1a1b      	subne	r3, r3, r0
 8005b4e:	50a3      	strne	r3, [r4, r2]
 8005b50:	e7af      	b.n	8005ab2 <_malloc_r+0x22>
 8005b52:	6862      	ldr	r2, [r4, #4]
 8005b54:	42a3      	cmp	r3, r4
 8005b56:	bf0c      	ite	eq
 8005b58:	f8c8 2000 	streq.w	r2, [r8]
 8005b5c:	605a      	strne	r2, [r3, #4]
 8005b5e:	e7eb      	b.n	8005b38 <_malloc_r+0xa8>
 8005b60:	4623      	mov	r3, r4
 8005b62:	6864      	ldr	r4, [r4, #4]
 8005b64:	e7ae      	b.n	8005ac4 <_malloc_r+0x34>
 8005b66:	463c      	mov	r4, r7
 8005b68:	687f      	ldr	r7, [r7, #4]
 8005b6a:	e7b6      	b.n	8005ada <_malloc_r+0x4a>
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	42a3      	cmp	r3, r4
 8005b72:	d1fb      	bne.n	8005b6c <_malloc_r+0xdc>
 8005b74:	2300      	movs	r3, #0
 8005b76:	6053      	str	r3, [r2, #4]
 8005b78:	e7de      	b.n	8005b38 <_malloc_r+0xa8>
 8005b7a:	230c      	movs	r3, #12
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	6033      	str	r3, [r6, #0]
 8005b80:	f000 f80c 	bl	8005b9c <__malloc_unlock>
 8005b84:	e794      	b.n	8005ab0 <_malloc_r+0x20>
 8005b86:	6005      	str	r5, [r0, #0]
 8005b88:	e7d6      	b.n	8005b38 <_malloc_r+0xa8>
 8005b8a:	bf00      	nop
 8005b8c:	20000750 	.word	0x20000750

08005b90 <__malloc_lock>:
 8005b90:	4801      	ldr	r0, [pc, #4]	@ (8005b98 <__malloc_lock+0x8>)
 8005b92:	f7ff bf10 	b.w	80059b6 <__retarget_lock_acquire_recursive>
 8005b96:	bf00      	nop
 8005b98:	20000748 	.word	0x20000748

08005b9c <__malloc_unlock>:
 8005b9c:	4801      	ldr	r0, [pc, #4]	@ (8005ba4 <__malloc_unlock+0x8>)
 8005b9e:	f7ff bf0b 	b.w	80059b8 <__retarget_lock_release_recursive>
 8005ba2:	bf00      	nop
 8005ba4:	20000748 	.word	0x20000748

08005ba8 <__ssputs_r>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	461f      	mov	r7, r3
 8005bae:	688e      	ldr	r6, [r1, #8]
 8005bb0:	4682      	mov	sl, r0
 8005bb2:	42be      	cmp	r6, r7
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	4690      	mov	r8, r2
 8005bb8:	680b      	ldr	r3, [r1, #0]
 8005bba:	d82d      	bhi.n	8005c18 <__ssputs_r+0x70>
 8005bbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005bc0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005bc4:	d026      	beq.n	8005c14 <__ssputs_r+0x6c>
 8005bc6:	6965      	ldr	r5, [r4, #20]
 8005bc8:	6909      	ldr	r1, [r1, #16]
 8005bca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005bce:	eba3 0901 	sub.w	r9, r3, r1
 8005bd2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005bd6:	1c7b      	adds	r3, r7, #1
 8005bd8:	444b      	add	r3, r9
 8005bda:	106d      	asrs	r5, r5, #1
 8005bdc:	429d      	cmp	r5, r3
 8005bde:	bf38      	it	cc
 8005be0:	461d      	movcc	r5, r3
 8005be2:	0553      	lsls	r3, r2, #21
 8005be4:	d527      	bpl.n	8005c36 <__ssputs_r+0x8e>
 8005be6:	4629      	mov	r1, r5
 8005be8:	f7ff ff52 	bl	8005a90 <_malloc_r>
 8005bec:	4606      	mov	r6, r0
 8005bee:	b360      	cbz	r0, 8005c4a <__ssputs_r+0xa2>
 8005bf0:	464a      	mov	r2, r9
 8005bf2:	6921      	ldr	r1, [r4, #16]
 8005bf4:	f000 fcce 	bl	8006594 <memcpy>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c02:	81a3      	strh	r3, [r4, #12]
 8005c04:	6126      	str	r6, [r4, #16]
 8005c06:	444e      	add	r6, r9
 8005c08:	6026      	str	r6, [r4, #0]
 8005c0a:	463e      	mov	r6, r7
 8005c0c:	6165      	str	r5, [r4, #20]
 8005c0e:	eba5 0509 	sub.w	r5, r5, r9
 8005c12:	60a5      	str	r5, [r4, #8]
 8005c14:	42be      	cmp	r6, r7
 8005c16:	d900      	bls.n	8005c1a <__ssputs_r+0x72>
 8005c18:	463e      	mov	r6, r7
 8005c1a:	4632      	mov	r2, r6
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	6820      	ldr	r0, [r4, #0]
 8005c20:	f000 fc80 	bl	8006524 <memmove>
 8005c24:	2000      	movs	r0, #0
 8005c26:	68a3      	ldr	r3, [r4, #8]
 8005c28:	1b9b      	subs	r3, r3, r6
 8005c2a:	60a3      	str	r3, [r4, #8]
 8005c2c:	6823      	ldr	r3, [r4, #0]
 8005c2e:	4433      	add	r3, r6
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c36:	462a      	mov	r2, r5
 8005c38:	f000 fcba 	bl	80065b0 <_realloc_r>
 8005c3c:	4606      	mov	r6, r0
 8005c3e:	2800      	cmp	r0, #0
 8005c40:	d1e0      	bne.n	8005c04 <__ssputs_r+0x5c>
 8005c42:	4650      	mov	r0, sl
 8005c44:	6921      	ldr	r1, [r4, #16]
 8005c46:	f7ff feb9 	bl	80059bc <_free_r>
 8005c4a:	230c      	movs	r3, #12
 8005c4c:	f8ca 3000 	str.w	r3, [sl]
 8005c50:	89a3      	ldrh	r3, [r4, #12]
 8005c52:	f04f 30ff 	mov.w	r0, #4294967295
 8005c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5a:	81a3      	strh	r3, [r4, #12]
 8005c5c:	e7e9      	b.n	8005c32 <__ssputs_r+0x8a>
	...

08005c60 <_svfiprintf_r>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4698      	mov	r8, r3
 8005c66:	898b      	ldrh	r3, [r1, #12]
 8005c68:	4607      	mov	r7, r0
 8005c6a:	061b      	lsls	r3, r3, #24
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	4614      	mov	r4, r2
 8005c70:	b09d      	sub	sp, #116	@ 0x74
 8005c72:	d510      	bpl.n	8005c96 <_svfiprintf_r+0x36>
 8005c74:	690b      	ldr	r3, [r1, #16]
 8005c76:	b973      	cbnz	r3, 8005c96 <_svfiprintf_r+0x36>
 8005c78:	2140      	movs	r1, #64	@ 0x40
 8005c7a:	f7ff ff09 	bl	8005a90 <_malloc_r>
 8005c7e:	6028      	str	r0, [r5, #0]
 8005c80:	6128      	str	r0, [r5, #16]
 8005c82:	b930      	cbnz	r0, 8005c92 <_svfiprintf_r+0x32>
 8005c84:	230c      	movs	r3, #12
 8005c86:	603b      	str	r3, [r7, #0]
 8005c88:	f04f 30ff 	mov.w	r0, #4294967295
 8005c8c:	b01d      	add	sp, #116	@ 0x74
 8005c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c92:	2340      	movs	r3, #64	@ 0x40
 8005c94:	616b      	str	r3, [r5, #20]
 8005c96:	2300      	movs	r3, #0
 8005c98:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c9a:	2320      	movs	r3, #32
 8005c9c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ca0:	2330      	movs	r3, #48	@ 0x30
 8005ca2:	f04f 0901 	mov.w	r9, #1
 8005ca6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005caa:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8005e44 <_svfiprintf_r+0x1e4>
 8005cae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005cb2:	4623      	mov	r3, r4
 8005cb4:	469a      	mov	sl, r3
 8005cb6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005cba:	b10a      	cbz	r2, 8005cc0 <_svfiprintf_r+0x60>
 8005cbc:	2a25      	cmp	r2, #37	@ 0x25
 8005cbe:	d1f9      	bne.n	8005cb4 <_svfiprintf_r+0x54>
 8005cc0:	ebba 0b04 	subs.w	fp, sl, r4
 8005cc4:	d00b      	beq.n	8005cde <_svfiprintf_r+0x7e>
 8005cc6:	465b      	mov	r3, fp
 8005cc8:	4622      	mov	r2, r4
 8005cca:	4629      	mov	r1, r5
 8005ccc:	4638      	mov	r0, r7
 8005cce:	f7ff ff6b 	bl	8005ba8 <__ssputs_r>
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	f000 80a7 	beq.w	8005e26 <_svfiprintf_r+0x1c6>
 8005cd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cda:	445a      	add	r2, fp
 8005cdc:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cde:	f89a 3000 	ldrb.w	r3, [sl]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 809f 	beq.w	8005e26 <_svfiprintf_r+0x1c6>
 8005ce8:	2300      	movs	r3, #0
 8005cea:	f04f 32ff 	mov.w	r2, #4294967295
 8005cee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cf2:	f10a 0a01 	add.w	sl, sl, #1
 8005cf6:	9304      	str	r3, [sp, #16]
 8005cf8:	9307      	str	r3, [sp, #28]
 8005cfa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005cfe:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d00:	4654      	mov	r4, sl
 8005d02:	2205      	movs	r2, #5
 8005d04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d08:	484e      	ldr	r0, [pc, #312]	@ (8005e44 <_svfiprintf_r+0x1e4>)
 8005d0a:	f000 fc35 	bl	8006578 <memchr>
 8005d0e:	9a04      	ldr	r2, [sp, #16]
 8005d10:	b9d8      	cbnz	r0, 8005d4a <_svfiprintf_r+0xea>
 8005d12:	06d0      	lsls	r0, r2, #27
 8005d14:	bf44      	itt	mi
 8005d16:	2320      	movmi	r3, #32
 8005d18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d1c:	0711      	lsls	r1, r2, #28
 8005d1e:	bf44      	itt	mi
 8005d20:	232b      	movmi	r3, #43	@ 0x2b
 8005d22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d26:	f89a 3000 	ldrb.w	r3, [sl]
 8005d2a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d2c:	d015      	beq.n	8005d5a <_svfiprintf_r+0xfa>
 8005d2e:	4654      	mov	r4, sl
 8005d30:	2000      	movs	r0, #0
 8005d32:	f04f 0c0a 	mov.w	ip, #10
 8005d36:	9a07      	ldr	r2, [sp, #28]
 8005d38:	4621      	mov	r1, r4
 8005d3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d3e:	3b30      	subs	r3, #48	@ 0x30
 8005d40:	2b09      	cmp	r3, #9
 8005d42:	d94b      	bls.n	8005ddc <_svfiprintf_r+0x17c>
 8005d44:	b1b0      	cbz	r0, 8005d74 <_svfiprintf_r+0x114>
 8005d46:	9207      	str	r2, [sp, #28]
 8005d48:	e014      	b.n	8005d74 <_svfiprintf_r+0x114>
 8005d4a:	eba0 0308 	sub.w	r3, r0, r8
 8005d4e:	fa09 f303 	lsl.w	r3, r9, r3
 8005d52:	4313      	orrs	r3, r2
 8005d54:	46a2      	mov	sl, r4
 8005d56:	9304      	str	r3, [sp, #16]
 8005d58:	e7d2      	b.n	8005d00 <_svfiprintf_r+0xa0>
 8005d5a:	9b03      	ldr	r3, [sp, #12]
 8005d5c:	1d19      	adds	r1, r3, #4
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	9103      	str	r1, [sp, #12]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	bfbb      	ittet	lt
 8005d66:	425b      	neglt	r3, r3
 8005d68:	f042 0202 	orrlt.w	r2, r2, #2
 8005d6c:	9307      	strge	r3, [sp, #28]
 8005d6e:	9307      	strlt	r3, [sp, #28]
 8005d70:	bfb8      	it	lt
 8005d72:	9204      	strlt	r2, [sp, #16]
 8005d74:	7823      	ldrb	r3, [r4, #0]
 8005d76:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d78:	d10a      	bne.n	8005d90 <_svfiprintf_r+0x130>
 8005d7a:	7863      	ldrb	r3, [r4, #1]
 8005d7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d7e:	d132      	bne.n	8005de6 <_svfiprintf_r+0x186>
 8005d80:	9b03      	ldr	r3, [sp, #12]
 8005d82:	3402      	adds	r4, #2
 8005d84:	1d1a      	adds	r2, r3, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	9203      	str	r2, [sp, #12]
 8005d8a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d8e:	9305      	str	r3, [sp, #20]
 8005d90:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8005e48 <_svfiprintf_r+0x1e8>
 8005d94:	2203      	movs	r2, #3
 8005d96:	4650      	mov	r0, sl
 8005d98:	7821      	ldrb	r1, [r4, #0]
 8005d9a:	f000 fbed 	bl	8006578 <memchr>
 8005d9e:	b138      	cbz	r0, 8005db0 <_svfiprintf_r+0x150>
 8005da0:	2240      	movs	r2, #64	@ 0x40
 8005da2:	9b04      	ldr	r3, [sp, #16]
 8005da4:	eba0 000a 	sub.w	r0, r0, sl
 8005da8:	4082      	lsls	r2, r0
 8005daa:	4313      	orrs	r3, r2
 8005dac:	3401      	adds	r4, #1
 8005dae:	9304      	str	r3, [sp, #16]
 8005db0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005db4:	2206      	movs	r2, #6
 8005db6:	4825      	ldr	r0, [pc, #148]	@ (8005e4c <_svfiprintf_r+0x1ec>)
 8005db8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005dbc:	f000 fbdc 	bl	8006578 <memchr>
 8005dc0:	2800      	cmp	r0, #0
 8005dc2:	d036      	beq.n	8005e32 <_svfiprintf_r+0x1d2>
 8005dc4:	4b22      	ldr	r3, [pc, #136]	@ (8005e50 <_svfiprintf_r+0x1f0>)
 8005dc6:	bb1b      	cbnz	r3, 8005e10 <_svfiprintf_r+0x1b0>
 8005dc8:	9b03      	ldr	r3, [sp, #12]
 8005dca:	3307      	adds	r3, #7
 8005dcc:	f023 0307 	bic.w	r3, r3, #7
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	9303      	str	r3, [sp, #12]
 8005dd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd6:	4433      	add	r3, r6
 8005dd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dda:	e76a      	b.n	8005cb2 <_svfiprintf_r+0x52>
 8005ddc:	460c      	mov	r4, r1
 8005dde:	2001      	movs	r0, #1
 8005de0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005de4:	e7a8      	b.n	8005d38 <_svfiprintf_r+0xd8>
 8005de6:	2300      	movs	r3, #0
 8005de8:	f04f 0c0a 	mov.w	ip, #10
 8005dec:	4619      	mov	r1, r3
 8005dee:	3401      	adds	r4, #1
 8005df0:	9305      	str	r3, [sp, #20]
 8005df2:	4620      	mov	r0, r4
 8005df4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005df8:	3a30      	subs	r2, #48	@ 0x30
 8005dfa:	2a09      	cmp	r2, #9
 8005dfc:	d903      	bls.n	8005e06 <_svfiprintf_r+0x1a6>
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d0c6      	beq.n	8005d90 <_svfiprintf_r+0x130>
 8005e02:	9105      	str	r1, [sp, #20]
 8005e04:	e7c4      	b.n	8005d90 <_svfiprintf_r+0x130>
 8005e06:	4604      	mov	r4, r0
 8005e08:	2301      	movs	r3, #1
 8005e0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e0e:	e7f0      	b.n	8005df2 <_svfiprintf_r+0x192>
 8005e10:	ab03      	add	r3, sp, #12
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	462a      	mov	r2, r5
 8005e16:	4638      	mov	r0, r7
 8005e18:	4b0e      	ldr	r3, [pc, #56]	@ (8005e54 <_svfiprintf_r+0x1f4>)
 8005e1a:	a904      	add	r1, sp, #16
 8005e1c:	f3af 8000 	nop.w
 8005e20:	1c42      	adds	r2, r0, #1
 8005e22:	4606      	mov	r6, r0
 8005e24:	d1d6      	bne.n	8005dd4 <_svfiprintf_r+0x174>
 8005e26:	89ab      	ldrh	r3, [r5, #12]
 8005e28:	065b      	lsls	r3, r3, #25
 8005e2a:	f53f af2d 	bmi.w	8005c88 <_svfiprintf_r+0x28>
 8005e2e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e30:	e72c      	b.n	8005c8c <_svfiprintf_r+0x2c>
 8005e32:	ab03      	add	r3, sp, #12
 8005e34:	9300      	str	r3, [sp, #0]
 8005e36:	462a      	mov	r2, r5
 8005e38:	4638      	mov	r0, r7
 8005e3a:	4b06      	ldr	r3, [pc, #24]	@ (8005e54 <_svfiprintf_r+0x1f4>)
 8005e3c:	a904      	add	r1, sp, #16
 8005e3e:	f000 f9bd 	bl	80061bc <_printf_i>
 8005e42:	e7ed      	b.n	8005e20 <_svfiprintf_r+0x1c0>
 8005e44:	08006fd7 	.word	0x08006fd7
 8005e48:	08006fdd 	.word	0x08006fdd
 8005e4c:	08006fe1 	.word	0x08006fe1
 8005e50:	00000000 	.word	0x00000000
 8005e54:	08005ba9 	.word	0x08005ba9

08005e58 <__sfputc_r>:
 8005e58:	6893      	ldr	r3, [r2, #8]
 8005e5a:	b410      	push	{r4}
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	6093      	str	r3, [r2, #8]
 8005e62:	da07      	bge.n	8005e74 <__sfputc_r+0x1c>
 8005e64:	6994      	ldr	r4, [r2, #24]
 8005e66:	42a3      	cmp	r3, r4
 8005e68:	db01      	blt.n	8005e6e <__sfputc_r+0x16>
 8005e6a:	290a      	cmp	r1, #10
 8005e6c:	d102      	bne.n	8005e74 <__sfputc_r+0x1c>
 8005e6e:	bc10      	pop	{r4}
 8005e70:	f000 bac4 	b.w	80063fc <__swbuf_r>
 8005e74:	6813      	ldr	r3, [r2, #0]
 8005e76:	1c58      	adds	r0, r3, #1
 8005e78:	6010      	str	r0, [r2, #0]
 8005e7a:	7019      	strb	r1, [r3, #0]
 8005e7c:	4608      	mov	r0, r1
 8005e7e:	bc10      	pop	{r4}
 8005e80:	4770      	bx	lr

08005e82 <__sfputs_r>:
 8005e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	18d5      	adds	r5, r2, r3
 8005e8c:	42ac      	cmp	r4, r5
 8005e8e:	d101      	bne.n	8005e94 <__sfputs_r+0x12>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e007      	b.n	8005ea4 <__sfputs_r+0x22>
 8005e94:	463a      	mov	r2, r7
 8005e96:	4630      	mov	r0, r6
 8005e98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e9c:	f7ff ffdc 	bl	8005e58 <__sfputc_r>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d1f3      	bne.n	8005e8c <__sfputs_r+0xa>
 8005ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea8 <_vfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	460d      	mov	r5, r1
 8005eae:	4614      	mov	r4, r2
 8005eb0:	4698      	mov	r8, r3
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	b09d      	sub	sp, #116	@ 0x74
 8005eb6:	b118      	cbz	r0, 8005ec0 <_vfiprintf_r+0x18>
 8005eb8:	6a03      	ldr	r3, [r0, #32]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x18>
 8005ebc:	f7ff fc22 	bl	8005704 <__sinit>
 8005ec0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_vfiprintf_r+0x2a>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_vfiprintf_r+0x2a>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ece:	f7ff fd72 	bl	80059b6 <__retarget_lock_acquire_recursive>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	071b      	lsls	r3, r3, #28
 8005ed6:	d501      	bpl.n	8005edc <_vfiprintf_r+0x34>
 8005ed8:	692b      	ldr	r3, [r5, #16]
 8005eda:	b99b      	cbnz	r3, 8005f04 <_vfiprintf_r+0x5c>
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f000 faca 	bl	8006478 <__swsetup_r>
 8005ee4:	b170      	cbz	r0, 8005f04 <_vfiprintf_r+0x5c>
 8005ee6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ee8:	07dc      	lsls	r4, r3, #31
 8005eea:	d504      	bpl.n	8005ef6 <_vfiprintf_r+0x4e>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	b01d      	add	sp, #116	@ 0x74
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	0598      	lsls	r0, r3, #22
 8005efa:	d4f7      	bmi.n	8005eec <_vfiprintf_r+0x44>
 8005efc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005efe:	f7ff fd5b 	bl	80059b8 <__retarget_lock_release_recursive>
 8005f02:	e7f3      	b.n	8005eec <_vfiprintf_r+0x44>
 8005f04:	2300      	movs	r3, #0
 8005f06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f0e:	2330      	movs	r3, #48	@ 0x30
 8005f10:	f04f 0901 	mov.w	r9, #1
 8005f14:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f18:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80060c4 <_vfiprintf_r+0x21c>
 8005f1c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f20:	4623      	mov	r3, r4
 8005f22:	469a      	mov	sl, r3
 8005f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f28:	b10a      	cbz	r2, 8005f2e <_vfiprintf_r+0x86>
 8005f2a:	2a25      	cmp	r2, #37	@ 0x25
 8005f2c:	d1f9      	bne.n	8005f22 <_vfiprintf_r+0x7a>
 8005f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f32:	d00b      	beq.n	8005f4c <_vfiprintf_r+0xa4>
 8005f34:	465b      	mov	r3, fp
 8005f36:	4622      	mov	r2, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ffa1 	bl	8005e82 <__sfputs_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	f000 80a7 	beq.w	8006094 <_vfiprintf_r+0x1ec>
 8005f46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f48:	445a      	add	r2, fp
 8005f4a:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 809f 	beq.w	8006094 <_vfiprintf_r+0x1ec>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f60:	f10a 0a01 	add.w	sl, sl, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f6c:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f6e:	4654      	mov	r4, sl
 8005f70:	2205      	movs	r2, #5
 8005f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f76:	4853      	ldr	r0, [pc, #332]	@ (80060c4 <_vfiprintf_r+0x21c>)
 8005f78:	f000 fafe 	bl	8006578 <memchr>
 8005f7c:	9a04      	ldr	r2, [sp, #16]
 8005f7e:	b9d8      	cbnz	r0, 8005fb8 <_vfiprintf_r+0x110>
 8005f80:	06d1      	lsls	r1, r2, #27
 8005f82:	bf44      	itt	mi
 8005f84:	2320      	movmi	r3, #32
 8005f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f8a:	0713      	lsls	r3, r2, #28
 8005f8c:	bf44      	itt	mi
 8005f8e:	232b      	movmi	r3, #43	@ 0x2b
 8005f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f94:	f89a 3000 	ldrb.w	r3, [sl]
 8005f98:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f9a:	d015      	beq.n	8005fc8 <_vfiprintf_r+0x120>
 8005f9c:	4654      	mov	r4, sl
 8005f9e:	2000      	movs	r0, #0
 8005fa0:	f04f 0c0a 	mov.w	ip, #10
 8005fa4:	9a07      	ldr	r2, [sp, #28]
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fac:	3b30      	subs	r3, #48	@ 0x30
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d94b      	bls.n	800604a <_vfiprintf_r+0x1a2>
 8005fb2:	b1b0      	cbz	r0, 8005fe2 <_vfiprintf_r+0x13a>
 8005fb4:	9207      	str	r2, [sp, #28]
 8005fb6:	e014      	b.n	8005fe2 <_vfiprintf_r+0x13a>
 8005fb8:	eba0 0308 	sub.w	r3, r0, r8
 8005fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	46a2      	mov	sl, r4
 8005fc4:	9304      	str	r3, [sp, #16]
 8005fc6:	e7d2      	b.n	8005f6e <_vfiprintf_r+0xc6>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d19      	adds	r1, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9103      	str	r1, [sp, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfbb      	ittet	lt
 8005fd4:	425b      	neglt	r3, r3
 8005fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8005fda:	9307      	strge	r3, [sp, #28]
 8005fdc:	9307      	strlt	r3, [sp, #28]
 8005fde:	bfb8      	it	lt
 8005fe0:	9204      	strlt	r2, [sp, #16]
 8005fe2:	7823      	ldrb	r3, [r4, #0]
 8005fe4:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fe6:	d10a      	bne.n	8005ffe <_vfiprintf_r+0x156>
 8005fe8:	7863      	ldrb	r3, [r4, #1]
 8005fea:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fec:	d132      	bne.n	8006054 <_vfiprintf_r+0x1ac>
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	3402      	adds	r4, #2
 8005ff2:	1d1a      	adds	r2, r3, #4
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	9203      	str	r2, [sp, #12]
 8005ff8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ffc:	9305      	str	r3, [sp, #20]
 8005ffe:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80060c8 <_vfiprintf_r+0x220>
 8006002:	2203      	movs	r2, #3
 8006004:	4650      	mov	r0, sl
 8006006:	7821      	ldrb	r1, [r4, #0]
 8006008:	f000 fab6 	bl	8006578 <memchr>
 800600c:	b138      	cbz	r0, 800601e <_vfiprintf_r+0x176>
 800600e:	2240      	movs	r2, #64	@ 0x40
 8006010:	9b04      	ldr	r3, [sp, #16]
 8006012:	eba0 000a 	sub.w	r0, r0, sl
 8006016:	4082      	lsls	r2, r0
 8006018:	4313      	orrs	r3, r2
 800601a:	3401      	adds	r4, #1
 800601c:	9304      	str	r3, [sp, #16]
 800601e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006022:	2206      	movs	r2, #6
 8006024:	4829      	ldr	r0, [pc, #164]	@ (80060cc <_vfiprintf_r+0x224>)
 8006026:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800602a:	f000 faa5 	bl	8006578 <memchr>
 800602e:	2800      	cmp	r0, #0
 8006030:	d03f      	beq.n	80060b2 <_vfiprintf_r+0x20a>
 8006032:	4b27      	ldr	r3, [pc, #156]	@ (80060d0 <_vfiprintf_r+0x228>)
 8006034:	bb1b      	cbnz	r3, 800607e <_vfiprintf_r+0x1d6>
 8006036:	9b03      	ldr	r3, [sp, #12]
 8006038:	3307      	adds	r3, #7
 800603a:	f023 0307 	bic.w	r3, r3, #7
 800603e:	3308      	adds	r3, #8
 8006040:	9303      	str	r3, [sp, #12]
 8006042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006044:	443b      	add	r3, r7
 8006046:	9309      	str	r3, [sp, #36]	@ 0x24
 8006048:	e76a      	b.n	8005f20 <_vfiprintf_r+0x78>
 800604a:	460c      	mov	r4, r1
 800604c:	2001      	movs	r0, #1
 800604e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006052:	e7a8      	b.n	8005fa6 <_vfiprintf_r+0xfe>
 8006054:	2300      	movs	r3, #0
 8006056:	f04f 0c0a 	mov.w	ip, #10
 800605a:	4619      	mov	r1, r3
 800605c:	3401      	adds	r4, #1
 800605e:	9305      	str	r3, [sp, #20]
 8006060:	4620      	mov	r0, r4
 8006062:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006066:	3a30      	subs	r2, #48	@ 0x30
 8006068:	2a09      	cmp	r2, #9
 800606a:	d903      	bls.n	8006074 <_vfiprintf_r+0x1cc>
 800606c:	2b00      	cmp	r3, #0
 800606e:	d0c6      	beq.n	8005ffe <_vfiprintf_r+0x156>
 8006070:	9105      	str	r1, [sp, #20]
 8006072:	e7c4      	b.n	8005ffe <_vfiprintf_r+0x156>
 8006074:	4604      	mov	r4, r0
 8006076:	2301      	movs	r3, #1
 8006078:	fb0c 2101 	mla	r1, ip, r1, r2
 800607c:	e7f0      	b.n	8006060 <_vfiprintf_r+0x1b8>
 800607e:	ab03      	add	r3, sp, #12
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	462a      	mov	r2, r5
 8006084:	4630      	mov	r0, r6
 8006086:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <_vfiprintf_r+0x22c>)
 8006088:	a904      	add	r1, sp, #16
 800608a:	f3af 8000 	nop.w
 800608e:	4607      	mov	r7, r0
 8006090:	1c78      	adds	r0, r7, #1
 8006092:	d1d6      	bne.n	8006042 <_vfiprintf_r+0x19a>
 8006094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006096:	07d9      	lsls	r1, r3, #31
 8006098:	d405      	bmi.n	80060a6 <_vfiprintf_r+0x1fe>
 800609a:	89ab      	ldrh	r3, [r5, #12]
 800609c:	059a      	lsls	r2, r3, #22
 800609e:	d402      	bmi.n	80060a6 <_vfiprintf_r+0x1fe>
 80060a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80060a2:	f7ff fc89 	bl	80059b8 <__retarget_lock_release_recursive>
 80060a6:	89ab      	ldrh	r3, [r5, #12]
 80060a8:	065b      	lsls	r3, r3, #25
 80060aa:	f53f af1f 	bmi.w	8005eec <_vfiprintf_r+0x44>
 80060ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80060b0:	e71e      	b.n	8005ef0 <_vfiprintf_r+0x48>
 80060b2:	ab03      	add	r3, sp, #12
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	462a      	mov	r2, r5
 80060b8:	4630      	mov	r0, r6
 80060ba:	4b06      	ldr	r3, [pc, #24]	@ (80060d4 <_vfiprintf_r+0x22c>)
 80060bc:	a904      	add	r1, sp, #16
 80060be:	f000 f87d 	bl	80061bc <_printf_i>
 80060c2:	e7e4      	b.n	800608e <_vfiprintf_r+0x1e6>
 80060c4:	08006fd7 	.word	0x08006fd7
 80060c8:	08006fdd 	.word	0x08006fdd
 80060cc:	08006fe1 	.word	0x08006fe1
 80060d0:	00000000 	.word	0x00000000
 80060d4:	08005e83 	.word	0x08005e83

080060d8 <_printf_common>:
 80060d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060dc:	4616      	mov	r6, r2
 80060de:	4698      	mov	r8, r3
 80060e0:	688a      	ldr	r2, [r1, #8]
 80060e2:	690b      	ldr	r3, [r1, #16]
 80060e4:	4607      	mov	r7, r0
 80060e6:	4293      	cmp	r3, r2
 80060e8:	bfb8      	it	lt
 80060ea:	4613      	movlt	r3, r2
 80060ec:	6033      	str	r3, [r6, #0]
 80060ee:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80060f2:	460c      	mov	r4, r1
 80060f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80060f8:	b10a      	cbz	r2, 80060fe <_printf_common+0x26>
 80060fa:	3301      	adds	r3, #1
 80060fc:	6033      	str	r3, [r6, #0]
 80060fe:	6823      	ldr	r3, [r4, #0]
 8006100:	0699      	lsls	r1, r3, #26
 8006102:	bf42      	ittt	mi
 8006104:	6833      	ldrmi	r3, [r6, #0]
 8006106:	3302      	addmi	r3, #2
 8006108:	6033      	strmi	r3, [r6, #0]
 800610a:	6825      	ldr	r5, [r4, #0]
 800610c:	f015 0506 	ands.w	r5, r5, #6
 8006110:	d106      	bne.n	8006120 <_printf_common+0x48>
 8006112:	f104 0a19 	add.w	sl, r4, #25
 8006116:	68e3      	ldr	r3, [r4, #12]
 8006118:	6832      	ldr	r2, [r6, #0]
 800611a:	1a9b      	subs	r3, r3, r2
 800611c:	42ab      	cmp	r3, r5
 800611e:	dc2b      	bgt.n	8006178 <_printf_common+0xa0>
 8006120:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006124:	6822      	ldr	r2, [r4, #0]
 8006126:	3b00      	subs	r3, #0
 8006128:	bf18      	it	ne
 800612a:	2301      	movne	r3, #1
 800612c:	0692      	lsls	r2, r2, #26
 800612e:	d430      	bmi.n	8006192 <_printf_common+0xba>
 8006130:	4641      	mov	r1, r8
 8006132:	4638      	mov	r0, r7
 8006134:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006138:	47c8      	blx	r9
 800613a:	3001      	adds	r0, #1
 800613c:	d023      	beq.n	8006186 <_printf_common+0xae>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	6922      	ldr	r2, [r4, #16]
 8006142:	f003 0306 	and.w	r3, r3, #6
 8006146:	2b04      	cmp	r3, #4
 8006148:	bf14      	ite	ne
 800614a:	2500      	movne	r5, #0
 800614c:	6833      	ldreq	r3, [r6, #0]
 800614e:	f04f 0600 	mov.w	r6, #0
 8006152:	bf08      	it	eq
 8006154:	68e5      	ldreq	r5, [r4, #12]
 8006156:	f104 041a 	add.w	r4, r4, #26
 800615a:	bf08      	it	eq
 800615c:	1aed      	subeq	r5, r5, r3
 800615e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006162:	bf08      	it	eq
 8006164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006168:	4293      	cmp	r3, r2
 800616a:	bfc4      	itt	gt
 800616c:	1a9b      	subgt	r3, r3, r2
 800616e:	18ed      	addgt	r5, r5, r3
 8006170:	42b5      	cmp	r5, r6
 8006172:	d11a      	bne.n	80061aa <_printf_common+0xd2>
 8006174:	2000      	movs	r0, #0
 8006176:	e008      	b.n	800618a <_printf_common+0xb2>
 8006178:	2301      	movs	r3, #1
 800617a:	4652      	mov	r2, sl
 800617c:	4641      	mov	r1, r8
 800617e:	4638      	mov	r0, r7
 8006180:	47c8      	blx	r9
 8006182:	3001      	adds	r0, #1
 8006184:	d103      	bne.n	800618e <_printf_common+0xb6>
 8006186:	f04f 30ff 	mov.w	r0, #4294967295
 800618a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800618e:	3501      	adds	r5, #1
 8006190:	e7c1      	b.n	8006116 <_printf_common+0x3e>
 8006192:	2030      	movs	r0, #48	@ 0x30
 8006194:	18e1      	adds	r1, r4, r3
 8006196:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061a0:	4422      	add	r2, r4
 80061a2:	3302      	adds	r3, #2
 80061a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061a8:	e7c2      	b.n	8006130 <_printf_common+0x58>
 80061aa:	2301      	movs	r3, #1
 80061ac:	4622      	mov	r2, r4
 80061ae:	4641      	mov	r1, r8
 80061b0:	4638      	mov	r0, r7
 80061b2:	47c8      	blx	r9
 80061b4:	3001      	adds	r0, #1
 80061b6:	d0e6      	beq.n	8006186 <_printf_common+0xae>
 80061b8:	3601      	adds	r6, #1
 80061ba:	e7d9      	b.n	8006170 <_printf_common+0x98>

080061bc <_printf_i>:
 80061bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061c0:	7e0f      	ldrb	r7, [r1, #24]
 80061c2:	4691      	mov	r9, r2
 80061c4:	2f78      	cmp	r7, #120	@ 0x78
 80061c6:	4680      	mov	r8, r0
 80061c8:	460c      	mov	r4, r1
 80061ca:	469a      	mov	sl, r3
 80061cc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80061ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80061d2:	d807      	bhi.n	80061e4 <_printf_i+0x28>
 80061d4:	2f62      	cmp	r7, #98	@ 0x62
 80061d6:	d80a      	bhi.n	80061ee <_printf_i+0x32>
 80061d8:	2f00      	cmp	r7, #0
 80061da:	f000 80d3 	beq.w	8006384 <_printf_i+0x1c8>
 80061de:	2f58      	cmp	r7, #88	@ 0x58
 80061e0:	f000 80ba 	beq.w	8006358 <_printf_i+0x19c>
 80061e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80061e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80061ec:	e03a      	b.n	8006264 <_printf_i+0xa8>
 80061ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80061f2:	2b15      	cmp	r3, #21
 80061f4:	d8f6      	bhi.n	80061e4 <_printf_i+0x28>
 80061f6:	a101      	add	r1, pc, #4	@ (adr r1, 80061fc <_printf_i+0x40>)
 80061f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061fc:	08006255 	.word	0x08006255
 8006200:	08006269 	.word	0x08006269
 8006204:	080061e5 	.word	0x080061e5
 8006208:	080061e5 	.word	0x080061e5
 800620c:	080061e5 	.word	0x080061e5
 8006210:	080061e5 	.word	0x080061e5
 8006214:	08006269 	.word	0x08006269
 8006218:	080061e5 	.word	0x080061e5
 800621c:	080061e5 	.word	0x080061e5
 8006220:	080061e5 	.word	0x080061e5
 8006224:	080061e5 	.word	0x080061e5
 8006228:	0800636b 	.word	0x0800636b
 800622c:	08006293 	.word	0x08006293
 8006230:	08006325 	.word	0x08006325
 8006234:	080061e5 	.word	0x080061e5
 8006238:	080061e5 	.word	0x080061e5
 800623c:	0800638d 	.word	0x0800638d
 8006240:	080061e5 	.word	0x080061e5
 8006244:	08006293 	.word	0x08006293
 8006248:	080061e5 	.word	0x080061e5
 800624c:	080061e5 	.word	0x080061e5
 8006250:	0800632d 	.word	0x0800632d
 8006254:	6833      	ldr	r3, [r6, #0]
 8006256:	1d1a      	adds	r2, r3, #4
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	6032      	str	r2, [r6, #0]
 800625c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006260:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006264:	2301      	movs	r3, #1
 8006266:	e09e      	b.n	80063a6 <_printf_i+0x1ea>
 8006268:	6833      	ldr	r3, [r6, #0]
 800626a:	6820      	ldr	r0, [r4, #0]
 800626c:	1d19      	adds	r1, r3, #4
 800626e:	6031      	str	r1, [r6, #0]
 8006270:	0606      	lsls	r6, r0, #24
 8006272:	d501      	bpl.n	8006278 <_printf_i+0xbc>
 8006274:	681d      	ldr	r5, [r3, #0]
 8006276:	e003      	b.n	8006280 <_printf_i+0xc4>
 8006278:	0645      	lsls	r5, r0, #25
 800627a:	d5fb      	bpl.n	8006274 <_printf_i+0xb8>
 800627c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006280:	2d00      	cmp	r5, #0
 8006282:	da03      	bge.n	800628c <_printf_i+0xd0>
 8006284:	232d      	movs	r3, #45	@ 0x2d
 8006286:	426d      	negs	r5, r5
 8006288:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800628c:	230a      	movs	r3, #10
 800628e:	4859      	ldr	r0, [pc, #356]	@ (80063f4 <_printf_i+0x238>)
 8006290:	e011      	b.n	80062b6 <_printf_i+0xfa>
 8006292:	6821      	ldr	r1, [r4, #0]
 8006294:	6833      	ldr	r3, [r6, #0]
 8006296:	0608      	lsls	r0, r1, #24
 8006298:	f853 5b04 	ldr.w	r5, [r3], #4
 800629c:	d402      	bmi.n	80062a4 <_printf_i+0xe8>
 800629e:	0649      	lsls	r1, r1, #25
 80062a0:	bf48      	it	mi
 80062a2:	b2ad      	uxthmi	r5, r5
 80062a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80062a6:	6033      	str	r3, [r6, #0]
 80062a8:	bf14      	ite	ne
 80062aa:	230a      	movne	r3, #10
 80062ac:	2308      	moveq	r3, #8
 80062ae:	4851      	ldr	r0, [pc, #324]	@ (80063f4 <_printf_i+0x238>)
 80062b0:	2100      	movs	r1, #0
 80062b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80062b6:	6866      	ldr	r6, [r4, #4]
 80062b8:	2e00      	cmp	r6, #0
 80062ba:	bfa8      	it	ge
 80062bc:	6821      	ldrge	r1, [r4, #0]
 80062be:	60a6      	str	r6, [r4, #8]
 80062c0:	bfa4      	itt	ge
 80062c2:	f021 0104 	bicge.w	r1, r1, #4
 80062c6:	6021      	strge	r1, [r4, #0]
 80062c8:	b90d      	cbnz	r5, 80062ce <_printf_i+0x112>
 80062ca:	2e00      	cmp	r6, #0
 80062cc:	d04b      	beq.n	8006366 <_printf_i+0x1aa>
 80062ce:	4616      	mov	r6, r2
 80062d0:	fbb5 f1f3 	udiv	r1, r5, r3
 80062d4:	fb03 5711 	mls	r7, r3, r1, r5
 80062d8:	5dc7      	ldrb	r7, [r0, r7]
 80062da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062de:	462f      	mov	r7, r5
 80062e0:	42bb      	cmp	r3, r7
 80062e2:	460d      	mov	r5, r1
 80062e4:	d9f4      	bls.n	80062d0 <_printf_i+0x114>
 80062e6:	2b08      	cmp	r3, #8
 80062e8:	d10b      	bne.n	8006302 <_printf_i+0x146>
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	07df      	lsls	r7, r3, #31
 80062ee:	d508      	bpl.n	8006302 <_printf_i+0x146>
 80062f0:	6923      	ldr	r3, [r4, #16]
 80062f2:	6861      	ldr	r1, [r4, #4]
 80062f4:	4299      	cmp	r1, r3
 80062f6:	bfde      	ittt	le
 80062f8:	2330      	movle	r3, #48	@ 0x30
 80062fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 80062fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006302:	1b92      	subs	r2, r2, r6
 8006304:	6122      	str	r2, [r4, #16]
 8006306:	464b      	mov	r3, r9
 8006308:	4621      	mov	r1, r4
 800630a:	4640      	mov	r0, r8
 800630c:	f8cd a000 	str.w	sl, [sp]
 8006310:	aa03      	add	r2, sp, #12
 8006312:	f7ff fee1 	bl	80060d8 <_printf_common>
 8006316:	3001      	adds	r0, #1
 8006318:	d14a      	bne.n	80063b0 <_printf_i+0x1f4>
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	b004      	add	sp, #16
 8006320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	f043 0320 	orr.w	r3, r3, #32
 800632a:	6023      	str	r3, [r4, #0]
 800632c:	2778      	movs	r7, #120	@ 0x78
 800632e:	4832      	ldr	r0, [pc, #200]	@ (80063f8 <_printf_i+0x23c>)
 8006330:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	6831      	ldr	r1, [r6, #0]
 8006338:	061f      	lsls	r7, r3, #24
 800633a:	f851 5b04 	ldr.w	r5, [r1], #4
 800633e:	d402      	bmi.n	8006346 <_printf_i+0x18a>
 8006340:	065f      	lsls	r7, r3, #25
 8006342:	bf48      	it	mi
 8006344:	b2ad      	uxthmi	r5, r5
 8006346:	6031      	str	r1, [r6, #0]
 8006348:	07d9      	lsls	r1, r3, #31
 800634a:	bf44      	itt	mi
 800634c:	f043 0320 	orrmi.w	r3, r3, #32
 8006350:	6023      	strmi	r3, [r4, #0]
 8006352:	b11d      	cbz	r5, 800635c <_printf_i+0x1a0>
 8006354:	2310      	movs	r3, #16
 8006356:	e7ab      	b.n	80062b0 <_printf_i+0xf4>
 8006358:	4826      	ldr	r0, [pc, #152]	@ (80063f4 <_printf_i+0x238>)
 800635a:	e7e9      	b.n	8006330 <_printf_i+0x174>
 800635c:	6823      	ldr	r3, [r4, #0]
 800635e:	f023 0320 	bic.w	r3, r3, #32
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	e7f6      	b.n	8006354 <_printf_i+0x198>
 8006366:	4616      	mov	r6, r2
 8006368:	e7bd      	b.n	80062e6 <_printf_i+0x12a>
 800636a:	6833      	ldr	r3, [r6, #0]
 800636c:	6825      	ldr	r5, [r4, #0]
 800636e:	1d18      	adds	r0, r3, #4
 8006370:	6961      	ldr	r1, [r4, #20]
 8006372:	6030      	str	r0, [r6, #0]
 8006374:	062e      	lsls	r6, r5, #24
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	d501      	bpl.n	800637e <_printf_i+0x1c2>
 800637a:	6019      	str	r1, [r3, #0]
 800637c:	e002      	b.n	8006384 <_printf_i+0x1c8>
 800637e:	0668      	lsls	r0, r5, #25
 8006380:	d5fb      	bpl.n	800637a <_printf_i+0x1be>
 8006382:	8019      	strh	r1, [r3, #0]
 8006384:	2300      	movs	r3, #0
 8006386:	4616      	mov	r6, r2
 8006388:	6123      	str	r3, [r4, #16]
 800638a:	e7bc      	b.n	8006306 <_printf_i+0x14a>
 800638c:	6833      	ldr	r3, [r6, #0]
 800638e:	2100      	movs	r1, #0
 8006390:	1d1a      	adds	r2, r3, #4
 8006392:	6032      	str	r2, [r6, #0]
 8006394:	681e      	ldr	r6, [r3, #0]
 8006396:	6862      	ldr	r2, [r4, #4]
 8006398:	4630      	mov	r0, r6
 800639a:	f000 f8ed 	bl	8006578 <memchr>
 800639e:	b108      	cbz	r0, 80063a4 <_printf_i+0x1e8>
 80063a0:	1b80      	subs	r0, r0, r6
 80063a2:	6060      	str	r0, [r4, #4]
 80063a4:	6863      	ldr	r3, [r4, #4]
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	2300      	movs	r3, #0
 80063aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ae:	e7aa      	b.n	8006306 <_printf_i+0x14a>
 80063b0:	4632      	mov	r2, r6
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	6923      	ldr	r3, [r4, #16]
 80063b8:	47d0      	blx	sl
 80063ba:	3001      	adds	r0, #1
 80063bc:	d0ad      	beq.n	800631a <_printf_i+0x15e>
 80063be:	6823      	ldr	r3, [r4, #0]
 80063c0:	079b      	lsls	r3, r3, #30
 80063c2:	d413      	bmi.n	80063ec <_printf_i+0x230>
 80063c4:	68e0      	ldr	r0, [r4, #12]
 80063c6:	9b03      	ldr	r3, [sp, #12]
 80063c8:	4298      	cmp	r0, r3
 80063ca:	bfb8      	it	lt
 80063cc:	4618      	movlt	r0, r3
 80063ce:	e7a6      	b.n	800631e <_printf_i+0x162>
 80063d0:	2301      	movs	r3, #1
 80063d2:	4632      	mov	r2, r6
 80063d4:	4649      	mov	r1, r9
 80063d6:	4640      	mov	r0, r8
 80063d8:	47d0      	blx	sl
 80063da:	3001      	adds	r0, #1
 80063dc:	d09d      	beq.n	800631a <_printf_i+0x15e>
 80063de:	3501      	adds	r5, #1
 80063e0:	68e3      	ldr	r3, [r4, #12]
 80063e2:	9903      	ldr	r1, [sp, #12]
 80063e4:	1a5b      	subs	r3, r3, r1
 80063e6:	42ab      	cmp	r3, r5
 80063e8:	dcf2      	bgt.n	80063d0 <_printf_i+0x214>
 80063ea:	e7eb      	b.n	80063c4 <_printf_i+0x208>
 80063ec:	2500      	movs	r5, #0
 80063ee:	f104 0619 	add.w	r6, r4, #25
 80063f2:	e7f5      	b.n	80063e0 <_printf_i+0x224>
 80063f4:	08006fe8 	.word	0x08006fe8
 80063f8:	08006ff9 	.word	0x08006ff9

080063fc <__swbuf_r>:
 80063fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063fe:	460e      	mov	r6, r1
 8006400:	4614      	mov	r4, r2
 8006402:	4605      	mov	r5, r0
 8006404:	b118      	cbz	r0, 800640e <__swbuf_r+0x12>
 8006406:	6a03      	ldr	r3, [r0, #32]
 8006408:	b90b      	cbnz	r3, 800640e <__swbuf_r+0x12>
 800640a:	f7ff f97b 	bl	8005704 <__sinit>
 800640e:	69a3      	ldr	r3, [r4, #24]
 8006410:	60a3      	str	r3, [r4, #8]
 8006412:	89a3      	ldrh	r3, [r4, #12]
 8006414:	071a      	lsls	r2, r3, #28
 8006416:	d501      	bpl.n	800641c <__swbuf_r+0x20>
 8006418:	6923      	ldr	r3, [r4, #16]
 800641a:	b943      	cbnz	r3, 800642e <__swbuf_r+0x32>
 800641c:	4621      	mov	r1, r4
 800641e:	4628      	mov	r0, r5
 8006420:	f000 f82a 	bl	8006478 <__swsetup_r>
 8006424:	b118      	cbz	r0, 800642e <__swbuf_r+0x32>
 8006426:	f04f 37ff 	mov.w	r7, #4294967295
 800642a:	4638      	mov	r0, r7
 800642c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	6922      	ldr	r2, [r4, #16]
 8006432:	b2f6      	uxtb	r6, r6
 8006434:	1a98      	subs	r0, r3, r2
 8006436:	6963      	ldr	r3, [r4, #20]
 8006438:	4637      	mov	r7, r6
 800643a:	4283      	cmp	r3, r0
 800643c:	dc05      	bgt.n	800644a <__swbuf_r+0x4e>
 800643e:	4621      	mov	r1, r4
 8006440:	4628      	mov	r0, r5
 8006442:	f7ff f897 	bl	8005574 <_fflush_r>
 8006446:	2800      	cmp	r0, #0
 8006448:	d1ed      	bne.n	8006426 <__swbuf_r+0x2a>
 800644a:	68a3      	ldr	r3, [r4, #8]
 800644c:	3b01      	subs	r3, #1
 800644e:	60a3      	str	r3, [r4, #8]
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	6022      	str	r2, [r4, #0]
 8006456:	701e      	strb	r6, [r3, #0]
 8006458:	6962      	ldr	r2, [r4, #20]
 800645a:	1c43      	adds	r3, r0, #1
 800645c:	429a      	cmp	r2, r3
 800645e:	d004      	beq.n	800646a <__swbuf_r+0x6e>
 8006460:	89a3      	ldrh	r3, [r4, #12]
 8006462:	07db      	lsls	r3, r3, #31
 8006464:	d5e1      	bpl.n	800642a <__swbuf_r+0x2e>
 8006466:	2e0a      	cmp	r6, #10
 8006468:	d1df      	bne.n	800642a <__swbuf_r+0x2e>
 800646a:	4621      	mov	r1, r4
 800646c:	4628      	mov	r0, r5
 800646e:	f7ff f881 	bl	8005574 <_fflush_r>
 8006472:	2800      	cmp	r0, #0
 8006474:	d0d9      	beq.n	800642a <__swbuf_r+0x2e>
 8006476:	e7d6      	b.n	8006426 <__swbuf_r+0x2a>

08006478 <__swsetup_r>:
 8006478:	b538      	push	{r3, r4, r5, lr}
 800647a:	4b29      	ldr	r3, [pc, #164]	@ (8006520 <__swsetup_r+0xa8>)
 800647c:	4605      	mov	r5, r0
 800647e:	6818      	ldr	r0, [r3, #0]
 8006480:	460c      	mov	r4, r1
 8006482:	b118      	cbz	r0, 800648c <__swsetup_r+0x14>
 8006484:	6a03      	ldr	r3, [r0, #32]
 8006486:	b90b      	cbnz	r3, 800648c <__swsetup_r+0x14>
 8006488:	f7ff f93c 	bl	8005704 <__sinit>
 800648c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006490:	0719      	lsls	r1, r3, #28
 8006492:	d422      	bmi.n	80064da <__swsetup_r+0x62>
 8006494:	06da      	lsls	r2, r3, #27
 8006496:	d407      	bmi.n	80064a8 <__swsetup_r+0x30>
 8006498:	2209      	movs	r2, #9
 800649a:	602a      	str	r2, [r5, #0]
 800649c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	81a3      	strh	r3, [r4, #12]
 80064a6:	e033      	b.n	8006510 <__swsetup_r+0x98>
 80064a8:	0758      	lsls	r0, r3, #29
 80064aa:	d512      	bpl.n	80064d2 <__swsetup_r+0x5a>
 80064ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064ae:	b141      	cbz	r1, 80064c2 <__swsetup_r+0x4a>
 80064b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80064b4:	4299      	cmp	r1, r3
 80064b6:	d002      	beq.n	80064be <__swsetup_r+0x46>
 80064b8:	4628      	mov	r0, r5
 80064ba:	f7ff fa7f 	bl	80059bc <_free_r>
 80064be:	2300      	movs	r3, #0
 80064c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80064c2:	89a3      	ldrh	r3, [r4, #12]
 80064c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80064c8:	81a3      	strh	r3, [r4, #12]
 80064ca:	2300      	movs	r3, #0
 80064cc:	6063      	str	r3, [r4, #4]
 80064ce:	6923      	ldr	r3, [r4, #16]
 80064d0:	6023      	str	r3, [r4, #0]
 80064d2:	89a3      	ldrh	r3, [r4, #12]
 80064d4:	f043 0308 	orr.w	r3, r3, #8
 80064d8:	81a3      	strh	r3, [r4, #12]
 80064da:	6923      	ldr	r3, [r4, #16]
 80064dc:	b94b      	cbnz	r3, 80064f2 <__swsetup_r+0x7a>
 80064de:	89a3      	ldrh	r3, [r4, #12]
 80064e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80064e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e8:	d003      	beq.n	80064f2 <__swsetup_r+0x7a>
 80064ea:	4621      	mov	r1, r4
 80064ec:	4628      	mov	r0, r5
 80064ee:	f000 f8b2 	bl	8006656 <__smakebuf_r>
 80064f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064f6:	f013 0201 	ands.w	r2, r3, #1
 80064fa:	d00a      	beq.n	8006512 <__swsetup_r+0x9a>
 80064fc:	2200      	movs	r2, #0
 80064fe:	60a2      	str	r2, [r4, #8]
 8006500:	6962      	ldr	r2, [r4, #20]
 8006502:	4252      	negs	r2, r2
 8006504:	61a2      	str	r2, [r4, #24]
 8006506:	6922      	ldr	r2, [r4, #16]
 8006508:	b942      	cbnz	r2, 800651c <__swsetup_r+0xa4>
 800650a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800650e:	d1c5      	bne.n	800649c <__swsetup_r+0x24>
 8006510:	bd38      	pop	{r3, r4, r5, pc}
 8006512:	0799      	lsls	r1, r3, #30
 8006514:	bf58      	it	pl
 8006516:	6962      	ldrpl	r2, [r4, #20]
 8006518:	60a2      	str	r2, [r4, #8]
 800651a:	e7f4      	b.n	8006506 <__swsetup_r+0x8e>
 800651c:	2000      	movs	r0, #0
 800651e:	e7f7      	b.n	8006510 <__swsetup_r+0x98>
 8006520:	200002c0 	.word	0x200002c0

08006524 <memmove>:
 8006524:	4288      	cmp	r0, r1
 8006526:	b510      	push	{r4, lr}
 8006528:	eb01 0402 	add.w	r4, r1, r2
 800652c:	d902      	bls.n	8006534 <memmove+0x10>
 800652e:	4284      	cmp	r4, r0
 8006530:	4623      	mov	r3, r4
 8006532:	d807      	bhi.n	8006544 <memmove+0x20>
 8006534:	1e43      	subs	r3, r0, #1
 8006536:	42a1      	cmp	r1, r4
 8006538:	d008      	beq.n	800654c <memmove+0x28>
 800653a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800653e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006542:	e7f8      	b.n	8006536 <memmove+0x12>
 8006544:	4601      	mov	r1, r0
 8006546:	4402      	add	r2, r0
 8006548:	428a      	cmp	r2, r1
 800654a:	d100      	bne.n	800654e <memmove+0x2a>
 800654c:	bd10      	pop	{r4, pc}
 800654e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006552:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006556:	e7f7      	b.n	8006548 <memmove+0x24>

08006558 <_sbrk_r>:
 8006558:	b538      	push	{r3, r4, r5, lr}
 800655a:	2300      	movs	r3, #0
 800655c:	4d05      	ldr	r5, [pc, #20]	@ (8006574 <_sbrk_r+0x1c>)
 800655e:	4604      	mov	r4, r0
 8006560:	4608      	mov	r0, r1
 8006562:	602b      	str	r3, [r5, #0]
 8006564:	f7fa fe5e 	bl	8001224 <_sbrk>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d102      	bne.n	8006572 <_sbrk_r+0x1a>
 800656c:	682b      	ldr	r3, [r5, #0]
 800656e:	b103      	cbz	r3, 8006572 <_sbrk_r+0x1a>
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	bd38      	pop	{r3, r4, r5, pc}
 8006574:	20000744 	.word	0x20000744

08006578 <memchr>:
 8006578:	4603      	mov	r3, r0
 800657a:	b510      	push	{r4, lr}
 800657c:	b2c9      	uxtb	r1, r1
 800657e:	4402      	add	r2, r0
 8006580:	4293      	cmp	r3, r2
 8006582:	4618      	mov	r0, r3
 8006584:	d101      	bne.n	800658a <memchr+0x12>
 8006586:	2000      	movs	r0, #0
 8006588:	e003      	b.n	8006592 <memchr+0x1a>
 800658a:	7804      	ldrb	r4, [r0, #0]
 800658c:	3301      	adds	r3, #1
 800658e:	428c      	cmp	r4, r1
 8006590:	d1f6      	bne.n	8006580 <memchr+0x8>
 8006592:	bd10      	pop	{r4, pc}

08006594 <memcpy>:
 8006594:	440a      	add	r2, r1
 8006596:	4291      	cmp	r1, r2
 8006598:	f100 33ff 	add.w	r3, r0, #4294967295
 800659c:	d100      	bne.n	80065a0 <memcpy+0xc>
 800659e:	4770      	bx	lr
 80065a0:	b510      	push	{r4, lr}
 80065a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a6:	4291      	cmp	r1, r2
 80065a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065ac:	d1f9      	bne.n	80065a2 <memcpy+0xe>
 80065ae:	bd10      	pop	{r4, pc}

080065b0 <_realloc_r>:
 80065b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b4:	4680      	mov	r8, r0
 80065b6:	4615      	mov	r5, r2
 80065b8:	460c      	mov	r4, r1
 80065ba:	b921      	cbnz	r1, 80065c6 <_realloc_r+0x16>
 80065bc:	4611      	mov	r1, r2
 80065be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065c2:	f7ff ba65 	b.w	8005a90 <_malloc_r>
 80065c6:	b92a      	cbnz	r2, 80065d4 <_realloc_r+0x24>
 80065c8:	f7ff f9f8 	bl	80059bc <_free_r>
 80065cc:	2400      	movs	r4, #0
 80065ce:	4620      	mov	r0, r4
 80065d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065d4:	f000 f89e 	bl	8006714 <_malloc_usable_size_r>
 80065d8:	4285      	cmp	r5, r0
 80065da:	4606      	mov	r6, r0
 80065dc:	d802      	bhi.n	80065e4 <_realloc_r+0x34>
 80065de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80065e2:	d8f4      	bhi.n	80065ce <_realloc_r+0x1e>
 80065e4:	4629      	mov	r1, r5
 80065e6:	4640      	mov	r0, r8
 80065e8:	f7ff fa52 	bl	8005a90 <_malloc_r>
 80065ec:	4607      	mov	r7, r0
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d0ec      	beq.n	80065cc <_realloc_r+0x1c>
 80065f2:	42b5      	cmp	r5, r6
 80065f4:	462a      	mov	r2, r5
 80065f6:	4621      	mov	r1, r4
 80065f8:	bf28      	it	cs
 80065fa:	4632      	movcs	r2, r6
 80065fc:	f7ff ffca 	bl	8006594 <memcpy>
 8006600:	4621      	mov	r1, r4
 8006602:	4640      	mov	r0, r8
 8006604:	f7ff f9da 	bl	80059bc <_free_r>
 8006608:	463c      	mov	r4, r7
 800660a:	e7e0      	b.n	80065ce <_realloc_r+0x1e>

0800660c <__swhatbuf_r>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	460c      	mov	r4, r1
 8006610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006614:	4615      	mov	r5, r2
 8006616:	2900      	cmp	r1, #0
 8006618:	461e      	mov	r6, r3
 800661a:	b096      	sub	sp, #88	@ 0x58
 800661c:	da0c      	bge.n	8006638 <__swhatbuf_r+0x2c>
 800661e:	89a3      	ldrh	r3, [r4, #12]
 8006620:	2100      	movs	r1, #0
 8006622:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006626:	bf14      	ite	ne
 8006628:	2340      	movne	r3, #64	@ 0x40
 800662a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800662e:	2000      	movs	r0, #0
 8006630:	6031      	str	r1, [r6, #0]
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	b016      	add	sp, #88	@ 0x58
 8006636:	bd70      	pop	{r4, r5, r6, pc}
 8006638:	466a      	mov	r2, sp
 800663a:	f000 f849 	bl	80066d0 <_fstat_r>
 800663e:	2800      	cmp	r0, #0
 8006640:	dbed      	blt.n	800661e <__swhatbuf_r+0x12>
 8006642:	9901      	ldr	r1, [sp, #4]
 8006644:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006648:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800664c:	4259      	negs	r1, r3
 800664e:	4159      	adcs	r1, r3
 8006650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006654:	e7eb      	b.n	800662e <__swhatbuf_r+0x22>

08006656 <__smakebuf_r>:
 8006656:	898b      	ldrh	r3, [r1, #12]
 8006658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800665a:	079d      	lsls	r5, r3, #30
 800665c:	4606      	mov	r6, r0
 800665e:	460c      	mov	r4, r1
 8006660:	d507      	bpl.n	8006672 <__smakebuf_r+0x1c>
 8006662:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006666:	6023      	str	r3, [r4, #0]
 8006668:	6123      	str	r3, [r4, #16]
 800666a:	2301      	movs	r3, #1
 800666c:	6163      	str	r3, [r4, #20]
 800666e:	b003      	add	sp, #12
 8006670:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006672:	466a      	mov	r2, sp
 8006674:	ab01      	add	r3, sp, #4
 8006676:	f7ff ffc9 	bl	800660c <__swhatbuf_r>
 800667a:	9f00      	ldr	r7, [sp, #0]
 800667c:	4605      	mov	r5, r0
 800667e:	4639      	mov	r1, r7
 8006680:	4630      	mov	r0, r6
 8006682:	f7ff fa05 	bl	8005a90 <_malloc_r>
 8006686:	b948      	cbnz	r0, 800669c <__smakebuf_r+0x46>
 8006688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800668c:	059a      	lsls	r2, r3, #22
 800668e:	d4ee      	bmi.n	800666e <__smakebuf_r+0x18>
 8006690:	f023 0303 	bic.w	r3, r3, #3
 8006694:	f043 0302 	orr.w	r3, r3, #2
 8006698:	81a3      	strh	r3, [r4, #12]
 800669a:	e7e2      	b.n	8006662 <__smakebuf_r+0xc>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80066a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80066a6:	81a3      	strh	r3, [r4, #12]
 80066a8:	9b01      	ldr	r3, [sp, #4]
 80066aa:	6020      	str	r0, [r4, #0]
 80066ac:	b15b      	cbz	r3, 80066c6 <__smakebuf_r+0x70>
 80066ae:	4630      	mov	r0, r6
 80066b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b4:	f000 f81e 	bl	80066f4 <_isatty_r>
 80066b8:	b128      	cbz	r0, 80066c6 <__smakebuf_r+0x70>
 80066ba:	89a3      	ldrh	r3, [r4, #12]
 80066bc:	f023 0303 	bic.w	r3, r3, #3
 80066c0:	f043 0301 	orr.w	r3, r3, #1
 80066c4:	81a3      	strh	r3, [r4, #12]
 80066c6:	89a3      	ldrh	r3, [r4, #12]
 80066c8:	431d      	orrs	r5, r3
 80066ca:	81a5      	strh	r5, [r4, #12]
 80066cc:	e7cf      	b.n	800666e <__smakebuf_r+0x18>
	...

080066d0 <_fstat_r>:
 80066d0:	b538      	push	{r3, r4, r5, lr}
 80066d2:	2300      	movs	r3, #0
 80066d4:	4d06      	ldr	r5, [pc, #24]	@ (80066f0 <_fstat_r+0x20>)
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	602b      	str	r3, [r5, #0]
 80066de:	f7fe fcc0 	bl	8005062 <_fstat>
 80066e2:	1c43      	adds	r3, r0, #1
 80066e4:	d102      	bne.n	80066ec <_fstat_r+0x1c>
 80066e6:	682b      	ldr	r3, [r5, #0]
 80066e8:	b103      	cbz	r3, 80066ec <_fstat_r+0x1c>
 80066ea:	6023      	str	r3, [r4, #0]
 80066ec:	bd38      	pop	{r3, r4, r5, pc}
 80066ee:	bf00      	nop
 80066f0:	20000744 	.word	0x20000744

080066f4 <_isatty_r>:
 80066f4:	b538      	push	{r3, r4, r5, lr}
 80066f6:	2300      	movs	r3, #0
 80066f8:	4d05      	ldr	r5, [pc, #20]	@ (8006710 <_isatty_r+0x1c>)
 80066fa:	4604      	mov	r4, r0
 80066fc:	4608      	mov	r0, r1
 80066fe:	602b      	str	r3, [r5, #0]
 8006700:	f7fe fe12 	bl	8005328 <_isatty>
 8006704:	1c43      	adds	r3, r0, #1
 8006706:	d102      	bne.n	800670e <_isatty_r+0x1a>
 8006708:	682b      	ldr	r3, [r5, #0]
 800670a:	b103      	cbz	r3, 800670e <_isatty_r+0x1a>
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	20000744 	.word	0x20000744

08006714 <_malloc_usable_size_r>:
 8006714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006718:	1f18      	subs	r0, r3, #4
 800671a:	2b00      	cmp	r3, #0
 800671c:	bfbc      	itt	lt
 800671e:	580b      	ldrlt	r3, [r1, r0]
 8006720:	18c0      	addlt	r0, r0, r3
 8006722:	4770      	bx	lr

08006724 <_init>:
 8006724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006726:	bf00      	nop
 8006728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800672a:	bc08      	pop	{r3}
 800672c:	469e      	mov	lr, r3
 800672e:	4770      	bx	lr

08006730 <_fini>:
 8006730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006732:	bf00      	nop
 8006734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006736:	bc08      	pop	{r3}
 8006738:	469e      	mov	lr, r3
 800673a:	4770      	bx	lr
