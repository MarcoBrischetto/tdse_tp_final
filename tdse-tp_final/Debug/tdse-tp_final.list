
tdse-tp_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cf4  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000908  08006e04  08006e04  00007e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800770c  0800770c  00009330  2**0
                  CONTENTS
  4 .ARM          00000008  0800770c  0800770c  0000870c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007714  08007714  00009330  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007714  08007714  00008714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007718  08007718  00008718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000330  20000000  0800771c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000434  20000330  08007a4c  00009330  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000764  08007a4c  00009764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009330  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c246  00000000  00000000  00009359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cc2  00000000  00000000  0001559f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  00018268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000754  00000000  00000000  00018c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a200  00000000  00000000  000193ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b41  00000000  00000000  000335ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a48b  00000000  00000000  000450ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cf578  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003340  00000000  00000000  000cf5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000d28fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000330 	.word	0x20000330
 800012c:	00000000 	.word	0x00000000
 8000130:	08006dec 	.word	0x08006dec

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000334 	.word	0x20000334
 800014c:	08006dec 	.word	0x08006dec

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2uiz>:
 80008fc:	004a      	lsls	r2, r1, #1
 80008fe:	d211      	bcs.n	8000924 <__aeabi_d2uiz+0x28>
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000904:	d211      	bcs.n	800092a <__aeabi_d2uiz+0x2e>
 8000906:	d50d      	bpl.n	8000924 <__aeabi_d2uiz+0x28>
 8000908:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d40e      	bmi.n	8000930 <__aeabi_d2uiz+0x34>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	fa23 f002 	lsr.w	r0, r3, r2
 8000922:	4770      	bx	lr
 8000924:	f04f 0000 	mov.w	r0, #0
 8000928:	4770      	bx	lr
 800092a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800092e:	d102      	bne.n	8000936 <__aeabi_d2uiz+0x3a>
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	4770      	bx	lr
 8000936:	f04f 0000 	mov.w	r0, #0
 800093a:	4770      	bx	lr

0800093c <__aeabi_d2f>:
 800093c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000940:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000944:	bf24      	itt	cs
 8000946:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800094a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800094e:	d90d      	bls.n	800096c <__aeabi_d2f+0x30>
 8000950:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000954:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000958:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800095c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000960:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000964:	bf08      	it	eq
 8000966:	f020 0001 	biceq.w	r0, r0, #1
 800096a:	4770      	bx	lr
 800096c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000970:	d121      	bne.n	80009b6 <__aeabi_d2f+0x7a>
 8000972:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000976:	bfbc      	itt	lt
 8000978:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	4770      	bxlt	lr
 800097e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000982:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000986:	f1c2 0218 	rsb	r2, r2, #24
 800098a:	f1c2 0c20 	rsb	ip, r2, #32
 800098e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000992:	fa20 f002 	lsr.w	r0, r0, r2
 8000996:	bf18      	it	ne
 8000998:	f040 0001 	orrne.w	r0, r0, #1
 800099c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009a4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009a8:	ea40 000c 	orr.w	r0, r0, ip
 80009ac:	fa23 f302 	lsr.w	r3, r3, r2
 80009b0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009b4:	e7cc      	b.n	8000950 <__aeabi_d2f+0x14>
 80009b6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009ba:	d107      	bne.n	80009cc <__aeabi_d2f+0x90>
 80009bc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009c0:	bf1e      	ittt	ne
 80009c2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80009c6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80009ca:	4770      	bxne	lr
 80009cc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop

080009dc <__aeabi_frsub>:
 80009dc:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80009e0:	e002      	b.n	80009e8 <__addsf3>
 80009e2:	bf00      	nop

080009e4 <__aeabi_fsub>:
 80009e4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080009e8 <__addsf3>:
 80009e8:	0042      	lsls	r2, r0, #1
 80009ea:	bf1f      	itttt	ne
 80009ec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009f0:	ea92 0f03 	teqne	r2, r3
 80009f4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009f8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009fc:	d06a      	beq.n	8000ad4 <__addsf3+0xec>
 80009fe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a06:	bfc1      	itttt	gt
 8000a08:	18d2      	addgt	r2, r2, r3
 8000a0a:	4041      	eorgt	r1, r0
 8000a0c:	4048      	eorgt	r0, r1
 8000a0e:	4041      	eorgt	r1, r0
 8000a10:	bfb8      	it	lt
 8000a12:	425b      	neglt	r3, r3
 8000a14:	2b19      	cmp	r3, #25
 8000a16:	bf88      	it	hi
 8000a18:	4770      	bxhi	lr
 8000a1a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000a1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a22:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a2e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000a32:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000a36:	bf18      	it	ne
 8000a38:	4249      	negne	r1, r1
 8000a3a:	ea92 0f03 	teq	r2, r3
 8000a3e:	d03f      	beq.n	8000ac0 <__addsf3+0xd8>
 8000a40:	f1a2 0201 	sub.w	r2, r2, #1
 8000a44:	fa41 fc03 	asr.w	ip, r1, r3
 8000a48:	eb10 000c 	adds.w	r0, r0, ip
 8000a4c:	f1c3 0320 	rsb	r3, r3, #32
 8000a50:	fa01 f103 	lsl.w	r1, r1, r3
 8000a54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a58:	d502      	bpl.n	8000a60 <__addsf3+0x78>
 8000a5a:	4249      	negs	r1, r1
 8000a5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a60:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a64:	d313      	bcc.n	8000a8e <__addsf3+0xa6>
 8000a66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a6a:	d306      	bcc.n	8000a7a <__addsf3+0x92>
 8000a6c:	0840      	lsrs	r0, r0, #1
 8000a6e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a72:	f102 0201 	add.w	r2, r2, #1
 8000a76:	2afe      	cmp	r2, #254	@ 0xfe
 8000a78:	d251      	bcs.n	8000b1e <__addsf3+0x136>
 8000a7a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a82:	bf08      	it	eq
 8000a84:	f020 0001 	biceq.w	r0, r0, #1
 8000a88:	ea40 0003 	orr.w	r0, r0, r3
 8000a8c:	4770      	bx	lr
 8000a8e:	0049      	lsls	r1, r1, #1
 8000a90:	eb40 0000 	adc.w	r0, r0, r0
 8000a94:	3a01      	subs	r2, #1
 8000a96:	bf28      	it	cs
 8000a98:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a9c:	d2ed      	bcs.n	8000a7a <__addsf3+0x92>
 8000a9e:	fab0 fc80 	clz	ip, r0
 8000aa2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000aa6:	ebb2 020c 	subs.w	r2, r2, ip
 8000aaa:	fa00 f00c 	lsl.w	r0, r0, ip
 8000aae:	bfaa      	itet	ge
 8000ab0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ab4:	4252      	neglt	r2, r2
 8000ab6:	4318      	orrge	r0, r3
 8000ab8:	bfbc      	itt	lt
 8000aba:	40d0      	lsrlt	r0, r2
 8000abc:	4318      	orrlt	r0, r3
 8000abe:	4770      	bx	lr
 8000ac0:	f092 0f00 	teq	r2, #0
 8000ac4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000ac8:	bf06      	itte	eq
 8000aca:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000ace:	3201      	addeq	r2, #1
 8000ad0:	3b01      	subne	r3, #1
 8000ad2:	e7b5      	b.n	8000a40 <__addsf3+0x58>
 8000ad4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ad8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000adc:	bf18      	it	ne
 8000ade:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae2:	d021      	beq.n	8000b28 <__addsf3+0x140>
 8000ae4:	ea92 0f03 	teq	r2, r3
 8000ae8:	d004      	beq.n	8000af4 <__addsf3+0x10c>
 8000aea:	f092 0f00 	teq	r2, #0
 8000aee:	bf08      	it	eq
 8000af0:	4608      	moveq	r0, r1
 8000af2:	4770      	bx	lr
 8000af4:	ea90 0f01 	teq	r0, r1
 8000af8:	bf1c      	itt	ne
 8000afa:	2000      	movne	r0, #0
 8000afc:	4770      	bxne	lr
 8000afe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000b02:	d104      	bne.n	8000b0e <__addsf3+0x126>
 8000b04:	0040      	lsls	r0, r0, #1
 8000b06:	bf28      	it	cs
 8000b08:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000b0c:	4770      	bx	lr
 8000b0e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000b12:	bf3c      	itt	cc
 8000b14:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000b18:	4770      	bxcc	lr
 8000b1a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b1e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b26:	4770      	bx	lr
 8000b28:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000b2c:	bf16      	itet	ne
 8000b2e:	4608      	movne	r0, r1
 8000b30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b34:	4601      	movne	r1, r0
 8000b36:	0242      	lsls	r2, r0, #9
 8000b38:	bf06      	itte	eq
 8000b3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b3e:	ea90 0f01 	teqeq	r0, r1
 8000b42:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_ui2f>:
 8000b48:	f04f 0300 	mov.w	r3, #0
 8000b4c:	e004      	b.n	8000b58 <__aeabi_i2f+0x8>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_i2f>:
 8000b50:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b54:	bf48      	it	mi
 8000b56:	4240      	negmi	r0, r0
 8000b58:	ea5f 0c00 	movs.w	ip, r0
 8000b5c:	bf08      	it	eq
 8000b5e:	4770      	bxeq	lr
 8000b60:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b64:	4601      	mov	r1, r0
 8000b66:	f04f 0000 	mov.w	r0, #0
 8000b6a:	e01c      	b.n	8000ba6 <__aeabi_l2f+0x2a>

08000b6c <__aeabi_ul2f>:
 8000b6c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b70:	bf08      	it	eq
 8000b72:	4770      	bxeq	lr
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e00a      	b.n	8000b90 <__aeabi_l2f+0x14>
 8000b7a:	bf00      	nop

08000b7c <__aeabi_l2f>:
 8000b7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b80:	bf08      	it	eq
 8000b82:	4770      	bxeq	lr
 8000b84:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b88:	d502      	bpl.n	8000b90 <__aeabi_l2f+0x14>
 8000b8a:	4240      	negs	r0, r0
 8000b8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b90:	ea5f 0c01 	movs.w	ip, r1
 8000b94:	bf02      	ittt	eq
 8000b96:	4684      	moveq	ip, r0
 8000b98:	4601      	moveq	r1, r0
 8000b9a:	2000      	moveq	r0, #0
 8000b9c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ba6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000baa:	fabc f28c 	clz	r2, ip
 8000bae:	3a08      	subs	r2, #8
 8000bb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000bb4:	db10      	blt.n	8000bd8 <__aeabi_l2f+0x5c>
 8000bb6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bba:	4463      	add	r3, ip
 8000bbc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000bc0:	f1c2 0220 	rsb	r2, r2, #32
 8000bc4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000bc8:	fa20 f202 	lsr.w	r2, r0, r2
 8000bcc:	eb43 0002 	adc.w	r0, r3, r2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f102 0220 	add.w	r2, r2, #32
 8000bdc:	fa01 fc02 	lsl.w	ip, r1, r2
 8000be0:	f1c2 0220 	rsb	r2, r2, #32
 8000be4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000be8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bec:	eb43 0002 	adc.w	r0, r3, r2
 8000bf0:	bf08      	it	eq
 8000bf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_f2iz>:
 8000bf8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000bfc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000c00:	d30f      	bcc.n	8000c22 <__aeabi_f2iz+0x2a>
 8000c02:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000c06:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_f2iz+0x30>
 8000c0c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000c10:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c14:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c18:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1c:	bf18      	it	ne
 8000c1e:	4240      	negne	r0, r0
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr
 8000c28:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000c2c:	d101      	bne.n	8000c32 <__aeabi_f2iz+0x3a>
 8000c2e:	0242      	lsls	r2, r0, #9
 8000c30:	d105      	bne.n	8000c3e <__aeabi_f2iz+0x46>
 8000c32:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c3c:	4770      	bx	lr
 8000c3e:	f04f 0000 	mov.w	r0, #0
 8000c42:	4770      	bx	lr

08000c44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000c48:	f004 fe72 	bl	8005930 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f000 fb6c 	bl	8001328 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c50:	f000 f80d 	bl	8000c6e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f000 f90a 	bl	8000e6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c58:	f000 f8de 	bl	8000e18 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c5c:	f000 f860 	bl	8000d20 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000c60:	f000 f89c 	bl	8000d9c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
  app_init();
 8000c64:	f002 f9f0 	bl	8003048 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000c68:	f002 faae 	bl	80031c8 <app_update>
 8000c6c:	e7fc      	b.n	8000c68 <main+0x24>

08000c6e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b094      	sub	sp, #80	@ 0x50
 8000c72:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c74:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c78:	2228      	movs	r2, #40	@ 0x28
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f005 f984 	bl	8005f8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c82:	f107 0314 	add.w	r3, r7, #20
 8000c86:	2200      	movs	r2, #0
 8000c88:	601a      	str	r2, [r3, #0]
 8000c8a:	605a      	str	r2, [r3, #4]
 8000c8c:	609a      	str	r2, [r3, #8]
 8000c8e:	60da      	str	r2, [r3, #12]
 8000c90:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ca6:	2310      	movs	r3, #16
 8000ca8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000caa:	2302      	movs	r3, #2
 8000cac:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000cb2:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fb69 	bl	8002394 <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000cc8:	f000 f99c 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000cd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cdc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 8000cde:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000ce2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2102      	movs	r1, #2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f001 fdd4 	bl	8002898 <HAL_RCC_ClockConfig>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d001      	beq.n	8000cfa <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cf6:	f000 f985 	bl	8001004 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8000cfe:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000d02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	4618      	mov	r0, r3
 8000d08:	f001 ff54 	bl	8002bb4 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8000d12:	f000 f977 	bl	8001004 <Error_Handler>
  }
}
 8000d16:	bf00      	nop
 8000d18:	3750      	adds	r7, #80	@ 0x50
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d30:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d32:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <MX_ADC1_Init+0x78>)
 8000d34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d36:	4b17      	ldr	r3, [pc, #92]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d3c:	4b15      	ldr	r3, [pc, #84]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d42:	4b14      	ldr	r3, [pc, #80]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b12      	ldr	r3, [pc, #72]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d4a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000d4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d5c:	480d      	ldr	r0, [pc, #52]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d5e:	f000 fb69 	bl	8001434 <HAL_ADC_Init>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000d68:	f000 f94c 	bl	8001004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000d6c:	2310      	movs	r3, #16
 8000d6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000d74:	2306      	movs	r3, #6
 8000d76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <MX_ADC1_Init+0x74>)
 8000d7e:	f000 fdbb 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000d88:	f000 f93c 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	3710      	adds	r7, #16
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	2000034c 	.word	0x2000034c
 8000d98:	40012400 	.word	0x40012400

08000d9c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000dac:	4b18      	ldr	r3, [pc, #96]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dae:	4a19      	ldr	r2, [pc, #100]	@ (8000e14 <MX_ADC2_Init+0x78>)
 8000db0:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dc6:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000dca:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dcc:	4b10      	ldr	r3, [pc, #64]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dd8:	480d      	ldr	r0, [pc, #52]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dda:	f000 fb2b 	bl	8001434 <HAL_ADC_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 f90e 	bl	8001004 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_71CYCLES_5;
 8000df0:	2306      	movs	r3, #6
 8000df2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <MX_ADC2_Init+0x74>)
 8000dfa:	f000 fd7d 	bl	80018f8 <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000e04:	f000 f8fe 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000e08:	bf00      	nop
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	2000037c 	.word	0x2000037c
 8000e14:	40012800 	.word	0x40012800

08000e18 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	@ (8000e68 <MX_USART2_UART_Init+0x50>)
 8000e20:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e22:	4b10      	ldr	r3, [pc, #64]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b0c      	ldr	r3, [pc, #48]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b0b      	ldr	r3, [pc, #44]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b09      	ldr	r3, [pc, #36]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b08      	ldr	r3, [pc, #32]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e48:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_USART2_UART_Init+0x4c>)
 8000e50:	f002 f81c 	bl	8002e8c <HAL_UART_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e5a:	f000 f8d3 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200003ac 	.word	0x200003ac
 8000e68:	40004400 	.word	0x40004400

08000e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e80:	4b5b      	ldr	r3, [pc, #364]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000e82:	699b      	ldr	r3, [r3, #24]
 8000e84:	4a5a      	ldr	r2, [pc, #360]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000e86:	f043 0310 	orr.w	r3, r3, #16
 8000e8a:	6193      	str	r3, [r2, #24]
 8000e8c:	4b58      	ldr	r3, [pc, #352]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	f003 0310 	and.w	r3, r3, #16
 8000e94:	60fb      	str	r3, [r7, #12]
 8000e96:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e98:	4b55      	ldr	r3, [pc, #340]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	4a54      	ldr	r2, [pc, #336]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000e9e:	f043 0320 	orr.w	r3, r3, #32
 8000ea2:	6193      	str	r3, [r2, #24]
 8000ea4:	4b52      	ldr	r3, [pc, #328]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	f003 0320 	and.w	r3, r3, #32
 8000eac:	60bb      	str	r3, [r7, #8]
 8000eae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb0:	4b4f      	ldr	r3, [pc, #316]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a4e      	ldr	r2, [pc, #312]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000eb6:	f043 0304 	orr.w	r3, r3, #4
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b4c      	ldr	r3, [pc, #304]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0304 	and.w	r3, r3, #4
 8000ec4:	607b      	str	r3, [r7, #4]
 8000ec6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b49      	ldr	r3, [pc, #292]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	4a48      	ldr	r2, [pc, #288]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000ece:	f043 0308 	orr.w	r3, r3, #8
 8000ed2:	6193      	str	r3, [r2, #24]
 8000ed4:	4b46      	ldr	r3, [pc, #280]	@ (8000ff0 <MX_GPIO_Init+0x184>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	f003 0308 	and.w	r3, r3, #8
 8000edc:	603b      	str	r3, [r7, #0]
 8000ede:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 8000ee6:	4843      	ldr	r0, [pc, #268]	@ (8000ff4 <MX_GPIO_Init+0x188>)
 8000ee8:	f001 fa01 	bl	80022ee <HAL_GPIO_WritePin>
                          |D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D9_Pin|O1_Pin|O2_Pin|O3_Pin
 8000eec:	2200      	movs	r2, #0
 8000eee:	f44f 6178 	mov.w	r1, #3968	@ 0xf80
 8000ef2:	4841      	ldr	r0, [pc, #260]	@ (8000ff8 <MX_GPIO_Init+0x18c>)
 8000ef4:	f001 f9fb 	bl	80022ee <HAL_GPIO_WritePin>
                          |O4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_SET);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000efe:	483e      	ldr	r0, [pc, #248]	@ (8000ff8 <MX_GPIO_Init+0x18c>)
 8000f00:	f001 f9f5 	bl	80022ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2140      	movs	r1, #64	@ 0x40
 8000f08:	483c      	ldr	r0, [pc, #240]	@ (8000ffc <MX_GPIO_Init+0x190>)
 8000f0a:	f001 f9f0 	bl	80022ee <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f0e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f14:	4b3a      	ldr	r3, [pc, #232]	@ (8001000 <MX_GPIO_Init+0x194>)
 8000f16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	4619      	mov	r1, r3
 8000f22:	4835      	ldr	r0, [pc, #212]	@ (8000ff8 <MX_GPIO_Init+0x18c>)
 8000f24:	f001 f848 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : I1_Pin I2_Pin I5_Pin I3_Pin
                           I4_Pin */
  GPIO_InitStruct.Pin = I1_Pin|I2_Pin|I5_Pin|I3_Pin
 8000f28:	237c      	movs	r3, #124	@ 0x7c
 8000f2a:	613b      	str	r3, [r7, #16]
                          |I4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482f      	ldr	r0, [pc, #188]	@ (8000ff8 <MX_GPIO_Init+0x18c>)
 8000f3c:	f001 f83c 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D12_Pin D11_Pin D7_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 8000f40:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000f44:	613b      	str	r3, [r7, #16]
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f46:	2301      	movs	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f52:	f107 0310 	add.w	r3, r7, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4826      	ldr	r0, [pc, #152]	@ (8000ff4 <MX_GPIO_Init+0x188>)
 8000f5a:	f001 f82d 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000f5e:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000f62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4619      	mov	r1, r3
 8000f72:	4822      	ldr	r0, [pc, #136]	@ (8000ffc <MX_GPIO_Init+0x190>)
 8000f74:	f001 f820 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D9_Pin O1_Pin O2_Pin O3_Pin
                           O4_Pin O5_Pin */
  GPIO_InitStruct.Pin = D9_Pin|O1_Pin|O2_Pin|O3_Pin
 8000f78:	f44f 53fc 	mov.w	r3, #8064	@ 0x1f80
 8000f7c:	613b      	str	r3, [r7, #16]
                          |O4_Pin|O5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8a:	f107 0310 	add.w	r3, r7, #16
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4819      	ldr	r0, [pc, #100]	@ (8000ff8 <MX_GPIO_Init+0x18c>)
 8000f92:	f001 f811 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 8000f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4812      	ldr	r0, [pc, #72]	@ (8000ff4 <MX_GPIO_Init+0x188>)
 8000fac:	f001 f804 	bl	8001fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000fb0:	2340      	movs	r3, #64	@ 0x40
 8000fb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000fc0:	f107 0310 	add.w	r3, r7, #16
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	480d      	ldr	r0, [pc, #52]	@ (8000ffc <MX_GPIO_Init+0x190>)
 8000fc8:	f000 fff6 	bl	8001fb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fcc:	2200      	movs	r2, #0
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2028      	movs	r0, #40	@ 0x28
 8000fd2:	f000 ffb4 	bl	8001f3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd6:	2028      	movs	r0, #40	@ 0x28
 8000fd8:	f000 ffcd 	bl	8001f76 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(O5_GPIO_Port, O5_Pin, GPIO_PIN_SET);
 8000fdc:	2201      	movs	r2, #1
 8000fde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe2:	4805      	ldr	r0, [pc, #20]	@ (8000ff8 <MX_GPIO_Init+0x18c>)
 8000fe4:	f001 f983 	bl	80022ee <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fe8:	bf00      	nop
 8000fea:	3720      	adds	r7, #32
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40021000 	.word	0x40021000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40011000 	.word	0x40011000
 8000ffc:	40010c00 	.word	0x40010c00
 8001000:	10110000 	.word	0x10110000

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_MspInit+0x5c>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	4a14      	ldr	r2, [pc, #80]	@ (800106c <HAL_MspInit+0x5c>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6193      	str	r3, [r2, #24]
 8001022:	4b12      	ldr	r3, [pc, #72]	@ (800106c <HAL_MspInit+0x5c>)
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60bb      	str	r3, [r7, #8]
 800102c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_MspInit+0x5c>)
 8001030:	69db      	ldr	r3, [r3, #28]
 8001032:	4a0e      	ldr	r2, [pc, #56]	@ (800106c <HAL_MspInit+0x5c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	61d3      	str	r3, [r2, #28]
 800103a:	4b0c      	ldr	r3, [pc, #48]	@ (800106c <HAL_MspInit+0x5c>)
 800103c:	69db      	ldr	r3, [r3, #28]
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001046:	4b0a      	ldr	r3, [pc, #40]	@ (8001070 <HAL_MspInit+0x60>)
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001052:	60fb      	str	r3, [r7, #12]
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_MspInit+0x60>)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	bf00      	nop
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	bc80      	pop	{r7}
 800106a:	4770      	bx	lr
 800106c:	40021000 	.word	0x40021000
 8001070:	40010000 	.word	0x40010000

08001074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	@ 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0318 	add.w	r3, r7, #24
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a30      	ldr	r2, [pc, #192]	@ (8001150 <HAL_ADC_MspInit+0xdc>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d12a      	bne.n	80010ea <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001094:	4b2f      	ldr	r3, [pc, #188]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a2e      	ldr	r2, [pc, #184]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 800109a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b2c      	ldr	r3, [pc, #176]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010a8:	617b      	str	r3, [r7, #20]
 80010aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	4a28      	ldr	r2, [pc, #160]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 80010b2:	f043 0304 	orr.w	r3, r3, #4
 80010b6:	6193      	str	r3, [r2, #24]
 80010b8:	4b26      	ldr	r3, [pc, #152]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	f003 0304 	and.w	r3, r3, #4
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010c8:	2303      	movs	r3, #3
 80010ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010cc:	f107 0318 	add.w	r3, r7, #24
 80010d0:	4619      	mov	r1, r3
 80010d2:	4821      	ldr	r0, [pc, #132]	@ (8001158 <HAL_ADC_MspInit+0xe4>)
 80010d4:	f000 ff70 	bl	8001fb8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80010d8:	2200      	movs	r2, #0
 80010da:	2100      	movs	r1, #0
 80010dc:	2012      	movs	r0, #18
 80010de:	f000 ff2e 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80010e2:	2012      	movs	r0, #18
 80010e4:	f000 ff47 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80010e8:	e02e      	b.n	8001148 <HAL_ADC_MspInit+0xd4>
  else if(hadc->Instance==ADC2)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a1b      	ldr	r2, [pc, #108]	@ (800115c <HAL_ADC_MspInit+0xe8>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d129      	bne.n	8001148 <HAL_ADC_MspInit+0xd4>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010f4:	4b17      	ldr	r3, [pc, #92]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	4a16      	ldr	r2, [pc, #88]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80010fe:	6193      	str	r3, [r2, #24]
 8001100:	4b14      	ldr	r3, [pc, #80]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 8001102:	699b      	ldr	r3, [r3, #24]
 8001104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 800110e:	699b      	ldr	r3, [r3, #24]
 8001110:	4a10      	ldr	r2, [pc, #64]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 8001112:	f043 0304 	orr.w	r3, r3, #4
 8001116:	6193      	str	r3, [r2, #24]
 8001118:	4b0e      	ldr	r3, [pc, #56]	@ (8001154 <HAL_ADC_MspInit+0xe0>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001124:	2301      	movs	r3, #1
 8001126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001128:	2303      	movs	r3, #3
 800112a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4619      	mov	r1, r3
 8001132:	4809      	ldr	r0, [pc, #36]	@ (8001158 <HAL_ADC_MspInit+0xe4>)
 8001134:	f000 ff40 	bl	8001fb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001138:	2200      	movs	r2, #0
 800113a:	2100      	movs	r1, #0
 800113c:	2012      	movs	r0, #18
 800113e:	f000 fefe 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001142:	2012      	movs	r0, #18
 8001144:	f000 ff17 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 8001148:	bf00      	nop
 800114a:	3728      	adds	r7, #40	@ 0x28
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	40012400 	.word	0x40012400
 8001154:	40021000 	.word	0x40021000
 8001158:	40010800 	.word	0x40010800
 800115c:	40012800 	.word	0x40012800

08001160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b088      	sub	sp, #32
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a15      	ldr	r2, [pc, #84]	@ (80011d0 <HAL_UART_MspInit+0x70>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d123      	bne.n	80011c8 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001180:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <HAL_UART_MspInit+0x74>)
 8001182:	69db      	ldr	r3, [r3, #28]
 8001184:	4a13      	ldr	r2, [pc, #76]	@ (80011d4 <HAL_UART_MspInit+0x74>)
 8001186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800118a:	61d3      	str	r3, [r2, #28]
 800118c:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <HAL_UART_MspInit+0x74>)
 800118e:	69db      	ldr	r3, [r3, #28]
 8001190:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	4b0e      	ldr	r3, [pc, #56]	@ (80011d4 <HAL_UART_MspInit+0x74>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a0d      	ldr	r2, [pc, #52]	@ (80011d4 <HAL_UART_MspInit+0x74>)
 800119e:	f043 0304 	orr.w	r3, r3, #4
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b0b      	ldr	r3, [pc, #44]	@ (80011d4 <HAL_UART_MspInit+0x74>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0304 	and.w	r3, r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
 80011ae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011b0:	230c      	movs	r3, #12
 80011b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4805      	ldr	r0, [pc, #20]	@ (80011d8 <HAL_UART_MspInit+0x78>)
 80011c4:	f000 fef8 	bl	8001fb8 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80011c8:	bf00      	nop
 80011ca:	3720      	adds	r7, #32
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40004400 	.word	0x40004400
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010800 	.word	0x40010800

080011dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011e0:	bf00      	nop
 80011e2:	e7fd      	b.n	80011e0 <NMI_Handler+0x4>

080011e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011e8:	bf00      	nop
 80011ea:	e7fd      	b.n	80011e8 <HardFault_Handler+0x4>

080011ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011f0:	bf00      	nop
 80011f2:	e7fd      	b.n	80011f0 <MemManage_Handler+0x4>

080011f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <BusFault_Handler+0x4>

080011fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001200:	bf00      	nop
 8001202:	e7fd      	b.n	8001200 <UsageFault_Handler+0x4>

08001204 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	bc80      	pop	{r7}
 8001226:	4770      	bx	lr

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f8c2 	bl	80013b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8001230:	f000 febb 	bl	8001faa <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}

08001238 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800123c:	4803      	ldr	r0, [pc, #12]	@ (800124c <ADC1_2_IRQHandler+0x14>)
 800123e:	f000 fa93 	bl	8001768 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 8001242:	4803      	ldr	r0, [pc, #12]	@ (8001250 <ADC1_2_IRQHandler+0x18>)
 8001244:	f000 fa90 	bl	8001768 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	2000034c 	.word	0x2000034c
 8001250:	2000037c 	.word	0x2000037c

08001254 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001258:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800125c:	f001 f878 	bl	8002350 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800126c:	4a14      	ldr	r2, [pc, #80]	@ (80012c0 <_sbrk+0x5c>)
 800126e:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <_sbrk+0x60>)
 8001270:	1ad3      	subs	r3, r2, r3
 8001272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001278:	4b13      	ldr	r3, [pc, #76]	@ (80012c8 <_sbrk+0x64>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <_sbrk+0x64>)
 8001282:	4a12      	ldr	r2, [pc, #72]	@ (80012cc <_sbrk+0x68>)
 8001284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001286:	4b10      	ldr	r3, [pc, #64]	@ (80012c8 <_sbrk+0x64>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4413      	add	r3, r2
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	429a      	cmp	r2, r3
 8001292:	d207      	bcs.n	80012a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001294:	f004 fec8 	bl	8006028 <__errno>
 8001298:	4603      	mov	r3, r0
 800129a:	220c      	movs	r2, #12
 800129c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129e:	f04f 33ff 	mov.w	r3, #4294967295
 80012a2:	e009      	b.n	80012b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a4:	4b08      	ldr	r3, [pc, #32]	@ (80012c8 <_sbrk+0x64>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012aa:	4b07      	ldr	r3, [pc, #28]	@ (80012c8 <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	4a05      	ldr	r2, [pc, #20]	@ (80012c8 <_sbrk+0x64>)
 80012b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b6:	68fb      	ldr	r3, [r7, #12]
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3718      	adds	r7, #24
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20005000 	.word	0x20005000
 80012c4:	00000400 	.word	0x00000400
 80012c8:	200003f4 	.word	0x200003f4
 80012cc:	20000768 	.word	0x20000768

080012d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr

080012dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80012dc:	f7ff fff8 	bl	80012d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e0:	480b      	ldr	r0, [pc, #44]	@ (8001310 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80012e2:	490c      	ldr	r1, [pc, #48]	@ (8001314 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80012e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001318 <LoopFillZerobss+0x16>)
  movs r3, #0
 80012e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012e8:	e002      	b.n	80012f0 <LoopCopyDataInit>

080012ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012ee:	3304      	adds	r3, #4

080012f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f4:	d3f9      	bcc.n	80012ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012f6:	4a09      	ldr	r2, [pc, #36]	@ (800131c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80012f8:	4c09      	ldr	r4, [pc, #36]	@ (8001320 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012fc:	e001      	b.n	8001302 <LoopFillZerobss>

080012fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001300:	3204      	adds	r2, #4

08001302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001304:	d3fb      	bcc.n	80012fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001306:	f004 fe95 	bl	8006034 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800130a:	f7ff fc9b 	bl	8000c44 <main>
  bx lr
 800130e:	4770      	bx	lr
  ldr r0, =_sdata
 8001310:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001314:	20000330 	.word	0x20000330
  ldr r2, =_sidata
 8001318:	0800771c 	.word	0x0800771c
  ldr r2, =_sbss
 800131c:	20000330 	.word	0x20000330
  ldr r4, =_ebss
 8001320:	20000764 	.word	0x20000764

08001324 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001324:	e7fe      	b.n	8001324 <CAN1_RX1_IRQHandler>
	...

08001328 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800132c:	4b08      	ldr	r3, [pc, #32]	@ (8001350 <HAL_Init+0x28>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a07      	ldr	r2, [pc, #28]	@ (8001350 <HAL_Init+0x28>)
 8001332:	f043 0310 	orr.w	r3, r3, #16
 8001336:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001338:	2003      	movs	r0, #3
 800133a:	f000 fdf5 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800133e:	2000      	movs	r0, #0
 8001340:	f000 f808 	bl	8001354 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001344:	f7ff fe64 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40022000 	.word	0x40022000

08001354 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800135c:	4b12      	ldr	r3, [pc, #72]	@ (80013a8 <HAL_InitTick+0x54>)
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_InitTick+0x58>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	4619      	mov	r1, r3
 8001366:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136a:	fbb3 f3f1 	udiv	r3, r3, r1
 800136e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fe0d 	bl	8001f92 <HAL_SYSTICK_Config>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e00e      	b.n	80013a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b0f      	cmp	r3, #15
 8001386:	d80a      	bhi.n	800139e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001388:	2200      	movs	r2, #0
 800138a:	6879      	ldr	r1, [r7, #4]
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f000 fdd5 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001394:	4a06      	ldr	r2, [pc, #24]	@ (80013b0 <HAL_InitTick+0x5c>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	e000      	b.n	80013a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000000 	.word	0x20000000
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000004 	.word	0x20000004

080013b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b8:	4b05      	ldr	r3, [pc, #20]	@ (80013d0 <HAL_IncTick+0x1c>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	461a      	mov	r2, r3
 80013be:	4b05      	ldr	r3, [pc, #20]	@ (80013d4 <HAL_IncTick+0x20>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4413      	add	r3, r2
 80013c4:	4a03      	ldr	r2, [pc, #12]	@ (80013d4 <HAL_IncTick+0x20>)
 80013c6:	6013      	str	r3, [r2, #0]
}
 80013c8:	bf00      	nop
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bc80      	pop	{r7}
 80013ce:	4770      	bx	lr
 80013d0:	20000008 	.word	0x20000008
 80013d4:	200003f8 	.word	0x200003f8

080013d8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  return uwTick;
 80013dc:	4b02      	ldr	r3, [pc, #8]	@ (80013e8 <HAL_GetTick+0x10>)
 80013de:	681b      	ldr	r3, [r3, #0]
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bc80      	pop	{r7}
 80013e6:	4770      	bx	lr
 80013e8:	200003f8 	.word	0x200003f8

080013ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f4:	f7ff fff0 	bl	80013d8 <HAL_GetTick>
 80013f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001404:	d005      	beq.n	8001412 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001406:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <HAL_Delay+0x44>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	4413      	add	r3, r2
 8001410:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001412:	bf00      	nop
 8001414:	f7ff ffe0 	bl	80013d8 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	68fa      	ldr	r2, [r7, #12]
 8001420:	429a      	cmp	r2, r3
 8001422:	d8f7      	bhi.n	8001414 <HAL_Delay+0x28>
  {
  }
}
 8001424:	bf00      	nop
 8001426:	bf00      	nop
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000008 	.word	0x20000008

08001434 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b086      	sub	sp, #24
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800143c:	2300      	movs	r3, #0
 800143e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001440:	2300      	movs	r3, #0
 8001442:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001444:	2300      	movs	r3, #0
 8001446:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e0be      	b.n	80015d4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001460:	2b00      	cmp	r3, #0
 8001462:	d109      	bne.n	8001478 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2200      	movs	r2, #0
 8001468:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2200      	movs	r2, #0
 800146e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fdfe 	bl	8001074 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f000 fb8f 	bl	8001b9c <ADC_ConversionStop_Disable>
 800147e:	4603      	mov	r3, r0
 8001480:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	2b00      	cmp	r3, #0
 800148c:	f040 8099 	bne.w	80015c2 <HAL_ADC_Init+0x18e>
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f040 8095 	bne.w	80015c2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800149c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80014a0:	f023 0302 	bic.w	r3, r3, #2
 80014a4:	f043 0202 	orr.w	r2, r3, #2
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014b4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7b1b      	ldrb	r3, [r3, #12]
 80014ba:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80014bc:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80014be:	68ba      	ldr	r2, [r7, #8]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014cc:	d003      	beq.n	80014d6 <HAL_ADC_Init+0xa2>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d102      	bne.n	80014dc <HAL_ADC_Init+0xa8>
 80014d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014da:	e000      	b.n	80014de <HAL_ADC_Init+0xaa>
 80014dc:	2300      	movs	r3, #0
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	7d1b      	ldrb	r3, [r3, #20]
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d119      	bne.n	8001520 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	7b1b      	ldrb	r3, [r3, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d109      	bne.n	8001508 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	3b01      	subs	r3, #1
 80014fa:	035a      	lsls	r2, r3, #13
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	4313      	orrs	r3, r2
 8001500:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001504:	613b      	str	r3, [r7, #16]
 8001506:	e00b      	b.n	8001520 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	f043 0220 	orr.w	r2, r3, #32
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001518:	f043 0201 	orr.w	r2, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	430a      	orrs	r2, r1
 8001532:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	689a      	ldr	r2, [r3, #8]
 800153a:	4b28      	ldr	r3, [pc, #160]	@ (80015dc <HAL_ADC_Init+0x1a8>)
 800153c:	4013      	ands	r3, r2
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6812      	ldr	r2, [r2, #0]
 8001542:	68b9      	ldr	r1, [r7, #8]
 8001544:	430b      	orrs	r3, r1
 8001546:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001550:	d003      	beq.n	800155a <HAL_ADC_Init+0x126>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d104      	bne.n	8001564 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	3b01      	subs	r3, #1
 8001560:	051b      	lsls	r3, r3, #20
 8001562:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800156a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	430a      	orrs	r2, r1
 8001576:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689a      	ldr	r2, [r3, #8]
 800157e:	4b18      	ldr	r3, [pc, #96]	@ (80015e0 <HAL_ADC_Init+0x1ac>)
 8001580:	4013      	ands	r3, r2
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	429a      	cmp	r2, r3
 8001586:	d10b      	bne.n	80015a0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001592:	f023 0303 	bic.w	r3, r3, #3
 8001596:	f043 0201 	orr.w	r2, r3, #1
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800159e:	e018      	b.n	80015d2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015a4:	f023 0312 	bic.w	r3, r3, #18
 80015a8:	f043 0210 	orr.w	r2, r3, #16
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80015bc:	2301      	movs	r3, #1
 80015be:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80015c0:	e007      	b.n	80015d2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015c6:	f043 0210 	orr.w	r2, r3, #16
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3718      	adds	r7, #24
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	ffe1f7fd 	.word	0xffe1f7fd
 80015e0:	ff1f0efe 	.word	0xff1f0efe

080015e4 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d101      	bne.n	80015fe <HAL_ADC_Start_IT+0x1a>
 80015fa:	2302      	movs	r3, #2
 80015fc:	e0a0      	b.n	8001740 <HAL_ADC_Start_IT+0x15c>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2201      	movs	r2, #1
 8001602:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fa6e 	bl	8001ae8 <ADC_Enable>
 800160c:	4603      	mov	r3, r0
 800160e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	2b00      	cmp	r3, #0
 8001614:	f040 808f 	bne.w	8001736 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800161c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a45      	ldr	r2, [pc, #276]	@ (8001748 <HAL_ADC_Start_IT+0x164>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d105      	bne.n	8001642 <HAL_ADC_Start_IT+0x5e>
 8001636:	4b45      	ldr	r3, [pc, #276]	@ (800174c <HAL_ADC_Start_IT+0x168>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d115      	bne.n	800166e <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001646:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d026      	beq.n	80016aa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001660:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001664:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800166c:	e01d      	b.n	80016aa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a33      	ldr	r2, [pc, #204]	@ (800174c <HAL_ADC_Start_IT+0x168>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d004      	beq.n	800168e <HAL_ADC_Start_IT+0xaa>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a2f      	ldr	r2, [pc, #188]	@ (8001748 <HAL_ADC_Start_IT+0x164>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10d      	bne.n	80016aa <HAL_ADC_Start_IT+0xc6>
 800168e:	4b2f      	ldr	r3, [pc, #188]	@ (800174c <HAL_ADC_Start_IT+0x168>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001696:	2b00      	cmp	r3, #0
 8001698:	d007      	beq.n	80016aa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800169e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80016a2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ba:	f023 0206 	bic.w	r2, r3, #6
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80016c2:	e002      	b.n	80016ca <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f06f 0202 	mvn.w	r2, #2
 80016da:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f042 0220 	orr.w	r2, r2, #32
 80016ea:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80016f6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80016fa:	d113      	bne.n	8001724 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001700:	4a11      	ldr	r2, [pc, #68]	@ (8001748 <HAL_ADC_Start_IT+0x164>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d105      	bne.n	8001712 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001706:	4b11      	ldr	r3, [pc, #68]	@ (800174c <HAL_ADC_Start_IT+0x168>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800170e:	2b00      	cmp	r3, #0
 8001710:	d108      	bne.n	8001724 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001720:	609a      	str	r2, [r3, #8]
 8001722:	e00c      	b.n	800173e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	e003      	b.n	800173e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40012800 	.word	0x40012800
 800174c:	40012400 	.word	0x40012400

08001750 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800175e:	4618      	mov	r0, r3
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	f003 0320 	and.w	r3, r3, #32
 8001786:	2b00      	cmp	r3, #0
 8001788:	d03e      	beq.n	8001808 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d039      	beq.n	8001808 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001798:	f003 0310 	and.w	r3, r3, #16
 800179c:	2b00      	cmp	r3, #0
 800179e:	d105      	bne.n	80017ac <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017ba:	d11d      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d119      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f022 0220 	bic.w	r2, r2, #32
 80017d2:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	629a      	str	r2, [r3, #40]	@ 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	f043 0201 	orr.w	r2, r3, #1
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f003 fe4d 	bl	8005498 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f06f 0212 	mvn.w	r2, #18
 8001806:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800180e:	2b00      	cmp	r3, #0
 8001810:	d04d      	beq.n	80018ae <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	f003 0304 	and.w	r3, r3, #4
 8001818:	2b00      	cmp	r3, #0
 800181a:	d048      	beq.n	80018ae <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001820:	f003 0310 	and.w	r3, r3, #16
 8001824:	2b00      	cmp	r3, #0
 8001826:	d105      	bne.n	8001834 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800182c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800183e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8001842:	d012      	beq.n	800186a <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800184e:	2b00      	cmp	r3, #0
 8001850:	d125      	bne.n	800189e <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800185c:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001860:	d11d      	bne.n	800189e <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d119      	bne.n	800189e <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001878:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800187e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	629a      	str	r2, [r3, #40]	@ 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800188a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188e:	2b00      	cmp	r3, #0
 8001890:	d105      	bne.n	800189e <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001896:	f043 0201 	orr.w	r2, r3, #1
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 fa6c 	bl	8001d7c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f06f 020c 	mvn.w	r2, #12
 80018ac:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d012      	beq.n	80018de <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d00d      	beq.n	80018de <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f000 f809 	bl	80018e6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f06f 0201 	mvn.w	r2, #1
 80018dc:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80018de:	bf00      	nop
 80018e0:	3710      	adds	r7, #16
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}

080018e6 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr

080018f8 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001902:	2300      	movs	r3, #0
 8001904:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <HAL_ADC_ConfigChannel+0x20>
 8001914:	2302      	movs	r3, #2
 8001916:	e0dc      	b.n	8001ad2 <HAL_ADC_ConfigChannel+0x1da>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2201      	movs	r2, #1
 800191c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b06      	cmp	r3, #6
 8001926:	d81c      	bhi.n	8001962 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4613      	mov	r3, r2
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	3b05      	subs	r3, #5
 800193a:	221f      	movs	r2, #31
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	43db      	mvns	r3, r3
 8001942:	4019      	ands	r1, r3
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	6818      	ldr	r0, [r3, #0]
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685a      	ldr	r2, [r3, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	3b05      	subs	r3, #5
 8001954:	fa00 f203 	lsl.w	r2, r0, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	430a      	orrs	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001960:	e03c      	b.n	80019dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b0c      	cmp	r3, #12
 8001968:	d81c      	bhi.n	80019a4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	3b23      	subs	r3, #35	@ 0x23
 800197c:	221f      	movs	r2, #31
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	43db      	mvns	r3, r3
 8001984:	4019      	ands	r1, r3
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	6818      	ldr	r0, [r3, #0]
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	4413      	add	r3, r2
 8001994:	3b23      	subs	r3, #35	@ 0x23
 8001996:	fa00 f203 	lsl.w	r2, r0, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80019a2:	e01b      	b.n	80019dc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	3b41      	subs	r3, #65	@ 0x41
 80019b6:	221f      	movs	r2, #31
 80019b8:	fa02 f303 	lsl.w	r3, r2, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	4019      	ands	r1, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4613      	mov	r3, r2
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	4413      	add	r3, r2
 80019ce:	3b41      	subs	r3, #65	@ 0x41
 80019d0:	fa00 f203 	lsl.w	r2, r0, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	430a      	orrs	r2, r1
 80019da:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b09      	cmp	r3, #9
 80019e2:	d91c      	bls.n	8001a1e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68d9      	ldr	r1, [r3, #12]
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	3b1e      	subs	r3, #30
 80019f6:	2207      	movs	r2, #7
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	43db      	mvns	r3, r3
 80019fe:	4019      	ands	r1, r3
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	6898      	ldr	r0, [r3, #8]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4413      	add	r3, r2
 8001a0e:	3b1e      	subs	r3, #30
 8001a10:	fa00 f203 	lsl.w	r2, r0, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	430a      	orrs	r2, r1
 8001a1a:	60da      	str	r2, [r3, #12]
 8001a1c:	e019      	b.n	8001a52 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	6919      	ldr	r1, [r3, #16]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	2207      	movs	r2, #7
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	4019      	ands	r1, r3
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	6898      	ldr	r0, [r3, #8]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	4613      	mov	r3, r2
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	4413      	add	r3, r2
 8001a46:	fa00 f203 	lsl.w	r2, r0, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	430a      	orrs	r2, r1
 8001a50:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2b10      	cmp	r3, #16
 8001a58:	d003      	beq.n	8001a62 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a5e:	2b11      	cmp	r3, #17
 8001a60:	d132      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a1d      	ldr	r2, [pc, #116]	@ (8001adc <HAL_ADC_ConfigChannel+0x1e4>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d125      	bne.n	8001ab8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d126      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a88:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b10      	cmp	r3, #16
 8001a90:	d11a      	bne.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a92:	4b13      	ldr	r3, [pc, #76]	@ (8001ae0 <HAL_ADC_ConfigChannel+0x1e8>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <HAL_ADC_ConfigChannel+0x1ec>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	0c9a      	lsrs	r2, r3, #18
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	4413      	add	r3, r2
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aa8:	e002      	b.n	8001ab0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f9      	bne.n	8001aaa <HAL_ADC_ConfigChannel+0x1b2>
 8001ab6:	e007      	b.n	8001ac8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001abc:	f043 0220 	orr.w	r2, r3, #32
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40012400 	.word	0x40012400
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	431bde83 	.word	0x431bde83

08001ae8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d040      	beq.n	8001b88 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	689a      	ldr	r2, [r3, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0201 	orr.w	r2, r2, #1
 8001b14:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b16:	4b1f      	ldr	r3, [pc, #124]	@ (8001b94 <ADC_Enable+0xac>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <ADC_Enable+0xb0>)
 8001b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b24:	e002      	b.n	8001b2c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	3b01      	subs	r3, #1
 8001b2a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1f9      	bne.n	8001b26 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b32:	f7ff fc51 	bl	80013d8 <HAL_GetTick>
 8001b36:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b38:	e01f      	b.n	8001b7a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b3a:	f7ff fc4d 	bl	80013d8 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d918      	bls.n	8001b7a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d011      	beq.n	8001b7a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b5a:	f043 0210 	orr.w	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b66:	f043 0201 	orr.w	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e007      	b.n	8001b8a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d1d8      	bne.n	8001b3a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000000 	.word	0x20000000
 8001b98:	431bde83 	.word	0x431bde83

08001b9c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d12e      	bne.n	8001c14 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f022 0201 	bic.w	r2, r2, #1
 8001bc4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bc6:	f7ff fc07 	bl	80013d8 <HAL_GetTick>
 8001bca:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bcc:	e01b      	b.n	8001c06 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bce:	f7ff fc03 	bl	80013d8 <HAL_GetTick>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d914      	bls.n	8001c06 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d10d      	bne.n	8001c06 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	f043 0210 	orr.w	r2, r3, #16
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	f043 0201 	orr.w	r2, r3, #1
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e007      	b.n	8001c16 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d0dc      	beq.n	8001bce <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3710      	adds	r7, #16
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001c20:	b590      	push	{r4, r7, lr}
 8001c22:	b087      	sub	sp, #28
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_ADCEx_Calibration_Start+0x1e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e097      	b.n	8001d6e <HAL_ADCEx_Calibration_Start+0x14e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffa8 	bl	8001b9c <ADC_ConversionStop_Disable>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f7ff ff49 	bl	8001ae8 <ADC_Enable>
 8001c56:	4603      	mov	r3, r0
 8001c58:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f040 8081 	bne.w	8001d64 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c66:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c6a:	f023 0302 	bic.w	r3, r3, #2
 8001c6e:	f043 0202 	orr.w	r2, r3, #2
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c76:	4b40      	ldr	r3, [pc, #256]	@ (8001d78 <HAL_ADCEx_Calibration_Start+0x158>)
 8001c78:	681c      	ldr	r4, [r3, #0]
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	f001 f850 	bl	8002d20 <HAL_RCCEx_GetPeriphCLKFreq>
 8001c80:	4603      	mov	r3, r0
 8001c82:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001c86:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8001c88:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8001c8a:	e002      	b.n	8001c92 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d1f9      	bne.n	8001c8c <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0208 	orr.w	r2, r2, #8
 8001ca6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001ca8:	f7ff fb96 	bl	80013d8 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001cae:	e01b      	b.n	8001ce8 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001cb0:	f7ff fb92 	bl	80013d8 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b0a      	cmp	r3, #10
 8001cbc:	d914      	bls.n	8001ce8 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 0308 	and.w	r3, r3, #8
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00d      	beq.n	8001ce8 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd0:	f023 0312 	bic.w	r3, r3, #18
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e042      	b.n	8001d6e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1dc      	bne.n	8001cb0 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f042 0204 	orr.w	r2, r2, #4
 8001d04:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001d06:	f7ff fb67 	bl	80013d8 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d0c:	e01b      	b.n	8001d46 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001d0e:	f7ff fb63 	bl	80013d8 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b0a      	cmp	r3, #10
 8001d1a:	d914      	bls.n	8001d46 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 0304 	and.w	r3, r3, #4
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d00d      	beq.n	8001d46 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d2e:	f023 0312 	bic.w	r3, r3, #18
 8001d32:	f043 0210 	orr.w	r2, r3, #16
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e013      	b.n	8001d6e <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1dc      	bne.n	8001d0e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	f023 0303 	bic.w	r3, r3, #3
 8001d5c:	f043 0201 	orr.w	r2, r3, #1
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	371c      	adds	r7, #28
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd90      	pop	{r4, r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bc80      	pop	{r7}
 8001d8c:	4770      	bx	lr
	...

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	@ (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	@ (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4906      	ldr	r1, [pc, #24]	@ (8001e28 <__NVIC_EnableIRQ+0x34>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	@ (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	@ (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	@ 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	@ (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295
 8001f08:	f7ff ff90 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	@ (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff2d 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff42 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff90 	bl	8001e80 <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5f 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff35 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001fae:	f001 f9cb 	bl	8003348 <HAL_SYSTICK_Callback>
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
	...

08001fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b08b      	sub	sp, #44	@ 0x2c
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fca:	e169      	b.n	80022a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fcc:	2201      	movs	r2, #1
 8001fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69fa      	ldr	r2, [r7, #28]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	f040 8158 	bne.w	800229a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	4a9a      	ldr	r2, [pc, #616]	@ (8002258 <HAL_GPIO_Init+0x2a0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d05e      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a98      	ldr	r2, [pc, #608]	@ (8002258 <HAL_GPIO_Init+0x2a0>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d875      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8001ffa:	4a98      	ldr	r2, [pc, #608]	@ (800225c <HAL_GPIO_Init+0x2a4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d058      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002000:	4a96      	ldr	r2, [pc, #600]	@ (800225c <HAL_GPIO_Init+0x2a4>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d86f      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002006:	4a96      	ldr	r2, [pc, #600]	@ (8002260 <HAL_GPIO_Init+0x2a8>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d052      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 800200c:	4a94      	ldr	r2, [pc, #592]	@ (8002260 <HAL_GPIO_Init+0x2a8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d869      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002012:	4a94      	ldr	r2, [pc, #592]	@ (8002264 <HAL_GPIO_Init+0x2ac>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d04c      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002018:	4a92      	ldr	r2, [pc, #584]	@ (8002264 <HAL_GPIO_Init+0x2ac>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d863      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 800201e:	4a92      	ldr	r2, [pc, #584]	@ (8002268 <HAL_GPIO_Init+0x2b0>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d046      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
 8002024:	4a90      	ldr	r2, [pc, #576]	@ (8002268 <HAL_GPIO_Init+0x2b0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d85d      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 800202a:	2b12      	cmp	r3, #18
 800202c:	d82a      	bhi.n	8002084 <HAL_GPIO_Init+0xcc>
 800202e:	2b12      	cmp	r3, #18
 8002030:	d859      	bhi.n	80020e6 <HAL_GPIO_Init+0x12e>
 8002032:	a201      	add	r2, pc, #4	@ (adr r2, 8002038 <HAL_GPIO_Init+0x80>)
 8002034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002038:	080020b3 	.word	0x080020b3
 800203c:	0800208d 	.word	0x0800208d
 8002040:	0800209f 	.word	0x0800209f
 8002044:	080020e1 	.word	0x080020e1
 8002048:	080020e7 	.word	0x080020e7
 800204c:	080020e7 	.word	0x080020e7
 8002050:	080020e7 	.word	0x080020e7
 8002054:	080020e7 	.word	0x080020e7
 8002058:	080020e7 	.word	0x080020e7
 800205c:	080020e7 	.word	0x080020e7
 8002060:	080020e7 	.word	0x080020e7
 8002064:	080020e7 	.word	0x080020e7
 8002068:	080020e7 	.word	0x080020e7
 800206c:	080020e7 	.word	0x080020e7
 8002070:	080020e7 	.word	0x080020e7
 8002074:	080020e7 	.word	0x080020e7
 8002078:	080020e7 	.word	0x080020e7
 800207c:	08002095 	.word	0x08002095
 8002080:	080020a9 	.word	0x080020a9
 8002084:	4a79      	ldr	r2, [pc, #484]	@ (800226c <HAL_GPIO_Init+0x2b4>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d013      	beq.n	80020b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800208a:	e02c      	b.n	80020e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	623b      	str	r3, [r7, #32]
          break;
 8002092:	e029      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	3304      	adds	r3, #4
 800209a:	623b      	str	r3, [r7, #32]
          break;
 800209c:	e024      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	3308      	adds	r3, #8
 80020a4:	623b      	str	r3, [r7, #32]
          break;
 80020a6:	e01f      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	330c      	adds	r3, #12
 80020ae:	623b      	str	r3, [r7, #32]
          break;
 80020b0:	e01a      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d102      	bne.n	80020c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ba:	2304      	movs	r3, #4
 80020bc:	623b      	str	r3, [r7, #32]
          break;
 80020be:	e013      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d105      	bne.n	80020d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	611a      	str	r2, [r3, #16]
          break;
 80020d2:	e009      	b.n	80020e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020d4:	2308      	movs	r3, #8
 80020d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69fa      	ldr	r2, [r7, #28]
 80020dc:	615a      	str	r2, [r3, #20]
          break;
 80020de:	e003      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020e0:	2300      	movs	r3, #0
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e000      	b.n	80020e8 <HAL_GPIO_Init+0x130>
          break;
 80020e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2bff      	cmp	r3, #255	@ 0xff
 80020ec:	d801      	bhi.n	80020f2 <HAL_GPIO_Init+0x13a>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	e001      	b.n	80020f6 <HAL_GPIO_Init+0x13e>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	2bff      	cmp	r3, #255	@ 0xff
 80020fc:	d802      	bhi.n	8002104 <HAL_GPIO_Init+0x14c>
 80020fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	e002      	b.n	800210a <HAL_GPIO_Init+0x152>
 8002104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002106:	3b08      	subs	r3, #8
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	210f      	movs	r1, #15
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	401a      	ands	r2, r3
 800211c:	6a39      	ldr	r1, [r7, #32]
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	431a      	orrs	r2, r3
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80b1 	beq.w	800229a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002138:	4b4d      	ldr	r3, [pc, #308]	@ (8002270 <HAL_GPIO_Init+0x2b8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	4a4c      	ldr	r2, [pc, #304]	@ (8002270 <HAL_GPIO_Init+0x2b8>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	6193      	str	r3, [r2, #24]
 8002144:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <HAL_GPIO_Init+0x2b8>)
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	f003 0301 	and.w	r3, r3, #1
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002150:	4a48      	ldr	r2, [pc, #288]	@ (8002274 <HAL_GPIO_Init+0x2bc>)
 8002152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002154:	089b      	lsrs	r3, r3, #2
 8002156:	3302      	adds	r3, #2
 8002158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800215e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002160:	f003 0303 	and.w	r3, r3, #3
 8002164:	009b      	lsls	r3, r3, #2
 8002166:	220f      	movs	r2, #15
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	43db      	mvns	r3, r3
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4013      	ands	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a40      	ldr	r2, [pc, #256]	@ (8002278 <HAL_GPIO_Init+0x2c0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d013      	beq.n	80021a4 <HAL_GPIO_Init+0x1ec>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3f      	ldr	r2, [pc, #252]	@ (800227c <HAL_GPIO_Init+0x2c4>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d00d      	beq.n	80021a0 <HAL_GPIO_Init+0x1e8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3e      	ldr	r2, [pc, #248]	@ (8002280 <HAL_GPIO_Init+0x2c8>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d007      	beq.n	800219c <HAL_GPIO_Init+0x1e4>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3d      	ldr	r2, [pc, #244]	@ (8002284 <HAL_GPIO_Init+0x2cc>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d101      	bne.n	8002198 <HAL_GPIO_Init+0x1e0>
 8002194:	2303      	movs	r3, #3
 8002196:	e006      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 8002198:	2304      	movs	r3, #4
 800219a:	e004      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 800219c:	2302      	movs	r3, #2
 800219e:	e002      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 80021a0:	2301      	movs	r3, #1
 80021a2:	e000      	b.n	80021a6 <HAL_GPIO_Init+0x1ee>
 80021a4:	2300      	movs	r3, #0
 80021a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021a8:	f002 0203 	and.w	r2, r2, #3
 80021ac:	0092      	lsls	r2, r2, #2
 80021ae:	4093      	lsls	r3, r2
 80021b0:	68fa      	ldr	r2, [r7, #12]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021b6:	492f      	ldr	r1, [pc, #188]	@ (8002274 <HAL_GPIO_Init+0x2bc>)
 80021b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	3302      	adds	r3, #2
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d006      	beq.n	80021de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 80021d2:	689a      	ldr	r2, [r3, #8]
 80021d4:	492c      	ldr	r1, [pc, #176]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	4313      	orrs	r3, r2
 80021da:	608b      	str	r3, [r1, #8]
 80021dc:	e006      	b.n	80021ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021de:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 80021e0:	689a      	ldr	r2, [r3, #8]
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	4928      	ldr	r1, [pc, #160]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 80021e8:	4013      	ands	r3, r2
 80021ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d006      	beq.n	8002206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021f8:	4b23      	ldr	r3, [pc, #140]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 80021fa:	68da      	ldr	r2, [r3, #12]
 80021fc:	4922      	ldr	r1, [pc, #136]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	4313      	orrs	r3, r2
 8002202:	60cb      	str	r3, [r1, #12]
 8002204:	e006      	b.n	8002214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002206:	4b20      	ldr	r3, [pc, #128]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	43db      	mvns	r3, r3
 800220e:	491e      	ldr	r1, [pc, #120]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d006      	beq.n	800222e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002220:	4b19      	ldr	r3, [pc, #100]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4918      	ldr	r1, [pc, #96]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	604b      	str	r3, [r1, #4]
 800222c:	e006      	b.n	800223c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800222e:	4b16      	ldr	r3, [pc, #88]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 8002230:	685a      	ldr	r2, [r3, #4]
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	43db      	mvns	r3, r3
 8002236:	4914      	ldr	r1, [pc, #80]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 8002238:	4013      	ands	r3, r2
 800223a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d021      	beq.n	800228c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002248:	4b0f      	ldr	r3, [pc, #60]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	490e      	ldr	r1, [pc, #56]	@ (8002288 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	600b      	str	r3, [r1, #0]
 8002254:	e021      	b.n	800229a <HAL_GPIO_Init+0x2e2>
 8002256:	bf00      	nop
 8002258:	10320000 	.word	0x10320000
 800225c:	10310000 	.word	0x10310000
 8002260:	10220000 	.word	0x10220000
 8002264:	10210000 	.word	0x10210000
 8002268:	10120000 	.word	0x10120000
 800226c:	10110000 	.word	0x10110000
 8002270:	40021000 	.word	0x40021000
 8002274:	40010000 	.word	0x40010000
 8002278:	40010800 	.word	0x40010800
 800227c:	40010c00 	.word	0x40010c00
 8002280:	40011000 	.word	0x40011000
 8002284:	40011400 	.word	0x40011400
 8002288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_GPIO_Init+0x304>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	43db      	mvns	r3, r3
 8002294:	4909      	ldr	r1, [pc, #36]	@ (80022bc <HAL_GPIO_Init+0x304>)
 8002296:	4013      	ands	r3, r2
 8002298:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800229a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800229c:	3301      	adds	r3, #1
 800229e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a6:	fa22 f303 	lsr.w	r3, r2, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f47f ae8e 	bne.w	8001fcc <HAL_GPIO_Init+0x14>
  }
}
 80022b0:	bf00      	nop
 80022b2:	bf00      	nop
 80022b4:	372c      	adds	r7, #44	@ 0x2c
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr

080022ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	460b      	mov	r3, r1
 80022f8:	807b      	strh	r3, [r7, #2]
 80022fa:	4613      	mov	r3, r2
 80022fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022fe:	787b      	ldrb	r3, [r7, #1]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d003      	beq.n	800230c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800230a:	e003      	b.n	8002314 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800230c:	887b      	ldrh	r3, [r7, #2]
 800230e:	041a      	lsls	r2, r3, #16
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	611a      	str	r2, [r3, #16]
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	bc80      	pop	{r7}
 800231c:	4770      	bx	lr

0800231e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231e:	b480      	push	{r7}
 8002320:	b085      	sub	sp, #20
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
 8002326:	460b      	mov	r3, r1
 8002328:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002330:	887a      	ldrh	r2, [r7, #2]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4013      	ands	r3, r2
 8002336:	041a      	lsls	r2, r3, #16
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	43d9      	mvns	r1, r3
 800233c:	887b      	ldrh	r3, [r7, #2]
 800233e:	400b      	ands	r3, r1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800235a:	4b08      	ldr	r3, [pc, #32]	@ (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	4013      	ands	r3, r2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d006      	beq.n	8002374 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002366:	4a05      	ldr	r2, [pc, #20]	@ (800237c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002368:	88fb      	ldrh	r3, [r7, #6]
 800236a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	4618      	mov	r0, r3
 8002370:	f000 f806 	bl	8002380 <HAL_GPIO_EXTI_Callback>
  }
}
 8002374:	bf00      	nop
 8002376:	3708      	adds	r7, #8
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40010400 	.word	0x40010400

08002380 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	4603      	mov	r3, r0
 8002388:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800238a:	bf00      	nop
 800238c:	370c      	adds	r7, #12
 800238e:	46bd      	mov	sp, r7
 8002390:	bc80      	pop	{r7}
 8002392:	4770      	bx	lr

08002394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e272      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8087 	beq.w	80024c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023b4:	4b92      	ldr	r3, [pc, #584]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d00c      	beq.n	80023da <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023c0:	4b8f      	ldr	r3, [pc, #572]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 030c 	and.w	r3, r3, #12
 80023c8:	2b08      	cmp	r3, #8
 80023ca:	d112      	bne.n	80023f2 <HAL_RCC_OscConfig+0x5e>
 80023cc:	4b8c      	ldr	r3, [pc, #560]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d8:	d10b      	bne.n	80023f2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023da:	4b89      	ldr	r3, [pc, #548]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d06c      	beq.n	80024c0 <HAL_RCC_OscConfig+0x12c>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d168      	bne.n	80024c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e24c      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fa:	d106      	bne.n	800240a <HAL_RCC_OscConfig+0x76>
 80023fc:	4b80      	ldr	r3, [pc, #512]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a7f      	ldr	r2, [pc, #508]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002406:	6013      	str	r3, [r2, #0]
 8002408:	e02e      	b.n	8002468 <HAL_RCC_OscConfig+0xd4>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10c      	bne.n	800242c <HAL_RCC_OscConfig+0x98>
 8002412:	4b7b      	ldr	r3, [pc, #492]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a7a      	ldr	r2, [pc, #488]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002418:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	4b78      	ldr	r3, [pc, #480]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a77      	ldr	r2, [pc, #476]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002424:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	e01d      	b.n	8002468 <HAL_RCC_OscConfig+0xd4>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002434:	d10c      	bne.n	8002450 <HAL_RCC_OscConfig+0xbc>
 8002436:	4b72      	ldr	r3, [pc, #456]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a71      	ldr	r2, [pc, #452]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800243c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002440:	6013      	str	r3, [r2, #0]
 8002442:	4b6f      	ldr	r3, [pc, #444]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a6e      	ldr	r2, [pc, #440]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002448:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800244c:	6013      	str	r3, [r2, #0]
 800244e:	e00b      	b.n	8002468 <HAL_RCC_OscConfig+0xd4>
 8002450:	4b6b      	ldr	r3, [pc, #428]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a6a      	ldr	r2, [pc, #424]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002456:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a67      	ldr	r2, [pc, #412]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002462:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002466:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d013      	beq.n	8002498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002470:	f7fe ffb2 	bl	80013d8 <HAL_GetTick>
 8002474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe ffae 	bl	80013d8 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e200      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b5d      	ldr	r3, [pc, #372]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d0f0      	beq.n	8002478 <HAL_RCC_OscConfig+0xe4>
 8002496:	e014      	b.n	80024c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002498:	f7fe ff9e 	bl	80013d8 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	e008      	b.n	80024b2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024a0:	f7fe ff9a 	bl	80013d8 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b64      	cmp	r3, #100	@ 0x64
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e1ec      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024b2:	4b53      	ldr	r3, [pc, #332]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1f0      	bne.n	80024a0 <HAL_RCC_OscConfig+0x10c>
 80024be:	e000      	b.n	80024c2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d063      	beq.n	8002596 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ce:	4b4c      	ldr	r3, [pc, #304]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f003 030c 	and.w	r3, r3, #12
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00b      	beq.n	80024f2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024da:	4b49      	ldr	r3, [pc, #292]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f003 030c 	and.w	r3, r3, #12
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d11c      	bne.n	8002520 <HAL_RCC_OscConfig+0x18c>
 80024e6:	4b46      	ldr	r3, [pc, #280]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d116      	bne.n	8002520 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024f2:	4b43      	ldr	r3, [pc, #268]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_RCC_OscConfig+0x176>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d001      	beq.n	800250a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e1c0      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250a:	4b3d      	ldr	r3, [pc, #244]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	00db      	lsls	r3, r3, #3
 8002518:	4939      	ldr	r1, [pc, #228]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800251a:	4313      	orrs	r3, r2
 800251c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800251e:	e03a      	b.n	8002596 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d020      	beq.n	800256a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002528:	4b36      	ldr	r3, [pc, #216]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 800252a:	2201      	movs	r2, #1
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe ff53 	bl	80013d8 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002536:	f7fe ff4f 	bl	80013d8 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e1a1      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002548:	4b2d      	ldr	r3, [pc, #180]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0f0      	beq.n	8002536 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	4b2a      	ldr	r3, [pc, #168]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4927      	ldr	r1, [pc, #156]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 8002564:	4313      	orrs	r3, r2
 8002566:	600b      	str	r3, [r1, #0]
 8002568:	e015      	b.n	8002596 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800256a:	4b26      	ldr	r3, [pc, #152]	@ (8002604 <HAL_RCC_OscConfig+0x270>)
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002570:	f7fe ff32 	bl	80013d8 <HAL_GetTick>
 8002574:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7fe ff2e 	bl	80013d8 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e180      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258a:	4b1d      	ldr	r3, [pc, #116]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1f0      	bne.n	8002578 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d03a      	beq.n	8002618 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d019      	beq.n	80025de <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025aa:	4b17      	ldr	r3, [pc, #92]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b0:	f7fe ff12 	bl	80013d8 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7fe ff0e 	bl	80013d8 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e160      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002600 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d0f0      	beq.n	80025b8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025d6:	2001      	movs	r0, #1
 80025d8:	f000 face 	bl	8002b78 <RCC_Delay>
 80025dc:	e01c      	b.n	8002618 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025de:	4b0a      	ldr	r3, [pc, #40]	@ (8002608 <HAL_RCC_OscConfig+0x274>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e4:	f7fe fef8 	bl	80013d8 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ea:	e00f      	b.n	800260c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ec:	f7fe fef4 	bl	80013d8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d908      	bls.n	800260c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e146      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	42420000 	.word	0x42420000
 8002608:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	4b92      	ldr	r3, [pc, #584]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1e9      	bne.n	80025ec <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a6 	beq.w	8002772 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800262a:	4b8b      	ldr	r3, [pc, #556]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002636:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	4a87      	ldr	r2, [pc, #540]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002640:	61d3      	str	r3, [r2, #28]
 8002642:	4b85      	ldr	r3, [pc, #532]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800264a:	60bb      	str	r3, [r7, #8]
 800264c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264e:	2301      	movs	r3, #1
 8002650:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002652:	4b82      	ldr	r3, [pc, #520]	@ (800285c <HAL_RCC_OscConfig+0x4c8>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265a:	2b00      	cmp	r3, #0
 800265c:	d118      	bne.n	8002690 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800265e:	4b7f      	ldr	r3, [pc, #508]	@ (800285c <HAL_RCC_OscConfig+0x4c8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7e      	ldr	r2, [pc, #504]	@ (800285c <HAL_RCC_OscConfig+0x4c8>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800266a:	f7fe feb5 	bl	80013d8 <HAL_GetTick>
 800266e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	e008      	b.n	8002684 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002672:	f7fe feb1 	bl	80013d8 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	2b64      	cmp	r3, #100	@ 0x64
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e103      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002684:	4b75      	ldr	r3, [pc, #468]	@ (800285c <HAL_RCC_OscConfig+0x4c8>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800268c:	2b00      	cmp	r3, #0
 800268e:	d0f0      	beq.n	8002672 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d106      	bne.n	80026a6 <HAL_RCC_OscConfig+0x312>
 8002698:	4b6f      	ldr	r3, [pc, #444]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	4a6e      	ldr	r2, [pc, #440]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6213      	str	r3, [r2, #32]
 80026a4:	e02d      	b.n	8002702 <HAL_RCC_OscConfig+0x36e>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCC_OscConfig+0x334>
 80026ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026b0:	6a1b      	ldr	r3, [r3, #32]
 80026b2:	4a69      	ldr	r2, [pc, #420]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6213      	str	r3, [r2, #32]
 80026ba:	4b67      	ldr	r3, [pc, #412]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4a66      	ldr	r2, [pc, #408]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026c0:	f023 0304 	bic.w	r3, r3, #4
 80026c4:	6213      	str	r3, [r2, #32]
 80026c6:	e01c      	b.n	8002702 <HAL_RCC_OscConfig+0x36e>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	2b05      	cmp	r3, #5
 80026ce:	d10c      	bne.n	80026ea <HAL_RCC_OscConfig+0x356>
 80026d0:	4b61      	ldr	r3, [pc, #388]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	4a60      	ldr	r2, [pc, #384]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026d6:	f043 0304 	orr.w	r3, r3, #4
 80026da:	6213      	str	r3, [r2, #32]
 80026dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	6213      	str	r3, [r2, #32]
 80026e8:	e00b      	b.n	8002702 <HAL_RCC_OscConfig+0x36e>
 80026ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026ec:	6a1b      	ldr	r3, [r3, #32]
 80026ee:	4a5a      	ldr	r2, [pc, #360]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	f023 0301 	bic.w	r3, r3, #1
 80026f4:	6213      	str	r3, [r2, #32]
 80026f6:	4b58      	ldr	r3, [pc, #352]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	6a1b      	ldr	r3, [r3, #32]
 80026fa:	4a57      	ldr	r2, [pc, #348]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80026fc:	f023 0304 	bic.w	r3, r3, #4
 8002700:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d015      	beq.n	8002736 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7fe fe65 	bl	80013d8 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002712:	f7fe fe61 	bl	80013d8 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002720:	4293      	cmp	r3, r2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e0b1      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002728:	4b4b      	ldr	r3, [pc, #300]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0ee      	beq.n	8002712 <HAL_RCC_OscConfig+0x37e>
 8002734:	e014      	b.n	8002760 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002736:	f7fe fe4f 	bl	80013d8 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	e00a      	b.n	8002754 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fe4b 	bl	80013d8 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	@ 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e09b      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1ee      	bne.n	800273e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002760:	7dfb      	ldrb	r3, [r7, #23]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d105      	bne.n	8002772 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002766:	4b3c      	ldr	r3, [pc, #240]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	69db      	ldr	r3, [r3, #28]
 800276a:	4a3b      	ldr	r2, [pc, #236]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002770:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	2b00      	cmp	r3, #0
 8002778:	f000 8087 	beq.w	800288a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800277c:	4b36      	ldr	r3, [pc, #216]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f003 030c 	and.w	r3, r3, #12
 8002784:	2b08      	cmp	r3, #8
 8002786:	d061      	beq.n	800284c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	69db      	ldr	r3, [r3, #28]
 800278c:	2b02      	cmp	r3, #2
 800278e:	d146      	bne.n	800281e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002790:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7fe fe1f 	bl	80013d8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279e:	f7fe fe1b 	bl	80013d8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e06d      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027b0:	4b29      	ldr	r3, [pc, #164]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1f0      	bne.n	800279e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027c4:	d108      	bne.n	80027d8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027c6:	4b24      	ldr	r3, [pc, #144]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	4921      	ldr	r1, [pc, #132]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027d8:	4b1f      	ldr	r3, [pc, #124]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a19      	ldr	r1, [r3, #32]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e8:	430b      	orrs	r3, r1
 80027ea:	491b      	ldr	r1, [pc, #108]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002860 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f6:	f7fe fdef 	bl	80013d8 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fc:	e008      	b.n	8002810 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027fe:	f7fe fdeb 	bl	80013d8 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	2b02      	cmp	r3, #2
 800280a:	d901      	bls.n	8002810 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800280c:	2303      	movs	r3, #3
 800280e:	e03d      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d0f0      	beq.n	80027fe <HAL_RCC_OscConfig+0x46a>
 800281c:	e035      	b.n	800288a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800281e:	4b10      	ldr	r3, [pc, #64]	@ (8002860 <HAL_RCC_OscConfig+0x4cc>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7fe fdd8 	bl	80013d8 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800282c:	f7fe fdd4 	bl	80013d8 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e026      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283e:	4b06      	ldr	r3, [pc, #24]	@ (8002858 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x498>
 800284a:	e01e      	b.n	800288a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e019      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
 8002858:	40021000 	.word	0x40021000
 800285c:	40007000 	.word	0x40007000
 8002860:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002864:	4b0b      	ldr	r3, [pc, #44]	@ (8002894 <HAL_RCC_OscConfig+0x500>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	429a      	cmp	r2, r3
 8002876:	d106      	bne.n	8002886 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000

08002898 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d101      	bne.n	80028ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e0d0      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028ac:	4b6a      	ldr	r3, [pc, #424]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d910      	bls.n	80028dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ba:	4b67      	ldr	r3, [pc, #412]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f023 0207 	bic.w	r2, r3, #7
 80028c2:	4965      	ldr	r1, [pc, #404]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b63      	ldr	r3, [pc, #396]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0307 	and.w	r3, r3, #7
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e0b8      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0302 	and.w	r3, r3, #2
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d020      	beq.n	800292a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0304 	and.w	r3, r3, #4
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d005      	beq.n	8002900 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028f4:	4b59      	ldr	r3, [pc, #356]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	4a58      	ldr	r2, [pc, #352]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0308 	and.w	r3, r3, #8
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800290c:	4b53      	ldr	r3, [pc, #332]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a52      	ldr	r2, [pc, #328]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002916:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002918:	4b50      	ldr	r3, [pc, #320]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	494d      	ldr	r1, [pc, #308]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d040      	beq.n	80029b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d107      	bne.n	800294e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293e:	4b47      	ldr	r3, [pc, #284]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d115      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e07f      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d107      	bne.n	8002966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002956:	4b41      	ldr	r3, [pc, #260]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e073      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002966:	4b3d      	ldr	r3, [pc, #244]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e06b      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002976:	4b39      	ldr	r3, [pc, #228]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f023 0203 	bic.w	r2, r3, #3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	4936      	ldr	r1, [pc, #216]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002988:	f7fe fd26 	bl	80013d8 <HAL_GetTick>
 800298c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298e:	e00a      	b.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002990:	f7fe fd22 	bl	80013d8 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800299e:	4293      	cmp	r3, r2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e053      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a6:	4b2d      	ldr	r3, [pc, #180]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f003 020c 	and.w	r2, r3, #12
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d1eb      	bne.n	8002990 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029b8:	4b27      	ldr	r3, [pc, #156]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0307 	and.w	r3, r3, #7
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d210      	bcs.n	80029e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f023 0207 	bic.w	r2, r3, #7
 80029ce:	4922      	ldr	r1, [pc, #136]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029d6:	4b20      	ldr	r3, [pc, #128]	@ (8002a58 <HAL_RCC_ClockConfig+0x1c0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	683a      	ldr	r2, [r7, #0]
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d001      	beq.n	80029e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d008      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029f4:	4b19      	ldr	r3, [pc, #100]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4916      	ldr	r1, [pc, #88]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0308 	and.w	r3, r3, #8
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d009      	beq.n	8002a26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a12:	4b12      	ldr	r3, [pc, #72]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	490e      	ldr	r1, [pc, #56]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a26:	f000 f821 	bl	8002a6c <HAL_RCC_GetSysClockFreq>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a5c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	091b      	lsrs	r3, r3, #4
 8002a32:	f003 030f 	and.w	r3, r3, #15
 8002a36:	490a      	ldr	r1, [pc, #40]	@ (8002a60 <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	5ccb      	ldrb	r3, [r1, r3]
 8002a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a3e:	4a09      	ldr	r2, [pc, #36]	@ (8002a64 <HAL_RCC_ClockConfig+0x1cc>)
 8002a40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a42:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_ClockConfig+0x1d0>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fc84 	bl	8001354 <HAL_InitTick>

  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3710      	adds	r7, #16
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40022000 	.word	0x40022000
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	080073a0 	.word	0x080073a0
 8002a64:	20000000 	.word	0x20000000
 8002a68:	20000004 	.word	0x20000004

08002a6c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
 8002a76:	2300      	movs	r3, #0
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	617b      	str	r3, [r7, #20]
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a86:	4b1e      	ldr	r3, [pc, #120]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d002      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x30>
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0x36>
 8002a9a:	e027      	b.n	8002aec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a9c:	4b19      	ldr	r3, [pc, #100]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a9e:	613b      	str	r3, [r7, #16]
      break;
 8002aa0:	e027      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	0c9b      	lsrs	r3, r3, #18
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	4a17      	ldr	r2, [pc, #92]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002aac:	5cd3      	ldrb	r3, [r2, r3]
 8002aae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d010      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aba:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_RCC_GetSysClockFreq+0x94>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	0c5b      	lsrs	r3, r3, #17
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	4a11      	ldr	r2, [pc, #68]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ac6:	5cd3      	ldrb	r3, [r2, r3]
 8002ac8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ace:	fb03 f202 	mul.w	r2, r3, r2
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
 8002ada:	e004      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a0c      	ldr	r2, [pc, #48]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	613b      	str	r3, [r7, #16]
      break;
 8002aea:	e002      	b.n	8002af2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b05      	ldr	r3, [pc, #20]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aee:	613b      	str	r3, [r7, #16]
      break;
 8002af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af2:	693b      	ldr	r3, [r7, #16]
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000
 8002b04:	007a1200 	.word	0x007a1200
 8002b08:	080073b8 	.word	0x080073b8
 8002b0c:	080073c8 	.word	0x080073c8
 8002b10:	003d0900 	.word	0x003d0900

08002b14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b18:	4b02      	ldr	r3, [pc, #8]	@ (8002b24 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr
 8002b24:	20000000 	.word	0x20000000

08002b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b2c:	f7ff fff2 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b30:	4602      	mov	r2, r0
 8002b32:	4b05      	ldr	r3, [pc, #20]	@ (8002b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0a1b      	lsrs	r3, r3, #8
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	4903      	ldr	r1, [pc, #12]	@ (8002b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b3e:	5ccb      	ldrb	r3, [r1, r3]
 8002b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	bd80      	pop	{r7, pc}
 8002b48:	40021000 	.word	0x40021000
 8002b4c:	080073b0 	.word	0x080073b0

08002b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b54:	f7ff ffde 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	0adb      	lsrs	r3, r3, #11
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	4903      	ldr	r1, [pc, #12]	@ (8002b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b66:	5ccb      	ldrb	r3, [r1, r3]
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	080073b0 	.word	0x080073b0

08002b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b80:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <RCC_Delay+0x34>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <RCC_Delay+0x38>)
 8002b86:	fba2 2303 	umull	r2, r3, r2, r3
 8002b8a:	0a5b      	lsrs	r3, r3, #9
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b94:	bf00      	nop
  }
  while (Delay --);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	1e5a      	subs	r2, r3, #1
 8002b9a:	60fa      	str	r2, [r7, #12]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1f9      	bne.n	8002b94 <RCC_Delay+0x1c>
}
 8002ba0:	bf00      	nop
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	10624dd3 	.word	0x10624dd3

08002bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	613b      	str	r3, [r7, #16]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d07d      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d10d      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b4c      	ldr	r3, [pc, #304]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4a4b      	ldr	r2, [pc, #300]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bea:	61d3      	str	r3, [r2, #28]
 8002bec:	4b49      	ldr	r3, [pc, #292]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002bee:	69db      	ldr	r3, [r3, #28]
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfc:	4b46      	ldr	r3, [pc, #280]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d118      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c08:	4b43      	ldr	r3, [pc, #268]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a42      	ldr	r2, [pc, #264]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c14:	f7fe fbe0 	bl	80013d8 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	e008      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c1c:	f7fe fbdc 	bl	80013d8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	@ 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e06d      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c3a:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d02e      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d027      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c58:	4b2e      	ldr	r3, [pc, #184]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c62:	4b2e      	ldr	r3, [pc, #184]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c64:	2201      	movs	r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c68:	4b2c      	ldr	r3, [pc, #176]	@ (8002d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002c6e:	4a29      	ldr	r2, [pc, #164]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f003 0301 	and.w	r3, r3, #1
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d014      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c7e:	f7fe fbab 	bl	80013d8 <HAL_GetTick>
 8002c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c84:	e00a      	b.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c86:	f7fe fba7 	bl	80013d8 <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d901      	bls.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e036      	b.n	8002d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d0ee      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002caa:	6a1b      	ldr	r3, [r3, #32]
 8002cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4917      	ldr	r1, [pc, #92]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002cba:	7dfb      	ldrb	r3, [r7, #23]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d105      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cc0:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc2:	69db      	ldr	r3, [r3, #28]
 8002cc4:	4a13      	ldr	r2, [pc, #76]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	490b      	ldr	r1, [pc, #44]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d008      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cf6:	4b07      	ldr	r3, [pc, #28]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	4904      	ldr	r1, [pc, #16]	@ (8002d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3718      	adds	r7, #24
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40021000 	.word	0x40021000
 8002d18:	40007000 	.word	0x40007000
 8002d1c:	42420440 	.word	0x42420440

08002d20 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	617b      	str	r3, [r7, #20]
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61fb      	str	r3, [r7, #28]
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	2300      	movs	r3, #0
 8002d3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b10      	cmp	r3, #16
 8002d40:	d00a      	beq.n	8002d58 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b10      	cmp	r3, #16
 8002d46:	f200 808a 	bhi.w	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d045      	beq.n	8002ddc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d075      	beq.n	8002e42 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002d56:	e082      	b.n	8002e5e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002d58:	4b46      	ldr	r3, [pc, #280]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002d5e:	4b45      	ldr	r3, [pc, #276]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d07b      	beq.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	0c9b      	lsrs	r3, r3, #18
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	4a41      	ldr	r2, [pc, #260]	@ (8002e78 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002d74:	5cd3      	ldrb	r3, [r2, r3]
 8002d76:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d015      	beq.n	8002dae <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d82:	4b3c      	ldr	r3, [pc, #240]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	0c5b      	lsrs	r3, r3, #17
 8002d88:	f003 0301 	and.w	r3, r3, #1
 8002d8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002e7c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002d8e:	5cd3      	ldrb	r3, [r2, r3]
 8002d90:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002d9c:	4a38      	ldr	r2, [pc, #224]	@ (8002e80 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	fbb2 f2f3 	udiv	r2, r2, r3
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	fb02 f303 	mul.w	r3, r2, r3
 8002daa:	61fb      	str	r3, [r7, #28]
 8002dac:	e004      	b.n	8002db8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	4a34      	ldr	r2, [pc, #208]	@ (8002e84 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002db2:	fb02 f303 	mul.w	r3, r2, r3
 8002db6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002db8:	4b2e      	ldr	r3, [pc, #184]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc4:	d102      	bne.n	8002dcc <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	61bb      	str	r3, [r7, #24]
      break;
 8002dca:	e04a      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	005b      	lsls	r3, r3, #1
 8002dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	61bb      	str	r3, [r7, #24]
      break;
 8002dda:	e042      	b.n	8002e62 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002ddc:	4b25      	ldr	r3, [pc, #148]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002de8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dec:	d108      	bne.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f003 0302 	and.w	r3, r3, #2
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002df8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e01f      	b.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e0a:	d109      	bne.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002e0c:	4b19      	ldr	r3, [pc, #100]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002e18:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002e1c:	61bb      	str	r3, [r7, #24]
 8002e1e:	e00f      	b.n	8002e40 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e26:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e2a:	d11c      	bne.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e2c:	4b11      	ldr	r3, [pc, #68]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d016      	beq.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002e38:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002e3c:	61bb      	str	r3, [r7, #24]
      break;
 8002e3e:	e012      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002e40:	e011      	b.n	8002e66 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002e42:	f7ff fe85 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8002e46:	4602      	mov	r2, r0
 8002e48:	4b0a      	ldr	r3, [pc, #40]	@ (8002e74 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	0b9b      	lsrs	r3, r3, #14
 8002e4e:	f003 0303 	and.w	r3, r3, #3
 8002e52:	3301      	adds	r3, #1
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5a:	61bb      	str	r3, [r7, #24]
      break;
 8002e5c:	e004      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e5e:	bf00      	nop
 8002e60:	e002      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e62:	bf00      	nop
 8002e64:	e000      	b.n	8002e68 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002e66:	bf00      	nop
    }
  }
  return (frequency);
 8002e68:	69bb      	ldr	r3, [r7, #24]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
 8002e72:	bf00      	nop
 8002e74:	40021000 	.word	0x40021000
 8002e78:	080073cc 	.word	0x080073cc
 8002e7c:	080073dc 	.word	0x080073dc
 8002e80:	007a1200 	.word	0x007a1200
 8002e84:	003d0900 	.word	0x003d0900
 8002e88:	aaaaaaab 	.word	0xaaaaaaab

08002e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e042      	b.n	8002f24 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d106      	bne.n	8002eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7fe f954 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2224      	movs	r2, #36	@ 0x24
 8002ebc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f82b 	bl	8002f2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	691a      	ldr	r2, [r3, #16]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695a      	ldr	r2, [r3, #20]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68da      	ldr	r2, [r3, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f22:	2300      	movs	r3, #0
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3708      	adds	r7, #8
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}

08002f2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002f66:	f023 030c 	bic.w	r3, r3, #12
 8002f6a:	687a      	ldr	r2, [r7, #4]
 8002f6c:	6812      	ldr	r2, [r2, #0]
 8002f6e:	68b9      	ldr	r1, [r7, #8]
 8002f70:	430b      	orrs	r3, r1
 8002f72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a2c      	ldr	r2, [pc, #176]	@ (8003040 <UART_SetConfig+0x114>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d103      	bne.n	8002f9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002f94:	f7ff fddc 	bl	8002b50 <HAL_RCC_GetPCLK2Freq>
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	e002      	b.n	8002fa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002f9c:	f7ff fdc4 	bl	8002b28 <HAL_RCC_GetPCLK1Freq>
 8002fa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fa2:	68fa      	ldr	r2, [r7, #12]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	009a      	lsls	r2, r3, #2
 8002fac:	441a      	add	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	4a22      	ldr	r2, [pc, #136]	@ (8003044 <UART_SetConfig+0x118>)
 8002fba:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	0119      	lsls	r1, r3, #4
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	009a      	lsls	r2, r3, #2
 8002fcc:	441a      	add	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	fbb2 f2f3 	udiv	r2, r2, r3
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8003044 <UART_SetConfig+0x118>)
 8002fda:	fba3 0302 	umull	r0, r3, r3, r2
 8002fde:	095b      	lsrs	r3, r3, #5
 8002fe0:	2064      	movs	r0, #100	@ 0x64
 8002fe2:	fb00 f303 	mul.w	r3, r0, r3
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	3332      	adds	r3, #50	@ 0x32
 8002fec:	4a15      	ldr	r2, [pc, #84]	@ (8003044 <UART_SetConfig+0x118>)
 8002fee:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff8:	4419      	add	r1, r3
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	4413      	add	r3, r2
 8003002:	009a      	lsls	r2, r3, #2
 8003004:	441a      	add	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003010:	4b0c      	ldr	r3, [pc, #48]	@ (8003044 <UART_SetConfig+0x118>)
 8003012:	fba3 0302 	umull	r0, r3, r3, r2
 8003016:	095b      	lsrs	r3, r3, #5
 8003018:	2064      	movs	r0, #100	@ 0x64
 800301a:	fb00 f303 	mul.w	r3, r0, r3
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	011b      	lsls	r3, r3, #4
 8003022:	3332      	adds	r3, #50	@ 0x32
 8003024:	4a07      	ldr	r2, [pc, #28]	@ (8003044 <UART_SetConfig+0x118>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	095b      	lsrs	r3, r3, #5
 800302c:	f003 020f 	and.w	r2, r3, #15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	440a      	add	r2, r1
 8003036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003038:	bf00      	nop
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013800 	.word	0x40013800
 8003044:	51eb851f 	.word	0x51eb851f

08003048 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 8003048:	b590      	push	{r4, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 800304e:	b672      	cpsid	i
 8003050:	4b4e      	ldr	r3, [pc, #312]	@ (800318c <app_init+0x144>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a4e      	ldr	r2, [pc, #312]	@ (8003190 <app_init+0x148>)
 8003056:	213f      	movs	r1, #63	@ 0x3f
 8003058:	4618      	mov	r0, r3
 800305a:	f002 feff 	bl	8005e5c <sniprintf>
 800305e:	4603      	mov	r3, r0
 8003060:	4a4c      	ldr	r2, [pc, #304]	@ (8003194 <app_init+0x14c>)
 8003062:	6013      	str	r3, [r2, #0]
 8003064:	4b49      	ldr	r3, [pc, #292]	@ (800318c <app_init+0x144>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4618      	mov	r0, r3
 800306a:	f000 fcd7 	bl	8003a1c <logger_log_print_>
 800306e:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 8003070:	b672      	cpsid	i
 8003072:	4b46      	ldr	r3, [pc, #280]	@ (800318c <app_init+0x144>)
 8003074:	681c      	ldr	r4, [r3, #0]
 8003076:	f7fe f9af 	bl	80013d8 <HAL_GetTick>
 800307a:	4603      	mov	r3, r0
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	4b46      	ldr	r3, [pc, #280]	@ (8003198 <app_init+0x150>)
 8003080:	4a46      	ldr	r2, [pc, #280]	@ (800319c <app_init+0x154>)
 8003082:	213f      	movs	r1, #63	@ 0x3f
 8003084:	4620      	mov	r0, r4
 8003086:	f002 fee9 	bl	8005e5c <sniprintf>
 800308a:	4603      	mov	r3, r0
 800308c:	4a41      	ldr	r2, [pc, #260]	@ (8003194 <app_init+0x14c>)
 800308e:	6013      	str	r3, [r2, #0]
 8003090:	4b3e      	ldr	r3, [pc, #248]	@ (800318c <app_init+0x144>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4618      	mov	r0, r3
 8003096:	f000 fcc1 	bl	8003a1c <logger_log_print_>
 800309a:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 800309c:	b672      	cpsid	i
 800309e:	4b3b      	ldr	r3, [pc, #236]	@ (800318c <app_init+0x144>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a3f      	ldr	r2, [pc, #252]	@ (80031a0 <app_init+0x158>)
 80030a4:	6812      	ldr	r2, [r2, #0]
 80030a6:	213f      	movs	r1, #63	@ 0x3f
 80030a8:	4618      	mov	r0, r3
 80030aa:	f002 fed7 	bl	8005e5c <sniprintf>
 80030ae:	4603      	mov	r3, r0
 80030b0:	4a38      	ldr	r2, [pc, #224]	@ (8003194 <app_init+0x14c>)
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	4b35      	ldr	r3, [pc, #212]	@ (800318c <app_init+0x144>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fcaf 	bl	8003a1c <logger_log_print_>
 80030be:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 80030c0:	b672      	cpsid	i
 80030c2:	4b32      	ldr	r3, [pc, #200]	@ (800318c <app_init+0x144>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a37      	ldr	r2, [pc, #220]	@ (80031a4 <app_init+0x15c>)
 80030c8:	6812      	ldr	r2, [r2, #0]
 80030ca:	213f      	movs	r1, #63	@ 0x3f
 80030cc:	4618      	mov	r0, r3
 80030ce:	f002 fec5 	bl	8005e5c <sniprintf>
 80030d2:	4603      	mov	r3, r0
 80030d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003194 <app_init+0x14c>)
 80030d6:	6013      	str	r3, [r2, #0]
 80030d8:	4b2c      	ldr	r3, [pc, #176]	@ (800318c <app_init+0x144>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fc9d 	bl	8003a1c <logger_log_print_>
 80030e2:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 80030e4:	4b30      	ldr	r3, [pc, #192]	@ (80031a8 <app_init+0x160>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 80030ea:	b672      	cpsid	i
 80030ec:	4b27      	ldr	r3, [pc, #156]	@ (800318c <app_init+0x144>)
 80030ee:	6818      	ldr	r0, [r3, #0]
 80030f0:	4b2d      	ldr	r3, [pc, #180]	@ (80031a8 <app_init+0x160>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	4b2d      	ldr	r3, [pc, #180]	@ (80031ac <app_init+0x164>)
 80030f8:	4a2d      	ldr	r2, [pc, #180]	@ (80031b0 <app_init+0x168>)
 80030fa:	213f      	movs	r1, #63	@ 0x3f
 80030fc:	f002 feae 	bl	8005e5c <sniprintf>
 8003100:	4603      	mov	r3, r0
 8003102:	4a24      	ldr	r2, [pc, #144]	@ (8003194 <app_init+0x14c>)
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	4b21      	ldr	r3, [pc, #132]	@ (800318c <app_init+0x144>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4618      	mov	r0, r3
 800310c:	f000 fc86 	bl	8003a1c <logger_log_print_>
 8003110:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8003112:	2300      	movs	r3, #0
 8003114:	607b      	str	r3, [r7, #4]
 8003116:	e020      	b.n	800315a <app_init+0x112>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8003118:	4926      	ldr	r1, [pc, #152]	@ (80031b4 <app_init+0x16c>)
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	440b      	add	r3, r1
 8003126:	6819      	ldr	r1, [r3, #0]
 8003128:	4822      	ldr	r0, [pc, #136]	@ (80031b4 <app_init+0x16c>)
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4403      	add	r3, r0
 8003136:	3308      	adds	r3, #8
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 800313e:	4a1e      	ldr	r2, [pc, #120]	@ (80031b8 <app_init+0x170>)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2100      	movs	r1, #0
 8003144:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		task_dta_list[index].BCET = TASK_X_BCET_INI;
 8003148:	4a1b      	ldr	r2, [pc, #108]	@ (80031b8 <app_init+0x170>)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	4a1a      	ldr	r2, [pc, #104]	@ (80031bc <app_init+0x174>)
 8003152:	605a      	str	r2, [r3, #4]
	for (index = 0; TASK_QTY > index; index++)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	3301      	adds	r3, #1
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b04      	cmp	r3, #4
 800315e:	d9db      	bls.n	8003118 <app_init+0xd0>
	}

	cycle_counter_init();
 8003160:	4b17      	ldr	r3, [pc, #92]	@ (80031c0 <app_init+0x178>)
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	4a16      	ldr	r2, [pc, #88]	@ (80031c0 <app_init+0x178>)
 8003166:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800316a:	60d3      	str	r3, [r2, #12]
 800316c:	4b15      	ldr	r3, [pc, #84]	@ (80031c4 <app_init+0x17c>)
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	4b14      	ldr	r3, [pc, #80]	@ (80031c4 <app_init+0x17c>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a13      	ldr	r2, [pc, #76]	@ (80031c4 <app_init+0x17c>)
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	6013      	str	r3, [r2, #0]
	cycle_counter_reset();
 800317e:	4b11      	ldr	r3, [pc, #68]	@ (80031c4 <app_init+0x17c>)
 8003180:	2200      	movs	r2, #0
 8003182:	605a      	str	r2, [r3, #4]
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	bd90      	pop	{r4, r7, pc}
 800318c:	0800741c 	.word	0x0800741c
 8003190:	08006e50 	.word	0x08006e50
 8003194:	20000488 	.word	0x20000488
 8003198:	08006e54 	.word	0x08006e54
 800319c:	08006e60 	.word	0x08006e60
 80031a0:	2000000c 	.word	0x2000000c
 80031a4:	20000010 	.word	0x20000010
 80031a8:	200003fc 	.word	0x200003fc
 80031ac:	08006e84 	.word	0x08006e84
 80031b0:	08006e90 	.word	0x08006e90
 80031b4:	080073e0 	.word	0x080073e0
 80031b8:	20000408 	.word	0x20000408
 80031bc:	0007a120 	.word	0x0007a120
 80031c0:	e000edf0 	.word	0xe000edf0
 80031c4:	e0001000 	.word	0xe0001000

080031c8 <app_update>:

void app_update(void)
{
 80031c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;
	uint32_t idle_time_us = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	613b      	str	r3, [r7, #16]

	static float worst_cpu_utilization = 0;
	float cpu_utilization = 0;
 80031d2:	f04f 0300 	mov.w	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]

	idle_time_us = cycle_counter_time_us();
 80031d8:	4b52      	ldr	r3, [pc, #328]	@ (8003324 <app_update+0x15c>)
 80031da:	685a      	ldr	r2, [r3, #4]
 80031dc:	4b52      	ldr	r3, [pc, #328]	@ (8003328 <app_update+0x160>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4952      	ldr	r1, [pc, #328]	@ (800332c <app_update+0x164>)
 80031e2:	fba1 1303 	umull	r1, r3, r1, r3
 80031e6:	0c9b      	lsrs	r3, r3, #18
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	613b      	str	r3, [r7, #16]

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 80031ee:	4b50      	ldr	r3, [pc, #320]	@ (8003330 <app_update+0x168>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	f000 8092 	beq.w	800331c <app_update+0x154>
    {
    	g_app_tick_cnt--;
 80031f8:	4b4d      	ldr	r3, [pc, #308]	@ (8003330 <app_update+0x168>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	4a4c      	ldr	r2, [pc, #304]	@ (8003330 <app_update+0x168>)
 8003200:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8003202:	4b4c      	ldr	r3, [pc, #304]	@ (8003334 <app_update+0x16c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	3301      	adds	r3, #1
 8003208:	4a4a      	ldr	r2, [pc, #296]	@ (8003334 <app_update+0x16c>)
 800320a:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 800320c:	4b4a      	ldr	r3, [pc, #296]	@ (8003338 <app_update+0x170>)
 800320e:	2200      	movs	r2, #0
 8003210:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
 8003216:	e047      	b.n	80032a8 <app_update+0xe0>
    	{
			cycle_counter_reset();
 8003218:	4b42      	ldr	r3, [pc, #264]	@ (8003324 <app_update+0x15c>)
 800321a:	2200      	movs	r2, #0
 800321c:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 800321e:	4947      	ldr	r1, [pc, #284]	@ (800333c <app_update+0x174>)
 8003220:	697a      	ldr	r2, [r7, #20]
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	009b      	lsls	r3, r3, #2
 800322a:	440b      	add	r3, r1
 800322c:	3304      	adds	r3, #4
 800322e:	6819      	ldr	r1, [r3, #0]
 8003230:	4842      	ldr	r0, [pc, #264]	@ (800333c <app_update+0x174>)
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4613      	mov	r3, r2
 8003236:	005b      	lsls	r3, r3, #1
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4403      	add	r3, r0
 800323e:	3308      	adds	r3, #8
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4618      	mov	r0, r3
 8003244:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8003246:	4b37      	ldr	r3, [pc, #220]	@ (8003324 <app_update+0x15c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 800324c:	4b35      	ldr	r3, [pc, #212]	@ (8003324 <app_update+0x15c>)
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	4b35      	ldr	r3, [pc, #212]	@ (8003328 <app_update+0x160>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4935      	ldr	r1, [pc, #212]	@ (800332c <app_update+0x164>)
 8003256:	fba1 1303 	umull	r1, r3, r1, r3
 800325a:	0c9b      	lsrs	r3, r3, #18
 800325c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003260:	607b      	str	r3, [r7, #4]

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8003262:	4b35      	ldr	r3, [pc, #212]	@ (8003338 <app_update+0x170>)
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4413      	add	r3, r2
 800326a:	4a33      	ldr	r2, [pc, #204]	@ (8003338 <app_update+0x170>)
 800326c:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 800326e:	4a34      	ldr	r2, [pc, #208]	@ (8003340 <app_update+0x178>)
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d904      	bls.n	8003286 <app_update+0xbe>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 800327c:	4930      	ldr	r1, [pc, #192]	@ (8003340 <app_update+0x178>)
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			}
			if (task_dta_list[index].BCET > cycle_counter_time_us)
 8003286:	4a2e      	ldr	r2, [pc, #184]	@ (8003340 <app_update+0x178>)
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	00db      	lsls	r3, r3, #3
 800328c:	4413      	add	r3, r2
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	429a      	cmp	r2, r3
 8003294:	d205      	bcs.n	80032a2 <app_update+0xda>
			{
				task_dta_list[index].BCET = cycle_counter_time_us;
 8003296:	4a2a      	ldr	r2, [pc, #168]	@ (8003340 <app_update+0x178>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	4413      	add	r3, r2
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	605a      	str	r2, [r3, #4]
    	for (index = 0; TASK_QTY > index; index++)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	3301      	adds	r3, #1
 80032a6:	617b      	str	r3, [r7, #20]
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d9b4      	bls.n	8003218 <app_update+0x50>
			}
	    }

    	cpu_utilization = 100.0*(float)g_app_time_us/((float)idle_time_us + (float)g_app_time_us);
 80032ae:	4b22      	ldr	r3, [pc, #136]	@ (8003338 <app_update+0x170>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd fc48 	bl	8000b48 <__aeabi_ui2f>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f8b4 	bl	8000428 <__aeabi_f2d>
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	4b1f      	ldr	r3, [pc, #124]	@ (8003344 <app_update+0x17c>)
 80032c6:	f7fd f907 	bl	80004d8 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4614      	mov	r4, r2
 80032d0:	461d      	mov	r5, r3
 80032d2:	6938      	ldr	r0, [r7, #16]
 80032d4:	f7fd fc38 	bl	8000b48 <__aeabi_ui2f>
 80032d8:	4606      	mov	r6, r0
 80032da:	4b17      	ldr	r3, [pc, #92]	@ (8003338 <app_update+0x170>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fd fc32 	bl	8000b48 <__aeabi_ui2f>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4619      	mov	r1, r3
 80032e8:	4630      	mov	r0, r6
 80032ea:	f7fd fb7d 	bl	80009e8 <__addsf3>
 80032ee:	4603      	mov	r3, r0
 80032f0:	4618      	mov	r0, r3
 80032f2:	f7fd f899 	bl	8000428 <__aeabi_f2d>
 80032f6:	4602      	mov	r2, r0
 80032f8:	460b      	mov	r3, r1
 80032fa:	4620      	mov	r0, r4
 80032fc:	4629      	mov	r1, r5
 80032fe:	f7fd fa15 	bl	800072c <__aeabi_ddiv>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	f7fd fb17 	bl	800093c <__aeabi_d2f>
 800330e:	4603      	mov	r3, r0
 8003310:	60fb      	str	r3, [r7, #12]
    	idle_time_us = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
    	cycle_counter_reset();
 8003316:	4b03      	ldr	r3, [pc, #12]	@ (8003324 <app_update+0x15c>)
 8003318:	2200      	movs	r2, #0
 800331a:	605a      	str	r2, [r3, #4]
    }
}
 800331c:	bf00      	nop
 800331e:	371c      	adds	r7, #28
 8003320:	46bd      	mov	sp, r7
 8003322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003324:	e0001000 	.word	0xe0001000
 8003328:	20000000 	.word	0x20000000
 800332c:	431bde83 	.word	0x431bde83
 8003330:	20000404 	.word	0x20000404
 8003334:	200003fc 	.word	0x200003fc
 8003338:	20000400 	.word	0x20000400
 800333c:	080073e0 	.word	0x080073e0
 8003340:	20000408 	.word	0x20000408
 8003344:	40590000 	.word	0x40590000

08003348 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 800334c:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_SYSTICK_Callback+0x48>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	3301      	adds	r3, #1
 8003352:	4a0f      	ldr	r2, [pc, #60]	@ (8003390 <HAL_SYSTICK_Callback+0x48>)
 8003354:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8003356:	4b0f      	ldr	r3, [pc, #60]	@ (8003394 <HAL_SYSTICK_Callback+0x4c>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	3301      	adds	r3, #1
 800335c:	4a0d      	ldr	r2, [pc, #52]	@ (8003394 <HAL_SYSTICK_Callback+0x4c>)
 800335e:	6013      	str	r3, [r2, #0]
	g_task_set_up_tick_cnt++;
 8003360:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <HAL_SYSTICK_Callback+0x50>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	3301      	adds	r3, #1
 8003366:	4a0c      	ldr	r2, [pc, #48]	@ (8003398 <HAL_SYSTICK_Callback+0x50>)
 8003368:	6013      	str	r3, [r2, #0]
	g_task_normal_tick_cnt++;
 800336a:	4b0c      	ldr	r3, [pc, #48]	@ (800339c <HAL_SYSTICK_Callback+0x54>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3301      	adds	r3, #1
 8003370:	4a0a      	ldr	r2, [pc, #40]	@ (800339c <HAL_SYSTICK_Callback+0x54>)
 8003372:	6013      	str	r3, [r2, #0]
	g_task_actuator_tick_cnt++;
 8003374:	4b0a      	ldr	r3, [pc, #40]	@ (80033a0 <HAL_SYSTICK_Callback+0x58>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	4a09      	ldr	r2, [pc, #36]	@ (80033a0 <HAL_SYSTICK_Callback+0x58>)
 800337c:	6013      	str	r3, [r2, #0]
	g_task_temperature_tick_cnt++;
 800337e:	4b09      	ldr	r3, [pc, #36]	@ (80033a4 <HAL_SYSTICK_Callback+0x5c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	3301      	adds	r3, #1
 8003384:	4a07      	ldr	r2, [pc, #28]	@ (80033a4 <HAL_SYSTICK_Callback+0x5c>)
 8003386:	6013      	str	r3, [r2, #0]

	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 8003388:	bf00      	nop
 800338a:	46bd      	mov	sp, r7
 800338c:	bc80      	pop	{r7}
 800338e:	4770      	bx	lr
 8003390:	20000404 	.word	0x20000404
 8003394:	20000504 	.word	0x20000504
 8003398:	2000050c 	.word	0x2000050c
 800339c:	20000498 	.word	0x20000498
 80033a0:	20000490 	.word	0x20000490
 80033a4:	20000568 	.word	0x20000568

080033a8 <displayInit>:

/********************** internal data definition *****************************/
/********************** external data declaration ****************************/
/********************** external functions definition ************************/
void displayInit( displayConnection_t connection )
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 80033b2:	4a38      	ldr	r2, [pc, #224]	@ (8003494 <displayInit+0xec>)
 80033b4:	79fb      	ldrb	r3, [r7, #7]
 80033b6:	7013      	strb	r3, [r2, #0]

    if( display.connection == DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER) {
 80033b8:	4b36      	ldr	r3, [pc, #216]	@ (8003494 <displayInit+0xec>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d109      	bne.n	80033d4 <displayInit+0x2c>
        pcf8574.address = PCF8574_I2C_BUS_8BIT_WRITE_ADDRESS ;
 80033c0:	4b35      	ldr	r3, [pc, #212]	@ (8003498 <displayInit+0xf0>)
 80033c2:	224e      	movs	r2, #78	@ 0x4e
 80033c4:	601a      	str	r2, [r3, #0]
        pcf8574.data = 0b00000000;
 80033c6:	4b34      	ldr	r3, [pc, #208]	@ (8003498 <displayInit+0xf0>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	711a      	strb	r2, [r3, #4]
        /*Definido en el .ioc*/
        //i2cPcf8574.frequency(100000);

        displayPinWrite( DISPLAY_PIN_A_PCF8574,  ON );
 80033cc:	2101      	movs	r1, #1
 80033ce:	2003      	movs	r0, #3
 80033d0:	f000 f8ea 	bl	80035a8 <displayPinWrite>
    }

    initial8BitCommunicationIsCompleted = false;
 80033d4:	4b31      	ldr	r3, [pc, #196]	@ (800349c <displayInit+0xf4>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 80033da:	2032      	movs	r0, #50	@ 0x32
 80033dc:	f7fe f806 	bl	80013ec <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80033e0:	2130      	movs	r1, #48	@ 0x30
 80033e2:	2000      	movs	r0, #0
 80033e4:	f000 f8bc 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 80033e8:	2005      	movs	r0, #5
 80033ea:	f7fd ffff 	bl	80013ec <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80033ee:	2130      	movs	r1, #48	@ 0x30
 80033f0:	2000      	movs	r0, #0
 80033f2:	f000 f8b5 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 80033f6:	2001      	movs	r0, #1
 80033f8:	f7fd fff8 	bl	80013ec <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80033fc:	2130      	movs	r1, #48	@ 0x30
 80033fe:	2000      	movs	r0, #0
 8003400:	f000 f8ae 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 8003404:	2001      	movs	r0, #1
 8003406:	f7fd fff1 	bl	80013ec <HAL_Delay>

    switch( display.connection ) {
 800340a:	4b22      	ldr	r3, [pc, #136]	@ (8003494 <displayInit+0xec>)
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d00d      	beq.n	800342e <displayInit+0x86>
 8003412:	2b02      	cmp	r3, #2
 8003414:	dc1d      	bgt.n	8003452 <displayInit+0xaa>
 8003416:	2b00      	cmp	r3, #0
 8003418:	d009      	beq.n	800342e <displayInit+0x86>
 800341a:	2b01      	cmp	r3, #1
 800341c:	d119      	bne.n	8003452 <displayInit+0xaa>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800341e:	2138      	movs	r1, #56	@ 0x38
 8003420:	2000      	movs	r0, #0
 8003422:	f000 f89d 	bl	8003560 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8003426:	2001      	movs	r0, #1
 8003428:	f7fd ffe0 	bl	80013ec <HAL_Delay>
        break;
 800342c:	e011      	b.n	8003452 <displayInit+0xaa>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800342e:	2120      	movs	r1, #32
 8003430:	2000      	movs	r0, #0
 8003432:	f000 f895 	bl	8003560 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 8003436:	2001      	movs	r0, #1
 8003438:	f7fd ffd8 	bl	80013ec <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 800343c:	4b17      	ldr	r3, [pc, #92]	@ (800349c <displayInit+0xf4>)
 800343e:	2201      	movs	r2, #1
 8003440:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003442:	2128      	movs	r1, #40	@ 0x28
 8003444:	2000      	movs	r0, #0
 8003446:	f000 f88b 	bl	8003560 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f7fd ffce 	bl	80013ec <HAL_Delay>
        break;
 8003450:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003452:	2108      	movs	r1, #8
 8003454:	2000      	movs	r0, #0
 8003456:	f000 f883 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 800345a:	2001      	movs	r0, #1
 800345c:	f7fd ffc6 	bl	80013ec <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003460:	2101      	movs	r1, #1
 8003462:	2000      	movs	r0, #0
 8003464:	f000 f87c 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 8003468:	2001      	movs	r0, #1
 800346a:	f7fd ffbf 	bl	80013ec <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800346e:	2106      	movs	r1, #6
 8003470:	2000      	movs	r0, #0
 8003472:	f000 f875 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 8003476:	2001      	movs	r0, #1
 8003478:	f7fd ffb8 	bl	80013ec <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 800347c:	210c      	movs	r1, #12
 800347e:	2000      	movs	r0, #0
 8003480:	f000 f86e 	bl	8003560 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8003484:	2001      	movs	r0, #1
 8003486:	f7fd ffb1 	bl	80013ec <HAL_Delay>
}
 800348a:	bf00      	nop
 800348c:	3708      	adds	r7, #8
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	20000430 	.word	0x20000430
 8003498:	20000434 	.word	0x20000434
 800349c:	20000444 	.word	0x20000444

080034a0 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	460a      	mov	r2, r1
 80034aa:	71fb      	strb	r3, [r7, #7]
 80034ac:	4613      	mov	r3, r2
 80034ae:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 80034b0:	79bb      	ldrb	r3, [r7, #6]
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d83a      	bhi.n	800352c <displayCharPositionWrite+0x8c>
 80034b6:	a201      	add	r2, pc, #4	@ (adr r2, 80034bc <displayCharPositionWrite+0x1c>)
 80034b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034bc:	080034cd 	.word	0x080034cd
 80034c0:	080034df 	.word	0x080034df
 80034c4:	080034f9 	.word	0x080034f9
 80034c8:	08003513 	.word	0x08003513
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80034cc:	79fb      	ldrb	r3, [r7, #7]
 80034ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	2000      	movs	r0, #0
 80034d8:	f000 f842 	bl	8003560 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 80034dc:	e026      	b.n	800352c <displayCharPositionWrite+0x8c>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	3340      	adds	r3, #64	@ 0x40
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 80034e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80034ea:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	4619      	mov	r1, r3
 80034f0:	2000      	movs	r0, #0
 80034f2:	f000 f835 	bl	8003560 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 80034f6:	e019      	b.n	800352c <displayCharPositionWrite+0x8c>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 80034f8:	79fb      	ldrb	r3, [r7, #7]
 80034fa:	3314      	adds	r3, #20
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8003500:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003504:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4619      	mov	r1, r3
 800350a:	2000      	movs	r0, #0
 800350c:	f000 f828 	bl	8003560 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 8003510:	e00c      	b.n	800352c <displayCharPositionWrite+0x8c>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	3354      	adds	r3, #84	@ 0x54
 8003516:	b2db      	uxtb	r3, r3
 8003518:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 800351a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800351e:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8003520:	b2db      	uxtb	r3, r3
 8003522:	4619      	mov	r1, r3
 8003524:	2000      	movs	r0, #0
 8003526:	f000 f81b 	bl	8003560 <displayCodeWrite>
                                charPositionX ) );
            //HAL_Delay(1);
        break;
 800352a:	bf00      	nop
    }
}
 800352c:	bf00      	nop
 800352e:	3708      	adds	r7, #8
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}

08003534 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b082      	sub	sp, #8
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
    while (*str) {
 800353c:	e007      	b.n	800354e <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1c5a      	adds	r2, r3, #1
 8003542:	607a      	str	r2, [r7, #4]
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	4619      	mov	r1, r3
 8003548:	2001      	movs	r0, #1
 800354a:	f000 f809 	bl	8003560 <displayCodeWrite>
    while (*str) {
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f3      	bne.n	800353e <displayStringWrite+0xa>
    }
}
 8003556:	bf00      	nop
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <displayCodeWrite>:
/********************** internal functions definition ************************/
static void displayCodeWrite( bool type, uint8_t dataBus) {
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
 8003566:	4603      	mov	r3, r0
 8003568:	460a      	mov	r2, r1
 800356a:	71fb      	strb	r3, [r7, #7]
 800356c:	4613      	mov	r3, r2
 800356e:	71bb      	strb	r3, [r7, #6]
	if (type == DISPLAY_RS_INSTRUCTION)
 8003570:	79fb      	ldrb	r3, [r7, #7]
 8003572:	f083 0301 	eor.w	r3, r3, #1
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d004      	beq.n	8003586 <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION);
 800357c:	2100      	movs	r1, #0
 800357e:	2004      	movs	r0, #4
 8003580:	f000 f812 	bl	80035a8 <displayPinWrite>
 8003584:	e003      	b.n	800358e <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA);
 8003586:	2101      	movs	r1, #1
 8003588:	2004      	movs	r0, #4
 800358a:	f000 f80d 	bl	80035a8 <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE);
 800358e:	2100      	movs	r1, #0
 8003590:	2005      	movs	r0, #5
 8003592:	f000 f809 	bl	80035a8 <displayPinWrite>
	displayDataBusWrite(dataBus);
 8003596:	79bb      	ldrb	r3, [r7, #6]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f9ad 	bl	80038f8 <displayDataBusWrite>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
	...

080035a8 <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 80035b4:	4b99      	ldr	r3, [pc, #612]	@ (800381c <displayPinWrite+0x274>)
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	f000 80ab 	beq.w	8003714 <displayPinWrite+0x16c>
 80035be:	2b02      	cmp	r3, #2
 80035c0:	f300 8193 	bgt.w	80038ea <displayPinWrite+0x342>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d053      	beq.n	8003670 <displayPinWrite+0xc8>
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	f040 818e 	bne.w	80038ea <displayPinWrite+0x342>

    	case DISPLAY_CONNECTION_GPIO_8BITS:
            switch( pinName ) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	3b04      	subs	r3, #4
 80035d2:	2b0a      	cmp	r3, #10
 80035d4:	d84a      	bhi.n	800366c <displayPinWrite+0xc4>
 80035d6:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <displayPinWrite+0x34>)
 80035d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035dc:	0800364d 	.word	0x0800364d
 80035e0:	0800366d 	.word	0x0800366d
 80035e4:	0800365d 	.word	0x0800365d
 80035e8:	0800366d 	.word	0x0800366d
 80035ec:	0800366d 	.word	0x0800366d
 80035f0:	0800366d 	.word	0x0800366d
 80035f4:	0800366d 	.word	0x0800366d
 80035f8:	08003609 	.word	0x08003609
 80035fc:	0800361b 	.word	0x0800361b
 8003600:	0800362d 	.word	0x0800362d
 8003604:	0800363d 	.word	0x0800363d
//                case DISPLAY_PIN_D0: HAL_GPIO_WritePin(D2_GPIO_Port,  D2_Pin,  value);   break;
//                case DISPLAY_PIN_D1: HAL_GPIO_WritePin(D4_GPIO_Port,  D4_Pin,  value);   break;
//                case DISPLAY_PIN_D2: HAL_GPIO_WritePin(D5_GPIO_Port,  D5_Pin,  value);   break;
//                case DISPLAY_PIN_D3: HAL_GPIO_WritePin(D6_GPIO_Port,  D6_Pin,  value);   break;
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	b2db      	uxtb	r3, r3
 800360c:	461a      	mov	r2, r3
 800360e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003612:	4883      	ldr	r0, [pc, #524]	@ (8003820 <displayPinWrite+0x278>)
 8003614:	f7fe fe6b 	bl	80022ee <HAL_GPIO_WritePin>
 8003618:	e029      	b.n	800366e <displayPinWrite+0xc6>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	461a      	mov	r2, r3
 8003620:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003624:	487e      	ldr	r0, [pc, #504]	@ (8003820 <displayPinWrite+0x278>)
 8003626:	f7fe fe62 	bl	80022ee <HAL_GPIO_WritePin>
 800362a:	e020      	b.n	800366e <displayPinWrite+0xc6>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	b2db      	uxtb	r3, r3
 8003630:	461a      	mov	r2, r3
 8003632:	2180      	movs	r1, #128	@ 0x80
 8003634:	487b      	ldr	r0, [pc, #492]	@ (8003824 <displayPinWrite+0x27c>)
 8003636:	f7fe fe5a 	bl	80022ee <HAL_GPIO_WritePin>
 800363a:	e018      	b.n	800366e <displayPinWrite+0xc6>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	b2db      	uxtb	r3, r3
 8003640:	461a      	mov	r2, r3
 8003642:	2140      	movs	r1, #64	@ 0x40
 8003644:	4878      	ldr	r0, [pc, #480]	@ (8003828 <displayPinWrite+0x280>)
 8003646:	f7fe fe52 	bl	80022ee <HAL_GPIO_WritePin>
 800364a:	e010      	b.n	800366e <displayPinWrite+0xc6>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	b2db      	uxtb	r3, r3
 8003650:	461a      	mov	r2, r3
 8003652:	2180      	movs	r1, #128	@ 0x80
 8003654:	4872      	ldr	r0, [pc, #456]	@ (8003820 <displayPinWrite+0x278>)
 8003656:	f7fe fe4a 	bl	80022ee <HAL_GPIO_WritePin>
 800365a:	e008      	b.n	800366e <displayPinWrite+0xc6>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	2140      	movs	r1, #64	@ 0x40
 8003664:	486e      	ldr	r0, [pc, #440]	@ (8003820 <displayPinWrite+0x278>)
 8003666:	f7fe fe42 	bl	80022ee <HAL_GPIO_WritePin>
 800366a:	e000      	b.n	800366e <displayPinWrite+0xc6>
                case DISPLAY_PIN_RW: break;
                default: break;
 800366c:	bf00      	nop
            }
            break;
 800366e:	e13c      	b.n	80038ea <displayPinWrite+0x342>


        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8003670:	79fb      	ldrb	r3, [r7, #7]
 8003672:	3b04      	subs	r3, #4
 8003674:	2b0a      	cmp	r3, #10
 8003676:	d84b      	bhi.n	8003710 <displayPinWrite+0x168>
 8003678:	a201      	add	r2, pc, #4	@ (adr r2, 8003680 <displayPinWrite+0xd8>)
 800367a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367e:	bf00      	nop
 8003680:	080036f1 	.word	0x080036f1
 8003684:	08003711 	.word	0x08003711
 8003688:	08003701 	.word	0x08003701
 800368c:	08003711 	.word	0x08003711
 8003690:	08003711 	.word	0x08003711
 8003694:	08003711 	.word	0x08003711
 8003698:	08003711 	.word	0x08003711
 800369c:	080036ad 	.word	0x080036ad
 80036a0:	080036bf 	.word	0x080036bf
 80036a4:	080036d1 	.word	0x080036d1
 80036a8:	080036e1 	.word	0x080036e1
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80036b6:	485a      	ldr	r0, [pc, #360]	@ (8003820 <displayPinWrite+0x278>)
 80036b8:	f7fe fe19 	bl	80022ee <HAL_GPIO_WritePin>
 80036bc:	e029      	b.n	8003712 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80036c8:	4855      	ldr	r0, [pc, #340]	@ (8003820 <displayPinWrite+0x278>)
 80036ca:	f7fe fe10 	bl	80022ee <HAL_GPIO_WritePin>
 80036ce:	e020      	b.n	8003712 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	461a      	mov	r2, r3
 80036d6:	2180      	movs	r1, #128	@ 0x80
 80036d8:	4852      	ldr	r0, [pc, #328]	@ (8003824 <displayPinWrite+0x27c>)
 80036da:	f7fe fe08 	bl	80022ee <HAL_GPIO_WritePin>
 80036de:	e018      	b.n	8003712 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	461a      	mov	r2, r3
 80036e6:	2140      	movs	r1, #64	@ 0x40
 80036e8:	484f      	ldr	r0, [pc, #316]	@ (8003828 <displayPinWrite+0x280>)
 80036ea:	f7fe fe00 	bl	80022ee <HAL_GPIO_WritePin>
 80036ee:	e010      	b.n	8003712 <displayPinWrite+0x16a>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	2180      	movs	r1, #128	@ 0x80
 80036f8:	4849      	ldr	r0, [pc, #292]	@ (8003820 <displayPinWrite+0x278>)
 80036fa:	f7fe fdf8 	bl	80022ee <HAL_GPIO_WritePin>
 80036fe:	e008      	b.n	8003712 <displayPinWrite+0x16a>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	b2db      	uxtb	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	2140      	movs	r1, #64	@ 0x40
 8003708:	4845      	ldr	r0, [pc, #276]	@ (8003820 <displayPinWrite+0x278>)
 800370a:	f7fe fdf0 	bl	80022ee <HAL_GPIO_WritePin>
 800370e:	e000      	b.n	8003712 <displayPinWrite+0x16a>
                case DISPLAY_PIN_RW: break;
                default: break;
 8003710:	bf00      	nop
            }
            break;
 8003712:	e0ea      	b.n	80038ea <displayPinWrite+0x342>

        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
           if ( value ) {
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03e      	beq.n	8003798 <displayPinWrite+0x1f0>
                switch( pinName ) {
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	3b03      	subs	r3, #3
 800371e:	2b0b      	cmp	r3, #11
 8003720:	d87a      	bhi.n	8003818 <displayPinWrite+0x270>
 8003722:	a201      	add	r2, pc, #4	@ (adr r2, 8003728 <displayPinWrite+0x180>)
 8003724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003728:	08003791 	.word	0x08003791
 800372c:	08003779 	.word	0x08003779
 8003730:	08003789 	.word	0x08003789
 8003734:	08003781 	.word	0x08003781
 8003738:	08003819 	.word	0x08003819
 800373c:	08003819 	.word	0x08003819
 8003740:	08003819 	.word	0x08003819
 8003744:	08003819 	.word	0x08003819
 8003748:	08003759 	.word	0x08003759
 800374c:	08003761 	.word	0x08003761
 8003750:	08003769 	.word	0x08003769
 8003754:	08003771 	.word	0x08003771
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = ON; break;
 8003758:	4b34      	ldr	r3, [pc, #208]	@ (800382c <displayPinWrite+0x284>)
 800375a:	2201      	movs	r2, #1
 800375c:	725a      	strb	r2, [r3, #9]
 800375e:	e068      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = ON; break;
 8003760:	4b32      	ldr	r3, [pc, #200]	@ (800382c <displayPinWrite+0x284>)
 8003762:	2201      	movs	r2, #1
 8003764:	729a      	strb	r2, [r3, #10]
 8003766:	e064      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = ON; break;
 8003768:	4b30      	ldr	r3, [pc, #192]	@ (800382c <displayPinWrite+0x284>)
 800376a:	2201      	movs	r2, #1
 800376c:	72da      	strb	r2, [r3, #11]
 800376e:	e060      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = ON; break;
 8003770:	4b2e      	ldr	r3, [pc, #184]	@ (800382c <displayPinWrite+0x284>)
 8003772:	2201      	movs	r2, #1
 8003774:	731a      	strb	r2, [r3, #12]
 8003776:	e05c      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = ON; break;
 8003778:	4b2c      	ldr	r3, [pc, #176]	@ (800382c <displayPinWrite+0x284>)
 800377a:	2201      	movs	r2, #1
 800377c:	715a      	strb	r2, [r3, #5]
 800377e:	e058      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = ON; break;
 8003780:	4b2a      	ldr	r3, [pc, #168]	@ (800382c <displayPinWrite+0x284>)
 8003782:	2201      	movs	r2, #1
 8003784:	71da      	strb	r2, [r3, #7]
 8003786:	e054      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = ON; break;
 8003788:	4b28      	ldr	r3, [pc, #160]	@ (800382c <displayPinWrite+0x284>)
 800378a:	2201      	movs	r2, #1
 800378c:	719a      	strb	r2, [r3, #6]
 800378e:	e050      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = ON; break;
 8003790:	4b26      	ldr	r3, [pc, #152]	@ (800382c <displayPinWrite+0x284>)
 8003792:	2201      	movs	r2, #1
 8003794:	721a      	strb	r2, [r3, #8]
 8003796:	e04c      	b.n	8003832 <displayPinWrite+0x28a>
                    default: break;
                }
            }
            else {
                switch( pinName ) {
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	3b03      	subs	r3, #3
 800379c:	2b0b      	cmp	r3, #11
 800379e:	d847      	bhi.n	8003830 <displayPinWrite+0x288>
 80037a0:	a201      	add	r2, pc, #4	@ (adr r2, 80037a8 <displayPinWrite+0x200>)
 80037a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a6:	bf00      	nop
 80037a8:	08003811 	.word	0x08003811
 80037ac:	080037f9 	.word	0x080037f9
 80037b0:	08003809 	.word	0x08003809
 80037b4:	08003801 	.word	0x08003801
 80037b8:	08003831 	.word	0x08003831
 80037bc:	08003831 	.word	0x08003831
 80037c0:	08003831 	.word	0x08003831
 80037c4:	08003831 	.word	0x08003831
 80037c8:	080037d9 	.word	0x080037d9
 80037cc:	080037e1 	.word	0x080037e1
 80037d0:	080037e9 	.word	0x080037e9
 80037d4:	080037f1 	.word	0x080037f1
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = OFF; break;
 80037d8:	4b14      	ldr	r3, [pc, #80]	@ (800382c <displayPinWrite+0x284>)
 80037da:	2200      	movs	r2, #0
 80037dc:	725a      	strb	r2, [r3, #9]
 80037de:	e028      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = OFF; break;
 80037e0:	4b12      	ldr	r3, [pc, #72]	@ (800382c <displayPinWrite+0x284>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	729a      	strb	r2, [r3, #10]
 80037e6:	e024      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = OFF; break;
 80037e8:	4b10      	ldr	r3, [pc, #64]	@ (800382c <displayPinWrite+0x284>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	72da      	strb	r2, [r3, #11]
 80037ee:	e020      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = OFF; break;
 80037f0:	4b0e      	ldr	r3, [pc, #56]	@ (800382c <displayPinWrite+0x284>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	731a      	strb	r2, [r3, #12]
 80037f6:	e01c      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = OFF; break;
 80037f8:	4b0c      	ldr	r3, [pc, #48]	@ (800382c <displayPinWrite+0x284>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	715a      	strb	r2, [r3, #5]
 80037fe:	e018      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = OFF; break;
 8003800:	4b0a      	ldr	r3, [pc, #40]	@ (800382c <displayPinWrite+0x284>)
 8003802:	2200      	movs	r2, #0
 8003804:	71da      	strb	r2, [r3, #7]
 8003806:	e014      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = OFF; break;
 8003808:	4b08      	ldr	r3, [pc, #32]	@ (800382c <displayPinWrite+0x284>)
 800380a:	2200      	movs	r2, #0
 800380c:	719a      	strb	r2, [r3, #6]
 800380e:	e010      	b.n	8003832 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = OFF; break;
 8003810:	4b06      	ldr	r3, [pc, #24]	@ (800382c <displayPinWrite+0x284>)
 8003812:	2200      	movs	r2, #0
 8003814:	721a      	strb	r2, [r3, #8]
 8003816:	e00c      	b.n	8003832 <displayPinWrite+0x28a>
                    default: break;
 8003818:	bf00      	nop
 800381a:	e00a      	b.n	8003832 <displayPinWrite+0x28a>
 800381c:	20000430 	.word	0x20000430
 8003820:	40010800 	.word	0x40010800
 8003824:	40011000 	.word	0x40011000
 8003828:	40010c00 	.word	0x40010c00
 800382c:	20000434 	.word	0x20000434
                    default: break;
 8003830:	bf00      	nop
                }
            }
            pcf8574.data = 0b00000000;
 8003832:	4b30      	ldr	r3, [pc, #192]	@ (80038f4 <displayPinWrite+0x34c>)
 8003834:	2200      	movs	r2, #0
 8003836:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRs ) pcf8574.data |= 0b00000001;
 8003838:	4b2e      	ldr	r3, [pc, #184]	@ (80038f4 <displayPinWrite+0x34c>)
 800383a:	795b      	ldrb	r3, [r3, #5]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d006      	beq.n	800384e <displayPinWrite+0x2a6>
 8003840:	4b2c      	ldr	r3, [pc, #176]	@ (80038f4 <displayPinWrite+0x34c>)
 8003842:	791b      	ldrb	r3, [r3, #4]
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b2a      	ldr	r3, [pc, #168]	@ (80038f4 <displayPinWrite+0x34c>)
 800384c:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRw ) pcf8574.data |= 0b00000010;
 800384e:	4b29      	ldr	r3, [pc, #164]	@ (80038f4 <displayPinWrite+0x34c>)
 8003850:	799b      	ldrb	r3, [r3, #6]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d006      	beq.n	8003864 <displayPinWrite+0x2bc>
 8003856:	4b27      	ldr	r3, [pc, #156]	@ (80038f4 <displayPinWrite+0x34c>)
 8003858:	791b      	ldrb	r3, [r3, #4]
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	b2da      	uxtb	r2, r3
 8003860:	4b24      	ldr	r3, [pc, #144]	@ (80038f4 <displayPinWrite+0x34c>)
 8003862:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinEn ) pcf8574.data |= 0b00000100;
 8003864:	4b23      	ldr	r3, [pc, #140]	@ (80038f4 <displayPinWrite+0x34c>)
 8003866:	79db      	ldrb	r3, [r3, #7]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d006      	beq.n	800387a <displayPinWrite+0x2d2>
 800386c:	4b21      	ldr	r3, [pc, #132]	@ (80038f4 <displayPinWrite+0x34c>)
 800386e:	791b      	ldrb	r3, [r3, #4]
 8003870:	f043 0304 	orr.w	r3, r3, #4
 8003874:	b2da      	uxtb	r2, r3
 8003876:	4b1f      	ldr	r3, [pc, #124]	@ (80038f4 <displayPinWrite+0x34c>)
 8003878:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinA  ) pcf8574.data |= 0b00001000;
 800387a:	4b1e      	ldr	r3, [pc, #120]	@ (80038f4 <displayPinWrite+0x34c>)
 800387c:	7a1b      	ldrb	r3, [r3, #8]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <displayPinWrite+0x2e8>
 8003882:	4b1c      	ldr	r3, [pc, #112]	@ (80038f4 <displayPinWrite+0x34c>)
 8003884:	791b      	ldrb	r3, [r3, #4]
 8003886:	f043 0308 	orr.w	r3, r3, #8
 800388a:	b2da      	uxtb	r2, r3
 800388c:	4b19      	ldr	r3, [pc, #100]	@ (80038f4 <displayPinWrite+0x34c>)
 800388e:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD4 ) pcf8574.data |= 0b00010000;
 8003890:	4b18      	ldr	r3, [pc, #96]	@ (80038f4 <displayPinWrite+0x34c>)
 8003892:	7a5b      	ldrb	r3, [r3, #9]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d006      	beq.n	80038a6 <displayPinWrite+0x2fe>
 8003898:	4b16      	ldr	r3, [pc, #88]	@ (80038f4 <displayPinWrite+0x34c>)
 800389a:	791b      	ldrb	r3, [r3, #4]
 800389c:	f043 0310 	orr.w	r3, r3, #16
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <displayPinWrite+0x34c>)
 80038a4:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD5 ) pcf8574.data |= 0b00100000;
 80038a6:	4b13      	ldr	r3, [pc, #76]	@ (80038f4 <displayPinWrite+0x34c>)
 80038a8:	7a9b      	ldrb	r3, [r3, #10]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d006      	beq.n	80038bc <displayPinWrite+0x314>
 80038ae:	4b11      	ldr	r3, [pc, #68]	@ (80038f4 <displayPinWrite+0x34c>)
 80038b0:	791b      	ldrb	r3, [r3, #4]
 80038b2:	f043 0320 	orr.w	r3, r3, #32
 80038b6:	b2da      	uxtb	r2, r3
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <displayPinWrite+0x34c>)
 80038ba:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD6 ) pcf8574.data |= 0b01000000;
 80038bc:	4b0d      	ldr	r3, [pc, #52]	@ (80038f4 <displayPinWrite+0x34c>)
 80038be:	7adb      	ldrb	r3, [r3, #11]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d006      	beq.n	80038d2 <displayPinWrite+0x32a>
 80038c4:	4b0b      	ldr	r3, [pc, #44]	@ (80038f4 <displayPinWrite+0x34c>)
 80038c6:	791b      	ldrb	r3, [r3, #4]
 80038c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038cc:	b2da      	uxtb	r2, r3
 80038ce:	4b09      	ldr	r3, [pc, #36]	@ (80038f4 <displayPinWrite+0x34c>)
 80038d0:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD7 ) pcf8574.data |= 0b10000000;
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <displayPinWrite+0x34c>)
 80038d4:	7b1b      	ldrb	r3, [r3, #12]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d006      	beq.n	80038e8 <displayPinWrite+0x340>
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <displayPinWrite+0x34c>)
 80038dc:	791b      	ldrb	r3, [r3, #4]
 80038de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <displayPinWrite+0x34c>)
 80038e6:	711a      	strb	r2, [r3, #4]

            //i2cPcf8574.write( pcf8574.address, &pcf8574.data, 1);
            //HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)pcf8574.address<<1, (uint8_t *)&pcf8574.data, (uint16_t)16, HAL_MAX_DELAY);

            break;
 80038e8:	bf00      	nop
    }
}
 80038ea:	bf00      	nop
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20000434 	.word	0x20000434

080038f8 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8003902:	2100      	movs	r1, #0
 8003904:	2006      	movs	r0, #6
 8003906:	f7ff fe4f 	bl	80035a8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003910:	4619      	mov	r1, r3
 8003912:	200e      	movs	r0, #14
 8003914:	f7ff fe48 	bl	80035a8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8003918:	79fb      	ldrb	r3, [r7, #7]
 800391a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391e:	4619      	mov	r1, r3
 8003920:	200d      	movs	r0, #13
 8003922:	f7ff fe41 	bl	80035a8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8003926:	79fb      	ldrb	r3, [r7, #7]
 8003928:	f003 0320 	and.w	r3, r3, #32
 800392c:	4619      	mov	r1, r3
 800392e:	200c      	movs	r0, #12
 8003930:	f7ff fe3a 	bl	80035a8 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	4619      	mov	r1, r3
 800393c:	200b      	movs	r0, #11
 800393e:	f7ff fe33 	bl	80035a8 <displayPinWrite>
    switch( display.connection ) {
 8003942:	4b34      	ldr	r3, [pc, #208]	@ (8003a14 <displayDataBusWrite+0x11c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b02      	cmp	r3, #2
 8003948:	d022      	beq.n	8003990 <displayDataBusWrite+0x98>
 800394a:	2b02      	cmp	r3, #2
 800394c:	dc4f      	bgt.n	80039ee <displayDataBusWrite+0xf6>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01e      	beq.n	8003990 <displayDataBusWrite+0x98>
 8003952:	2b01      	cmp	r3, #1
 8003954:	d14b      	bne.n	80039ee <displayDataBusWrite+0xf6>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	4619      	mov	r1, r3
 800395e:	200a      	movs	r0, #10
 8003960:	f7ff fe22 	bl	80035a8 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 0304 	and.w	r3, r3, #4
 800396a:	4619      	mov	r1, r3
 800396c:	2009      	movs	r0, #9
 800396e:	f7ff fe1b 	bl	80035a8 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8003972:	79fb      	ldrb	r3, [r7, #7]
 8003974:	f003 0302 	and.w	r3, r3, #2
 8003978:	4619      	mov	r1, r3
 800397a:	2008      	movs	r0, #8
 800397c:	f7ff fe14 	bl	80035a8 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8003980:	79fb      	ldrb	r3, [r7, #7]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	4619      	mov	r1, r3
 8003988:	2007      	movs	r0, #7
 800398a:	f7ff fe0d 	bl	80035a8 <displayPinWrite>
        break;
 800398e:	e02e      	b.n	80039ee <displayDataBusWrite+0xf6>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            if ( initial8BitCommunicationIsCompleted == true) {
 8003990:	4b21      	ldr	r3, [pc, #132]	@ (8003a18 <displayDataBusWrite+0x120>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d029      	beq.n	80039ec <displayDataBusWrite+0xf4>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8003998:	2101      	movs	r1, #1
 800399a:	2006      	movs	r0, #6
 800399c:	f7ff fe04 	bl	80035a8 <displayPinWrite>
                HAL_Delay(1);
 80039a0:	2001      	movs	r0, #1
 80039a2:	f7fd fd23 	bl	80013ec <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 80039a6:	2100      	movs	r1, #0
 80039a8:	2006      	movs	r0, #6
 80039aa:	f7ff fdfd 	bl	80035a8 <displayPinWrite>
                HAL_Delay(1);
 80039ae:	2001      	movs	r0, #1
 80039b0:	f7fd fd1c 	bl	80013ec <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	4619      	mov	r1, r3
 80039bc:	200e      	movs	r0, #14
 80039be:	f7ff fdf3 	bl	80035a8 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 80039c2:	79fb      	ldrb	r3, [r7, #7]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	4619      	mov	r1, r3
 80039ca:	200d      	movs	r0, #13
 80039cc:	f7ff fdec 	bl	80035a8 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 80039d0:	79fb      	ldrb	r3, [r7, #7]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	4619      	mov	r1, r3
 80039d8:	200c      	movs	r0, #12
 80039da:	f7ff fde5 	bl	80035a8 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 80039de:	79fb      	ldrb	r3, [r7, #7]
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	4619      	mov	r1, r3
 80039e6:	200b      	movs	r0, #11
 80039e8:	f7ff fdde 	bl	80035a8 <displayPinWrite>
            }
        break;
 80039ec:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 80039ee:	2101      	movs	r1, #1
 80039f0:	2006      	movs	r0, #6
 80039f2:	f7ff fdd9 	bl	80035a8 <displayPinWrite>
    HAL_Delay(1);
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7fd fcf8 	bl	80013ec <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 80039fc:	2100      	movs	r1, #0
 80039fe:	2006      	movs	r0, #6
 8003a00:	f7ff fdd2 	bl	80035a8 <displayPinWrite>
    HAL_Delay(1);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7fd fcf1 	bl	80013ec <HAL_Delay>
}
 8003a0a:	bf00      	nop
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000430 	.word	0x20000430
 8003a18:	20000444 	.word	0x20000444

08003a1c <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
	printf(msg);
 8003a24:	6878      	ldr	r0, [r7, #4]
 8003a26:	f002 fa07 	bl	8005e38 <iprintf>
	fflush(stdout);
 8003a2a:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <logger_log_print_+0x24>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f002 f92b 	bl	8005c8c <fflush>
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	200002e0 	.word	0x200002e0

08003a44 <task_actuator_init>:
uint32_t g_task_actuator_cnt;
volatile uint32_t g_task_actuator_tick_cnt;

/********************** external functions definition ************************/
void task_actuator_init(void *parameters)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b088      	sub	sp, #32
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	6078      	str	r0, [r7, #4]
	task_actuator_st_t state;
	task_actuator_ev_t event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_actuator_init), p_task_actuator);
 8003a4c:	b672      	cpsid	i
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	@ (8003bcc <task_actuator_init+0x188>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	4b5f      	ldr	r3, [pc, #380]	@ (8003bd0 <task_actuator_init+0x18c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	4b5e      	ldr	r3, [pc, #376]	@ (8003bd4 <task_actuator_init+0x190>)
 8003a5a:	4a5f      	ldr	r2, [pc, #380]	@ (8003bd8 <task_actuator_init+0x194>)
 8003a5c:	213f      	movs	r1, #63	@ 0x3f
 8003a5e:	f002 f9fd 	bl	8005e5c <sniprintf>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4a5d      	ldr	r2, [pc, #372]	@ (8003bdc <task_actuator_init+0x198>)
 8003a66:	6013      	str	r3, [r2, #0]
 8003a68:	4b58      	ldr	r3, [pc, #352]	@ (8003bcc <task_actuator_init+0x188>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff ffd5 	bl	8003a1c <logger_log_print_>
 8003a72:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_actuator), p_task_actuator_);
 8003a74:	b672      	cpsid	i
 8003a76:	4b55      	ldr	r3, [pc, #340]	@ (8003bcc <task_actuator_init+0x188>)
 8003a78:	6818      	ldr	r0, [r3, #0]
 8003a7a:	4b59      	ldr	r3, [pc, #356]	@ (8003be0 <task_actuator_init+0x19c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	9300      	str	r3, [sp, #0]
 8003a80:	4b58      	ldr	r3, [pc, #352]	@ (8003be4 <task_actuator_init+0x1a0>)
 8003a82:	4a59      	ldr	r2, [pc, #356]	@ (8003be8 <task_actuator_init+0x1a4>)
 8003a84:	213f      	movs	r1, #63	@ 0x3f
 8003a86:	f002 f9e9 	bl	8005e5c <sniprintf>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4a53      	ldr	r2, [pc, #332]	@ (8003bdc <task_actuator_init+0x198>)
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	4b4e      	ldr	r3, [pc, #312]	@ (8003bcc <task_actuator_init+0x188>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4618      	mov	r0, r3
 8003a96:	f7ff ffc1 	bl	8003a1c <logger_log_print_>
 8003a9a:	b662      	cpsie	i

	g_task_actuator_cnt = G_TASK_ACT_CNT_INIT;
 8003a9c:	4b53      	ldr	r3, [pc, #332]	@ (8003bec <task_actuator_init+0x1a8>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_actuator_cnt), g_task_actuator_cnt);
 8003aa2:	b672      	cpsid	i
 8003aa4:	4b49      	ldr	r3, [pc, #292]	@ (8003bcc <task_actuator_init+0x188>)
 8003aa6:	6818      	ldr	r0, [r3, #0]
 8003aa8:	4b50      	ldr	r3, [pc, #320]	@ (8003bec <task_actuator_init+0x1a8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	4b50      	ldr	r3, [pc, #320]	@ (8003bf0 <task_actuator_init+0x1ac>)
 8003ab0:	4a50      	ldr	r2, [pc, #320]	@ (8003bf4 <task_actuator_init+0x1b0>)
 8003ab2:	213f      	movs	r1, #63	@ 0x3f
 8003ab4:	f002 f9d2 	bl	8005e5c <sniprintf>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4a48      	ldr	r2, [pc, #288]	@ (8003bdc <task_actuator_init+0x198>)
 8003abc:	6013      	str	r3, [r2, #0]
 8003abe:	4b43      	ldr	r3, [pc, #268]	@ (8003bcc <task_actuator_init+0x188>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff ffaa 	bl	8003a1c <logger_log_print_>
 8003ac8:	b662      	cpsie	i

	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8003aca:	2300      	movs	r3, #0
 8003acc:	617b      	str	r3, [r7, #20]
 8003ace:	e072      	b.n	8003bb6 <task_actuator_init+0x172>
	{
		/* Update Task Actuator Configuration & Data Pointer */
		p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a47      	ldr	r2, [pc, #284]	@ (8003bf8 <task_actuator_init+0x1b4>)
 8003adc:	4413      	add	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
		p_task_actuator_dta = &task_actuator_dta_list[index];
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	00db      	lsls	r3, r3, #3
 8003ae4:	4a45      	ldr	r2, [pc, #276]	@ (8003bfc <task_actuator_init+0x1b8>)
 8003ae6:	4413      	add	r3, r2
 8003ae8:	60fb      	str	r3, [r7, #12]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8003aea:	b672      	cpsid	i
 8003aec:	4b37      	ldr	r3, [pc, #220]	@ (8003bcc <task_actuator_init+0x188>)
 8003aee:	6818      	ldr	r0, [r3, #0]
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4b42      	ldr	r3, [pc, #264]	@ (8003c00 <task_actuator_init+0x1bc>)
 8003af6:	4a43      	ldr	r2, [pc, #268]	@ (8003c04 <task_actuator_init+0x1c0>)
 8003af8:	213f      	movs	r1, #63	@ 0x3f
 8003afa:	f002 f9af 	bl	8005e5c <sniprintf>
 8003afe:	4603      	mov	r3, r0
 8003b00:	4a36      	ldr	r2, [pc, #216]	@ (8003bdc <task_actuator_init+0x198>)
 8003b02:	6013      	str	r3, [r2, #0]
 8003b04:	4b31      	ldr	r3, [pc, #196]	@ (8003bcc <task_actuator_init+0x188>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff ff87 	bl	8003a1c <logger_log_print_>
 8003b0e:	b662      	cpsie	i

		state = p_task_actuator_dta->state;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	791b      	ldrb	r3, [r3, #4]
 8003b14:	72fb      	strb	r3, [r7, #11]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8003b16:	b672      	cpsid	i
 8003b18:	4b2c      	ldr	r3, [pc, #176]	@ (8003bcc <task_actuator_init+0x188>)
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	7afb      	ldrb	r3, [r7, #11]
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4b39      	ldr	r3, [pc, #228]	@ (8003c08 <task_actuator_init+0x1c4>)
 8003b22:	4a38      	ldr	r2, [pc, #224]	@ (8003c04 <task_actuator_init+0x1c0>)
 8003b24:	213f      	movs	r1, #63	@ 0x3f
 8003b26:	f002 f999 	bl	8005e5c <sniprintf>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	4a2b      	ldr	r2, [pc, #172]	@ (8003bdc <task_actuator_init+0x198>)
 8003b2e:	6013      	str	r3, [r2, #0]
 8003b30:	4b26      	ldr	r3, [pc, #152]	@ (8003bcc <task_actuator_init+0x188>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff ff71 	bl	8003a1c <logger_log_print_>
 8003b3a:	b662      	cpsie	i

		event = p_task_actuator_dta->event;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	795b      	ldrb	r3, [r3, #5]
 8003b40:	72bb      	strb	r3, [r7, #10]
		LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8003b42:	b672      	cpsid	i
 8003b44:	4b21      	ldr	r3, [pc, #132]	@ (8003bcc <task_actuator_init+0x188>)
 8003b46:	6818      	ldr	r0, [r3, #0]
 8003b48:	7abb      	ldrb	r3, [r7, #10]
 8003b4a:	9300      	str	r3, [sp, #0]
 8003b4c:	4b2f      	ldr	r3, [pc, #188]	@ (8003c0c <task_actuator_init+0x1c8>)
 8003b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c04 <task_actuator_init+0x1c0>)
 8003b50:	213f      	movs	r1, #63	@ 0x3f
 8003b52:	f002 f983 	bl	8005e5c <sniprintf>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4a20      	ldr	r2, [pc, #128]	@ (8003bdc <task_actuator_init+0x198>)
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8003bcc <task_actuator_init+0x188>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff5b 	bl	8003a1c <logger_log_print_>
 8003b66:	b662      	cpsie	i

		b_event = p_task_actuator_dta->flag;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	799b      	ldrb	r3, [r3, #6]
 8003b6c:	727b      	strb	r3, [r7, #9]
		LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8003b6e:	b672      	cpsid	i
 8003b70:	4b16      	ldr	r3, [pc, #88]	@ (8003bcc <task_actuator_init+0x188>)
 8003b72:	6818      	ldr	r0, [r3, #0]
 8003b74:	7a7b      	ldrb	r3, [r7, #9]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <task_actuator_init+0x13a>
 8003b7a:	4b25      	ldr	r3, [pc, #148]	@ (8003c10 <task_actuator_init+0x1cc>)
 8003b7c:	e000      	b.n	8003b80 <task_actuator_init+0x13c>
 8003b7e:	4b25      	ldr	r3, [pc, #148]	@ (8003c14 <task_actuator_init+0x1d0>)
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	4b25      	ldr	r3, [pc, #148]	@ (8003c18 <task_actuator_init+0x1d4>)
 8003b84:	4a25      	ldr	r2, [pc, #148]	@ (8003c1c <task_actuator_init+0x1d8>)
 8003b86:	213f      	movs	r1, #63	@ 0x3f
 8003b88:	f002 f968 	bl	8005e5c <sniprintf>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4a13      	ldr	r2, [pc, #76]	@ (8003bdc <task_actuator_init+0x198>)
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	4b0e      	ldr	r3, [pc, #56]	@ (8003bcc <task_actuator_init+0x188>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff ff40 	bl	8003a1c <logger_log_print_>
 8003b9c:	b662      	cpsie	i

		HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	6858      	ldr	r0, [r3, #4]
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	8919      	ldrh	r1, [r3, #8]
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	7adb      	ldrb	r3, [r3, #11]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fe fb9f 	bl	80022ee <HAL_GPIO_WritePin>
	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	2b07      	cmp	r3, #7
 8003bba:	d989      	bls.n	8003ad0 <task_actuator_init+0x8c>
	}

	g_task_actuator_tick_cnt = G_TASK_ACT_TICK_CNT_INI;
 8003bbc:	4b18      	ldr	r3, [pc, #96]	@ (8003c20 <task_actuator_init+0x1dc>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	0800741c 	.word	0x0800741c
 8003bd0:	20000058 	.word	0x20000058
 8003bd4:	08006ee4 	.word	0x08006ee4
 8003bd8:	08006ef8 	.word	0x08006ef8
 8003bdc:	20000488 	.word	0x20000488
 8003be0:	2000005c 	.word	0x2000005c
 8003be4:	08006f10 	.word	0x08006f10
 8003be8:	08006f20 	.word	0x08006f20
 8003bec:	2000048c 	.word	0x2000048c
 8003bf0:	08006f30 	.word	0x08006f30
 8003bf4:	08006f44 	.word	0x08006f44
 8003bf8:	08007420 	.word	0x08007420
 8003bfc:	20000018 	.word	0x20000018
 8003c00:	08006f54 	.word	0x08006f54
 8003c04:	08006f5c 	.word	0x08006f5c
 8003c08:	08006f68 	.word	0x08006f68
 8003c0c:	08006f70 	.word	0x08006f70
 8003c10:	08006f78 	.word	0x08006f78
 8003c14:	08006f80 	.word	0x08006f80
 8003c18:	08006f88 	.word	0x08006f88
 8003c1c:	08006f90 	.word	0x08006f90
 8003c20:	20000490 	.word	0x20000490

08003c24 <task_actuator_update>:

void task_actuator_update(void *parameters)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b086      	sub	sp, #24
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_actuator_cfg_t *p_task_actuator_cfg;
	task_actuator_dta_t *p_task_actuator_dta;
	bool b_time_update_required = false;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	74fb      	strb	r3, [r7, #19]

	/* Update Task Actuator Counter */
	g_task_actuator_cnt++;
 8003c30:	4b90      	ldr	r3, [pc, #576]	@ (8003e74 <task_actuator_update+0x250>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a8f      	ldr	r2, [pc, #572]	@ (8003e74 <task_actuator_update+0x250>)
 8003c38:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_actuator_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 8003c3a:	b672      	cpsid	i
    if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8003c3c:	4b8e      	ldr	r3, [pc, #568]	@ (8003e78 <task_actuator_update+0x254>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d006      	beq.n	8003c52 <task_actuator_update+0x2e>
    {
    	g_task_actuator_tick_cnt--;
 8003c44:	4b8c      	ldr	r3, [pc, #560]	@ (8003e78 <task_actuator_update+0x254>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	4a8b      	ldr	r2, [pc, #556]	@ (8003e78 <task_actuator_update+0x254>)
 8003c4c:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8003c52:	b662      	cpsie	i

    while (b_time_update_required)
 8003c54:	e15f      	b.n	8003f16 <task_actuator_update+0x2f2>
    {
		/* Protect shared resource (g_task_actuator_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8003c56:	b672      	cpsid	i
		if (G_TASK_ACT_TICK_CNT_INI < g_task_actuator_tick_cnt)
 8003c58:	4b87      	ldr	r3, [pc, #540]	@ (8003e78 <task_actuator_update+0x254>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <task_actuator_update+0x4c>
		{
			g_task_actuator_tick_cnt--;
 8003c60:	4b85      	ldr	r3, [pc, #532]	@ (8003e78 <task_actuator_update+0x254>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	3b01      	subs	r3, #1
 8003c66:	4a84      	ldr	r2, [pc, #528]	@ (8003e78 <task_actuator_update+0x254>)
 8003c68:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	74fb      	strb	r3, [r7, #19]
 8003c6e:	e001      	b.n	8003c74 <task_actuator_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8003c70:	2300      	movs	r3, #0
 8003c72:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8003c74:	b662      	cpsie	i

    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	e148      	b.n	8003f0e <task_actuator_update+0x2ea>
		{
    		/* Update Task Actuator Configuration & Data Pointer */
			p_task_actuator_cfg = &task_actuator_cfg_list[index];
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4a7d      	ldr	r2, [pc, #500]	@ (8003e7c <task_actuator_update+0x258>)
 8003c88:	4413      	add	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
			p_task_actuator_dta = &task_actuator_dta_list[index];
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	4a7b      	ldr	r2, [pc, #492]	@ (8003e80 <task_actuator_update+0x25c>)
 8003c92:	4413      	add	r3, r2
 8003c94:	60bb      	str	r3, [r7, #8]

			switch (p_task_actuator_dta->state)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	791b      	ldrb	r3, [r3, #4]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	f200 8129 	bhi.w	8003ef2 <task_actuator_update+0x2ce>
 8003ca0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca8 <task_actuator_update+0x84>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003cbd 	.word	0x08003cbd
 8003cac:	08003d63 	.word	0x08003d63
 8003cb0:	08003d97 	.word	0x08003d97
 8003cb4:	08003e07 	.word	0x08003e07
 8003cb8:	08003e85 	.word	0x08003e85
			{
				case ST_LED_XX_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_ON == p_task_actuator_dta->event))
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	799b      	ldrb	r3, [r3, #6]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d013      	beq.n	8003cec <task_actuator_update+0xc8>
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	795b      	ldrb	r3, [r3, #5]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10f      	bne.n	8003cec <task_actuator_update+0xc8>
					{
						p_task_actuator_dta->flag = false;
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6858      	ldr	r0, [r3, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	8919      	ldrh	r1, [r3, #8]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	7a9b      	ldrb	r3, [r3, #10]
 8003cde:	461a      	mov	r2, r3
 8003ce0:	f7fe fb05 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_ON;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	711a      	strb	r2, [r3, #4]
 8003cea:	e039      	b.n	8003d60 <task_actuator_update+0x13c>
					}
					else if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_BLINK == p_task_actuator_dta->event))
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	799b      	ldrb	r3, [r3, #6]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d017      	beq.n	8003d24 <task_actuator_update+0x100>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	795b      	ldrb	r3, [r3, #5]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d113      	bne.n	8003d24 <task_actuator_update+0x100>
					{
						p_task_actuator_dta->flag = false;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	68bb      	ldr	r3, [r7, #8]
 8003d08:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6858      	ldr	r0, [r3, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8919      	ldrh	r1, [r3, #8]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	7a9b      	ldrb	r3, [r3, #10]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7fe fae9 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2202      	movs	r2, #2
 8003d20:	711a      	strb	r2, [r3, #4]
 8003d22:	e01d      	b.n	8003d60 <task_actuator_update+0x13c>
					}
					else if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_PULSE == p_task_actuator_dta->event))
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	799b      	ldrb	r3, [r3, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f000 80e4 	beq.w	8003ef6 <task_actuator_update+0x2d2>
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	795b      	ldrb	r3, [r3, #5]
 8003d32:	2b04      	cmp	r3, #4
 8003d34:	f040 80df 	bne.w	8003ef6 <task_actuator_update+0x2d2>
					{
						p_task_actuator_dta->flag = false;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	719a      	strb	r2, [r3, #6]
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_pulse;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	691a      	ldr	r2, [r3, #16]
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6858      	ldr	r0, [r3, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8919      	ldrh	r1, [r3, #8]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	7a9b      	ldrb	r3, [r3, #10]
 8003d52:	461a      	mov	r2, r3
 8003d54:	f7fe facb 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_PULSE;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	2204      	movs	r2, #4
 8003d5c:	711a      	strb	r2, [r3, #4]
					}

					break;
 8003d5e:	e0ca      	b.n	8003ef6 <task_actuator_update+0x2d2>
 8003d60:	e0c9      	b.n	8003ef6 <task_actuator_update+0x2d2>

				case ST_LED_XX_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	799b      	ldrb	r3, [r3, #6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 80c7 	beq.w	8003efa <task_actuator_update+0x2d6>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	795b      	ldrb	r3, [r3, #5]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	f040 80c2 	bne.w	8003efa <task_actuator_update+0x2d6>
					{
						p_task_actuator_dta->flag = false;
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6858      	ldr	r0, [r3, #4]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	8919      	ldrh	r1, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	7adb      	ldrb	r3, [r3, #11]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f7fe fab0 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	2200      	movs	r2, #0
 8003d92:	711a      	strb	r2, [r3, #4]
					}

					break;
 8003d94:	e0b1      	b.n	8003efa <task_actuator_update+0x2d6>

				case ST_LED_XX_BLINK_ON:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	799b      	ldrb	r3, [r3, #6]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d013      	beq.n	8003dc6 <task_actuator_update+0x1a2>
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	795b      	ldrb	r3, [r3, #5]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <task_actuator_update+0x1a2>
					{
						p_task_actuator_dta->flag = false;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2200      	movs	r2, #0
 8003daa:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6858      	ldr	r0, [r3, #4]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8919      	ldrh	r1, [r3, #8]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	7adb      	ldrb	r3, [r3, #11]
 8003db8:	461a      	mov	r2, r3
 8003dba:	f7fe fa98 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8003dc4:	e09b      	b.n	8003efe <task_actuator_update+0x2da>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d110      	bne.n	8003df0 <task_actuator_update+0x1cc>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	68da      	ldr	r2, [r3, #12]
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6858      	ldr	r0, [r3, #4]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8919      	ldrh	r1, [r3, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	7adb      	ldrb	r3, [r3, #11]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fe fa83 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_OFF;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	2203      	movs	r2, #3
 8003dec:	711a      	strb	r2, [r3, #4]
					break;
 8003dee:	e086      	b.n	8003efe <task_actuator_update+0x2da>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 8082 	beq.w	8003efe <task_actuator_update+0x2da>
						p_task_actuator_dta->tick--;
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	1e5a      	subs	r2, r3, #1
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	601a      	str	r2, [r3, #0]
					break;
 8003e04:	e07b      	b.n	8003efe <task_actuator_update+0x2da>

				case ST_LED_XX_BLINK_OFF:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	799b      	ldrb	r3, [r3, #6]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d013      	beq.n	8003e36 <task_actuator_update+0x212>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	795b      	ldrb	r3, [r3, #5]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10f      	bne.n	8003e36 <task_actuator_update+0x212>
					{
						p_task_actuator_dta->flag = false;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6858      	ldr	r0, [r3, #4]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	8919      	ldrh	r1, [r3, #8]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	7adb      	ldrb	r3, [r3, #11]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	f7fe fa60 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	2200      	movs	r2, #0
 8003e32:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8003e34:	e065      	b.n	8003f02 <task_actuator_update+0x2de>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d110      	bne.n	8003e60 <task_actuator_update+0x23c>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	68da      	ldr	r2, [r3, #12]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_on);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6858      	ldr	r0, [r3, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8919      	ldrh	r1, [r3, #8]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	7a9b      	ldrb	r3, [r3, #10]
 8003e52:	461a      	mov	r2, r3
 8003e54:	f7fe fa4b 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_BLINK_ON;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	711a      	strb	r2, [r3, #4]
					break;
 8003e5e:	e050      	b.n	8003f02 <task_actuator_update+0x2de>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04c      	beq.n	8003f02 <task_actuator_update+0x2de>
						p_task_actuator_dta->tick--;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1e5a      	subs	r2, r3, #1
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	601a      	str	r2, [r3, #0]
					break;
 8003e72:	e046      	b.n	8003f02 <task_actuator_update+0x2de>
 8003e74:	2000048c 	.word	0x2000048c
 8003e78:	20000490 	.word	0x20000490
 8003e7c:	08007420 	.word	0x08007420
 8003e80:	20000018 	.word	0x20000018

				case ST_LED_XX_PULSE:

					if ((true == p_task_actuator_dta->flag) && (EV_LED_XX_OFF == p_task_actuator_dta->event))
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	799b      	ldrb	r3, [r3, #6]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d013      	beq.n	8003eb4 <task_actuator_update+0x290>
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	795b      	ldrb	r3, [r3, #5]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10f      	bne.n	8003eb4 <task_actuator_update+0x290>
					{
						p_task_actuator_dta->flag = false;
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2200      	movs	r2, #0
 8003e98:	719a      	strb	r2, [r3, #6]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6858      	ldr	r0, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8919      	ldrh	r1, [r3, #8]
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	7adb      	ldrb	r3, [r3, #11]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f7fe fa21 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	711a      	strb	r2, [r3, #4]
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
					{
						p_task_actuator_dta->tick--;
					}

					break;
 8003eb2:	e028      	b.n	8003f06 <task_actuator_update+0x2e2>
					else if(p_task_actuator_dta->tick <= DEL_LED_XX_MIN)
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d110      	bne.n	8003ede <task_actuator_update+0x2ba>
						p_task_actuator_dta->tick = p_task_actuator_cfg->tick_blink;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	68da      	ldr	r2, [r3, #12]
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	601a      	str	r2, [r3, #0]
						HAL_GPIO_WritePin(p_task_actuator_cfg->gpio_port, p_task_actuator_cfg->pin, p_task_actuator_cfg->led_off);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6858      	ldr	r0, [r3, #4]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	8919      	ldrh	r1, [r3, #8]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	7adb      	ldrb	r3, [r3, #11]
 8003ed0:	461a      	mov	r2, r3
 8003ed2:	f7fe fa0c 	bl	80022ee <HAL_GPIO_WritePin>
						p_task_actuator_dta->state = ST_LED_XX_OFF;
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	711a      	strb	r2, [r3, #4]
					break;
 8003edc:	e013      	b.n	8003f06 <task_actuator_update+0x2e2>
					else if(p_task_actuator_dta->tick > DEL_LED_XX_MIN)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00f      	beq.n	8003f06 <task_actuator_update+0x2e2>
						p_task_actuator_dta->tick--;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	1e5a      	subs	r2, r3, #1
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	601a      	str	r2, [r3, #0]
					break;
 8003ef0:	e009      	b.n	8003f06 <task_actuator_update+0x2e2>

				default:

					break;
 8003ef2:	bf00      	nop
 8003ef4:	e008      	b.n	8003f08 <task_actuator_update+0x2e4>
					break;
 8003ef6:	bf00      	nop
 8003ef8:	e006      	b.n	8003f08 <task_actuator_update+0x2e4>
					break;
 8003efa:	bf00      	nop
 8003efc:	e004      	b.n	8003f08 <task_actuator_update+0x2e4>
					break;
 8003efe:	bf00      	nop
 8003f00:	e002      	b.n	8003f08 <task_actuator_update+0x2e4>
					break;
 8003f02:	bf00      	nop
 8003f04:	e000      	b.n	8003f08 <task_actuator_update+0x2e4>
					break;
 8003f06:	bf00      	nop
    	for (index = 0; ACTUATOR_DTA_QTY > index; index++)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	2b07      	cmp	r3, #7
 8003f12:	f67f aeb3 	bls.w	8003c7c <task_actuator_update+0x58>
    while (b_time_update_required)
 8003f16:	7cfb      	ldrb	r3, [r7, #19]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f47f ae9c 	bne.w	8003c56 <task_actuator_update+0x32>
			}
		}
    }
}
 8003f1e:	bf00      	nop
 8003f20:	bf00      	nop
 8003f22:	3718      	adds	r7, #24
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b085      	sub	sp, #20
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4603      	mov	r3, r0
 8003f30:	460a      	mov	r2, r1
 8003f32:	71fb      	strb	r3, [r7, #7]
 8003f34:	4613      	mov	r3, r2
 8003f36:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8003f38:	79bb      	ldrb	r3, [r7, #6]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	4a06      	ldr	r2, [pc, #24]	@ (8003f58 <put_event_task_actuator+0x30>)
 8003f3e:	4413      	add	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	79fa      	ldrb	r2, [r7, #7]
 8003f46:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	719a      	strb	r2, [r3, #6]
}
 8003f4e:	bf00      	nop
 8003f50:	3714      	adds	r7, #20
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bc80      	pop	{r7}
 8003f56:	4770      	bx	lr
 8003f58:	20000018 	.word	0x20000018

08003f5c <task_normal_init>:
uint32_t g_task_normal_cnt;
volatile uint32_t g_task_normal_tick_cnt;

/********************** external functions definition ************************/
void task_normal_init(void *parameters)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af02      	add	r7, sp, #8
 8003f62:	6078      	str	r0, [r7, #4]
	task_normal_st_t	state;
	task_normal_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_normal_init), p_task_normal);
 8003f64:	b672      	cpsid	i
 8003f66:	4b48      	ldr	r3, [pc, #288]	@ (8004088 <task_normal_init+0x12c>)
 8003f68:	6818      	ldr	r0, [r3, #0]
 8003f6a:	4b48      	ldr	r3, [pc, #288]	@ (800408c <task_normal_init+0x130>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	9300      	str	r3, [sp, #0]
 8003f70:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <task_normal_init+0x134>)
 8003f72:	4a48      	ldr	r2, [pc, #288]	@ (8004094 <task_normal_init+0x138>)
 8003f74:	213f      	movs	r1, #63	@ 0x3f
 8003f76:	f001 ff71 	bl	8005e5c <sniprintf>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	4a46      	ldr	r2, [pc, #280]	@ (8004098 <task_normal_init+0x13c>)
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	4b41      	ldr	r3, [pc, #260]	@ (8004088 <task_normal_init+0x12c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff fd49 	bl	8003a1c <logger_log_print_>
 8003f8a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_normal), p_task_normal_);
 8003f8c:	b672      	cpsid	i
 8003f8e:	4b3e      	ldr	r3, [pc, #248]	@ (8004088 <task_normal_init+0x12c>)
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	4b42      	ldr	r3, [pc, #264]	@ (800409c <task_normal_init+0x140>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	9300      	str	r3, [sp, #0]
 8003f98:	4b41      	ldr	r3, [pc, #260]	@ (80040a0 <task_normal_init+0x144>)
 8003f9a:	4a42      	ldr	r2, [pc, #264]	@ (80040a4 <task_normal_init+0x148>)
 8003f9c:	213f      	movs	r1, #63	@ 0x3f
 8003f9e:	f001 ff5d 	bl	8005e5c <sniprintf>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	4a3c      	ldr	r2, [pc, #240]	@ (8004098 <task_normal_init+0x13c>)
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b37      	ldr	r3, [pc, #220]	@ (8004088 <task_normal_init+0x12c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f7ff fd35 	bl	8003a1c <logger_log_print_>
 8003fb2:	b662      	cpsie	i

	g_task_normal_cnt = G_TASK_SYS_CNT_INI;
 8003fb4:	4b3c      	ldr	r3, [pc, #240]	@ (80040a8 <task_normal_init+0x14c>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_normal_cnt), g_task_normal_cnt);
 8003fba:	b672      	cpsid	i
 8003fbc:	4b32      	ldr	r3, [pc, #200]	@ (8004088 <task_normal_init+0x12c>)
 8003fbe:	6818      	ldr	r0, [r3, #0]
 8003fc0:	4b39      	ldr	r3, [pc, #228]	@ (80040a8 <task_normal_init+0x14c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4b39      	ldr	r3, [pc, #228]	@ (80040ac <task_normal_init+0x150>)
 8003fc8:	4a39      	ldr	r2, [pc, #228]	@ (80040b0 <task_normal_init+0x154>)
 8003fca:	213f      	movs	r1, #63	@ 0x3f
 8003fcc:	f001 ff46 	bl	8005e5c <sniprintf>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	4a31      	ldr	r2, [pc, #196]	@ (8004098 <task_normal_init+0x13c>)
 8003fd4:	6013      	str	r3, [r2, #0]
 8003fd6:	4b2c      	ldr	r3, [pc, #176]	@ (8004088 <task_normal_init+0x12c>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fd1e 	bl	8003a1c <logger_log_print_>
 8003fe0:	b662      	cpsie	i

	init_queue_event_task_normal();
 8003fe2:	f000 fa97 	bl	8004514 <init_queue_event_task_normal>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_normal_dta = &task_normal_dta;
 8003fe6:	4b33      	ldr	r3, [pc, #204]	@ (80040b4 <task_normal_init+0x158>)
 8003fe8:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_normal_dta->state;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	791b      	ldrb	r3, [r3, #4]
 8003fee:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8003ff0:	b672      	cpsid	i
 8003ff2:	4b25      	ldr	r3, [pc, #148]	@ (8004088 <task_normal_init+0x12c>)
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	7afb      	ldrb	r3, [r7, #11]
 8003ff8:	9300      	str	r3, [sp, #0]
 8003ffa:	4b2f      	ldr	r3, [pc, #188]	@ (80040b8 <task_normal_init+0x15c>)
 8003ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80040bc <task_normal_init+0x160>)
 8003ffe:	213f      	movs	r1, #63	@ 0x3f
 8004000:	f001 ff2c 	bl	8005e5c <sniprintf>
 8004004:	4603      	mov	r3, r0
 8004006:	4a24      	ldr	r2, [pc, #144]	@ (8004098 <task_normal_init+0x13c>)
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b1f      	ldr	r3, [pc, #124]	@ (8004088 <task_normal_init+0x12c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f7ff fd04 	bl	8003a1c <logger_log_print_>
 8004014:	b662      	cpsie	i

	event = p_task_normal_dta->event;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	795b      	ldrb	r3, [r3, #5]
 800401a:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 800401c:	b672      	cpsid	i
 800401e:	4b1a      	ldr	r3, [pc, #104]	@ (8004088 <task_normal_init+0x12c>)
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	7abb      	ldrb	r3, [r7, #10]
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	4b26      	ldr	r3, [pc, #152]	@ (80040c0 <task_normal_init+0x164>)
 8004028:	4a24      	ldr	r2, [pc, #144]	@ (80040bc <task_normal_init+0x160>)
 800402a:	213f      	movs	r1, #63	@ 0x3f
 800402c:	f001 ff16 	bl	8005e5c <sniprintf>
 8004030:	4603      	mov	r3, r0
 8004032:	4a19      	ldr	r2, [pc, #100]	@ (8004098 <task_normal_init+0x13c>)
 8004034:	6013      	str	r3, [r2, #0]
 8004036:	4b14      	ldr	r3, [pc, #80]	@ (8004088 <task_normal_init+0x12c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff fcee 	bl	8003a1c <logger_log_print_>
 8004040:	b662      	cpsie	i

	b_event = p_task_normal_dta->flag;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	799b      	ldrb	r3, [r3, #6]
 8004046:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8004048:	b672      	cpsid	i
 800404a:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <task_normal_init+0x12c>)
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	7a7b      	ldrb	r3, [r7, #9]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <task_normal_init+0xfc>
 8004054:	4b1b      	ldr	r3, [pc, #108]	@ (80040c4 <task_normal_init+0x168>)
 8004056:	e000      	b.n	800405a <task_normal_init+0xfe>
 8004058:	4b1b      	ldr	r3, [pc, #108]	@ (80040c8 <task_normal_init+0x16c>)
 800405a:	9300      	str	r3, [sp, #0]
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <task_normal_init+0x170>)
 800405e:	4a1c      	ldr	r2, [pc, #112]	@ (80040d0 <task_normal_init+0x174>)
 8004060:	213f      	movs	r1, #63	@ 0x3f
 8004062:	f001 fefb 	bl	8005e5c <sniprintf>
 8004066:	4603      	mov	r3, r0
 8004068:	4a0b      	ldr	r2, [pc, #44]	@ (8004098 <task_normal_init+0x13c>)
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	4b06      	ldr	r3, [pc, #24]	@ (8004088 <task_normal_init+0x12c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4618      	mov	r0, r3
 8004072:	f7ff fcd3 	bl	8003a1c <logger_log_print_>
 8004076:	b662      	cpsie	i

	g_task_normal_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8004078:	4b16      	ldr	r3, [pc, #88]	@ (80040d4 <task_normal_init+0x178>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	0800741c 	.word	0x0800741c
 800408c:	20000068 	.word	0x20000068
 8004090:	08006fe4 	.word	0x08006fe4
 8004094:	08006ff8 	.word	0x08006ff8
 8004098:	20000488 	.word	0x20000488
 800409c:	2000006c 	.word	0x2000006c
 80040a0:	08007010 	.word	0x08007010
 80040a4:	0800701c 	.word	0x0800701c
 80040a8:	20000494 	.word	0x20000494
 80040ac:	0800702c 	.word	0x0800702c
 80040b0:	08007040 	.word	0x08007040
 80040b4:	20000060 	.word	0x20000060
 80040b8:	08007050 	.word	0x08007050
 80040bc:	08007058 	.word	0x08007058
 80040c0:	08007064 	.word	0x08007064
 80040c4:	0800706c 	.word	0x0800706c
 80040c8:	08007074 	.word	0x08007074
 80040cc:	0800707c 	.word	0x0800707c
 80040d0:	08007084 	.word	0x08007084
 80040d4:	20000498 	.word	0x20000498

080040d8 <task_normal_update>:

void task_normal_update(void *parameters)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b086      	sub	sp, #24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	task_normal_dta_t *p_task_normal_dta;
	bool b_time_update_required = false;
 80040e0:	2300      	movs	r3, #0
 80040e2:	75fb      	strb	r3, [r7, #23]

	//tiempos de espera conversion de unidades
	uint32_t del_tiempo_permanencia = configuracion.tiempo_permanencia*MILISEGUNDOS;
 80040e4:	4bac      	ldr	r3, [pc, #688]	@ (8004398 <task_normal_update+0x2c0>)
 80040e6:	785b      	ldrb	r3, [r3, #1]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc f98b 	bl	8000404 <__aeabi_i2d>
 80040ee:	f04f 0200 	mov.w	r2, #0
 80040f2:	4baa      	ldr	r3, [pc, #680]	@ (800439c <task_normal_update+0x2c4>)
 80040f4:	f7fc f9f0 	bl	80004d8 <__aeabi_dmul>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f7fc fbfc 	bl	80008fc <__aeabi_d2uiz>
 8004104:	4603      	mov	r3, r0
 8004106:	613b      	str	r3, [r7, #16]
	uint32_t del_tiempo_puerta = configuracion.tiempo_puerta*MILISEGUNDOS;
 8004108:	4ba3      	ldr	r3, [pc, #652]	@ (8004398 <task_normal_update+0x2c0>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7fc f979 	bl	8000404 <__aeabi_i2d>
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	4ba1      	ldr	r3, [pc, #644]	@ (800439c <task_normal_update+0x2c4>)
 8004118:	f7fc f9de 	bl	80004d8 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4610      	mov	r0, r2
 8004122:	4619      	mov	r1, r3
 8004124:	f7fc fbea 	bl	80008fc <__aeabi_d2uiz>
 8004128:	4603      	mov	r3, r0
 800412a:	60fb      	str	r3, [r7, #12]

	/* Update Task normal Counter */
	g_task_normal_cnt++;
 800412c:	4b9c      	ldr	r3, [pc, #624]	@ (80043a0 <task_normal_update+0x2c8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	4a9b      	ldr	r2, [pc, #620]	@ (80043a0 <task_normal_update+0x2c8>)
 8004134:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_normal_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8004136:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8004138:	4b9a      	ldr	r3, [pc, #616]	@ (80043a4 <task_normal_update+0x2cc>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <task_normal_update+0x76>
    {
    	g_task_normal_tick_cnt--;
 8004140:	4b98      	ldr	r3, [pc, #608]	@ (80043a4 <task_normal_update+0x2cc>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	3b01      	subs	r3, #1
 8004146:	4a97      	ldr	r2, [pc, #604]	@ (80043a4 <task_normal_update+0x2cc>)
 8004148:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800414a:	2301      	movs	r3, #1
 800414c:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800414e:	b662      	cpsie	i

    while (b_time_update_required)
 8004150:	e1d7      	b.n	8004502 <task_normal_update+0x42a>
    {
		/* Protect shared resource (g_task_normal_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8004152:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8004154:	4b93      	ldr	r3, [pc, #588]	@ (80043a4 <task_normal_update+0x2cc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d007      	beq.n	800416c <task_normal_update+0x94>
		{
			g_task_normal_tick_cnt--;
 800415c:	4b91      	ldr	r3, [pc, #580]	@ (80043a4 <task_normal_update+0x2cc>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3b01      	subs	r3, #1
 8004162:	4a90      	ldr	r2, [pc, #576]	@ (80043a4 <task_normal_update+0x2cc>)
 8004164:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8004166:	2301      	movs	r3, #1
 8004168:	75fb      	strb	r3, [r7, #23]
 800416a:	e001      	b.n	8004170 <task_normal_update+0x98>
		}
		else
		{
			b_time_update_required = false;
 800416c:	2300      	movs	r3, #0
 800416e:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8004170:	b662      	cpsie	i

    	/* Update Task normal Data Pointer */
		p_task_normal_dta = &task_normal_dta;
 8004172:	4b8d      	ldr	r3, [pc, #564]	@ (80043a8 <task_normal_update+0x2d0>)
 8004174:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_normal())
 8004176:	f000 fa39 	bl	80045ec <any_event_task_normal>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <task_normal_update+0xba>
		{
			p_task_normal_dta->flag = true;
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	2201      	movs	r2, #1
 8004184:	719a      	strb	r2, [r3, #6]
			p_task_normal_dta->event = get_event_task_normal();
 8004186:	f000 fa0b 	bl	80045a0 <get_event_task_normal>
 800418a:	4603      	mov	r3, r0
 800418c:	461a      	mov	r2, r3
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_normal_dta->state)
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	791b      	ldrb	r3, [r3, #4]
 8004196:	2b0b      	cmp	r3, #11
 8004198:	f200 819a 	bhi.w	80044d0 <task_normal_update+0x3f8>
 800419c:	a201      	add	r2, pc, #4	@ (adr r2, 80041a4 <task_normal_update+0xcc>)
 800419e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041a2:	bf00      	nop
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041f7 	.word	0x080041f7
 80041ac:	08004245 	.word	0x08004245
 80041b0:	0800427d 	.word	0x0800427d
 80041b4:	080042e5 	.word	0x080042e5
 80041b8:	0800430f 	.word	0x0800430f
 80041bc:	0800433f 	.word	0x0800433f
 80041c0:	080043ad 	.word	0x080043ad
 80041c4:	080043d7 	.word	0x080043d7
 80041c8:	0800440f 	.word	0x0800440f
 80041cc:	08004475 	.word	0x08004475
 80041d0:	080044a3 	.word	0x080044a3
		{

		case ST_SYS_01_DESACTIVADO:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_CONFIG_FINALIZADA ==  p_task_normal_dta->event))
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	799b      	ldrb	r3, [r3, #6]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 817b 	beq.w	80044d4 <task_normal_update+0x3fc>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	795b      	ldrb	r3, [r3, #5]
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	f040 8176 	bne.w	80044d4 <task_normal_update+0x3fc>
			{
				p_task_normal_dta->flag = false;
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	2200      	movs	r2, #0
 80041ec:	719a      	strb	r2, [r3, #6]
				p_task_normal_dta->state = ST_SYS_01_ESPERAR_INGRESO;
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2201      	movs	r2, #1
 80041f2:	711a      	strb	r2, [r3, #4]
			}
			break;
 80041f4:	e16e      	b.n	80044d4 <task_normal_update+0x3fc>

		case ST_SYS_01_ESPERAR_INGRESO:

			if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_INGRESO_DOWN ==  p_task_normal_dta->event))
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	799b      	ldrb	r3, [r3, #6]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00e      	beq.n	800421c <task_normal_update+0x144>
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	795b      	ldrb	r3, [r3, #5]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d10a      	bne.n	800421c <task_normal_update+0x144>
			{
				p_task_normal_dta->flag = false;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	2200      	movs	r2, #0
 800420a:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_INGRESO_ABRIR);
 800420c:	2101      	movs	r1, #1
 800420e:	2003      	movs	r0, #3
 8004210:	f7ff fe8a 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ABRIENDO_INGRESO;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2202      	movs	r2, #2
 8004218:	711a      	strb	r2, [r3, #4]
				p_task_normal_dta->flag = false;
				put_event_task_set_up(EV_SYS_02_BTN_CONF_ACTIVE); //Aviso a set up que entre en modo configuracion
				p_task_normal_dta->state = ST_SYS_01_DESACTIVADO;
			}

			break;
 800421a:	e15d      	b.n	80044d8 <task_normal_update+0x400>
			else if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_CONFIG_DOWN ==  p_task_normal_dta->event))
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	799b      	ldrb	r3, [r3, #6]
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8159 	beq.w	80044d8 <task_normal_update+0x400>
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	795b      	ldrb	r3, [r3, #5]
 800422a:	2b02      	cmp	r3, #2
 800422c:	f040 8154 	bne.w	80044d8 <task_normal_update+0x400>
				p_task_normal_dta->flag = false;
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	719a      	strb	r2, [r3, #6]
				put_event_task_set_up(EV_SYS_02_BTN_CONF_ACTIVE); //Aviso a set up que entre en modo configuracion
 8004236:	2001      	movs	r0, #1
 8004238:	f000 ff1e 	bl	8005078 <put_event_task_set_up>
				p_task_normal_dta->state = ST_SYS_01_DESACTIVADO;
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	711a      	strb	r2, [r3, #4]
			break;
 8004242:	e149      	b.n	80044d8 <task_normal_update+0x400>


		case ST_SYS_01_ABRIENDO_INGRESO:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_INGRESO_ABIERTA ==  p_task_normal_dta->event))
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	799b      	ldrb	r3, [r3, #6]
 8004248:	2b00      	cmp	r3, #0
 800424a:	f000 8147 	beq.w	80044dc <task_normal_update+0x404>
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	795b      	ldrb	r3, [r3, #5]
 8004252:	2b07      	cmp	r3, #7
 8004254:	f040 8142 	bne.w	80044dc <task_normal_update+0x404>
			{
				p_task_normal_dta->flag = false;
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2200      	movs	r2, #0
 800425c:	719a      	strb	r2, [r3, #6]

				p_task_normal_dta->tick = del_tiempo_puerta;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_INGRESO_ABRIR);
 8004264:	2101      	movs	r1, #1
 8004266:	2000      	movs	r0, #0
 8004268:	f7ff fe5e 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_ON, ID_SEMAFORO_INGRESO);
 800426c:	2105      	movs	r1, #5
 800426e:	2001      	movs	r0, #1
 8004270:	f7ff fe5a 	bl	8003f28 <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_ESPERANDO_INGRESO;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2203      	movs	r2, #3
 8004278:	711a      	strb	r2, [r3, #4]

			}
			break;
 800427a:	e12f      	b.n	80044dc <task_normal_update+0x404>

		case ST_SYS_01_ESPERANDO_INGRESO:

			if(p_task_normal_dta->tick == DEL_SYS_XX_MIN)
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10e      	bne.n	80042a2 <task_normal_update+0x1ca>
			{
				p_task_normal_dta->flag = false;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	2200      	movs	r2, #0
 8004288:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_INGRESO_CERRAR);
 800428a:	2102      	movs	r1, #2
 800428c:	2003      	movs	r0, #3
 800428e:	f7ff fe4b 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_INGRESO);
 8004292:	2105      	movs	r1, #5
 8004294:	2000      	movs	r0, #0
 8004296:	f7ff fe47 	bl	8003f28 <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_CERRANDO_INGRESO_TIEMPO;
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2204      	movs	r2, #4
 800429e:	711a      	strb	r2, [r3, #4]
 80042a0:	e015      	b.n	80042ce <task_normal_update+0x1f6>

			}
			else if((true == p_task_normal_dta->flag) && (EV_SYS_01_BARRERA_ACTIVA == p_task_normal_dta->event))
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	799b      	ldrb	r3, [r3, #6]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d011      	beq.n	80042ce <task_normal_update+0x1f6>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	795b      	ldrb	r3, [r3, #5]
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d10d      	bne.n	80042ce <task_normal_update+0x1f6>
			{
				p_task_normal_dta->flag = false;
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2200      	movs	r2, #0
 80042b6:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_INGRESO_CERRAR);
 80042b8:	2102      	movs	r1, #2
 80042ba:	2003      	movs	r0, #3
 80042bc:	f7ff fe34 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_INGRESO);
 80042c0:	2105      	movs	r1, #5
 80042c2:	2000      	movs	r0, #0
 80042c4:	f7ff fe30 	bl	8003f28 <put_event_task_actuator>

				p_task_normal_dta->state = ST_SYS_01_CERRANDO_INGRESO_PERSONA;
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2205      	movs	r2, #5
 80042cc:	711a      	strb	r2, [r3, #4]
			}

			if(p_task_normal_dta->tick > DEL_SYS_XX_MIN) p_task_normal_dta->tick--;
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	f000 8104 	beq.w	80044e0 <task_normal_update+0x408>
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	1e5a      	subs	r2, r3, #1
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	601a      	str	r2, [r3, #0]

			break;
 80042e2:	e0fd      	b.n	80044e0 <task_normal_update+0x408>

		case ST_SYS_01_CERRANDO_INGRESO_TIEMPO:

			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_INGRESO_CERRADA == p_task_normal_dta->event))
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	799b      	ldrb	r3, [r3, #6]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f000 80fb 	beq.w	80044e4 <task_normal_update+0x40c>
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	795b      	ldrb	r3, [r3, #5]
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	f040 80f6 	bne.w	80044e4 <task_normal_update+0x40c>
			{
				p_task_normal_dta->flag = false;
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2200      	movs	r2, #0
 80042fc:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_INGRESO_CERRAR);
 80042fe:	2102      	movs	r1, #2
 8004300:	2000      	movs	r0, #0
 8004302:	f7ff fe11 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ESPERAR_INGRESO;
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	2201      	movs	r2, #1
 800430a:	711a      	strb	r2, [r3, #4]
			}


			break;
 800430c:	e0ea      	b.n	80044e4 <task_normal_update+0x40c>

		case ST_SYS_01_CERRANDO_INGRESO_PERSONA:

			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_INGRESO_CERRADA == p_task_normal_dta->event))
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	799b      	ldrb	r3, [r3, #6]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 80e8 	beq.w	80044e8 <task_normal_update+0x410>
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	795b      	ldrb	r3, [r3, #5]
 800431c:	2b08      	cmp	r3, #8
 800431e:	f040 80e3 	bne.w	80044e8 <task_normal_update+0x410>
			{
				p_task_normal_dta->flag = false;
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2200      	movs	r2, #0
 8004326:	719a      	strb	r2, [r3, #6]
				p_task_normal_dta->tick = del_tiempo_permanencia;
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_INGRESO_CERRAR);
 800432e:	2102      	movs	r1, #2
 8004330:	2000      	movs	r0, #0
 8004332:	f7ff fdf9 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_PERSONA_ADENTRO;
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2206      	movs	r2, #6
 800433a:	711a      	strb	r2, [r3, #4]
			}

			break;
 800433c:	e0d4      	b.n	80044e8 <task_normal_update+0x410>

		case ST_SYS_01_PERSONA_ADENTRO:

			if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_EGRESO_DOWN == p_task_normal_dta->event))
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	799b      	ldrb	r3, [r3, #6]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00e      	beq.n	8004364 <task_normal_update+0x28c>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	795b      	ldrb	r3, [r3, #5]
 800434a:	2b04      	cmp	r3, #4
 800434c:	d10a      	bne.n	8004364 <task_normal_update+0x28c>
			{
				p_task_normal_dta->flag = false;
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	2200      	movs	r2, #0
 8004352:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_EGRESO_ABRIR);
 8004354:	2103      	movs	r1, #3
 8004356:	2003      	movs	r0, #3
 8004358:	f7ff fde6 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ABRIENDO_EGRESO;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2208      	movs	r2, #8
 8004360:	711a      	strb	r2, [r3, #4]
 8004362:	e00d      	b.n	8004380 <task_normal_update+0x2a8>

			}
			else if(p_task_normal_dta->tick == DEL_SYS_XX_MIN){
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d109      	bne.n	8004380 <task_normal_update+0x2a8>
				p_task_normal_dta->flag = false;
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	2200      	movs	r2, #0
 8004370:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_BUZZER);
 8004372:	2107      	movs	r1, #7
 8004374:	2003      	movs	r0, #3
 8004376:	f7ff fdd7 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_TIEMPO_EXCEDIDO;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	2207      	movs	r2, #7
 800437e:	711a      	strb	r2, [r3, #4]
			}

			if( p_task_normal_dta->tick > DEL_SYS_XX_MIN) p_task_normal_dta->tick--;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 80b1 	beq.w	80044ec <task_normal_update+0x414>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	1e5a      	subs	r2, r3, #1
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	601a      	str	r2, [r3, #0]

			break;
 8004394:	e0aa      	b.n	80044ec <task_normal_update+0x414>
 8004396:	bf00      	nop
 8004398:	20000014 	.word	0x20000014
 800439c:	408f4000 	.word	0x408f4000
 80043a0:	20000494 	.word	0x20000494
 80043a4:	20000498 	.word	0x20000498
 80043a8:	20000060 	.word	0x20000060

		case ST_SYS_01_TIEMPO_EXCEDIDO:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_EGRESO_DOWN == p_task_normal_dta->event))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	799b      	ldrb	r3, [r3, #6]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 809d 	beq.w	80044f0 <task_normal_update+0x418>
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	795b      	ldrb	r3, [r3, #5]
 80043ba:	2b04      	cmp	r3, #4
 80043bc:	f040 8098 	bne.w	80044f0 <task_normal_update+0x418>
			{
				p_task_normal_dta->flag = false;
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	2200      	movs	r2, #0
 80043c4:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_EGRESO_ABRIR);
 80043c6:	2103      	movs	r1, #3
 80043c8:	2003      	movs	r0, #3
 80043ca:	f7ff fdad 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ABRIENDO_EGRESO;
 80043ce:	68bb      	ldr	r3, [r7, #8]
 80043d0:	2208      	movs	r2, #8
 80043d2:	711a      	strb	r2, [r3, #4]

			}
			break;
 80043d4:	e08c      	b.n	80044f0 <task_normal_update+0x418>

		case ST_SYS_01_ABRIENDO_EGRESO:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_EGRESO_ABIERTA == p_task_normal_dta->event))
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	799b      	ldrb	r3, [r3, #6]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 808a 	beq.w	80044f4 <task_normal_update+0x41c>
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	795b      	ldrb	r3, [r3, #5]
 80043e4:	2b05      	cmp	r3, #5
 80043e6:	f040 8085 	bne.w	80044f4 <task_normal_update+0x41c>
			{
				p_task_normal_dta->flag = false;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	2200      	movs	r2, #0
 80043ee:	719a      	strb	r2, [r3, #6]
				p_task_normal_dta->tick = del_tiempo_puerta;
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	601a      	str	r2, [r3, #0]
				put_event_task_actuator(EV_LED_XX_ON, ID_SEMAFORO_EGRESO);
 80043f6:	2106      	movs	r1, #6
 80043f8:	2001      	movs	r0, #1
 80043fa:	f7ff fd95 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_EGRESO_ABRIR);
 80043fe:	2103      	movs	r1, #3
 8004400:	2000      	movs	r0, #0
 8004402:	f7ff fd91 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ESPERANDO_EGRESO;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	2209      	movs	r2, #9
 800440a:	711a      	strb	r2, [r3, #4]

			}

			break;
 800440c:	e072      	b.n	80044f4 <task_normal_update+0x41c>

		case ST_SYS_01_ESPERANDO_EGRESO:

			if(p_task_normal_dta->tick == DEL_SYS_XX_MIN)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10e      	bne.n	8004434 <task_normal_update+0x35c>
			{
				p_task_normal_dta->flag = false;
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	2200      	movs	r2, #0
 800441a:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_EGRESO);
 800441c:	2106      	movs	r1, #6
 800441e:	2000      	movs	r0, #0
 8004420:	f7ff fd82 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_EGRESO_CERRAR);
 8004424:	2104      	movs	r1, #4
 8004426:	2003      	movs	r0, #3
 8004428:	f7ff fd7e 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_CERRANDO_EGRESO_TIEMPO;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	220a      	movs	r2, #10
 8004430:	711a      	strb	r2, [r3, #4]
 8004432:	e015      	b.n	8004460 <task_normal_update+0x388>
			}
			else if((true == p_task_normal_dta->flag) &&(EV_SYS_01_BARRERA_INACTIVA == p_task_normal_dta->event)){
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	799b      	ldrb	r3, [r3, #6]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d011      	beq.n	8004460 <task_normal_update+0x388>
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	795b      	ldrb	r3, [r3, #5]
 8004440:	2b0a      	cmp	r3, #10
 8004442:	d10d      	bne.n	8004460 <task_normal_update+0x388>
				p_task_normal_dta->flag = false;
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	2200      	movs	r2, #0
 8004448:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_EGRESO);
 800444a:	2106      	movs	r1, #6
 800444c:	2000      	movs	r0, #0
 800444e:	f7ff fd6b 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_BLINK, ID_MOTOR_EGRESO_CERRAR);
 8004452:	2104      	movs	r1, #4
 8004454:	2003      	movs	r0, #3
 8004456:	f7ff fd67 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_CERRANDO_EGRESO_PERSONA;
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	220b      	movs	r2, #11
 800445e:	711a      	strb	r2, [r3, #4]
			}

			if( p_task_normal_dta->tick > DEL_SYS_XX_MIN) p_task_normal_dta->tick--;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d047      	beq.n	80044f8 <task_normal_update+0x420>
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	1e5a      	subs	r2, r3, #1
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	601a      	str	r2, [r3, #0]

			break;
 8004472:	e041      	b.n	80044f8 <task_normal_update+0x420>

		case ST_SYS_01_CERRANDO_EGRESO_TIEMPO:
			if((true == p_task_normal_dta->flag) &&(EV_SYS_01_PUERTA_EGRESO_CERRADA == p_task_normal_dta->event)){
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	799b      	ldrb	r3, [r3, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d03f      	beq.n	80044fc <task_normal_update+0x424>
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	795b      	ldrb	r3, [r3, #5]
 8004480:	2b06      	cmp	r3, #6
 8004482:	d13b      	bne.n	80044fc <task_normal_update+0x424>
				p_task_normal_dta->flag = false;
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2200      	movs	r2, #0
 8004488:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_SEMAFORO_EGRESO);
 800448a:	2106      	movs	r1, #6
 800448c:	2000      	movs	r0, #0
 800448e:	f7ff fd4b 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_EGRESO_CERRAR);
 8004492:	2104      	movs	r1, #4
 8004494:	2000      	movs	r0, #0
 8004496:	f7ff fd47 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_PERSONA_ADENTRO;
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	2206      	movs	r2, #6
 800449e:	711a      	strb	r2, [r3, #4]
			}
			break;
 80044a0:	e02c      	b.n	80044fc <task_normal_update+0x424>

		case ST_SYS_01_CERRANDO_EGRESO_PERSONA:
			if((true == p_task_normal_dta->flag) && (EV_SYS_01_PUERTA_EGRESO_CERRADA == p_task_normal_dta->event))
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	799b      	ldrb	r3, [r3, #6]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02a      	beq.n	8004500 <task_normal_update+0x428>
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	795b      	ldrb	r3, [r3, #5]
 80044ae:	2b06      	cmp	r3, #6
 80044b0:	d126      	bne.n	8004500 <task_normal_update+0x428>
			{
				p_task_normal_dta->flag = false;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2200      	movs	r2, #0
 80044b6:	719a      	strb	r2, [r3, #6]
				put_event_task_actuator(EV_LED_XX_OFF, ID_MOTOR_EGRESO_CERRAR);
 80044b8:	2104      	movs	r1, #4
 80044ba:	2000      	movs	r0, #0
 80044bc:	f7ff fd34 	bl	8003f28 <put_event_task_actuator>
				put_event_task_actuator(EV_LED_XX_OFF, ID_BUZZER);
 80044c0:	2107      	movs	r1, #7
 80044c2:	2000      	movs	r0, #0
 80044c4:	f7ff fd30 	bl	8003f28 <put_event_task_actuator>
				p_task_normal_dta->state = ST_SYS_01_ESPERAR_INGRESO;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2201      	movs	r2, #1
 80044cc:	711a      	strb	r2, [r3, #4]

			}

			break;
 80044ce:	e017      	b.n	8004500 <task_normal_update+0x428>

			default:

				break;
 80044d0:	bf00      	nop
 80044d2:	e016      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044d4:	bf00      	nop
 80044d6:	e014      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044d8:	bf00      	nop
 80044da:	e012      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044dc:	bf00      	nop
 80044de:	e010      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044e0:	bf00      	nop
 80044e2:	e00e      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044e4:	bf00      	nop
 80044e6:	e00c      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044e8:	bf00      	nop
 80044ea:	e00a      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044ec:	bf00      	nop
 80044ee:	e008      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044f0:	bf00      	nop
 80044f2:	e006      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044f4:	bf00      	nop
 80044f6:	e004      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044f8:	bf00      	nop
 80044fa:	e002      	b.n	8004502 <task_normal_update+0x42a>
			break;
 80044fc:	bf00      	nop
 80044fe:	e000      	b.n	8004502 <task_normal_update+0x42a>
			break;
 8004500:	bf00      	nop
    while (b_time_update_required)
 8004502:	7dfb      	ldrb	r3, [r7, #23]
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f ae24 	bne.w	8004152 <task_normal_update+0x7a>
		}
	}
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <init_queue_event_task_normal>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_normal(void)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 800451a:	4b0f      	ldr	r3, [pc, #60]	@ (8004558 <init_queue_event_task_normal+0x44>)
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8004520:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <init_queue_event_task_normal+0x44>)
 8004522:	2200      	movs	r2, #0
 8004524:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8004526:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <init_queue_event_task_normal+0x44>)
 8004528:	2200      	movs	r2, #0
 800452a:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 800452c:	2300      	movs	r3, #0
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	e008      	b.n	8004544 <init_queue_event_task_normal+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8004532:	4a09      	ldr	r2, [pc, #36]	@ (8004558 <init_queue_event_task_normal+0x44>)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4413      	add	r3, r2
 8004538:	330c      	adds	r3, #12
 800453a:	22ff      	movs	r2, #255	@ 0xff
 800453c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	3301      	adds	r3, #1
 8004542:	607b      	str	r3, [r7, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2b0f      	cmp	r3, #15
 8004548:	d9f3      	bls.n	8004532 <init_queue_event_task_normal+0x1e>
}
 800454a:	bf00      	nop
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	bc80      	pop	{r7}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	2000049c 	.word	0x2000049c

0800455c <put_event_task_normal>:

void put_event_task_normal(task_normal_ev_t event)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8004566:	4b0d      	ldr	r3, [pc, #52]	@ (800459c <put_event_task_normal+0x40>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	3301      	adds	r3, #1
 800456c:	4a0b      	ldr	r2, [pc, #44]	@ (800459c <put_event_task_normal+0x40>)
 800456e:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8004570:	4b0a      	ldr	r3, [pc, #40]	@ (800459c <put_event_task_normal+0x40>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	4909      	ldr	r1, [pc, #36]	@ (800459c <put_event_task_normal+0x40>)
 8004578:	600a      	str	r2, [r1, #0]
 800457a:	4a08      	ldr	r2, [pc, #32]	@ (800459c <put_event_task_normal+0x40>)
 800457c:	4413      	add	r3, r2
 800457e:	79fa      	ldrb	r2, [r7, #7]
 8004580:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8004582:	4b06      	ldr	r3, [pc, #24]	@ (800459c <put_event_task_normal+0x40>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2b10      	cmp	r3, #16
 8004588:	d102      	bne.n	8004590 <put_event_task_normal+0x34>
		queue_task_a.head = 0;
 800458a:	4b04      	ldr	r3, [pc, #16]	@ (800459c <put_event_task_normal+0x40>)
 800458c:	2200      	movs	r2, #0
 800458e:	601a      	str	r2, [r3, #0]
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	2000049c 	.word	0x2000049c

080045a0 <get_event_task_normal>:

task_normal_ev_t get_event_task_normal(void)

{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
	task_normal_ev_t event;

	queue_task_a.count--;
 80045a6:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <get_event_task_normal+0x48>)
 80045a8:	689b      	ldr	r3, [r3, #8]
 80045aa:	3b01      	subs	r3, #1
 80045ac:	4a0e      	ldr	r2, [pc, #56]	@ (80045e8 <get_event_task_normal+0x48>)
 80045ae:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 80045b0:	4b0d      	ldr	r3, [pc, #52]	@ (80045e8 <get_event_task_normal+0x48>)
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4a0c      	ldr	r2, [pc, #48]	@ (80045e8 <get_event_task_normal+0x48>)
 80045b6:	4413      	add	r3, r2
 80045b8:	7b1b      	ldrb	r3, [r3, #12]
 80045ba:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 80045bc:	4b0a      	ldr	r3, [pc, #40]	@ (80045e8 <get_event_task_normal+0x48>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	4909      	ldr	r1, [pc, #36]	@ (80045e8 <get_event_task_normal+0x48>)
 80045c4:	604a      	str	r2, [r1, #4]
 80045c6:	4a08      	ldr	r2, [pc, #32]	@ (80045e8 <get_event_task_normal+0x48>)
 80045c8:	4413      	add	r3, r2
 80045ca:	22ff      	movs	r2, #255	@ 0xff
 80045cc:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 80045ce:	4b06      	ldr	r3, [pc, #24]	@ (80045e8 <get_event_task_normal+0x48>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b10      	cmp	r3, #16
 80045d4:	d102      	bne.n	80045dc <get_event_task_normal+0x3c>
		queue_task_a.tail = 0;
 80045d6:	4b04      	ldr	r3, [pc, #16]	@ (80045e8 <get_event_task_normal+0x48>)
 80045d8:	2200      	movs	r2, #0
 80045da:	605a      	str	r2, [r3, #4]

	return event;
 80045dc:	79fb      	ldrb	r3, [r7, #7]
}
 80045de:	4618      	mov	r0, r3
 80045e0:	370c      	adds	r7, #12
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bc80      	pop	{r7}
 80045e6:	4770      	bx	lr
 80045e8:	2000049c 	.word	0x2000049c

080045ec <any_event_task_normal>:

bool any_event_task_normal(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 80045f0:	4b06      	ldr	r3, [pc, #24]	@ (800460c <any_event_task_normal+0x20>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4b05      	ldr	r3, [pc, #20]	@ (800460c <any_event_task_normal+0x20>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	bf14      	ite	ne
 80045fc:	2301      	movne	r3, #1
 80045fe:	2300      	moveq	r3, #0
 8004600:	b2db      	uxtb	r3, r3
}
 8004602:	4618      	mov	r0, r3
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	2000049c 	.word	0x2000049c

08004610 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8004618:	b672      	cpsid	i
 800461a:	4b49      	ldr	r3, [pc, #292]	@ (8004740 <task_sensor_init+0x130>)
 800461c:	6818      	ldr	r0, [r3, #0]
 800461e:	4b49      	ldr	r3, [pc, #292]	@ (8004744 <task_sensor_init+0x134>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	4b48      	ldr	r3, [pc, #288]	@ (8004748 <task_sensor_init+0x138>)
 8004626:	4a49      	ldr	r2, [pc, #292]	@ (800474c <task_sensor_init+0x13c>)
 8004628:	213f      	movs	r1, #63	@ 0x3f
 800462a:	f001 fc17 	bl	8005e5c <sniprintf>
 800462e:	4603      	mov	r3, r0
 8004630:	4a47      	ldr	r2, [pc, #284]	@ (8004750 <task_sensor_init+0x140>)
 8004632:	6013      	str	r3, [r2, #0]
 8004634:	4b42      	ldr	r3, [pc, #264]	@ (8004740 <task_sensor_init+0x130>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff f9ef 	bl	8003a1c <logger_log_print_>
 800463e:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8004640:	b672      	cpsid	i
 8004642:	4b3f      	ldr	r3, [pc, #252]	@ (8004740 <task_sensor_init+0x130>)
 8004644:	6818      	ldr	r0, [r3, #0]
 8004646:	4b43      	ldr	r3, [pc, #268]	@ (8004754 <task_sensor_init+0x144>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	9300      	str	r3, [sp, #0]
 800464c:	4b42      	ldr	r3, [pc, #264]	@ (8004758 <task_sensor_init+0x148>)
 800464e:	4a43      	ldr	r2, [pc, #268]	@ (800475c <task_sensor_init+0x14c>)
 8004650:	213f      	movs	r1, #63	@ 0x3f
 8004652:	f001 fc03 	bl	8005e5c <sniprintf>
 8004656:	4603      	mov	r3, r0
 8004658:	4a3d      	ldr	r2, [pc, #244]	@ (8004750 <task_sensor_init+0x140>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	4b38      	ldr	r3, [pc, #224]	@ (8004740 <task_sensor_init+0x130>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff f9db 	bl	8003a1c <logger_log_print_>
 8004666:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8004668:	4b3d      	ldr	r3, [pc, #244]	@ (8004760 <task_sensor_init+0x150>)
 800466a:	2200      	movs	r2, #0
 800466c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 800466e:	b672      	cpsid	i
 8004670:	4b33      	ldr	r3, [pc, #204]	@ (8004740 <task_sensor_init+0x130>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4b3a      	ldr	r3, [pc, #232]	@ (8004760 <task_sensor_init+0x150>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	9300      	str	r3, [sp, #0]
 800467a:	4b3a      	ldr	r3, [pc, #232]	@ (8004764 <task_sensor_init+0x154>)
 800467c:	4a3a      	ldr	r2, [pc, #232]	@ (8004768 <task_sensor_init+0x158>)
 800467e:	213f      	movs	r1, #63	@ 0x3f
 8004680:	f001 fbec 	bl	8005e5c <sniprintf>
 8004684:	4603      	mov	r3, r0
 8004686:	4a32      	ldr	r2, [pc, #200]	@ (8004750 <task_sensor_init+0x140>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <task_sensor_init+0x130>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7ff f9c4 	bl	8003a1c <logger_log_print_>
 8004694:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e046      	b.n	800472a <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4a32      	ldr	r2, [pc, #200]	@ (800476c <task_sensor_init+0x15c>)
 80046a2:	4413      	add	r3, r2
 80046a4:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 80046a6:	b672      	cpsid	i
 80046a8:	4b25      	ldr	r3, [pc, #148]	@ (8004740 <task_sensor_init+0x130>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004770 <task_sensor_init+0x160>)
 80046b2:	4a30      	ldr	r2, [pc, #192]	@ (8004774 <task_sensor_init+0x164>)
 80046b4:	213f      	movs	r1, #63	@ 0x3f
 80046b6:	f001 fbd1 	bl	8005e5c <sniprintf>
 80046ba:	4603      	mov	r3, r0
 80046bc:	4a24      	ldr	r2, [pc, #144]	@ (8004750 <task_sensor_init+0x140>)
 80046be:	6013      	str	r3, [r2, #0]
 80046c0:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <task_sensor_init+0x130>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7ff f9a9 	bl	8003a1c <logger_log_print_>
 80046ca:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	791b      	ldrb	r3, [r3, #4]
 80046d0:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80046d2:	b672      	cpsid	i
 80046d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004740 <task_sensor_init+0x130>)
 80046d6:	6818      	ldr	r0, [r3, #0]
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	4b26      	ldr	r3, [pc, #152]	@ (8004778 <task_sensor_init+0x168>)
 80046de:	4a25      	ldr	r2, [pc, #148]	@ (8004774 <task_sensor_init+0x164>)
 80046e0:	213f      	movs	r1, #63	@ 0x3f
 80046e2:	f001 fbbb 	bl	8005e5c <sniprintf>
 80046e6:	4603      	mov	r3, r0
 80046e8:	4a19      	ldr	r2, [pc, #100]	@ (8004750 <task_sensor_init+0x140>)
 80046ea:	6013      	str	r3, [r2, #0]
 80046ec:	4b14      	ldr	r3, [pc, #80]	@ (8004740 <task_sensor_init+0x130>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff f993 	bl	8003a1c <logger_log_print_>
 80046f6:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	795b      	ldrb	r3, [r3, #5]
 80046fc:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 80046fe:	b672      	cpsid	i
 8004700:	4b0f      	ldr	r3, [pc, #60]	@ (8004740 <task_sensor_init+0x130>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	7bbb      	ldrb	r3, [r7, #14]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	4b1c      	ldr	r3, [pc, #112]	@ (800477c <task_sensor_init+0x16c>)
 800470a:	4a17      	ldr	r2, [pc, #92]	@ (8004768 <task_sensor_init+0x158>)
 800470c:	213f      	movs	r1, #63	@ 0x3f
 800470e:	f001 fba5 	bl	8005e5c <sniprintf>
 8004712:	4603      	mov	r3, r0
 8004714:	4a0e      	ldr	r2, [pc, #56]	@ (8004750 <task_sensor_init+0x140>)
 8004716:	6013      	str	r3, [r2, #0]
 8004718:	4b09      	ldr	r3, [pc, #36]	@ (8004740 <task_sensor_init+0x130>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4618      	mov	r0, r3
 800471e:	f7ff f97d 	bl	8003a1c <logger_log_print_>
 8004722:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3301      	adds	r3, #1
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d9b5      	bls.n	800469c <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 8004730:	4b13      	ldr	r3, [pc, #76]	@ (8004780 <task_sensor_init+0x170>)
 8004732:	2200      	movs	r2, #0
 8004734:	601a      	str	r2, [r3, #0]
}
 8004736:	bf00      	nop
 8004738:	3718      	adds	r7, #24
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	0800741c 	.word	0x0800741c
 8004744:	20000070 	.word	0x20000070
 8004748:	080070d8 	.word	0x080070d8
 800474c:	080070ec 	.word	0x080070ec
 8004750:	20000488 	.word	0x20000488
 8004754:	20000074 	.word	0x20000074
 8004758:	08007104 	.word	0x08007104
 800475c:	08007110 	.word	0x08007110
 8004760:	20000500 	.word	0x20000500
 8004764:	08007120 	.word	0x08007120
 8004768:	08007134 	.word	0x08007134
 800476c:	200004b8 	.word	0x200004b8
 8004770:	08007144 	.word	0x08007144
 8004774:	0800714c 	.word	0x0800714c
 8004778:	08007158 	.word	0x08007158
 800477c:	08007160 	.word	0x08007160
 8004780:	20000504 	.word	0x20000504

08004784 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8004784:	b590      	push	{r4, r7, lr}
 8004786:	b087      	sub	sp, #28
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 800478c:	2300      	movs	r3, #0
 800478e:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8004790:	4b6a      	ldr	r3, [pc, #424]	@ (800493c <task_sensor_update+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	3301      	adds	r3, #1
 8004796:	4a69      	ldr	r2, [pc, #420]	@ (800493c <task_sensor_update+0x1b8>)
 8004798:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800479a:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 800479c:	4b68      	ldr	r3, [pc, #416]	@ (8004940 <task_sensor_update+0x1bc>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d006      	beq.n	80047b2 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 80047a4:	4b66      	ldr	r3, [pc, #408]	@ (8004940 <task_sensor_update+0x1bc>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	3b01      	subs	r3, #1
 80047aa:	4a65      	ldr	r2, [pc, #404]	@ (8004940 <task_sensor_update+0x1bc>)
 80047ac:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80047ae:	2301      	movs	r3, #1
 80047b0:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80047b2:	b662      	cpsie	i

    while (b_time_update_required)
 80047b4:	e0b8      	b.n	8004928 <task_sensor_update+0x1a4>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 80047b6:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80047b8:	4b61      	ldr	r3, [pc, #388]	@ (8004940 <task_sensor_update+0x1bc>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 80047c0:	4b5f      	ldr	r3, [pc, #380]	@ (8004940 <task_sensor_update+0x1bc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004940 <task_sensor_update+0x1bc>)
 80047c8:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80047ca:	2301      	movs	r3, #1
 80047cc:	74fb      	strb	r3, [r7, #19]
 80047ce:	e001      	b.n	80047d4 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80047d0:	2300      	movs	r3, #0
 80047d2:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80047d4:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e0a1      	b.n	8004920 <task_sensor_update+0x19c>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4a57      	ldr	r2, [pc, #348]	@ (8004944 <task_sensor_update+0x1c0>)
 80047e8:	4413      	add	r3, r2
 80047ea:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	00db      	lsls	r3, r3, #3
 80047f0:	4a55      	ldr	r2, [pc, #340]	@ (8004948 <task_sensor_update+0x1c4>)
 80047f2:	4413      	add	r3, r2
 80047f4:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	7a9c      	ldrb	r4, [r3, #10]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	685a      	ldr	r2, [r3, #4]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	891b      	ldrh	r3, [r3, #8]
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fd fd5b 	bl	80022c0 <HAL_GPIO_ReadPin>
 800480a:	4603      	mov	r3, r0
 800480c:	429c      	cmp	r4, r3
 800480e:	d103      	bne.n	8004818 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	2201      	movs	r2, #1
 8004814:	715a      	strb	r2, [r3, #5]
 8004816:	e002      	b.n	800481e <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	2200      	movs	r2, #0
 800481c:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	791b      	ldrb	r3, [r3, #4]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d868      	bhi.n	80048f8 <task_sensor_update+0x174>
 8004826:	a201      	add	r2, pc, #4	@ (adr r2, 800482c <task_sensor_update+0xa8>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	0800483d 	.word	0x0800483d
 8004830:	08004855 	.word	0x08004855
 8004834:	0800489b 	.word	0x0800489b
 8004838:	080048b3 	.word	0x080048b3
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	795b      	ldrb	r3, [r3, #5]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d163      	bne.n	800490c <task_sensor_update+0x188>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2201      	movs	r2, #1
 8004848:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	68da      	ldr	r2, [r3, #12]
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	601a      	str	r2, [r3, #0]
					}

					break;
 8004852:	e05b      	b.n	800490c <task_sensor_update+0x188>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	1e5a      	subs	r2, r3, #1
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d154      	bne.n	8004910 <task_sensor_update+0x18c>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	795b      	ldrb	r3, [r3, #5]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d111      	bne.n	8004892 <task_sensor_update+0x10e>
						{
							if(p_task_sensor_cfg->type == DOWN_EVENT || p_task_sensor_cfg->type == BOTH_EVENTS){
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	7e1b      	ldrb	r3, [r3, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <task_sensor_update+0xfa>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	7e1b      	ldrb	r3, [r3, #24]
 800487a:	2b02      	cmp	r3, #2
 800487c:	d105      	bne.n	800488a <task_sensor_update+0x106>
								p_task_sensor_cfg->f_put_event(p_task_sensor_cfg->signal_down);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	7c52      	ldrb	r2, [r2, #17]
 8004886:	4610      	mov	r0, r2
 8004888:	4798      	blx	r3
							}

							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	2202      	movs	r2, #2
 800488e:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 8004890:	e03e      	b.n	8004910 <task_sensor_update+0x18c>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8004892:	68bb      	ldr	r3, [r7, #8]
 8004894:	2200      	movs	r2, #0
 8004896:	711a      	strb	r2, [r3, #4]
					break;
 8004898:	e03a      	b.n	8004910 <task_sensor_update+0x18c>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	795b      	ldrb	r3, [r3, #5]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d138      	bne.n	8004914 <task_sensor_update+0x190>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	2203      	movs	r2, #3
 80048ae:	711a      	strb	r2, [r3, #4]
					}

					break;
 80048b0:	e030      	b.n	8004914 <task_sensor_update+0x190>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	1e5a      	subs	r2, r3, #1
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d129      	bne.n	8004918 <task_sensor_update+0x194>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	795b      	ldrb	r3, [r3, #5]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d111      	bne.n	80048f0 <task_sensor_update+0x16c>
						{
							if(p_task_sensor_cfg->type == UP_EVENT || p_task_sensor_cfg->type == BOTH_EVENTS)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	7e1b      	ldrb	r3, [r3, #24]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d003      	beq.n	80048dc <task_sensor_update+0x158>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	7e1b      	ldrb	r3, [r3, #24]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d105      	bne.n	80048e8 <task_sensor_update+0x164>
							{
								p_task_sensor_cfg->f_put_event(p_task_sensor_cfg->signal_up);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	695b      	ldr	r3, [r3, #20]
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	7c12      	ldrb	r2, [r2, #16]
 80048e4:	4610      	mov	r0, r2
 80048e6:	4798      	blx	r3
							}
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2200      	movs	r2, #0
 80048ec:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 80048ee:	e013      	b.n	8004918 <task_sensor_update+0x194>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	2202      	movs	r2, #2
 80048f4:	711a      	strb	r2, [r3, #4]
					break;
 80048f6:	e00f      	b.n	8004918 <task_sensor_update+0x194>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	2200      	movs	r2, #0
 8004902:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2200      	movs	r2, #0
 8004908:	715a      	strb	r2, [r3, #5]

					break;
 800490a:	e006      	b.n	800491a <task_sensor_update+0x196>
					break;
 800490c:	bf00      	nop
 800490e:	e004      	b.n	800491a <task_sensor_update+0x196>
					break;
 8004910:	bf00      	nop
 8004912:	e002      	b.n	800491a <task_sensor_update+0x196>
					break;
 8004914:	bf00      	nop
 8004916:	e000      	b.n	800491a <task_sensor_update+0x196>
					break;
 8004918:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	3301      	adds	r3, #1
 800491e:	617b      	str	r3, [r7, #20]
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b08      	cmp	r3, #8
 8004924:	f67f af5a 	bls.w	80047dc <task_sensor_update+0x58>
    while (b_time_update_required)
 8004928:	7cfb      	ldrb	r3, [r7, #19]
 800492a:	2b00      	cmp	r3, #0
 800492c:	f47f af43 	bne.w	80047b6 <task_sensor_update+0x32>
			}
		}
    }
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	371c      	adds	r7, #28
 8004936:	46bd      	mov	sp, r7
 8004938:	bd90      	pop	{r4, r7, pc}
 800493a:	bf00      	nop
 800493c:	20000500 	.word	0x20000500
 8004940:	20000504 	.word	0x20000504
 8004944:	080074c0 	.word	0x080074c0
 8004948:	200004b8 	.word	0x200004b8

0800494c <task_set_up_init>:
char aux1[16];
char aux2[16];

/********************** external functions definition ************************/
void task_set_up_init(void *parameters)
{
 800494c:	b590      	push	{r4, r7, lr}
 800494e:	b087      	sub	sp, #28
 8004950:	af02      	add	r7, sp, #8
 8004952:	6078      	str	r0, [r7, #4]
	task_set_up_st_t	state;
	task_set_up_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_set_up_init), p_task_set_up);
 8004954:	b672      	cpsid	i
 8004956:	4b6c      	ldr	r3, [pc, #432]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004958:	6818      	ldr	r0, [r3, #0]
 800495a:	4b6c      	ldr	r3, [pc, #432]	@ (8004b0c <task_set_up_init+0x1c0>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	9300      	str	r3, [sp, #0]
 8004960:	4b6b      	ldr	r3, [pc, #428]	@ (8004b10 <task_set_up_init+0x1c4>)
 8004962:	4a6c      	ldr	r2, [pc, #432]	@ (8004b14 <task_set_up_init+0x1c8>)
 8004964:	213f      	movs	r1, #63	@ 0x3f
 8004966:	f001 fa79 	bl	8005e5c <sniprintf>
 800496a:	4603      	mov	r3, r0
 800496c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b18 <task_set_up_init+0x1cc>)
 800496e:	6013      	str	r3, [r2, #0]
 8004970:	4b65      	ldr	r3, [pc, #404]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4618      	mov	r0, r3
 8004976:	f7ff f851 	bl	8003a1c <logger_log_print_>
 800497a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_set_up), p_task_set_up_);
 800497c:	b672      	cpsid	i
 800497e:	4b62      	ldr	r3, [pc, #392]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004980:	6818      	ldr	r0, [r3, #0]
 8004982:	4b66      	ldr	r3, [pc, #408]	@ (8004b1c <task_set_up_init+0x1d0>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	9300      	str	r3, [sp, #0]
 8004988:	4b65      	ldr	r3, [pc, #404]	@ (8004b20 <task_set_up_init+0x1d4>)
 800498a:	4a66      	ldr	r2, [pc, #408]	@ (8004b24 <task_set_up_init+0x1d8>)
 800498c:	213f      	movs	r1, #63	@ 0x3f
 800498e:	f001 fa65 	bl	8005e5c <sniprintf>
 8004992:	4603      	mov	r3, r0
 8004994:	4a60      	ldr	r2, [pc, #384]	@ (8004b18 <task_set_up_init+0x1cc>)
 8004996:	6013      	str	r3, [r2, #0]
 8004998:	4b5b      	ldr	r3, [pc, #364]	@ (8004b08 <task_set_up_init+0x1bc>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4618      	mov	r0, r3
 800499e:	f7ff f83d 	bl	8003a1c <logger_log_print_>
 80049a2:	b662      	cpsie	i

	g_task_set_up_cnt = G_TASK_MEN_CNT_INI;
 80049a4:	4b60      	ldr	r3, [pc, #384]	@ (8004b28 <task_set_up_init+0x1dc>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_set_up_cnt), g_task_set_up_cnt);
 80049aa:	b672      	cpsid	i
 80049ac:	4b56      	ldr	r3, [pc, #344]	@ (8004b08 <task_set_up_init+0x1bc>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	4b5d      	ldr	r3, [pc, #372]	@ (8004b28 <task_set_up_init+0x1dc>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	4b5d      	ldr	r3, [pc, #372]	@ (8004b2c <task_set_up_init+0x1e0>)
 80049b8:	4a5d      	ldr	r2, [pc, #372]	@ (8004b30 <task_set_up_init+0x1e4>)
 80049ba:	213f      	movs	r1, #63	@ 0x3f
 80049bc:	f001 fa4e 	bl	8005e5c <sniprintf>
 80049c0:	4603      	mov	r3, r0
 80049c2:	4a55      	ldr	r2, [pc, #340]	@ (8004b18 <task_set_up_init+0x1cc>)
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b50      	ldr	r3, [pc, #320]	@ (8004b08 <task_set_up_init+0x1bc>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4618      	mov	r0, r3
 80049cc:	f7ff f826 	bl	8003a1c <logger_log_print_>
 80049d0:	b662      	cpsie	i

	init_queue_event_task_set_up();
 80049d2:	f000 fb2d 	bl	8005030 <init_queue_event_task_set_up>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_set_up_dta = &task_set_up_dta;
 80049d6:	4b57      	ldr	r3, [pc, #348]	@ (8004b34 <task_set_up_init+0x1e8>)
 80049d8:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_set_up_dta->state;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	791b      	ldrb	r3, [r3, #4]
 80049de:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80049e0:	b672      	cpsid	i
 80049e2:	4b49      	ldr	r3, [pc, #292]	@ (8004b08 <task_set_up_init+0x1bc>)
 80049e4:	6818      	ldr	r0, [r3, #0]
 80049e6:	7afb      	ldrb	r3, [r7, #11]
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <task_set_up_init+0x1ec>)
 80049ec:	4a53      	ldr	r2, [pc, #332]	@ (8004b3c <task_set_up_init+0x1f0>)
 80049ee:	213f      	movs	r1, #63	@ 0x3f
 80049f0:	f001 fa34 	bl	8005e5c <sniprintf>
 80049f4:	4603      	mov	r3, r0
 80049f6:	4a48      	ldr	r2, [pc, #288]	@ (8004b18 <task_set_up_init+0x1cc>)
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b43      	ldr	r3, [pc, #268]	@ (8004b08 <task_set_up_init+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff f80c 	bl	8003a1c <logger_log_print_>
 8004a04:	b662      	cpsie	i

	event = p_task_set_up_dta->event;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	795b      	ldrb	r3, [r3, #5]
 8004a0a:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8004a0c:	b672      	cpsid	i
 8004a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004a10:	6818      	ldr	r0, [r3, #0]
 8004a12:	7abb      	ldrb	r3, [r7, #10]
 8004a14:	9300      	str	r3, [sp, #0]
 8004a16:	4b4a      	ldr	r3, [pc, #296]	@ (8004b40 <task_set_up_init+0x1f4>)
 8004a18:	4a48      	ldr	r2, [pc, #288]	@ (8004b3c <task_set_up_init+0x1f0>)
 8004a1a:	213f      	movs	r1, #63	@ 0x3f
 8004a1c:	f001 fa1e 	bl	8005e5c <sniprintf>
 8004a20:	4603      	mov	r3, r0
 8004a22:	4a3d      	ldr	r2, [pc, #244]	@ (8004b18 <task_set_up_init+0x1cc>)
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	4b38      	ldr	r3, [pc, #224]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fe fff6 	bl	8003a1c <logger_log_print_>
 8004a30:	b662      	cpsie	i

	b_event = p_task_set_up_dta->flag;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	799b      	ldrb	r3, [r3, #6]
 8004a36:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8004a38:	b672      	cpsid	i
 8004a3a:	4b33      	ldr	r3, [pc, #204]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004a3c:	6818      	ldr	r0, [r3, #0]
 8004a3e:	7a7b      	ldrb	r3, [r7, #9]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <task_set_up_init+0xfc>
 8004a44:	4b3f      	ldr	r3, [pc, #252]	@ (8004b44 <task_set_up_init+0x1f8>)
 8004a46:	e000      	b.n	8004a4a <task_set_up_init+0xfe>
 8004a48:	4b3f      	ldr	r3, [pc, #252]	@ (8004b48 <task_set_up_init+0x1fc>)
 8004a4a:	9300      	str	r3, [sp, #0]
 8004a4c:	4b3f      	ldr	r3, [pc, #252]	@ (8004b4c <task_set_up_init+0x200>)
 8004a4e:	4a40      	ldr	r2, [pc, #256]	@ (8004b50 <task_set_up_init+0x204>)
 8004a50:	213f      	movs	r1, #63	@ 0x3f
 8004a52:	f001 fa03 	bl	8005e5c <sniprintf>
 8004a56:	4603      	mov	r3, r0
 8004a58:	4a2f      	ldr	r2, [pc, #188]	@ (8004b18 <task_set_up_init+0x1cc>)
 8004a5a:	6013      	str	r3, [r2, #0]
 8004a5c:	4b2a      	ldr	r3, [pc, #168]	@ (8004b08 <task_set_up_init+0x1bc>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ffdb 	bl	8003a1c <logger_log_print_>
 8004a66:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f7fe fc9d 	bl	80033a8 <displayInit>

    sprintf(aux1,"Config: %ds %ds", configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 8004a6e:	4b39      	ldr	r3, [pc, #228]	@ (8004b54 <task_set_up_init+0x208>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b37      	ldr	r3, [pc, #220]	@ (8004b54 <task_set_up_init+0x208>)
 8004a76:	785b      	ldrb	r3, [r3, #1]
 8004a78:	4937      	ldr	r1, [pc, #220]	@ (8004b58 <task_set_up_init+0x20c>)
 8004a7a:	4838      	ldr	r0, [pc, #224]	@ (8004b5c <task_set_up_init+0x210>)
 8004a7c:	f001 fa22 	bl	8005ec4 <siprintf>
    sprintf(aux2,"T1:%dC  T2:%dC", (int)temperatura.ambiente, (int)temperatura.micro);
 8004a80:	4b37      	ldr	r3, [pc, #220]	@ (8004b60 <task_set_up_init+0x214>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fc f8b7 	bl	8000bf8 <__aeabi_f2iz>
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	4b34      	ldr	r3, [pc, #208]	@ (8004b60 <task_set_up_init+0x214>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f7fc f8b1 	bl	8000bf8 <__aeabi_f2iz>
 8004a96:	4603      	mov	r3, r0
 8004a98:	4622      	mov	r2, r4
 8004a9a:	4932      	ldr	r1, [pc, #200]	@ (8004b64 <task_set_up_init+0x218>)
 8004a9c:	4832      	ldr	r0, [pc, #200]	@ (8004b68 <task_set_up_init+0x21c>)
 8004a9e:	f001 fa11 	bl	8005ec4 <siprintf>

    linea1=aux1;
 8004aa2:	4b32      	ldr	r3, [pc, #200]	@ (8004b6c <task_set_up_init+0x220>)
 8004aa4:	4a2d      	ldr	r2, [pc, #180]	@ (8004b5c <task_set_up_init+0x210>)
 8004aa6:	601a      	str	r2, [r3, #0]
    linea2=aux2;
 8004aa8:	4b31      	ldr	r3, [pc, #196]	@ (8004b70 <task_set_up_init+0x224>)
 8004aaa:	4a2f      	ldr	r2, [pc, #188]	@ (8004b68 <task_set_up_init+0x21c>)
 8004aac:	601a      	str	r2, [r3, #0]

    displayCharPositionWrite(0, 0);
 8004aae:	2100      	movs	r1, #0
 8004ab0:	2000      	movs	r0, #0
 8004ab2:	f7fe fcf5 	bl	80034a0 <displayCharPositionWrite>
	displayStringWrite("                ");
 8004ab6:	482f      	ldr	r0, [pc, #188]	@ (8004b74 <task_set_up_init+0x228>)
 8004ab8:	f7fe fd3c 	bl	8003534 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 8004abc:	2101      	movs	r1, #1
 8004abe:	2000      	movs	r0, #0
 8004ac0:	f7fe fcee 	bl	80034a0 <displayCharPositionWrite>
	displayStringWrite("                ");
 8004ac4:	482b      	ldr	r0, [pc, #172]	@ (8004b74 <task_set_up_init+0x228>)
 8004ac6:	f7fe fd35 	bl	8003534 <displayStringWrite>

	displayCharPositionWrite(0, 0);
 8004aca:	2100      	movs	r1, #0
 8004acc:	2000      	movs	r0, #0
 8004ace:	f7fe fce7 	bl	80034a0 <displayCharPositionWrite>
	displayStringWrite(linea1);
 8004ad2:	4b26      	ldr	r3, [pc, #152]	@ (8004b6c <task_set_up_init+0x220>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fd2c 	bl	8003534 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 8004adc:	2101      	movs	r1, #1
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fe fcde 	bl	80034a0 <displayCharPositionWrite>
	displayStringWrite(linea2);
 8004ae4:	4b22      	ldr	r3, [pc, #136]	@ (8004b70 <task_set_up_init+0x224>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f7fe fd23 	bl	8003534 <displayStringWrite>

	HAL_GPIO_WritePin(LED_A_PORT, LED_A_PIN, LED_A_ON);
 8004aee:	2201      	movs	r2, #1
 8004af0:	2120      	movs	r1, #32
 8004af2:	4821      	ldr	r0, [pc, #132]	@ (8004b78 <task_set_up_init+0x22c>)
 8004af4:	f7fd fbfb 	bl	80022ee <HAL_GPIO_WritePin>

	g_task_set_up_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 8004af8:	4b20      	ldr	r3, [pc, #128]	@ (8004b7c <task_set_up_init+0x230>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
}
 8004afe:	bf00      	nop
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd90      	pop	{r4, r7, pc}
 8004b06:	bf00      	nop
 8004b08:	0800741c 	.word	0x0800741c
 8004b0c:	20000084 	.word	0x20000084
 8004b10:	080071ac 	.word	0x080071ac
 8004b14:	080071c0 	.word	0x080071c0
 8004b18:	20000488 	.word	0x20000488
 8004b1c:	20000088 	.word	0x20000088
 8004b20:	080071d8 	.word	0x080071d8
 8004b24:	080071e4 	.word	0x080071e4
 8004b28:	20000508 	.word	0x20000508
 8004b2c:	080071f4 	.word	0x080071f4
 8004b30:	08007208 	.word	0x08007208
 8004b34:	20000078 	.word	0x20000078
 8004b38:	08007218 	.word	0x08007218
 8004b3c:	08007220 	.word	0x08007220
 8004b40:	0800722c 	.word	0x0800722c
 8004b44:	08007234 	.word	0x08007234
 8004b48:	0800723c 	.word	0x0800723c
 8004b4c:	08007244 	.word	0x08007244
 8004b50:	0800724c 	.word	0x0800724c
 8004b54:	20000014 	.word	0x20000014
 8004b58:	0800725c 	.word	0x0800725c
 8004b5c:	20000518 	.word	0x20000518
 8004b60:	20000554 	.word	0x20000554
 8004b64:	0800726c 	.word	0x0800726c
 8004b68:	20000528 	.word	0x20000528
 8004b6c:	20000510 	.word	0x20000510
 8004b70:	20000514 	.word	0x20000514
 8004b74:	0800727c 	.word	0x0800727c
 8004b78:	40010800 	.word	0x40010800
 8004b7c:	2000050c 	.word	0x2000050c

08004b80 <task_set_up_update>:

void task_set_up_update(void *parameters)
{
 8004b80:	b590      	push	{r4, r7, lr}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
	task_set_up_dta_t *p_task_set_up_dta;
	bool b_time_update_required = false;
 8004b88:	2300      	movs	r3, #0
 8004b8a:	73fb      	strb	r3, [r7, #15]

	/* Update Task Menu Counter */
	g_task_set_up_cnt++;
 8004b8c:	4b9b      	ldr	r3, [pc, #620]	@ (8004dfc <task_set_up_update+0x27c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3301      	adds	r3, #1
 8004b92:	4a9a      	ldr	r2, [pc, #616]	@ (8004dfc <task_set_up_update+0x27c>)
 8004b94:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_set_up_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8004b96:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_set_up_tick_cnt)
 8004b98:	4b99      	ldr	r3, [pc, #612]	@ (8004e00 <task_set_up_update+0x280>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d006      	beq.n	8004bae <task_set_up_update+0x2e>
    {
    	g_task_set_up_tick_cnt--;
 8004ba0:	4b97      	ldr	r3, [pc, #604]	@ (8004e00 <task_set_up_update+0x280>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	4a96      	ldr	r2, [pc, #600]	@ (8004e00 <task_set_up_update+0x280>)
 8004ba8:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8004baa:	2301      	movs	r3, #1
 8004bac:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8004bae:	b662      	cpsie	i

    while (b_time_update_required)
 8004bb0:	e21a      	b.n	8004fe8 <task_set_up_update+0x468>
    {
		/* Protect shared resource (g_task_set_up_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8004bb2:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_set_up_tick_cnt)
 8004bb4:	4b92      	ldr	r3, [pc, #584]	@ (8004e00 <task_set_up_update+0x280>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <task_set_up_update+0x4c>
		{
			g_task_set_up_tick_cnt--;
 8004bbc:	4b90      	ldr	r3, [pc, #576]	@ (8004e00 <task_set_up_update+0x280>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3b01      	subs	r3, #1
 8004bc2:	4a8f      	ldr	r2, [pc, #572]	@ (8004e00 <task_set_up_update+0x280>)
 8004bc4:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	73fb      	strb	r3, [r7, #15]
 8004bca:	e001      	b.n	8004bd0 <task_set_up_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8004bd0:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_set_up_dta = &task_set_up_dta;
 8004bd2:	4b8c      	ldr	r3, [pc, #560]	@ (8004e04 <task_set_up_update+0x284>)
 8004bd4:	60bb      	str	r3, [r7, #8]

    	if (DEL_MEN_XX_MIN < p_task_set_up_dta->tick)
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d005      	beq.n	8004bea <task_set_up_update+0x6a>
		{
			p_task_set_up_dta->tick--;
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	1e5a      	subs	r2, r3, #1
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	601a      	str	r2, [r3, #0]
 8004be8:	e1fe      	b.n	8004fe8 <task_set_up_update+0x468>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 8004bea:	2120      	movs	r1, #32
 8004bec:	4886      	ldr	r0, [pc, #536]	@ (8004e08 <task_set_up_update+0x288>)
 8004bee:	f7fd fb96 	bl	800231e <HAL_GPIO_TogglePin>

			p_task_set_up_dta->tick = DEL_MEN_XX_MAX;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8004bf8:	601a      	str	r2, [r3, #0]

			if(true == any_event_task_set_up()){
 8004bfa:	f000 fa85 	bl	8005108 <any_event_task_set_up>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 81f1 	beq.w	8004fe8 <task_set_up_update+0x468>
				p_task_set_up_dta->flag = true;
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	719a      	strb	r2, [r3, #6]
				p_task_set_up_dta->event = get_event_task_set_up();
 8004c0c:	f000 fa56 	bl	80050bc <get_event_task_set_up>
 8004c10:	4603      	mov	r3, r0
 8004c12:	461a      	mov	r2, r3
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	715a      	strb	r2, [r3, #5]

				switch (p_task_set_up_dta->state)
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	791b      	ldrb	r3, [r3, #4]
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	f200 81af 	bhi.w	8004f80 <task_set_up_update+0x400>
 8004c22:	a201      	add	r2, pc, #4	@ (adr r2, 8004c28 <task_set_up_update+0xa8>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c3d 	.word	0x08004c3d
 8004c2c:	08004ca1 	.word	0x08004ca1
 8004c30:	08004cf7 	.word	0x08004cf7
 8004c34:	08004dbf 	.word	0x08004dbf
 8004c38:	08004ec7 	.word	0x08004ec7
				{
					case ST_SYS_02_UPDATE_TEMPERATURE:

						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_CONF_ACTIVE == p_task_set_up_dta->event))
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	799b      	ldrb	r3, [r3, #6]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d015      	beq.n	8004c70 <task_set_up_update+0xf0>
 8004c44:	68bb      	ldr	r3, [r7, #8]
 8004c46:	795b      	ldrb	r3, [r3, #5]
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d111      	bne.n	8004c70 <task_set_up_update+0xf0>
						{
							linea1 = set_up_fijo;
 8004c4c:	4b6f      	ldr	r3, [pc, #444]	@ (8004e0c <task_set_up_update+0x28c>)
 8004c4e:	4a70      	ldr	r2, [pc, #448]	@ (8004e10 <task_set_up_update+0x290>)
 8004c50:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	79db      	ldrb	r3, [r3, #7]
 8004c56:	3b01      	subs	r3, #1
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	4a6e      	ldr	r2, [pc, #440]	@ (8004e14 <task_set_up_update+0x294>)
 8004c5c:	4413      	add	r3, r2
 8004c5e:	4a6e      	ldr	r2, [pc, #440]	@ (8004e18 <task_set_up_update+0x298>)
 8004c60:	6013      	str	r3, [r2, #0]
							p_task_set_up_dta->flag = false;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	2200      	movs	r2, #0
 8004c66:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SYS_02_MENU;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2202      	movs	r2, #2
 8004c6c:	711a      	strb	r2, [r3, #4]
						else{
							sprintf(aux2,"T1:%dC  T2:%dC", (int)temperatura.ambiente, (int)temperatura.micro);
							p_task_set_up_dta->flag = false;
							p_task_set_up_dta->state = ST_SYS_02_MAIN;
						}
						break;
 8004c6e:	e19b      	b.n	8004fa8 <task_set_up_update+0x428>
							sprintf(aux2,"T1:%dC  T2:%dC", (int)temperatura.ambiente, (int)temperatura.micro);
 8004c70:	4b6a      	ldr	r3, [pc, #424]	@ (8004e1c <task_set_up_update+0x29c>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fb ffbf 	bl	8000bf8 <__aeabi_f2iz>
 8004c7a:	4604      	mov	r4, r0
 8004c7c:	4b67      	ldr	r3, [pc, #412]	@ (8004e1c <task_set_up_update+0x29c>)
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fb ffb9 	bl	8000bf8 <__aeabi_f2iz>
 8004c86:	4603      	mov	r3, r0
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4965      	ldr	r1, [pc, #404]	@ (8004e20 <task_set_up_update+0x2a0>)
 8004c8c:	4865      	ldr	r0, [pc, #404]	@ (8004e24 <task_set_up_update+0x2a4>)
 8004c8e:	f001 f919 	bl	8005ec4 <siprintf>
							p_task_set_up_dta->flag = false;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2200      	movs	r2, #0
 8004c96:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SYS_02_MAIN;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	711a      	strb	r2, [r3, #4]
						break;
 8004c9e:	e183      	b.n	8004fa8 <task_set_up_update+0x428>

					case ST_SYS_02_MAIN:
						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_CONF_ACTIVE == p_task_set_up_dta->event))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	799b      	ldrb	r3, [r3, #6]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <task_set_up_update+0x154>
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	795b      	ldrb	r3, [r3, #5]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d111      	bne.n	8004cd4 <task_set_up_update+0x154>
						{
							linea1 = set_up_fijo;
 8004cb0:	4b56      	ldr	r3, [pc, #344]	@ (8004e0c <task_set_up_update+0x28c>)
 8004cb2:	4a57      	ldr	r2, [pc, #348]	@ (8004e10 <task_set_up_update+0x290>)
 8004cb4:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	79db      	ldrb	r3, [r3, #7]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	4a55      	ldr	r2, [pc, #340]	@ (8004e14 <task_set_up_update+0x294>)
 8004cc0:	4413      	add	r3, r2
 8004cc2:	4a55      	ldr	r2, [pc, #340]	@ (8004e18 <task_set_up_update+0x298>)
 8004cc4:	6013      	str	r3, [r2, #0]
							p_task_set_up_dta->flag = false;
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SYS_02_MENU;
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	711a      	strb	r2, [r3, #4]
							p_task_set_up_dta->flag = false;
							p_task_set_up_dta->state = ST_SYS_02_UPDATE_TEMPERATURE;
						}


						break;
 8004cd2:	e162      	b.n	8004f9a <task_set_up_update+0x41a>
						else if((true == p_task_set_up_dta->flag) && (EV_SET_UP_02_NUEVA_TEMPERATURA == p_task_set_up_dta->event)){
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	799b      	ldrb	r3, [r3, #6]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 815e 	beq.w	8004f9a <task_set_up_update+0x41a>
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	795b      	ldrb	r3, [r3, #5]
 8004ce2:	2b08      	cmp	r3, #8
 8004ce4:	f040 8159 	bne.w	8004f9a <task_set_up_update+0x41a>
							p_task_set_up_dta->flag = false;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2200      	movs	r2, #0
 8004cec:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SYS_02_UPDATE_TEMPERATURE;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	711a      	strb	r2, [r3, #4]
						break;
 8004cf4:	e151      	b.n	8004f9a <task_set_up_update+0x41a>

					case ST_SYS_02_MENU:
						if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event))
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	799b      	ldrb	r3, [r3, #6]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d026      	beq.n	8004d4c <task_set_up_update+0x1cc>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	795b      	ldrb	r3, [r3, #5]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d122      	bne.n	8004d4c <task_set_up_update+0x1cc>
						{
							p_task_set_up_dta->flag = false;
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	719a      	strb	r2, [r3, #6]
							if(p_task_set_up_dta->option == 1){
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	79db      	ldrb	r3, [r3, #7]
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	d10b      	bne.n	8004d2c <task_set_up_update+0x1ac>
								p_task_set_up_dta->state = ST_SYS_02_PUERTA;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	2203      	movs	r2, #3
 8004d18:	711a      	strb	r2, [r3, #4]
								linea2 = set_up2[p_task_set_up_dta->opt_tiempo_puerta - 1];
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	7a1b      	ldrb	r3, [r3, #8]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	4a41      	ldr	r2, [pc, #260]	@ (8004e28 <task_set_up_update+0x2a8>)
 8004d24:	4413      	add	r3, r2
 8004d26:	4a3c      	ldr	r2, [pc, #240]	@ (8004e18 <task_set_up_update+0x298>)
 8004d28:	6013      	str	r3, [r2, #0]
							if(p_task_set_up_dta->option == 1){
 8004d2a:	e046      	b.n	8004dba <task_set_up_update+0x23a>
							}
							else if(p_task_set_up_dta->option == 2){
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	79db      	ldrb	r3, [r3, #7]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d142      	bne.n	8004dba <task_set_up_update+0x23a>
								p_task_set_up_dta->state = ST_SYS_02_PERMANENCIA;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	2204      	movs	r2, #4
 8004d38:	711a      	strb	r2, [r3, #4]
								linea2 = set_up3[p_task_set_up_dta->opt_tiempo_permanencia - 1];
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	7a5b      	ldrb	r3, [r3, #9]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	011b      	lsls	r3, r3, #4
 8004d42:	4a3a      	ldr	r2, [pc, #232]	@ (8004e2c <task_set_up_update+0x2ac>)
 8004d44:	4413      	add	r3, r2
 8004d46:	4a34      	ldr	r2, [pc, #208]	@ (8004e18 <task_set_up_update+0x298>)
 8004d48:	6013      	str	r3, [r2, #0]
							if(p_task_set_up_dta->option == 1){
 8004d4a:	e036      	b.n	8004dba <task_set_up_update+0x23a>
							}

						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	799b      	ldrb	r3, [r3, #6]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d013      	beq.n	8004d7c <task_set_up_update+0x1fc>
 8004d54:	68bb      	ldr	r3, [r7, #8]
 8004d56:	795b      	ldrb	r3, [r3, #5]
 8004d58:	2b07      	cmp	r3, #7
 8004d5a:	d10f      	bne.n	8004d7c <task_set_up_update+0x1fc>
						{
							p_task_set_up_dta->flag = false;
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	719a      	strb	r2, [r3, #6]

							linea1 = aux1;
 8004d62:	4b2a      	ldr	r3, [pc, #168]	@ (8004e0c <task_set_up_update+0x28c>)
 8004d64:	4a32      	ldr	r2, [pc, #200]	@ (8004e30 <task_set_up_update+0x2b0>)
 8004d66:	601a      	str	r2, [r3, #0]
							linea2 = aux2;
 8004d68:	4b2b      	ldr	r3, [pc, #172]	@ (8004e18 <task_set_up_update+0x298>)
 8004d6a:	4a2e      	ldr	r2, [pc, #184]	@ (8004e24 <task_set_up_update+0x2a4>)
 8004d6c:	601a      	str	r2, [r3, #0]

							put_event_task_normal(EV_SYS_01_CONFIG_FINALIZADA);
 8004d6e:	2001      	movs	r0, #1
 8004d70:	f7ff fbf4 	bl	800455c <put_event_task_normal>
							p_task_set_up_dta->state = ST_SYS_02_MAIN;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2201      	movs	r2, #1
 8004d78:	711a      	strb	r2, [r3, #4]
 8004d7a:	e01f      	b.n	8004dbc <task_set_up_update+0x23c>

						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	799b      	ldrb	r3, [r3, #6]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 810c 	beq.w	8004f9e <task_set_up_update+0x41e>
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	795b      	ldrb	r3, [r3, #5]
 8004d8a:	2b05      	cmp	r3, #5
 8004d8c:	f040 8107 	bne.w	8004f9e <task_set_up_update+0x41e>
							p_task_set_up_dta->option = (p_task_set_up_dta->option%CNT_OPT) + 1;
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	79db      	ldrb	r3, [r3, #7]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	b2da      	uxtb	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	71da      	strb	r2, [r3, #7]
							p_task_set_up_dta->flag = false;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	2200      	movs	r2, #0
 8004da6:	719a      	strb	r2, [r3, #6]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	79db      	ldrb	r3, [r3, #7]
 8004dac:	3b01      	subs	r3, #1
 8004dae:	011b      	lsls	r3, r3, #4
 8004db0:	4a18      	ldr	r2, [pc, #96]	@ (8004e14 <task_set_up_update+0x294>)
 8004db2:	4413      	add	r3, r2
 8004db4:	4a18      	ldr	r2, [pc, #96]	@ (8004e18 <task_set_up_update+0x298>)
 8004db6:	6013      	str	r3, [r2, #0]
						}

						break;
 8004db8:	e0f1      	b.n	8004f9e <task_set_up_update+0x41e>
							if(p_task_set_up_dta->option == 1){
 8004dba:	bf00      	nop
						break;
 8004dbc:	e0ef      	b.n	8004f9e <task_set_up_update+0x41e>

					case ST_SYS_02_PUERTA:

						if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event)){
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	799b      	ldrb	r3, [r3, #6]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d03c      	beq.n	8004e40 <task_set_up_update+0x2c0>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	795b      	ldrb	r3, [r3, #5]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d138      	bne.n	8004e40 <task_set_up_update+0x2c0>
							//Agregar guardado
							configuracion.tiempo_puerta = atoi(string_tiempos_puerta[p_task_set_up_dta->opt_tiempo_puerta-1]);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	7a1b      	ldrb	r3, [r3, #8]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	4a17      	ldr	r2, [pc, #92]	@ (8004e34 <task_set_up_update+0x2b4>)
 8004dd8:	4413      	add	r3, r2
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fe25 	bl	8005a2a <atoi>
 8004de0:	4603      	mov	r3, r0
 8004de2:	b2da      	uxtb	r2, r3
 8004de4:	4b14      	ldr	r3, [pc, #80]	@ (8004e38 <task_set_up_update+0x2b8>)
 8004de6:	701a      	strb	r2, [r3, #0]
							sprintf(aux1,"Config: %ds %ds",configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 8004de8:	4b13      	ldr	r3, [pc, #76]	@ (8004e38 <task_set_up_update+0x2b8>)
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	461a      	mov	r2, r3
 8004dee:	4b12      	ldr	r3, [pc, #72]	@ (8004e38 <task_set_up_update+0x2b8>)
 8004df0:	785b      	ldrb	r3, [r3, #1]
 8004df2:	4912      	ldr	r1, [pc, #72]	@ (8004e3c <task_set_up_update+0x2bc>)
 8004df4:	480e      	ldr	r0, [pc, #56]	@ (8004e30 <task_set_up_update+0x2b0>)
 8004df6:	f001 f865 	bl	8005ec4 <siprintf>
 8004dfa:	e063      	b.n	8004ec4 <task_set_up_update+0x344>
 8004dfc:	20000508 	.word	0x20000508
 8004e00:	2000050c 	.word	0x2000050c
 8004e04:	20000078 	.word	0x20000078
 8004e08:	40010800 	.word	0x40010800
 8004e0c:	20000510 	.word	0x20000510
 8004e10:	2000008c 	.word	0x2000008c
 8004e14:	2000009c 	.word	0x2000009c
 8004e18:	20000514 	.word	0x20000514
 8004e1c:	20000554 	.word	0x20000554
 8004e20:	0800726c 	.word	0x0800726c
 8004e24:	20000528 	.word	0x20000528
 8004e28:	200000bc 	.word	0x200000bc
 8004e2c:	2000012c 	.word	0x2000012c
 8004e30:	20000518 	.word	0x20000518
 8004e34:	200001bc 	.word	0x200001bc
 8004e38:	20000014 	.word	0x20000014
 8004e3c:	0800725c 	.word	0x0800725c
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	799b      	ldrb	r3, [r3, #6]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d021      	beq.n	8004e8c <task_set_up_update+0x30c>
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	795b      	ldrb	r3, [r3, #5]
 8004e4c:	2b05      	cmp	r3, #5
 8004e4e:	d11d      	bne.n	8004e8c <task_set_up_update+0x30c>
							p_task_set_up_dta->opt_tiempo_puerta = (p_task_set_up_dta->opt_tiempo_puerta%CNT_OPT_PUERTA) + 1;
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	7a1a      	ldrb	r2, [r3, #8]
 8004e54:	4b69      	ldr	r3, [pc, #420]	@ (8004ffc <task_set_up_update+0x47c>)
 8004e56:	fba3 1302 	umull	r1, r3, r3, r2
 8004e5a:	1ad1      	subs	r1, r2, r3
 8004e5c:	0849      	lsrs	r1, r1, #1
 8004e5e:	440b      	add	r3, r1
 8004e60:	0899      	lsrs	r1, r3, #2
 8004e62:	460b      	mov	r3, r1
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	1a5b      	subs	r3, r3, r1
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	3301      	adds	r3, #1
 8004e6e:	b2da      	uxtb	r2, r3
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	721a      	strb	r2, [r3, #8]
							p_task_set_up_dta->flag = false;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2200      	movs	r2, #0
 8004e78:	719a      	strb	r2, [r3, #6]
							linea2 = set_up2[p_task_set_up_dta->opt_tiempo_puerta - 1];
 8004e7a:	68bb      	ldr	r3, [r7, #8]
 8004e7c:	7a1b      	ldrb	r3, [r3, #8]
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	4a5f      	ldr	r2, [pc, #380]	@ (8005000 <task_set_up_update+0x480>)
 8004e84:	4413      	add	r3, r2
 8004e86:	4a5f      	ldr	r2, [pc, #380]	@ (8005004 <task_set_up_update+0x484>)
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	e01b      	b.n	8004ec4 <task_set_up_update+0x344>
						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	799b      	ldrb	r3, [r3, #6]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8086 	beq.w	8004fa2 <task_set_up_update+0x422>
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	795b      	ldrb	r3, [r3, #5]
 8004e9a:	2b07      	cmp	r3, #7
 8004e9c:	f040 8081 	bne.w	8004fa2 <task_set_up_update+0x422>
						{
							p_task_set_up_dta->flag = false;
 8004ea0:	68bb      	ldr	r3, [r7, #8]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SYS_02_MENU;
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	711a      	strb	r2, [r3, #4]
							linea1 = set_up_fijo;
 8004eac:	4b56      	ldr	r3, [pc, #344]	@ (8005008 <task_set_up_update+0x488>)
 8004eae:	4a57      	ldr	r2, [pc, #348]	@ (800500c <task_set_up_update+0x48c>)
 8004eb0:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	79db      	ldrb	r3, [r3, #7]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	4a55      	ldr	r2, [pc, #340]	@ (8005010 <task_set_up_update+0x490>)
 8004ebc:	4413      	add	r3, r2
 8004ebe:	4a51      	ldr	r2, [pc, #324]	@ (8005004 <task_set_up_update+0x484>)
 8004ec0:	6013      	str	r3, [r2, #0]
						}

						break;
 8004ec2:	e06e      	b.n	8004fa2 <task_set_up_update+0x422>
 8004ec4:	e06d      	b.n	8004fa2 <task_set_up_update+0x422>

					case ST_SYS_02_PERMANENCIA:

						if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ENT_ACTIVE == p_task_set_up_dta->event)){
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	799b      	ldrb	r3, [r3, #6]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d01a      	beq.n	8004f04 <task_set_up_update+0x384>
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	795b      	ldrb	r3, [r3, #5]
 8004ed2:	2b03      	cmp	r3, #3
 8004ed4:	d116      	bne.n	8004f04 <task_set_up_update+0x384>
							configuracion.tiempo_permanencia = atoi(string_tiempos_permanencia[p_task_set_up_dta->opt_tiempo_permanencia-1]);
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	7a5b      	ldrb	r3, [r3, #9]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	4a4d      	ldr	r2, [pc, #308]	@ (8005014 <task_set_up_update+0x494>)
 8004ee0:	4413      	add	r3, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fda1 	bl	8005a2a <atoi>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	b2da      	uxtb	r2, r3
 8004eec:	4b4a      	ldr	r3, [pc, #296]	@ (8005018 <task_set_up_update+0x498>)
 8004eee:	705a      	strb	r2, [r3, #1]
							sprintf(aux1,"Config: %ds %ds",configuracion.tiempo_puerta, configuracion.tiempo_permanencia);
 8004ef0:	4b49      	ldr	r3, [pc, #292]	@ (8005018 <task_set_up_update+0x498>)
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	4b48      	ldr	r3, [pc, #288]	@ (8005018 <task_set_up_update+0x498>)
 8004ef8:	785b      	ldrb	r3, [r3, #1]
 8004efa:	4948      	ldr	r1, [pc, #288]	@ (800501c <task_set_up_update+0x49c>)
 8004efc:	4848      	ldr	r0, [pc, #288]	@ (8005020 <task_set_up_update+0x4a0>)
 8004efe:	f000 ffe1 	bl	8005ec4 <siprintf>
 8004f02:	e03c      	b.n	8004f7e <task_set_up_update+0x3fe>
						}
						else if((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_NXT_ACTIVE == p_task_set_up_dta->event)){
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	799b      	ldrb	r3, [r3, #6]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01e      	beq.n	8004f4a <task_set_up_update+0x3ca>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	795b      	ldrb	r3, [r3, #5]
 8004f10:	2b05      	cmp	r3, #5
 8004f12:	d11a      	bne.n	8004f4a <task_set_up_update+0x3ca>
							p_task_set_up_dta->opt_tiempo_permanencia = (p_task_set_up_dta->opt_tiempo_permanencia%CNT_OPT_PERMANENCIA) + 1;
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	7a5a      	ldrb	r2, [r3, #9]
 8004f18:	4b42      	ldr	r3, [pc, #264]	@ (8005024 <task_set_up_update+0x4a4>)
 8004f1a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f1e:	0859      	lsrs	r1, r3, #1
 8004f20:	460b      	mov	r3, r1
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	440b      	add	r3, r1
 8004f26:	1ad3      	subs	r3, r2, r3
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	b2da      	uxtb	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	725a      	strb	r2, [r3, #9]
							p_task_set_up_dta->flag = false;
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	2200      	movs	r2, #0
 8004f36:	719a      	strb	r2, [r3, #6]
							linea2 = set_up3[p_task_set_up_dta->opt_tiempo_permanencia - 1];
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	7a5b      	ldrb	r3, [r3, #9]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	4a39      	ldr	r2, [pc, #228]	@ (8005028 <task_set_up_update+0x4a8>)
 8004f42:	4413      	add	r3, r2
 8004f44:	4a2f      	ldr	r2, [pc, #188]	@ (8005004 <task_set_up_update+0x484>)
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	e019      	b.n	8004f7e <task_set_up_update+0x3fe>
						}
						else if ((true == p_task_set_up_dta->flag) && (EV_SYS_02_BTN_ESC_ACTIVE == p_task_set_up_dta->event))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	799b      	ldrb	r3, [r3, #6]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d029      	beq.n	8004fa6 <task_set_up_update+0x426>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	795b      	ldrb	r3, [r3, #5]
 8004f56:	2b07      	cmp	r3, #7
 8004f58:	d125      	bne.n	8004fa6 <task_set_up_update+0x426>
						{
							p_task_set_up_dta->flag = false;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	719a      	strb	r2, [r3, #6]
							p_task_set_up_dta->state = ST_SYS_02_MENU;
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2202      	movs	r2, #2
 8004f64:	711a      	strb	r2, [r3, #4]
							linea1 = set_up_fijo;
 8004f66:	4b28      	ldr	r3, [pc, #160]	@ (8005008 <task_set_up_update+0x488>)
 8004f68:	4a28      	ldr	r2, [pc, #160]	@ (800500c <task_set_up_update+0x48c>)
 8004f6a:	601a      	str	r2, [r3, #0]
							linea2 = set_up1[p_task_set_up_dta->option - 1];
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	79db      	ldrb	r3, [r3, #7]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <task_set_up_update+0x490>)
 8004f76:	4413      	add	r3, r2
 8004f78:	4a22      	ldr	r2, [pc, #136]	@ (8005004 <task_set_up_update+0x484>)
 8004f7a:	6013      	str	r3, [r2, #0]

						}

						break;
 8004f7c:	e013      	b.n	8004fa6 <task_set_up_update+0x426>
 8004f7e:	e012      	b.n	8004fa6 <task_set_up_update+0x426>

					default:

						p_task_set_up_dta->tick  = DEL_MEN_XX_MIN;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	2200      	movs	r2, #0
 8004f84:	601a      	str	r2, [r3, #0]
						p_task_set_up_dta->state = ST_SYS_02_MAIN;
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	711a      	strb	r2, [r3, #4]
						p_task_set_up_dta->event = EV_SYS_02_BTN_CONF_IDLE;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	715a      	strb	r2, [r3, #5]
						p_task_set_up_dta->flag  = false;
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	2200      	movs	r2, #0
 8004f96:	719a      	strb	r2, [r3, #6]

						break;
 8004f98:	e006      	b.n	8004fa8 <task_set_up_update+0x428>
						break;
 8004f9a:	bf00      	nop
 8004f9c:	e004      	b.n	8004fa8 <task_set_up_update+0x428>
						break;
 8004f9e:	bf00      	nop
 8004fa0:	e002      	b.n	8004fa8 <task_set_up_update+0x428>
						break;
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <task_set_up_update+0x428>
						break;
 8004fa6:	bf00      	nop
				}

				displayCharPositionWrite(0, 0);
 8004fa8:	2100      	movs	r1, #0
 8004faa:	2000      	movs	r0, #0
 8004fac:	f7fe fa78 	bl	80034a0 <displayCharPositionWrite>
				displayStringWrite("                ");
 8004fb0:	481e      	ldr	r0, [pc, #120]	@ (800502c <task_set_up_update+0x4ac>)
 8004fb2:	f7fe fabf 	bl	8003534 <displayStringWrite>
				displayCharPositionWrite(0, 1);
 8004fb6:	2101      	movs	r1, #1
 8004fb8:	2000      	movs	r0, #0
 8004fba:	f7fe fa71 	bl	80034a0 <displayCharPositionWrite>
				displayStringWrite("                ");
 8004fbe:	481b      	ldr	r0, [pc, #108]	@ (800502c <task_set_up_update+0x4ac>)
 8004fc0:	f7fe fab8 	bl	8003534 <displayStringWrite>

				displayCharPositionWrite(0, 0);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f7fe fa6a 	bl	80034a0 <displayCharPositionWrite>
				displayStringWrite(linea1);
 8004fcc:	4b0e      	ldr	r3, [pc, #56]	@ (8005008 <task_set_up_update+0x488>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	f7fe faaf 	bl	8003534 <displayStringWrite>
				displayCharPositionWrite(0, 1);
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	2000      	movs	r0, #0
 8004fda:	f7fe fa61 	bl	80034a0 <displayCharPositionWrite>
				displayStringWrite(linea2);
 8004fde:	4b09      	ldr	r3, [pc, #36]	@ (8005004 <task_set_up_update+0x484>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f7fe faa6 	bl	8003534 <displayStringWrite>
    while (b_time_update_required)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f47f ade1 	bne.w	8004bb2 <task_set_up_update+0x32>
			}
		}
	}
}
 8004ff0:	bf00      	nop
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd90      	pop	{r4, r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	24924925 	.word	0x24924925
 8005000:	200000bc 	.word	0x200000bc
 8005004:	20000514 	.word	0x20000514
 8005008:	20000510 	.word	0x20000510
 800500c:	2000008c 	.word	0x2000008c
 8005010:	2000009c 	.word	0x2000009c
 8005014:	2000022c 	.word	0x2000022c
 8005018:	20000014 	.word	0x20000014
 800501c:	0800725c 	.word	0x0800725c
 8005020:	20000518 	.word	0x20000518
 8005024:	38e38e39 	.word	0x38e38e39
 8005028:	2000012c 	.word	0x2000012c
 800502c:	0800727c 	.word	0x0800727c

08005030 <init_queue_event_task_set_up>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_set_up(void)
{
 8005030:	b480      	push	{r7}
 8005032:	b083      	sub	sp, #12
 8005034:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8005036:	4b0f      	ldr	r3, [pc, #60]	@ (8005074 <init_queue_event_task_set_up+0x44>)
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 800503c:	4b0d      	ldr	r3, [pc, #52]	@ (8005074 <init_queue_event_task_set_up+0x44>)
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8005042:	4b0c      	ldr	r3, [pc, #48]	@ (8005074 <init_queue_event_task_set_up+0x44>)
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8005048:	2300      	movs	r3, #0
 800504a:	607b      	str	r3, [r7, #4]
 800504c:	e008      	b.n	8005060 <init_queue_event_task_set_up+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 800504e:	4a09      	ldr	r2, [pc, #36]	@ (8005074 <init_queue_event_task_set_up+0x44>)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4413      	add	r3, r2
 8005054:	330c      	adds	r3, #12
 8005056:	22ff      	movs	r2, #255	@ 0xff
 8005058:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3301      	adds	r3, #1
 800505e:	607b      	str	r3, [r7, #4]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b0f      	cmp	r3, #15
 8005064:	d9f3      	bls.n	800504e <init_queue_event_task_set_up+0x1e>
}
 8005066:	bf00      	nop
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	bc80      	pop	{r7}
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000538 	.word	0x20000538

08005078 <put_event_task_set_up>:

void put_event_task_set_up(task_set_up_ev_t event)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8005082:	4b0d      	ldr	r3, [pc, #52]	@ (80050b8 <put_event_task_set_up+0x40>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	3301      	adds	r3, #1
 8005088:	4a0b      	ldr	r2, [pc, #44]	@ (80050b8 <put_event_task_set_up+0x40>)
 800508a:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 800508c:	4b0a      	ldr	r3, [pc, #40]	@ (80050b8 <put_event_task_set_up+0x40>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	1c5a      	adds	r2, r3, #1
 8005092:	4909      	ldr	r1, [pc, #36]	@ (80050b8 <put_event_task_set_up+0x40>)
 8005094:	600a      	str	r2, [r1, #0]
 8005096:	4a08      	ldr	r2, [pc, #32]	@ (80050b8 <put_event_task_set_up+0x40>)
 8005098:	4413      	add	r3, r2
 800509a:	79fa      	ldrb	r2, [r7, #7]
 800509c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 800509e:	4b06      	ldr	r3, [pc, #24]	@ (80050b8 <put_event_task_set_up+0x40>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b10      	cmp	r3, #16
 80050a4:	d102      	bne.n	80050ac <put_event_task_set_up+0x34>
		queue_task_a.head = 0;
 80050a6:	4b04      	ldr	r3, [pc, #16]	@ (80050b8 <put_event_task_set_up+0x40>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
}
 80050ac:	bf00      	nop
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	20000538 	.word	0x20000538

080050bc <get_event_task_set_up>:

task_set_up_ev_t get_event_task_set_up(void)

{
 80050bc:	b480      	push	{r7}
 80050be:	b083      	sub	sp, #12
 80050c0:	af00      	add	r7, sp, #0
	task_set_up_ev_t event;

	queue_task_a.count--;
 80050c2:	4b10      	ldr	r3, [pc, #64]	@ (8005104 <get_event_task_set_up+0x48>)
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	4a0e      	ldr	r2, [pc, #56]	@ (8005104 <get_event_task_set_up+0x48>)
 80050ca:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 80050cc:	4b0d      	ldr	r3, [pc, #52]	@ (8005104 <get_event_task_set_up+0x48>)
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005104 <get_event_task_set_up+0x48>)
 80050d2:	4413      	add	r3, r2
 80050d4:	7b1b      	ldrb	r3, [r3, #12]
 80050d6:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 80050d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005104 <get_event_task_set_up+0x48>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	4909      	ldr	r1, [pc, #36]	@ (8005104 <get_event_task_set_up+0x48>)
 80050e0:	604a      	str	r2, [r1, #4]
 80050e2:	4a08      	ldr	r2, [pc, #32]	@ (8005104 <get_event_task_set_up+0x48>)
 80050e4:	4413      	add	r3, r2
 80050e6:	22ff      	movs	r2, #255	@ 0xff
 80050e8:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 80050ea:	4b06      	ldr	r3, [pc, #24]	@ (8005104 <get_event_task_set_up+0x48>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b10      	cmp	r3, #16
 80050f0:	d102      	bne.n	80050f8 <get_event_task_set_up+0x3c>
		queue_task_a.tail = 0;
 80050f2:	4b04      	ldr	r3, [pc, #16]	@ (8005104 <get_event_task_set_up+0x48>)
 80050f4:	2200      	movs	r2, #0
 80050f6:	605a      	str	r2, [r3, #4]

	return event;
 80050f8:	79fb      	ldrb	r3, [r7, #7]
}
 80050fa:	4618      	mov	r0, r3
 80050fc:	370c      	adds	r7, #12
 80050fe:	46bd      	mov	sp, r7
 8005100:	bc80      	pop	{r7}
 8005102:	4770      	bx	lr
 8005104:	20000538 	.word	0x20000538

08005108 <any_event_task_set_up>:

bool any_event_task_set_up(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 800510c:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <any_event_task_set_up+0x20>)
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	4b05      	ldr	r3, [pc, #20]	@ (8005128 <any_event_task_set_up+0x20>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	429a      	cmp	r2, r3
 8005116:	bf14      	ite	ne
 8005118:	2301      	movne	r3, #1
 800511a:	2300      	moveq	r3, #0
 800511c:	b2db      	uxtb	r3, r3
}
 800511e:	4618      	mov	r0, r3
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000538 	.word	0x20000538

0800512c <task_temperature_init>:
extern ADC_HandleTypeDef hadc2;


/********************** external functions definition ************************/
void task_temperature_init(void *parameters)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
	task_temperature_st_t	state;
	task_temperature_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_temperature_init), p_task_temperature);
 8005134:	b672      	cpsid	i
 8005136:	4b4a      	ldr	r3, [pc, #296]	@ (8005260 <task_temperature_init+0x134>)
 8005138:	6818      	ldr	r0, [r3, #0]
 800513a:	4b4a      	ldr	r3, [pc, #296]	@ (8005264 <task_temperature_init+0x138>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	4b49      	ldr	r3, [pc, #292]	@ (8005268 <task_temperature_init+0x13c>)
 8005142:	4a4a      	ldr	r2, [pc, #296]	@ (800526c <task_temperature_init+0x140>)
 8005144:	213f      	movs	r1, #63	@ 0x3f
 8005146:	f000 fe89 	bl	8005e5c <sniprintf>
 800514a:	4603      	mov	r3, r0
 800514c:	4a48      	ldr	r2, [pc, #288]	@ (8005270 <task_temperature_init+0x144>)
 800514e:	6013      	str	r3, [r2, #0]
 8005150:	4b43      	ldr	r3, [pc, #268]	@ (8005260 <task_temperature_init+0x134>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fc61 	bl	8003a1c <logger_log_print_>
 800515a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_temperature), p_task_temperature_);
 800515c:	b672      	cpsid	i
 800515e:	4b40      	ldr	r3, [pc, #256]	@ (8005260 <task_temperature_init+0x134>)
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	4b44      	ldr	r3, [pc, #272]	@ (8005274 <task_temperature_init+0x148>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	9300      	str	r3, [sp, #0]
 8005168:	4b43      	ldr	r3, [pc, #268]	@ (8005278 <task_temperature_init+0x14c>)
 800516a:	4a44      	ldr	r2, [pc, #272]	@ (800527c <task_temperature_init+0x150>)
 800516c:	213f      	movs	r1, #63	@ 0x3f
 800516e:	f000 fe75 	bl	8005e5c <sniprintf>
 8005172:	4603      	mov	r3, r0
 8005174:	4a3e      	ldr	r2, [pc, #248]	@ (8005270 <task_temperature_init+0x144>)
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	4b39      	ldr	r3, [pc, #228]	@ (8005260 <task_temperature_init+0x134>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f7fe fc4d 	bl	8003a1c <logger_log_print_>
 8005182:	b662      	cpsie	i

	g_task_temperature_cnt = G_TASK_SYS_CNT_INI;
 8005184:	4b3e      	ldr	r3, [pc, #248]	@ (8005280 <task_temperature_init+0x154>)
 8005186:	2200      	movs	r2, #0
 8005188:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_temperature_cnt), g_task_temperature_cnt);
 800518a:	b672      	cpsid	i
 800518c:	4b34      	ldr	r3, [pc, #208]	@ (8005260 <task_temperature_init+0x134>)
 800518e:	6818      	ldr	r0, [r3, #0]
 8005190:	4b3b      	ldr	r3, [pc, #236]	@ (8005280 <task_temperature_init+0x154>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4b3b      	ldr	r3, [pc, #236]	@ (8005284 <task_temperature_init+0x158>)
 8005198:	4a3b      	ldr	r2, [pc, #236]	@ (8005288 <task_temperature_init+0x15c>)
 800519a:	213f      	movs	r1, #63	@ 0x3f
 800519c:	f000 fe5e 	bl	8005e5c <sniprintf>
 80051a0:	4603      	mov	r3, r0
 80051a2:	4a33      	ldr	r2, [pc, #204]	@ (8005270 <task_temperature_init+0x144>)
 80051a4:	6013      	str	r3, [r2, #0]
 80051a6:	4b2e      	ldr	r3, [pc, #184]	@ (8005260 <task_temperature_init+0x134>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7fe fc36 	bl	8003a1c <logger_log_print_>
 80051b0:	b662      	cpsie	i

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_temperature_dta = &task_temperature_dta;
 80051b2:	4b36      	ldr	r3, [pc, #216]	@ (800528c <task_temperature_init+0x160>)
 80051b4:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_temperature_dta->state;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	791b      	ldrb	r3, [r3, #4]
 80051ba:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80051bc:	b672      	cpsid	i
 80051be:	4b28      	ldr	r3, [pc, #160]	@ (8005260 <task_temperature_init+0x134>)
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	7afb      	ldrb	r3, [r7, #11]
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	4b32      	ldr	r3, [pc, #200]	@ (8005290 <task_temperature_init+0x164>)
 80051c8:	4a32      	ldr	r2, [pc, #200]	@ (8005294 <task_temperature_init+0x168>)
 80051ca:	213f      	movs	r1, #63	@ 0x3f
 80051cc:	f000 fe46 	bl	8005e5c <sniprintf>
 80051d0:	4603      	mov	r3, r0
 80051d2:	4a27      	ldr	r2, [pc, #156]	@ (8005270 <task_temperature_init+0x144>)
 80051d4:	6013      	str	r3, [r2, #0]
 80051d6:	4b22      	ldr	r3, [pc, #136]	@ (8005260 <task_temperature_init+0x134>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f7fe fc1e 	bl	8003a1c <logger_log_print_>
 80051e0:	b662      	cpsie	i

	event = p_task_temperature_dta->event;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	795b      	ldrb	r3, [r3, #5]
 80051e6:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 80051e8:	b672      	cpsid	i
 80051ea:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <task_temperature_init+0x134>)
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	7abb      	ldrb	r3, [r7, #10]
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	4b29      	ldr	r3, [pc, #164]	@ (8005298 <task_temperature_init+0x16c>)
 80051f4:	4a27      	ldr	r2, [pc, #156]	@ (8005294 <task_temperature_init+0x168>)
 80051f6:	213f      	movs	r1, #63	@ 0x3f
 80051f8:	f000 fe30 	bl	8005e5c <sniprintf>
 80051fc:	4603      	mov	r3, r0
 80051fe:	4a1c      	ldr	r2, [pc, #112]	@ (8005270 <task_temperature_init+0x144>)
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	4b17      	ldr	r3, [pc, #92]	@ (8005260 <task_temperature_init+0x134>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	4618      	mov	r0, r3
 8005208:	f7fe fc08 	bl	8003a1c <logger_log_print_>
 800520c:	b662      	cpsie	i

	b_event = p_task_temperature_dta->flag;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	799b      	ldrb	r3, [r3, #6]
 8005212:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8005214:	b672      	cpsid	i
 8005216:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <task_temperature_init+0x134>)
 8005218:	6818      	ldr	r0, [r3, #0]
 800521a:	7a7b      	ldrb	r3, [r7, #9]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <task_temperature_init+0xf8>
 8005220:	4b1e      	ldr	r3, [pc, #120]	@ (800529c <task_temperature_init+0x170>)
 8005222:	e000      	b.n	8005226 <task_temperature_init+0xfa>
 8005224:	4b1e      	ldr	r3, [pc, #120]	@ (80052a0 <task_temperature_init+0x174>)
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	4b1e      	ldr	r3, [pc, #120]	@ (80052a4 <task_temperature_init+0x178>)
 800522a:	4a1f      	ldr	r2, [pc, #124]	@ (80052a8 <task_temperature_init+0x17c>)
 800522c:	213f      	movs	r1, #63	@ 0x3f
 800522e:	f000 fe15 	bl	8005e5c <sniprintf>
 8005232:	4603      	mov	r3, r0
 8005234:	4a0e      	ldr	r2, [pc, #56]	@ (8005270 <task_temperature_init+0x144>)
 8005236:	6013      	str	r3, [r2, #0]
 8005238:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <task_temperature_init+0x134>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4618      	mov	r0, r3
 800523e:	f7fe fbed 	bl	8003a1c <logger_log_print_>
 8005242:	b662      	cpsie	i

	g_task_temperature_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8005244:	4b19      	ldr	r3, [pc, #100]	@ (80052ac <task_temperature_init+0x180>)
 8005246:	2200      	movs	r2, #0
 8005248:	601a      	str	r2, [r3, #0]

   //Calibro los adc

	HAL_ADCEx_Calibration_Start(&hadc1);
 800524a:	4819      	ldr	r0, [pc, #100]	@ (80052b0 <task_temperature_init+0x184>)
 800524c:	f7fc fce8 	bl	8001c20 <HAL_ADCEx_Calibration_Start>
	HAL_ADCEx_Calibration_Start(&hadc2);
 8005250:	4818      	ldr	r0, [pc, #96]	@ (80052b4 <task_temperature_init+0x188>)
 8005252:	f7fc fce5 	bl	8001c20 <HAL_ADCEx_Calibration_Start>

}
 8005256:	bf00      	nop
 8005258:	3710      	adds	r7, #16
 800525a:	46bd      	mov	sp, r7
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	0800741c 	.word	0x0800741c
 8005264:	200002c4 	.word	0x200002c4
 8005268:	080072e0 	.word	0x080072e0
 800526c:	080072f8 	.word	0x080072f8
 8005270:	20000488 	.word	0x20000488
 8005274:	200002c8 	.word	0x200002c8
 8005278:	08007310 	.word	0x08007310
 800527c:	08007324 	.word	0x08007324
 8005280:	20000564 	.word	0x20000564
 8005284:	08007334 	.word	0x08007334
 8005288:	0800734c 	.word	0x0800734c
 800528c:	200002bc 	.word	0x200002bc
 8005290:	0800735c 	.word	0x0800735c
 8005294:	08007364 	.word	0x08007364
 8005298:	08007370 	.word	0x08007370
 800529c:	08007378 	.word	0x08007378
 80052a0:	08007380 	.word	0x08007380
 80052a4:	08007388 	.word	0x08007388
 80052a8:	08007390 	.word	0x08007390
 80052ac:	20000568 	.word	0x20000568
 80052b0:	2000034c 	.word	0x2000034c
 80052b4:	2000037c 	.word	0x2000037c

080052b8 <task_temperature_update>:

void task_temperature_update(void *parameters)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
	task_temperature_dta_t *p_task_temperature_dta;
	bool b_time_update_required = false;
 80052c0:	2300      	movs	r3, #0
 80052c2:	75fb      	strb	r3, [r7, #23]
	int temp_aux = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	613b      	str	r3, [r7, #16]

	/* Update Task temperature Counter */
	g_task_temperature_cnt++;
 80052c8:	4b67      	ldr	r3, [pc, #412]	@ (8005468 <task_temperature_update+0x1b0>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	3301      	adds	r3, #1
 80052ce:	4a66      	ldr	r2, [pc, #408]	@ (8005468 <task_temperature_update+0x1b0>)
 80052d0:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_temperature_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 80052d2:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_temperature_tick_cnt)
 80052d4:	4b65      	ldr	r3, [pc, #404]	@ (800546c <task_temperature_update+0x1b4>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d006      	beq.n	80052ea <task_temperature_update+0x32>
    {
    	g_task_temperature_tick_cnt--;
 80052dc:	4b63      	ldr	r3, [pc, #396]	@ (800546c <task_temperature_update+0x1b4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	4a62      	ldr	r2, [pc, #392]	@ (800546c <task_temperature_update+0x1b4>)
 80052e4:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80052e6:	2301      	movs	r3, #1
 80052e8:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80052ea:	b662      	cpsie	i

    while (b_time_update_required)
 80052ec:	e0a7      	b.n	800543e <task_temperature_update+0x186>
    {
		/* Protect shared resource (g_task_temperature_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 80052ee:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_temperature_tick_cnt)
 80052f0:	4b5e      	ldr	r3, [pc, #376]	@ (800546c <task_temperature_update+0x1b4>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <task_temperature_update+0x50>
		{
			g_task_temperature_tick_cnt--;
 80052f8:	4b5c      	ldr	r3, [pc, #368]	@ (800546c <task_temperature_update+0x1b4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3b01      	subs	r3, #1
 80052fe:	4a5b      	ldr	r2, [pc, #364]	@ (800546c <task_temperature_update+0x1b4>)
 8005300:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
 8005306:	e001      	b.n	800530c <task_temperature_update+0x54>
		}
		else
		{
			b_time_update_required = false;
 8005308:	2300      	movs	r3, #0
 800530a:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 800530c:	b662      	cpsie	i

    	/* Update Task temperature Data Pointer */
		p_task_temperature_dta = &task_temperature_dta;
 800530e:	4b58      	ldr	r3, [pc, #352]	@ (8005470 <task_temperature_update+0x1b8>)
 8005310:	60fb      	str	r3, [r7, #12]

		switch (p_task_temperature_dta->state)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	791b      	ldrb	r3, [r3, #4]
 8005316:	2b04      	cmp	r3, #4
 8005318:	d007      	beq.n	800532a <task_temperature_update+0x72>
 800531a:	2b04      	cmp	r3, #4
 800531c:	f300 808c 	bgt.w	8005438 <task_temperature_update+0x180>
 8005320:	2b02      	cmp	r3, #2
 8005322:	d07c      	beq.n	800541e <task_temperature_update+0x166>
 8005324:	2b03      	cmp	r3, #3
 8005326:	d00a      	beq.n	800533e <task_temperature_update+0x86>

				break;

			default:

				break;
 8005328:	e086      	b.n	8005438 <task_temperature_update+0x180>
				HAL_ADC_Start_IT(&hadc1);
 800532a:	4852      	ldr	r0, [pc, #328]	@ (8005474 <task_temperature_update+0x1bc>)
 800532c:	f7fc f95a 	bl	80015e4 <HAL_ADC_Start_IT>
				HAL_ADC_Start_IT(&hadc2);
 8005330:	4851      	ldr	r0, [pc, #324]	@ (8005478 <task_temperature_update+0x1c0>)
 8005332:	f7fc f957 	bl	80015e4 <HAL_ADC_Start_IT>
				p_task_temperature_dta->state = ST_SYS_03_ESPERAR_MEDICION;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2203      	movs	r2, #3
 800533a:	711a      	strb	r2, [r3, #4]
				break;
 800533c:	e07f      	b.n	800543e <task_temperature_update+0x186>
				if(flag_conversion1 && flag_conversion2){
 800533e:	4b4f      	ldr	r3, [pc, #316]	@ (800547c <task_temperature_update+0x1c4>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d07a      	beq.n	800543c <task_temperature_update+0x184>
 8005346:	4b4e      	ldr	r3, [pc, #312]	@ (8005480 <task_temperature_update+0x1c8>)
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d076      	beq.n	800543c <task_temperature_update+0x184>
					flag_conversion1 = false;
 800534e:	4b4b      	ldr	r3, [pc, #300]	@ (800547c <task_temperature_update+0x1c4>)
 8005350:	2200      	movs	r2, #0
 8005352:	701a      	strb	r2, [r3, #0]
					temperatura.micro = 25 + (V25 - (ADC_REF/ADC_RESOLUTION)*(float)sample1)/(PENDIENTE);
 8005354:	4b4b      	ldr	r3, [pc, #300]	@ (8005484 <task_temperature_update+0x1cc>)
 8005356:	881b      	ldrh	r3, [r3, #0]
 8005358:	b29b      	uxth	r3, r3
 800535a:	4618      	mov	r0, r3
 800535c:	f7fb fbf4 	bl	8000b48 <__aeabi_ui2f>
 8005360:	4603      	mov	r3, r0
 8005362:	4618      	mov	r0, r3
 8005364:	f7fb f860 	bl	8000428 <__aeabi_f2d>
 8005368:	a339      	add	r3, pc, #228	@ (adr r3, 8005450 <task_temperature_update+0x198>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fb f8b3 	bl	80004d8 <__aeabi_dmul>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	a138      	add	r1, pc, #224	@ (adr r1, 8005458 <task_temperature_update+0x1a0>)
 8005378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800537c:	f7fa fef4 	bl	8000168 <__aeabi_dsub>
 8005380:	4602      	mov	r2, r0
 8005382:	460b      	mov	r3, r1
 8005384:	4610      	mov	r0, r2
 8005386:	4619      	mov	r1, r3
 8005388:	a335      	add	r3, pc, #212	@ (adr r3, 8005460 <task_temperature_update+0x1a8>)
 800538a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538e:	f7fb f9cd 	bl	800072c <__aeabi_ddiv>
 8005392:	4602      	mov	r2, r0
 8005394:	460b      	mov	r3, r1
 8005396:	4610      	mov	r0, r2
 8005398:	4619      	mov	r1, r3
 800539a:	f04f 0200 	mov.w	r2, #0
 800539e:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <task_temperature_update+0x1d0>)
 80053a0:	f7fa fee4 	bl	800016c <__adddf3>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4610      	mov	r0, r2
 80053aa:	4619      	mov	r1, r3
 80053ac:	f7fb fac6 	bl	800093c <__aeabi_d2f>
 80053b0:	4603      	mov	r3, r0
 80053b2:	4a36      	ldr	r2, [pc, #216]	@ (800548c <task_temperature_update+0x1d4>)
 80053b4:	6053      	str	r3, [r2, #4]
					temp_aux = (int)temperatura.micro;
 80053b6:	4b35      	ldr	r3, [pc, #212]	@ (800548c <task_temperature_update+0x1d4>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fb fc1c 	bl	8000bf8 <__aeabi_f2iz>
 80053c0:	4603      	mov	r3, r0
 80053c2:	613b      	str	r3, [r7, #16]
					flag_conversion2 = false;
 80053c4:	4b2e      	ldr	r3, [pc, #184]	@ (8005480 <task_temperature_update+0x1c8>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
					temperatura.ambiente = (100.0*ADC_REF/ADC_RESOLUTION)*(float)sample2;
 80053ca:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <task_temperature_update+0x1d8>)
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	b29b      	uxth	r3, r3
 80053d0:	4618      	mov	r0, r3
 80053d2:	f7fb fbb9 	bl	8000b48 <__aeabi_ui2f>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4618      	mov	r0, r3
 80053da:	f7fb f825 	bl	8000428 <__aeabi_f2d>
 80053de:	f04f 0200 	mov.w	r2, #0
 80053e2:	4b2c      	ldr	r3, [pc, #176]	@ (8005494 <task_temperature_update+0x1dc>)
 80053e4:	f7fb f878 	bl	80004d8 <__aeabi_dmul>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4610      	mov	r0, r2
 80053ee:	4619      	mov	r1, r3
 80053f0:	f7fb faa4 	bl	800093c <__aeabi_d2f>
 80053f4:	4603      	mov	r3, r0
 80053f6:	4a25      	ldr	r2, [pc, #148]	@ (800548c <task_temperature_update+0x1d4>)
 80053f8:	6013      	str	r3, [r2, #0]
					temp_aux = (int)temperatura.ambiente;
 80053fa:	4b24      	ldr	r3, [pc, #144]	@ (800548c <task_temperature_update+0x1d4>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fb fbfa 	bl	8000bf8 <__aeabi_f2iz>
 8005404:	4603      	mov	r3, r0
 8005406:	613b      	str	r3, [r7, #16]
					put_event_task_set_up(EV_SET_UP_02_NUEVA_TEMPERATURA);
 8005408:	2008      	movs	r0, #8
 800540a:	f7ff fe35 	bl	8005078 <put_event_task_set_up>
					p_task_temperature_dta->tick = DEL_SYS_03_ESPERA_CONVERSION;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8005414:	601a      	str	r2, [r3, #0]
					p_task_temperature_dta->state = ST_SYS_03_STANDBY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2202      	movs	r2, #2
 800541a:	711a      	strb	r2, [r3, #4]
				break;
 800541c:	e00e      	b.n	800543c <task_temperature_update+0x184>
				if(p_task_temperature_dta->tick == DEL_SYS_XX_MIN){
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d102      	bne.n	800542c <task_temperature_update+0x174>
					p_task_temperature_dta->state = ST_SYS_03_INICIAR_MEDICION;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2204      	movs	r2, #4
 800542a:	711a      	strb	r2, [r3, #4]
				p_task_temperature_dta->tick--;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1e5a      	subs	r2, r3, #1
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	601a      	str	r2, [r3, #0]
				break;
 8005436:	e002      	b.n	800543e <task_temperature_update+0x186>
				break;
 8005438:	bf00      	nop
 800543a:	e000      	b.n	800543e <task_temperature_update+0x186>
				break;
 800543c:	bf00      	nop
    while (b_time_update_required)
 800543e:	7dfb      	ldrb	r3, [r7, #23]
 8005440:	2b00      	cmp	r3, #0
 8005442:	f47f af54 	bne.w	80052ee <task_temperature_update+0x36>
		}

	}
}
 8005446:	bf00      	nop
 8005448:	bf00      	nop
 800544a:	3718      	adds	r7, #24
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}
 8005450:	66666666 	.word	0x66666666
 8005454:	3f4a6666 	.word	0x3f4a6666
 8005458:	ae147ae1 	.word	0xae147ae1
 800545c:	3ff6e147 	.word	0x3ff6e147
 8005460:	75f6fd22 	.word	0x75f6fd22
 8005464:	3f719ce0 	.word	0x3f719ce0
 8005468:	20000564 	.word	0x20000564
 800546c:	20000568 	.word	0x20000568
 8005470:	200002bc 	.word	0x200002bc
 8005474:	2000034c 	.word	0x2000034c
 8005478:	2000037c 	.word	0x2000037c
 800547c:	2000055c 	.word	0x2000055c
 8005480:	2000055d 	.word	0x2000055d
 8005484:	2000055e 	.word	0x2000055e
 8005488:	40390000 	.word	0x40390000
 800548c:	20000554 	.word	0x20000554
 8005490:	20000560 	.word	0x20000560
 8005494:	3fb4a000 	.word	0x3fb4a000

08005498 <HAL_ADC_ConvCpltCallback>:

/*Callback ADC*/
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == hadc2.Instance){
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	4b10      	ldr	r3, [pc, #64]	@ (80054e8 <HAL_ADC_ConvCpltCallback+0x50>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d109      	bne.n	80054c0 <HAL_ADC_ConvCpltCallback+0x28>
		sample2 = HAL_ADC_GetValue(hadc);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fc f94f 	bl	8001750 <HAL_ADC_GetValue>
 80054b2:	4603      	mov	r3, r0
 80054b4:	b29a      	uxth	r2, r3
 80054b6:	4b0d      	ldr	r3, [pc, #52]	@ (80054ec <HAL_ADC_ConvCpltCallback+0x54>)
 80054b8:	801a      	strh	r2, [r3, #0]
		flag_conversion2 = true;
 80054ba:	4b0d      	ldr	r3, [pc, #52]	@ (80054f0 <HAL_ADC_ConvCpltCallback+0x58>)
 80054bc:	2201      	movs	r2, #1
 80054be:	701a      	strb	r2, [r3, #0]
	}
	if(hadc->Instance == hadc1.Instance){
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	4b0b      	ldr	r3, [pc, #44]	@ (80054f4 <HAL_ADC_ConvCpltCallback+0x5c>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d109      	bne.n	80054e0 <HAL_ADC_ConvCpltCallback+0x48>
		sample1 = HAL_ADC_GetValue(hadc);
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	f7fc f93f 	bl	8001750 <HAL_ADC_GetValue>
 80054d2:	4603      	mov	r3, r0
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	4b08      	ldr	r3, [pc, #32]	@ (80054f8 <HAL_ADC_ConvCpltCallback+0x60>)
 80054d8:	801a      	strh	r2, [r3, #0]
		flag_conversion1 = true;
 80054da:	4b08      	ldr	r3, [pc, #32]	@ (80054fc <HAL_ADC_ConvCpltCallback+0x64>)
 80054dc:	2201      	movs	r2, #1
 80054de:	701a      	strb	r2, [r3, #0]
	}
}
 80054e0:	bf00      	nop
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	2000037c 	.word	0x2000037c
 80054ec:	20000560 	.word	0x20000560
 80054f0:	2000055d 	.word	0x2000055d
 80054f4:	2000034c 	.word	0x2000034c
 80054f8:	2000055e 	.word	0x2000055e
 80054fc:	2000055c 	.word	0x2000055c

08005500 <findslot>:
 8005500:	4b0a      	ldr	r3, [pc, #40]	@ (800552c <findslot+0x2c>)
 8005502:	b510      	push	{r4, lr}
 8005504:	4604      	mov	r4, r0
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	b118      	cbz	r0, 8005512 <findslot+0x12>
 800550a:	6a03      	ldr	r3, [r0, #32]
 800550c:	b90b      	cbnz	r3, 8005512 <findslot+0x12>
 800550e:	f000 fc5d 	bl	8005dcc <__sinit>
 8005512:	2c13      	cmp	r4, #19
 8005514:	d807      	bhi.n	8005526 <findslot+0x26>
 8005516:	4806      	ldr	r0, [pc, #24]	@ (8005530 <findslot+0x30>)
 8005518:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 800551c:	3201      	adds	r2, #1
 800551e:	d002      	beq.n	8005526 <findslot+0x26>
 8005520:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005524:	bd10      	pop	{r4, pc}
 8005526:	2000      	movs	r0, #0
 8005528:	e7fc      	b.n	8005524 <findslot+0x24>
 800552a:	bf00      	nop
 800552c:	200002e0 	.word	0x200002e0
 8005530:	20000578 	.word	0x20000578

08005534 <error>:
 8005534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005536:	4604      	mov	r4, r0
 8005538:	f000 fd76 	bl	8006028 <__errno>
 800553c:	2613      	movs	r6, #19
 800553e:	4605      	mov	r5, r0
 8005540:	2700      	movs	r7, #0
 8005542:	4630      	mov	r0, r6
 8005544:	4639      	mov	r1, r7
 8005546:	beab      	bkpt	0x00ab
 8005548:	4606      	mov	r6, r0
 800554a:	4620      	mov	r0, r4
 800554c:	602e      	str	r6, [r5, #0]
 800554e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005550 <checkerror>:
 8005550:	1c43      	adds	r3, r0, #1
 8005552:	d101      	bne.n	8005558 <checkerror+0x8>
 8005554:	f7ff bfee 	b.w	8005534 <error>
 8005558:	4770      	bx	lr

0800555a <_swiread>:
 800555a:	b530      	push	{r4, r5, lr}
 800555c:	b085      	sub	sp, #20
 800555e:	2406      	movs	r4, #6
 8005560:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005564:	9203      	str	r2, [sp, #12]
 8005566:	ad01      	add	r5, sp, #4
 8005568:	4620      	mov	r0, r4
 800556a:	4629      	mov	r1, r5
 800556c:	beab      	bkpt	0x00ab
 800556e:	4604      	mov	r4, r0
 8005570:	4620      	mov	r0, r4
 8005572:	f7ff ffed 	bl	8005550 <checkerror>
 8005576:	b005      	add	sp, #20
 8005578:	bd30      	pop	{r4, r5, pc}

0800557a <_read>:
 800557a:	b570      	push	{r4, r5, r6, lr}
 800557c:	460e      	mov	r6, r1
 800557e:	4614      	mov	r4, r2
 8005580:	f7ff ffbe 	bl	8005500 <findslot>
 8005584:	4605      	mov	r5, r0
 8005586:	b930      	cbnz	r0, 8005596 <_read+0x1c>
 8005588:	f000 fd4e 	bl	8006028 <__errno>
 800558c:	2309      	movs	r3, #9
 800558e:	6003      	str	r3, [r0, #0]
 8005590:	f04f 30ff 	mov.w	r0, #4294967295
 8005594:	bd70      	pop	{r4, r5, r6, pc}
 8005596:	4622      	mov	r2, r4
 8005598:	4631      	mov	r1, r6
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	f7ff ffdd 	bl	800555a <_swiread>
 80055a0:	1c43      	adds	r3, r0, #1
 80055a2:	d0f5      	beq.n	8005590 <_read+0x16>
 80055a4:	686b      	ldr	r3, [r5, #4]
 80055a6:	1a20      	subs	r0, r4, r0
 80055a8:	4403      	add	r3, r0
 80055aa:	606b      	str	r3, [r5, #4]
 80055ac:	e7f2      	b.n	8005594 <_read+0x1a>

080055ae <_swilseek>:
 80055ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80055b0:	460c      	mov	r4, r1
 80055b2:	4616      	mov	r6, r2
 80055b4:	f7ff ffa4 	bl	8005500 <findslot>
 80055b8:	4605      	mov	r5, r0
 80055ba:	b940      	cbnz	r0, 80055ce <_swilseek+0x20>
 80055bc:	f000 fd34 	bl	8006028 <__errno>
 80055c0:	2309      	movs	r3, #9
 80055c2:	6003      	str	r3, [r0, #0]
 80055c4:	f04f 34ff 	mov.w	r4, #4294967295
 80055c8:	4620      	mov	r0, r4
 80055ca:	b003      	add	sp, #12
 80055cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ce:	2e02      	cmp	r6, #2
 80055d0:	d903      	bls.n	80055da <_swilseek+0x2c>
 80055d2:	f000 fd29 	bl	8006028 <__errno>
 80055d6:	2316      	movs	r3, #22
 80055d8:	e7f3      	b.n	80055c2 <_swilseek+0x14>
 80055da:	2e01      	cmp	r6, #1
 80055dc:	d112      	bne.n	8005604 <_swilseek+0x56>
 80055de:	6843      	ldr	r3, [r0, #4]
 80055e0:	18e4      	adds	r4, r4, r3
 80055e2:	d4f6      	bmi.n	80055d2 <_swilseek+0x24>
 80055e4:	682b      	ldr	r3, [r5, #0]
 80055e6:	260a      	movs	r6, #10
 80055e8:	466f      	mov	r7, sp
 80055ea:	e9cd 3400 	strd	r3, r4, [sp]
 80055ee:	4630      	mov	r0, r6
 80055f0:	4639      	mov	r1, r7
 80055f2:	beab      	bkpt	0x00ab
 80055f4:	4606      	mov	r6, r0
 80055f6:	4630      	mov	r0, r6
 80055f8:	f7ff ffaa 	bl	8005550 <checkerror>
 80055fc:	2800      	cmp	r0, #0
 80055fe:	dbe1      	blt.n	80055c4 <_swilseek+0x16>
 8005600:	606c      	str	r4, [r5, #4]
 8005602:	e7e1      	b.n	80055c8 <_swilseek+0x1a>
 8005604:	2e02      	cmp	r6, #2
 8005606:	6803      	ldr	r3, [r0, #0]
 8005608:	d1ec      	bne.n	80055e4 <_swilseek+0x36>
 800560a:	260c      	movs	r6, #12
 800560c:	466f      	mov	r7, sp
 800560e:	9300      	str	r3, [sp, #0]
 8005610:	4630      	mov	r0, r6
 8005612:	4639      	mov	r1, r7
 8005614:	beab      	bkpt	0x00ab
 8005616:	4606      	mov	r6, r0
 8005618:	4630      	mov	r0, r6
 800561a:	f7ff ff99 	bl	8005550 <checkerror>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d0d0      	beq.n	80055c4 <_swilseek+0x16>
 8005622:	4404      	add	r4, r0
 8005624:	e7de      	b.n	80055e4 <_swilseek+0x36>

08005626 <_lseek>:
 8005626:	f7ff bfc2 	b.w	80055ae <_swilseek>

0800562a <_swiwrite>:
 800562a:	b530      	push	{r4, r5, lr}
 800562c:	b085      	sub	sp, #20
 800562e:	2405      	movs	r4, #5
 8005630:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8005634:	9203      	str	r2, [sp, #12]
 8005636:	ad01      	add	r5, sp, #4
 8005638:	4620      	mov	r0, r4
 800563a:	4629      	mov	r1, r5
 800563c:	beab      	bkpt	0x00ab
 800563e:	4604      	mov	r4, r0
 8005640:	4620      	mov	r0, r4
 8005642:	f7ff ff85 	bl	8005550 <checkerror>
 8005646:	b005      	add	sp, #20
 8005648:	bd30      	pop	{r4, r5, pc}

0800564a <_write>:
 800564a:	b570      	push	{r4, r5, r6, lr}
 800564c:	460e      	mov	r6, r1
 800564e:	4615      	mov	r5, r2
 8005650:	f7ff ff56 	bl	8005500 <findslot>
 8005654:	4604      	mov	r4, r0
 8005656:	b930      	cbnz	r0, 8005666 <_write+0x1c>
 8005658:	f000 fce6 	bl	8006028 <__errno>
 800565c:	2309      	movs	r3, #9
 800565e:	6003      	str	r3, [r0, #0]
 8005660:	f04f 30ff 	mov.w	r0, #4294967295
 8005664:	bd70      	pop	{r4, r5, r6, pc}
 8005666:	462a      	mov	r2, r5
 8005668:	4631      	mov	r1, r6
 800566a:	6800      	ldr	r0, [r0, #0]
 800566c:	f7ff ffdd 	bl	800562a <_swiwrite>
 8005670:	1e03      	subs	r3, r0, #0
 8005672:	dbf5      	blt.n	8005660 <_write+0x16>
 8005674:	6862      	ldr	r2, [r4, #4]
 8005676:	1ae8      	subs	r0, r5, r3
 8005678:	4402      	add	r2, r0
 800567a:	42ab      	cmp	r3, r5
 800567c:	6062      	str	r2, [r4, #4]
 800567e:	d1f1      	bne.n	8005664 <_write+0x1a>
 8005680:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005684:	2000      	movs	r0, #0
 8005686:	f7ff bf55 	b.w	8005534 <error>

0800568a <_swiclose>:
 800568a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800568c:	2402      	movs	r4, #2
 800568e:	9001      	str	r0, [sp, #4]
 8005690:	ad01      	add	r5, sp, #4
 8005692:	4620      	mov	r0, r4
 8005694:	4629      	mov	r1, r5
 8005696:	beab      	bkpt	0x00ab
 8005698:	4604      	mov	r4, r0
 800569a:	4620      	mov	r0, r4
 800569c:	f7ff ff58 	bl	8005550 <checkerror>
 80056a0:	b003      	add	sp, #12
 80056a2:	bd30      	pop	{r4, r5, pc}

080056a4 <_close>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4605      	mov	r5, r0
 80056a8:	f7ff ff2a 	bl	8005500 <findslot>
 80056ac:	4604      	mov	r4, r0
 80056ae:	b930      	cbnz	r0, 80056be <_close+0x1a>
 80056b0:	f000 fcba 	bl	8006028 <__errno>
 80056b4:	2309      	movs	r3, #9
 80056b6:	6003      	str	r3, [r0, #0]
 80056b8:	f04f 30ff 	mov.w	r0, #4294967295
 80056bc:	bd38      	pop	{r3, r4, r5, pc}
 80056be:	3d01      	subs	r5, #1
 80056c0:	2d01      	cmp	r5, #1
 80056c2:	d809      	bhi.n	80056d8 <_close+0x34>
 80056c4:	4b07      	ldr	r3, [pc, #28]	@ (80056e4 <_close+0x40>)
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	691b      	ldr	r3, [r3, #16]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d104      	bne.n	80056d8 <_close+0x34>
 80056ce:	f04f 33ff 	mov.w	r3, #4294967295
 80056d2:	2000      	movs	r0, #0
 80056d4:	6023      	str	r3, [r4, #0]
 80056d6:	e7f1      	b.n	80056bc <_close+0x18>
 80056d8:	6820      	ldr	r0, [r4, #0]
 80056da:	f7ff ffd6 	bl	800568a <_swiclose>
 80056de:	2800      	cmp	r0, #0
 80056e0:	d0f5      	beq.n	80056ce <_close+0x2a>
 80056e2:	e7eb      	b.n	80056bc <_close+0x18>
 80056e4:	20000578 	.word	0x20000578

080056e8 <_swistat>:
 80056e8:	b570      	push	{r4, r5, r6, lr}
 80056ea:	460c      	mov	r4, r1
 80056ec:	f7ff ff08 	bl	8005500 <findslot>
 80056f0:	4605      	mov	r5, r0
 80056f2:	b930      	cbnz	r0, 8005702 <_swistat+0x1a>
 80056f4:	f000 fc98 	bl	8006028 <__errno>
 80056f8:	2309      	movs	r3, #9
 80056fa:	6003      	str	r3, [r0, #0]
 80056fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005700:	bd70      	pop	{r4, r5, r6, pc}
 8005702:	6863      	ldr	r3, [r4, #4]
 8005704:	260c      	movs	r6, #12
 8005706:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800570a:	6063      	str	r3, [r4, #4]
 800570c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005710:	64a3      	str	r3, [r4, #72]	@ 0x48
 8005712:	4630      	mov	r0, r6
 8005714:	4629      	mov	r1, r5
 8005716:	beab      	bkpt	0x00ab
 8005718:	4605      	mov	r5, r0
 800571a:	4628      	mov	r0, r5
 800571c:	f7ff ff18 	bl	8005550 <checkerror>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d0eb      	beq.n	80056fc <_swistat+0x14>
 8005724:	6120      	str	r0, [r4, #16]
 8005726:	2000      	movs	r0, #0
 8005728:	e7ea      	b.n	8005700 <_swistat+0x18>

0800572a <_fstat>:
 800572a:	460b      	mov	r3, r1
 800572c:	b510      	push	{r4, lr}
 800572e:	2100      	movs	r1, #0
 8005730:	4604      	mov	r4, r0
 8005732:	2258      	movs	r2, #88	@ 0x58
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fc28 	bl	8005f8a <memset>
 800573a:	4601      	mov	r1, r0
 800573c:	4620      	mov	r0, r4
 800573e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005742:	f7ff bfd1 	b.w	80056e8 <_swistat>

08005746 <_stat>:
 8005746:	b538      	push	{r3, r4, r5, lr}
 8005748:	460d      	mov	r5, r1
 800574a:	4604      	mov	r4, r0
 800574c:	2258      	movs	r2, #88	@ 0x58
 800574e:	2100      	movs	r1, #0
 8005750:	4628      	mov	r0, r5
 8005752:	f000 fc1a 	bl	8005f8a <memset>
 8005756:	4620      	mov	r0, r4
 8005758:	2100      	movs	r1, #0
 800575a:	f000 f811 	bl	8005780 <_swiopen>
 800575e:	1c43      	adds	r3, r0, #1
 8005760:	4604      	mov	r4, r0
 8005762:	d00b      	beq.n	800577c <_stat+0x36>
 8005764:	686b      	ldr	r3, [r5, #4]
 8005766:	4629      	mov	r1, r5
 8005768:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 800576c:	606b      	str	r3, [r5, #4]
 800576e:	f7ff ffbb 	bl	80056e8 <_swistat>
 8005772:	4605      	mov	r5, r0
 8005774:	4620      	mov	r0, r4
 8005776:	f7ff ff95 	bl	80056a4 <_close>
 800577a:	462c      	mov	r4, r5
 800577c:	4620      	mov	r0, r4
 800577e:	bd38      	pop	{r3, r4, r5, pc}

08005780 <_swiopen>:
 8005780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005784:	4682      	mov	sl, r0
 8005786:	460e      	mov	r6, r1
 8005788:	2400      	movs	r4, #0
 800578a:	4f28      	ldr	r7, [pc, #160]	@ (800582c <_swiopen+0xac>)
 800578c:	b096      	sub	sp, #88	@ 0x58
 800578e:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 8005792:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8005796:	3301      	adds	r3, #1
 8005798:	d00c      	beq.n	80057b4 <_swiopen+0x34>
 800579a:	3401      	adds	r4, #1
 800579c:	2c14      	cmp	r4, #20
 800579e:	d1f6      	bne.n	800578e <_swiopen+0xe>
 80057a0:	f000 fc42 	bl	8006028 <__errno>
 80057a4:	2318      	movs	r3, #24
 80057a6:	f04f 34ff 	mov.w	r4, #4294967295
 80057aa:	6003      	str	r3, [r0, #0]
 80057ac:	4620      	mov	r0, r4
 80057ae:	b016      	add	sp, #88	@ 0x58
 80057b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b4:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80057b8:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80057bc:	46e9      	mov	r9, sp
 80057be:	d109      	bne.n	80057d4 <_swiopen+0x54>
 80057c0:	4649      	mov	r1, r9
 80057c2:	4650      	mov	r0, sl
 80057c4:	f7ff ffbf 	bl	8005746 <_stat>
 80057c8:	3001      	adds	r0, #1
 80057ca:	d003      	beq.n	80057d4 <_swiopen+0x54>
 80057cc:	f000 fc2c 	bl	8006028 <__errno>
 80057d0:	2311      	movs	r3, #17
 80057d2:	e7e8      	b.n	80057a6 <_swiopen+0x26>
 80057d4:	f240 6301 	movw	r3, #1537	@ 0x601
 80057d8:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80057dc:	07b2      	lsls	r2, r6, #30
 80057de:	bf48      	it	mi
 80057e0:	f045 0502 	orrmi.w	r5, r5, #2
 80057e4:	421e      	tst	r6, r3
 80057e6:	bf18      	it	ne
 80057e8:	f045 0504 	orrne.w	r5, r5, #4
 80057ec:	0733      	lsls	r3, r6, #28
 80057ee:	bf48      	it	mi
 80057f0:	f025 0504 	bicmi.w	r5, r5, #4
 80057f4:	4650      	mov	r0, sl
 80057f6:	bf48      	it	mi
 80057f8:	f045 0508 	orrmi.w	r5, r5, #8
 80057fc:	f8cd a000 	str.w	sl, [sp]
 8005800:	f7fa fca6 	bl	8000150 <strlen>
 8005804:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8005808:	2501      	movs	r5, #1
 800580a:	4628      	mov	r0, r5
 800580c:	4649      	mov	r1, r9
 800580e:	beab      	bkpt	0x00ab
 8005810:	4605      	mov	r5, r0
 8005812:	2d00      	cmp	r5, #0
 8005814:	db05      	blt.n	8005822 <_swiopen+0xa2>
 8005816:	2300      	movs	r3, #0
 8005818:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 800581c:	4447      	add	r7, r8
 800581e:	607b      	str	r3, [r7, #4]
 8005820:	e7c4      	b.n	80057ac <_swiopen+0x2c>
 8005822:	4628      	mov	r0, r5
 8005824:	f7ff fe86 	bl	8005534 <error>
 8005828:	4604      	mov	r4, r0
 800582a:	e7bf      	b.n	80057ac <_swiopen+0x2c>
 800582c:	20000578 	.word	0x20000578

08005830 <_get_semihosting_exts>:
 8005830:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005834:	4606      	mov	r6, r0
 8005836:	460f      	mov	r7, r1
 8005838:	4829      	ldr	r0, [pc, #164]	@ (80058e0 <_get_semihosting_exts+0xb0>)
 800583a:	2100      	movs	r1, #0
 800583c:	4615      	mov	r5, r2
 800583e:	f7ff ff9f 	bl	8005780 <_swiopen>
 8005842:	4604      	mov	r4, r0
 8005844:	462a      	mov	r2, r5
 8005846:	2100      	movs	r1, #0
 8005848:	4630      	mov	r0, r6
 800584a:	f000 fb9e 	bl	8005f8a <memset>
 800584e:	1c63      	adds	r3, r4, #1
 8005850:	d014      	beq.n	800587c <_get_semihosting_exts+0x4c>
 8005852:	4620      	mov	r0, r4
 8005854:	f7ff fe54 	bl	8005500 <findslot>
 8005858:	f04f 080c 	mov.w	r8, #12
 800585c:	4681      	mov	r9, r0
 800585e:	4640      	mov	r0, r8
 8005860:	4649      	mov	r1, r9
 8005862:	beab      	bkpt	0x00ab
 8005864:	4680      	mov	r8, r0
 8005866:	4640      	mov	r0, r8
 8005868:	f7ff fe72 	bl	8005550 <checkerror>
 800586c:	2803      	cmp	r0, #3
 800586e:	dd02      	ble.n	8005876 <_get_semihosting_exts+0x46>
 8005870:	1ec3      	subs	r3, r0, #3
 8005872:	42ab      	cmp	r3, r5
 8005874:	dc07      	bgt.n	8005886 <_get_semihosting_exts+0x56>
 8005876:	4620      	mov	r0, r4
 8005878:	f7ff ff14 	bl	80056a4 <_close>
 800587c:	f04f 30ff 	mov.w	r0, #4294967295
 8005880:	b003      	add	sp, #12
 8005882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005886:	2204      	movs	r2, #4
 8005888:	4620      	mov	r0, r4
 800588a:	eb0d 0102 	add.w	r1, sp, r2
 800588e:	f7ff fe74 	bl	800557a <_read>
 8005892:	2803      	cmp	r0, #3
 8005894:	ddef      	ble.n	8005876 <_get_semihosting_exts+0x46>
 8005896:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800589a:	2b53      	cmp	r3, #83	@ 0x53
 800589c:	d1eb      	bne.n	8005876 <_get_semihosting_exts+0x46>
 800589e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80058a2:	2b48      	cmp	r3, #72	@ 0x48
 80058a4:	d1e7      	bne.n	8005876 <_get_semihosting_exts+0x46>
 80058a6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80058aa:	2b46      	cmp	r3, #70	@ 0x46
 80058ac:	d1e3      	bne.n	8005876 <_get_semihosting_exts+0x46>
 80058ae:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80058b2:	2b42      	cmp	r3, #66	@ 0x42
 80058b4:	d1df      	bne.n	8005876 <_get_semihosting_exts+0x46>
 80058b6:	2201      	movs	r2, #1
 80058b8:	4639      	mov	r1, r7
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff fe77 	bl	80055ae <_swilseek>
 80058c0:	2800      	cmp	r0, #0
 80058c2:	dbd8      	blt.n	8005876 <_get_semihosting_exts+0x46>
 80058c4:	462a      	mov	r2, r5
 80058c6:	4631      	mov	r1, r6
 80058c8:	4620      	mov	r0, r4
 80058ca:	f7ff fe56 	bl	800557a <_read>
 80058ce:	4605      	mov	r5, r0
 80058d0:	4620      	mov	r0, r4
 80058d2:	f7ff fee7 	bl	80056a4 <_close>
 80058d6:	4628      	mov	r0, r5
 80058d8:	f7ff fe3a 	bl	8005550 <checkerror>
 80058dc:	e7d0      	b.n	8005880 <_get_semihosting_exts+0x50>
 80058de:	bf00      	nop
 80058e0:	080075bc 	.word	0x080075bc

080058e4 <initialise_semihosting_exts>:
 80058e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058e6:	2100      	movs	r1, #0
 80058e8:	2201      	movs	r2, #1
 80058ea:	4d09      	ldr	r5, [pc, #36]	@ (8005910 <initialise_semihosting_exts+0x2c>)
 80058ec:	4c09      	ldr	r4, [pc, #36]	@ (8005914 <initialise_semihosting_exts+0x30>)
 80058ee:	a801      	add	r0, sp, #4
 80058f0:	6029      	str	r1, [r5, #0]
 80058f2:	6022      	str	r2, [r4, #0]
 80058f4:	f7ff ff9c 	bl	8005830 <_get_semihosting_exts>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	dd07      	ble.n	800590c <initialise_semihosting_exts+0x28>
 80058fc:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005900:	f003 0201 	and.w	r2, r3, #1
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	602a      	str	r2, [r5, #0]
 800590a:	6023      	str	r3, [r4, #0]
 800590c:	b003      	add	sp, #12
 800590e:	bd30      	pop	{r4, r5, pc}
 8005910:	200002d0 	.word	0x200002d0
 8005914:	200002cc 	.word	0x200002cc

08005918 <_has_ext_stdout_stderr>:
 8005918:	b510      	push	{r4, lr}
 800591a:	4c04      	ldr	r4, [pc, #16]	@ (800592c <_has_ext_stdout_stderr+0x14>)
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	da01      	bge.n	8005926 <_has_ext_stdout_stderr+0xe>
 8005922:	f7ff ffdf 	bl	80058e4 <initialise_semihosting_exts>
 8005926:	6820      	ldr	r0, [r4, #0]
 8005928:	bd10      	pop	{r4, pc}
 800592a:	bf00      	nop
 800592c:	200002cc 	.word	0x200002cc

08005930 <initialise_monitor_handles>:
 8005930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005934:	2303      	movs	r3, #3
 8005936:	2400      	movs	r4, #0
 8005938:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 80059dc <initialise_monitor_handles+0xac>
 800593c:	b085      	sub	sp, #20
 800593e:	f8cd 9004 	str.w	r9, [sp, #4]
 8005942:	af01      	add	r7, sp, #4
 8005944:	9303      	str	r3, [sp, #12]
 8005946:	2501      	movs	r5, #1
 8005948:	9402      	str	r4, [sp, #8]
 800594a:	4628      	mov	r0, r5
 800594c:	4639      	mov	r1, r7
 800594e:	beab      	bkpt	0x00ab
 8005950:	4605      	mov	r5, r0
 8005952:	f04f 32ff 	mov.w	r2, #4294967295
 8005956:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80059e0 <initialise_monitor_handles+0xb0>
 800595a:	4623      	mov	r3, r4
 800595c:	4c21      	ldr	r4, [pc, #132]	@ (80059e4 <initialise_monitor_handles+0xb4>)
 800595e:	f8c8 5000 	str.w	r5, [r8]
 8005962:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8005966:	3301      	adds	r3, #1
 8005968:	2b14      	cmp	r3, #20
 800596a:	d1fa      	bne.n	8005962 <initialise_monitor_handles+0x32>
 800596c:	f7ff ffd4 	bl	8005918 <_has_ext_stdout_stderr>
 8005970:	4d1d      	ldr	r5, [pc, #116]	@ (80059e8 <initialise_monitor_handles+0xb8>)
 8005972:	b1d0      	cbz	r0, 80059aa <initialise_monitor_handles+0x7a>
 8005974:	f04f 0a03 	mov.w	sl, #3
 8005978:	2304      	movs	r3, #4
 800597a:	f8cd 9004 	str.w	r9, [sp, #4]
 800597e:	2601      	movs	r6, #1
 8005980:	f8cd a00c 	str.w	sl, [sp, #12]
 8005984:	9302      	str	r3, [sp, #8]
 8005986:	4630      	mov	r0, r6
 8005988:	4639      	mov	r1, r7
 800598a:	beab      	bkpt	0x00ab
 800598c:	4683      	mov	fp, r0
 800598e:	4b17      	ldr	r3, [pc, #92]	@ (80059ec <initialise_monitor_handles+0xbc>)
 8005990:	f8cd 9004 	str.w	r9, [sp, #4]
 8005994:	f8c3 b000 	str.w	fp, [r3]
 8005998:	2308      	movs	r3, #8
 800599a:	f8cd a00c 	str.w	sl, [sp, #12]
 800599e:	9302      	str	r3, [sp, #8]
 80059a0:	4630      	mov	r0, r6
 80059a2:	4639      	mov	r1, r7
 80059a4:	beab      	bkpt	0x00ab
 80059a6:	4606      	mov	r6, r0
 80059a8:	602e      	str	r6, [r5, #0]
 80059aa:	2600      	movs	r6, #0
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	6066      	str	r6, [r4, #4]
 80059b0:	3301      	adds	r3, #1
 80059b2:	bf02      	ittt	eq
 80059b4:	4b0d      	ldreq	r3, [pc, #52]	@ (80059ec <initialise_monitor_handles+0xbc>)
 80059b6:	681b      	ldreq	r3, [r3, #0]
 80059b8:	602b      	streq	r3, [r5, #0]
 80059ba:	f8d8 3000 	ldr.w	r3, [r8]
 80059be:	6023      	str	r3, [r4, #0]
 80059c0:	f7ff ffaa 	bl	8005918 <_has_ext_stdout_stderr>
 80059c4:	b130      	cbz	r0, 80059d4 <initialise_monitor_handles+0xa4>
 80059c6:	4b09      	ldr	r3, [pc, #36]	@ (80059ec <initialise_monitor_handles+0xbc>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80059ce:	682b      	ldr	r3, [r5, #0]
 80059d0:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80059d4:	b005      	add	sp, #20
 80059d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059da:	bf00      	nop
 80059dc:	080075d2 	.word	0x080075d2
 80059e0:	20000574 	.word	0x20000574
 80059e4:	20000578 	.word	0x20000578
 80059e8:	2000056c 	.word	0x2000056c
 80059ec:	20000570 	.word	0x20000570

080059f0 <_isatty>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	f7ff fd85 	bl	8005500 <findslot>
 80059f6:	2409      	movs	r4, #9
 80059f8:	4605      	mov	r5, r0
 80059fa:	b920      	cbnz	r0, 8005a06 <_isatty+0x16>
 80059fc:	f000 fb14 	bl	8006028 <__errno>
 8005a00:	6004      	str	r4, [r0, #0]
 8005a02:	2000      	movs	r0, #0
 8005a04:	bd70      	pop	{r4, r5, r6, pc}
 8005a06:	4620      	mov	r0, r4
 8005a08:	4629      	mov	r1, r5
 8005a0a:	beab      	bkpt	0x00ab
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	2c01      	cmp	r4, #1
 8005a10:	4620      	mov	r0, r4
 8005a12:	d0f7      	beq.n	8005a04 <_isatty+0x14>
 8005a14:	f000 fb08 	bl	8006028 <__errno>
 8005a18:	2513      	movs	r5, #19
 8005a1a:	4604      	mov	r4, r0
 8005a1c:	2600      	movs	r6, #0
 8005a1e:	4628      	mov	r0, r5
 8005a20:	4631      	mov	r1, r6
 8005a22:	beab      	bkpt	0x00ab
 8005a24:	4605      	mov	r5, r0
 8005a26:	6025      	str	r5, [r4, #0]
 8005a28:	e7eb      	b.n	8005a02 <_isatty+0x12>

08005a2a <atoi>:
 8005a2a:	220a      	movs	r2, #10
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	f000 b87b 	b.w	8005b28 <strtol>
	...

08005a34 <_strtol_l.constprop.0>:
 8005a34:	2b24      	cmp	r3, #36	@ 0x24
 8005a36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3a:	4686      	mov	lr, r0
 8005a3c:	4690      	mov	r8, r2
 8005a3e:	d801      	bhi.n	8005a44 <_strtol_l.constprop.0+0x10>
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d106      	bne.n	8005a52 <_strtol_l.constprop.0+0x1e>
 8005a44:	f000 faf0 	bl	8006028 <__errno>
 8005a48:	2316      	movs	r3, #22
 8005a4a:	6003      	str	r3, [r0, #0]
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a52:	460d      	mov	r5, r1
 8005a54:	4833      	ldr	r0, [pc, #204]	@ (8005b24 <_strtol_l.constprop.0+0xf0>)
 8005a56:	462a      	mov	r2, r5
 8005a58:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005a5c:	5d06      	ldrb	r6, [r0, r4]
 8005a5e:	f016 0608 	ands.w	r6, r6, #8
 8005a62:	d1f8      	bne.n	8005a56 <_strtol_l.constprop.0+0x22>
 8005a64:	2c2d      	cmp	r4, #45	@ 0x2d
 8005a66:	d12d      	bne.n	8005ac4 <_strtol_l.constprop.0+0x90>
 8005a68:	2601      	movs	r6, #1
 8005a6a:	782c      	ldrb	r4, [r5, #0]
 8005a6c:	1c95      	adds	r5, r2, #2
 8005a6e:	f033 0210 	bics.w	r2, r3, #16
 8005a72:	d109      	bne.n	8005a88 <_strtol_l.constprop.0+0x54>
 8005a74:	2c30      	cmp	r4, #48	@ 0x30
 8005a76:	d12a      	bne.n	8005ace <_strtol_l.constprop.0+0x9a>
 8005a78:	782a      	ldrb	r2, [r5, #0]
 8005a7a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a7e:	2a58      	cmp	r2, #88	@ 0x58
 8005a80:	d125      	bne.n	8005ace <_strtol_l.constprop.0+0x9a>
 8005a82:	2310      	movs	r3, #16
 8005a84:	786c      	ldrb	r4, [r5, #1]
 8005a86:	3502      	adds	r5, #2
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005a8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a92:	fbbc f9f3 	udiv	r9, ip, r3
 8005a96:	4610      	mov	r0, r2
 8005a98:	fb03 ca19 	mls	sl, r3, r9, ip
 8005a9c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005aa0:	2f09      	cmp	r7, #9
 8005aa2:	d81b      	bhi.n	8005adc <_strtol_l.constprop.0+0xa8>
 8005aa4:	463c      	mov	r4, r7
 8005aa6:	42a3      	cmp	r3, r4
 8005aa8:	dd27      	ble.n	8005afa <_strtol_l.constprop.0+0xc6>
 8005aaa:	1c57      	adds	r7, r2, #1
 8005aac:	d007      	beq.n	8005abe <_strtol_l.constprop.0+0x8a>
 8005aae:	4581      	cmp	r9, r0
 8005ab0:	d320      	bcc.n	8005af4 <_strtol_l.constprop.0+0xc0>
 8005ab2:	d101      	bne.n	8005ab8 <_strtol_l.constprop.0+0x84>
 8005ab4:	45a2      	cmp	sl, r4
 8005ab6:	db1d      	blt.n	8005af4 <_strtol_l.constprop.0+0xc0>
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fb00 4003 	mla	r0, r0, r3, r4
 8005abe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ac2:	e7eb      	b.n	8005a9c <_strtol_l.constprop.0+0x68>
 8005ac4:	2c2b      	cmp	r4, #43	@ 0x2b
 8005ac6:	bf04      	itt	eq
 8005ac8:	782c      	ldrbeq	r4, [r5, #0]
 8005aca:	1c95      	addeq	r5, r2, #2
 8005acc:	e7cf      	b.n	8005a6e <_strtol_l.constprop.0+0x3a>
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1da      	bne.n	8005a88 <_strtol_l.constprop.0+0x54>
 8005ad2:	2c30      	cmp	r4, #48	@ 0x30
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2308      	moveq	r3, #8
 8005ad8:	230a      	movne	r3, #10
 8005ada:	e7d5      	b.n	8005a88 <_strtol_l.constprop.0+0x54>
 8005adc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005ae0:	2f19      	cmp	r7, #25
 8005ae2:	d801      	bhi.n	8005ae8 <_strtol_l.constprop.0+0xb4>
 8005ae4:	3c37      	subs	r4, #55	@ 0x37
 8005ae6:	e7de      	b.n	8005aa6 <_strtol_l.constprop.0+0x72>
 8005ae8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005aec:	2f19      	cmp	r7, #25
 8005aee:	d804      	bhi.n	8005afa <_strtol_l.constprop.0+0xc6>
 8005af0:	3c57      	subs	r4, #87	@ 0x57
 8005af2:	e7d8      	b.n	8005aa6 <_strtol_l.constprop.0+0x72>
 8005af4:	f04f 32ff 	mov.w	r2, #4294967295
 8005af8:	e7e1      	b.n	8005abe <_strtol_l.constprop.0+0x8a>
 8005afa:	1c53      	adds	r3, r2, #1
 8005afc:	d108      	bne.n	8005b10 <_strtol_l.constprop.0+0xdc>
 8005afe:	2322      	movs	r3, #34	@ 0x22
 8005b00:	4660      	mov	r0, ip
 8005b02:	f8ce 3000 	str.w	r3, [lr]
 8005b06:	f1b8 0f00 	cmp.w	r8, #0
 8005b0a:	d0a0      	beq.n	8005a4e <_strtol_l.constprop.0+0x1a>
 8005b0c:	1e69      	subs	r1, r5, #1
 8005b0e:	e006      	b.n	8005b1e <_strtol_l.constprop.0+0xea>
 8005b10:	b106      	cbz	r6, 8005b14 <_strtol_l.constprop.0+0xe0>
 8005b12:	4240      	negs	r0, r0
 8005b14:	f1b8 0f00 	cmp.w	r8, #0
 8005b18:	d099      	beq.n	8005a4e <_strtol_l.constprop.0+0x1a>
 8005b1a:	2a00      	cmp	r2, #0
 8005b1c:	d1f6      	bne.n	8005b0c <_strtol_l.constprop.0+0xd8>
 8005b1e:	f8c8 1000 	str.w	r1, [r8]
 8005b22:	e794      	b.n	8005a4e <_strtol_l.constprop.0+0x1a>
 8005b24:	080075d7 	.word	0x080075d7

08005b28 <strtol>:
 8005b28:	4613      	mov	r3, r2
 8005b2a:	460a      	mov	r2, r1
 8005b2c:	4601      	mov	r1, r0
 8005b2e:	4802      	ldr	r0, [pc, #8]	@ (8005b38 <strtol+0x10>)
 8005b30:	6800      	ldr	r0, [r0, #0]
 8005b32:	f7ff bf7f 	b.w	8005a34 <_strtol_l.constprop.0>
 8005b36:	bf00      	nop
 8005b38:	200002e0 	.word	0x200002e0

08005b3c <__sflush_r>:
 8005b3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b42:	0716      	lsls	r6, r2, #28
 8005b44:	4605      	mov	r5, r0
 8005b46:	460c      	mov	r4, r1
 8005b48:	d454      	bmi.n	8005bf4 <__sflush_r+0xb8>
 8005b4a:	684b      	ldr	r3, [r1, #4]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	dc02      	bgt.n	8005b56 <__sflush_r+0x1a>
 8005b50:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	dd48      	ble.n	8005be8 <__sflush_r+0xac>
 8005b56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b58:	2e00      	cmp	r6, #0
 8005b5a:	d045      	beq.n	8005be8 <__sflush_r+0xac>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005b62:	682f      	ldr	r7, [r5, #0]
 8005b64:	6a21      	ldr	r1, [r4, #32]
 8005b66:	602b      	str	r3, [r5, #0]
 8005b68:	d030      	beq.n	8005bcc <__sflush_r+0x90>
 8005b6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005b6c:	89a3      	ldrh	r3, [r4, #12]
 8005b6e:	0759      	lsls	r1, r3, #29
 8005b70:	d505      	bpl.n	8005b7e <__sflush_r+0x42>
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	1ad2      	subs	r2, r2, r3
 8005b76:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005b78:	b10b      	cbz	r3, 8005b7e <__sflush_r+0x42>
 8005b7a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005b7c:	1ad2      	subs	r2, r2, r3
 8005b7e:	2300      	movs	r3, #0
 8005b80:	4628      	mov	r0, r5
 8005b82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005b84:	6a21      	ldr	r1, [r4, #32]
 8005b86:	47b0      	blx	r6
 8005b88:	1c43      	adds	r3, r0, #1
 8005b8a:	89a3      	ldrh	r3, [r4, #12]
 8005b8c:	d106      	bne.n	8005b9c <__sflush_r+0x60>
 8005b8e:	6829      	ldr	r1, [r5, #0]
 8005b90:	291d      	cmp	r1, #29
 8005b92:	d82b      	bhi.n	8005bec <__sflush_r+0xb0>
 8005b94:	4a28      	ldr	r2, [pc, #160]	@ (8005c38 <__sflush_r+0xfc>)
 8005b96:	410a      	asrs	r2, r1
 8005b98:	07d6      	lsls	r6, r2, #31
 8005b9a:	d427      	bmi.n	8005bec <__sflush_r+0xb0>
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	6062      	str	r2, [r4, #4]
 8005ba0:	6922      	ldr	r2, [r4, #16]
 8005ba2:	04d9      	lsls	r1, r3, #19
 8005ba4:	6022      	str	r2, [r4, #0]
 8005ba6:	d504      	bpl.n	8005bb2 <__sflush_r+0x76>
 8005ba8:	1c42      	adds	r2, r0, #1
 8005baa:	d101      	bne.n	8005bb0 <__sflush_r+0x74>
 8005bac:	682b      	ldr	r3, [r5, #0]
 8005bae:	b903      	cbnz	r3, 8005bb2 <__sflush_r+0x76>
 8005bb0:	6560      	str	r0, [r4, #84]	@ 0x54
 8005bb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005bb4:	602f      	str	r7, [r5, #0]
 8005bb6:	b1b9      	cbz	r1, 8005be8 <__sflush_r+0xac>
 8005bb8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005bbc:	4299      	cmp	r1, r3
 8005bbe:	d002      	beq.n	8005bc6 <__sflush_r+0x8a>
 8005bc0:	4628      	mov	r0, r5
 8005bc2:	f000 fa5f 	bl	8006084 <_free_r>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	6363      	str	r3, [r4, #52]	@ 0x34
 8005bca:	e00d      	b.n	8005be8 <__sflush_r+0xac>
 8005bcc:	2301      	movs	r3, #1
 8005bce:	4628      	mov	r0, r5
 8005bd0:	47b0      	blx	r6
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	1c50      	adds	r0, r2, #1
 8005bd6:	d1c9      	bne.n	8005b6c <__sflush_r+0x30>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0c6      	beq.n	8005b6c <__sflush_r+0x30>
 8005bde:	2b1d      	cmp	r3, #29
 8005be0:	d001      	beq.n	8005be6 <__sflush_r+0xaa>
 8005be2:	2b16      	cmp	r3, #22
 8005be4:	d11d      	bne.n	8005c22 <__sflush_r+0xe6>
 8005be6:	602f      	str	r7, [r5, #0]
 8005be8:	2000      	movs	r0, #0
 8005bea:	e021      	b.n	8005c30 <__sflush_r+0xf4>
 8005bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005bf0:	b21b      	sxth	r3, r3
 8005bf2:	e01a      	b.n	8005c2a <__sflush_r+0xee>
 8005bf4:	690f      	ldr	r7, [r1, #16]
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	d0f6      	beq.n	8005be8 <__sflush_r+0xac>
 8005bfa:	0793      	lsls	r3, r2, #30
 8005bfc:	bf18      	it	ne
 8005bfe:	2300      	movne	r3, #0
 8005c00:	680e      	ldr	r6, [r1, #0]
 8005c02:	bf08      	it	eq
 8005c04:	694b      	ldreq	r3, [r1, #20]
 8005c06:	1bf6      	subs	r6, r6, r7
 8005c08:	600f      	str	r7, [r1, #0]
 8005c0a:	608b      	str	r3, [r1, #8]
 8005c0c:	2e00      	cmp	r6, #0
 8005c0e:	ddeb      	ble.n	8005be8 <__sflush_r+0xac>
 8005c10:	4633      	mov	r3, r6
 8005c12:	463a      	mov	r2, r7
 8005c14:	4628      	mov	r0, r5
 8005c16:	6a21      	ldr	r1, [r4, #32]
 8005c18:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005c1c:	47e0      	blx	ip
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	dc07      	bgt.n	8005c32 <__sflush_r+0xf6>
 8005c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c2e:	81a3      	strh	r3, [r4, #12]
 8005c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c32:	4407      	add	r7, r0
 8005c34:	1a36      	subs	r6, r6, r0
 8005c36:	e7e9      	b.n	8005c0c <__sflush_r+0xd0>
 8005c38:	dfbffffe 	.word	0xdfbffffe

08005c3c <_fflush_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	690b      	ldr	r3, [r1, #16]
 8005c40:	4605      	mov	r5, r0
 8005c42:	460c      	mov	r4, r1
 8005c44:	b913      	cbnz	r3, 8005c4c <_fflush_r+0x10>
 8005c46:	2500      	movs	r5, #0
 8005c48:	4628      	mov	r0, r5
 8005c4a:	bd38      	pop	{r3, r4, r5, pc}
 8005c4c:	b118      	cbz	r0, 8005c56 <_fflush_r+0x1a>
 8005c4e:	6a03      	ldr	r3, [r0, #32]
 8005c50:	b90b      	cbnz	r3, 8005c56 <_fflush_r+0x1a>
 8005c52:	f000 f8bb 	bl	8005dcc <__sinit>
 8005c56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0f3      	beq.n	8005c46 <_fflush_r+0xa>
 8005c5e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005c60:	07d0      	lsls	r0, r2, #31
 8005c62:	d404      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c64:	0599      	lsls	r1, r3, #22
 8005c66:	d402      	bmi.n	8005c6e <_fflush_r+0x32>
 8005c68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c6a:	f000 fa08 	bl	800607e <__retarget_lock_acquire_recursive>
 8005c6e:	4628      	mov	r0, r5
 8005c70:	4621      	mov	r1, r4
 8005c72:	f7ff ff63 	bl	8005b3c <__sflush_r>
 8005c76:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005c78:	4605      	mov	r5, r0
 8005c7a:	07da      	lsls	r2, r3, #31
 8005c7c:	d4e4      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c7e:	89a3      	ldrh	r3, [r4, #12]
 8005c80:	059b      	lsls	r3, r3, #22
 8005c82:	d4e1      	bmi.n	8005c48 <_fflush_r+0xc>
 8005c84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005c86:	f000 f9fb 	bl	8006080 <__retarget_lock_release_recursive>
 8005c8a:	e7dd      	b.n	8005c48 <_fflush_r+0xc>

08005c8c <fflush>:
 8005c8c:	4601      	mov	r1, r0
 8005c8e:	b920      	cbnz	r0, 8005c9a <fflush+0xe>
 8005c90:	4a04      	ldr	r2, [pc, #16]	@ (8005ca4 <fflush+0x18>)
 8005c92:	4905      	ldr	r1, [pc, #20]	@ (8005ca8 <fflush+0x1c>)
 8005c94:	4805      	ldr	r0, [pc, #20]	@ (8005cac <fflush+0x20>)
 8005c96:	f000 b8b1 	b.w	8005dfc <_fwalk_sglue>
 8005c9a:	4b05      	ldr	r3, [pc, #20]	@ (8005cb0 <fflush+0x24>)
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	f7ff bfcd 	b.w	8005c3c <_fflush_r>
 8005ca2:	bf00      	nop
 8005ca4:	200002d4 	.word	0x200002d4
 8005ca8:	08005c3d 	.word	0x08005c3d
 8005cac:	200002e4 	.word	0x200002e4
 8005cb0:	200002e0 	.word	0x200002e0

08005cb4 <std>:
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	b510      	push	{r4, lr}
 8005cb8:	4604      	mov	r4, r0
 8005cba:	e9c0 3300 	strd	r3, r3, [r0]
 8005cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cc2:	6083      	str	r3, [r0, #8]
 8005cc4:	8181      	strh	r1, [r0, #12]
 8005cc6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cc8:	81c2      	strh	r2, [r0, #14]
 8005cca:	6183      	str	r3, [r0, #24]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	2208      	movs	r2, #8
 8005cd0:	305c      	adds	r0, #92	@ 0x5c
 8005cd2:	f000 f95a 	bl	8005f8a <memset>
 8005cd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d0c <std+0x58>)
 8005cd8:	6224      	str	r4, [r4, #32]
 8005cda:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	@ (8005d10 <std+0x5c>)
 8005cde:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8005d14 <std+0x60>)
 8005ce2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <std+0x64>)
 8005ce6:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ce8:	4b0c      	ldr	r3, [pc, #48]	@ (8005d1c <std+0x68>)
 8005cea:	429c      	cmp	r4, r3
 8005cec:	d006      	beq.n	8005cfc <std+0x48>
 8005cee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005cf2:	4294      	cmp	r4, r2
 8005cf4:	d002      	beq.n	8005cfc <std+0x48>
 8005cf6:	33d0      	adds	r3, #208	@ 0xd0
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	d105      	bne.n	8005d08 <std+0x54>
 8005cfc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d04:	f000 b9ba 	b.w	800607c <__retarget_lock_init_recursive>
 8005d08:	bd10      	pop	{r4, pc}
 8005d0a:	bf00      	nop
 8005d0c:	08005f05 	.word	0x08005f05
 8005d10:	08005f27 	.word	0x08005f27
 8005d14:	08005f5f 	.word	0x08005f5f
 8005d18:	08005f83 	.word	0x08005f83
 8005d1c:	20000618 	.word	0x20000618

08005d20 <stdio_exit_handler>:
 8005d20:	4a02      	ldr	r2, [pc, #8]	@ (8005d2c <stdio_exit_handler+0xc>)
 8005d22:	4903      	ldr	r1, [pc, #12]	@ (8005d30 <stdio_exit_handler+0x10>)
 8005d24:	4803      	ldr	r0, [pc, #12]	@ (8005d34 <stdio_exit_handler+0x14>)
 8005d26:	f000 b869 	b.w	8005dfc <_fwalk_sglue>
 8005d2a:	bf00      	nop
 8005d2c:	200002d4 	.word	0x200002d4
 8005d30:	08005c3d 	.word	0x08005c3d
 8005d34:	200002e4 	.word	0x200002e4

08005d38 <cleanup_stdio>:
 8005d38:	6841      	ldr	r1, [r0, #4]
 8005d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d6c <cleanup_stdio+0x34>)
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	4299      	cmp	r1, r3
 8005d40:	4604      	mov	r4, r0
 8005d42:	d001      	beq.n	8005d48 <cleanup_stdio+0x10>
 8005d44:	f7ff ff7a 	bl	8005c3c <_fflush_r>
 8005d48:	68a1      	ldr	r1, [r4, #8]
 8005d4a:	4b09      	ldr	r3, [pc, #36]	@ (8005d70 <cleanup_stdio+0x38>)
 8005d4c:	4299      	cmp	r1, r3
 8005d4e:	d002      	beq.n	8005d56 <cleanup_stdio+0x1e>
 8005d50:	4620      	mov	r0, r4
 8005d52:	f7ff ff73 	bl	8005c3c <_fflush_r>
 8005d56:	68e1      	ldr	r1, [r4, #12]
 8005d58:	4b06      	ldr	r3, [pc, #24]	@ (8005d74 <cleanup_stdio+0x3c>)
 8005d5a:	4299      	cmp	r1, r3
 8005d5c:	d004      	beq.n	8005d68 <cleanup_stdio+0x30>
 8005d5e:	4620      	mov	r0, r4
 8005d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d64:	f7ff bf6a 	b.w	8005c3c <_fflush_r>
 8005d68:	bd10      	pop	{r4, pc}
 8005d6a:	bf00      	nop
 8005d6c:	20000618 	.word	0x20000618
 8005d70:	20000680 	.word	0x20000680
 8005d74:	200006e8 	.word	0x200006e8

08005d78 <global_stdio_init.part.0>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8005da8 <global_stdio_init.part.0+0x30>)
 8005d7c:	4c0b      	ldr	r4, [pc, #44]	@ (8005dac <global_stdio_init.part.0+0x34>)
 8005d7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005db0 <global_stdio_init.part.0+0x38>)
 8005d80:	4620      	mov	r0, r4
 8005d82:	601a      	str	r2, [r3, #0]
 8005d84:	2104      	movs	r1, #4
 8005d86:	2200      	movs	r2, #0
 8005d88:	f7ff ff94 	bl	8005cb4 <std>
 8005d8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d90:	2201      	movs	r2, #1
 8005d92:	2109      	movs	r1, #9
 8005d94:	f7ff ff8e 	bl	8005cb4 <std>
 8005d98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d9c:	2202      	movs	r2, #2
 8005d9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005da2:	2112      	movs	r1, #18
 8005da4:	f7ff bf86 	b.w	8005cb4 <std>
 8005da8:	20000750 	.word	0x20000750
 8005dac:	20000618 	.word	0x20000618
 8005db0:	08005d21 	.word	0x08005d21

08005db4 <__sfp_lock_acquire>:
 8005db4:	4801      	ldr	r0, [pc, #4]	@ (8005dbc <__sfp_lock_acquire+0x8>)
 8005db6:	f000 b962 	b.w	800607e <__retarget_lock_acquire_recursive>
 8005dba:	bf00      	nop
 8005dbc:	20000759 	.word	0x20000759

08005dc0 <__sfp_lock_release>:
 8005dc0:	4801      	ldr	r0, [pc, #4]	@ (8005dc8 <__sfp_lock_release+0x8>)
 8005dc2:	f000 b95d 	b.w	8006080 <__retarget_lock_release_recursive>
 8005dc6:	bf00      	nop
 8005dc8:	20000759 	.word	0x20000759

08005dcc <__sinit>:
 8005dcc:	b510      	push	{r4, lr}
 8005dce:	4604      	mov	r4, r0
 8005dd0:	f7ff fff0 	bl	8005db4 <__sfp_lock_acquire>
 8005dd4:	6a23      	ldr	r3, [r4, #32]
 8005dd6:	b11b      	cbz	r3, 8005de0 <__sinit+0x14>
 8005dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ddc:	f7ff bff0 	b.w	8005dc0 <__sfp_lock_release>
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <__sinit+0x28>)
 8005de2:	6223      	str	r3, [r4, #32]
 8005de4:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <__sinit+0x2c>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1f5      	bne.n	8005dd8 <__sinit+0xc>
 8005dec:	f7ff ffc4 	bl	8005d78 <global_stdio_init.part.0>
 8005df0:	e7f2      	b.n	8005dd8 <__sinit+0xc>
 8005df2:	bf00      	nop
 8005df4:	08005d39 	.word	0x08005d39
 8005df8:	20000750 	.word	0x20000750

08005dfc <_fwalk_sglue>:
 8005dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e00:	4607      	mov	r7, r0
 8005e02:	4688      	mov	r8, r1
 8005e04:	4614      	mov	r4, r2
 8005e06:	2600      	movs	r6, #0
 8005e08:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e0c:	f1b9 0901 	subs.w	r9, r9, #1
 8005e10:	d505      	bpl.n	8005e1e <_fwalk_sglue+0x22>
 8005e12:	6824      	ldr	r4, [r4, #0]
 8005e14:	2c00      	cmp	r4, #0
 8005e16:	d1f7      	bne.n	8005e08 <_fwalk_sglue+0xc>
 8005e18:	4630      	mov	r0, r6
 8005e1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	2b01      	cmp	r3, #1
 8005e22:	d907      	bls.n	8005e34 <_fwalk_sglue+0x38>
 8005e24:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	d003      	beq.n	8005e34 <_fwalk_sglue+0x38>
 8005e2c:	4629      	mov	r1, r5
 8005e2e:	4638      	mov	r0, r7
 8005e30:	47c0      	blx	r8
 8005e32:	4306      	orrs	r6, r0
 8005e34:	3568      	adds	r5, #104	@ 0x68
 8005e36:	e7e9      	b.n	8005e0c <_fwalk_sglue+0x10>

08005e38 <iprintf>:
 8005e38:	b40f      	push	{r0, r1, r2, r3}
 8005e3a:	b507      	push	{r0, r1, r2, lr}
 8005e3c:	4906      	ldr	r1, [pc, #24]	@ (8005e58 <iprintf+0x20>)
 8005e3e:	ab04      	add	r3, sp, #16
 8005e40:	6808      	ldr	r0, [r1, #0]
 8005e42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e46:	6881      	ldr	r1, [r0, #8]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	f000 fb91 	bl	8006570 <_vfiprintf_r>
 8005e4e:	b003      	add	sp, #12
 8005e50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e54:	b004      	add	sp, #16
 8005e56:	4770      	bx	lr
 8005e58:	200002e0 	.word	0x200002e0

08005e5c <sniprintf>:
 8005e5c:	b40c      	push	{r2, r3}
 8005e5e:	b530      	push	{r4, r5, lr}
 8005e60:	4b17      	ldr	r3, [pc, #92]	@ (8005ec0 <sniprintf+0x64>)
 8005e62:	1e0c      	subs	r4, r1, #0
 8005e64:	681d      	ldr	r5, [r3, #0]
 8005e66:	b09d      	sub	sp, #116	@ 0x74
 8005e68:	da08      	bge.n	8005e7c <sniprintf+0x20>
 8005e6a:	238b      	movs	r3, #139	@ 0x8b
 8005e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e70:	602b      	str	r3, [r5, #0]
 8005e72:	b01d      	add	sp, #116	@ 0x74
 8005e74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e78:	b002      	add	sp, #8
 8005e7a:	4770      	bx	lr
 8005e7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e80:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e84:	bf0c      	ite	eq
 8005e86:	4623      	moveq	r3, r4
 8005e88:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e8c:	9304      	str	r3, [sp, #16]
 8005e8e:	9307      	str	r3, [sp, #28]
 8005e90:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e94:	9002      	str	r0, [sp, #8]
 8005e96:	9006      	str	r0, [sp, #24]
 8005e98:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e9c:	4628      	mov	r0, r5
 8005e9e:	ab21      	add	r3, sp, #132	@ 0x84
 8005ea0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005ea2:	a902      	add	r1, sp, #8
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	f000 fa3f 	bl	8006328 <_svfiprintf_r>
 8005eaa:	1c43      	adds	r3, r0, #1
 8005eac:	bfbc      	itt	lt
 8005eae:	238b      	movlt	r3, #139	@ 0x8b
 8005eb0:	602b      	strlt	r3, [r5, #0]
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	d0dd      	beq.n	8005e72 <sniprintf+0x16>
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	9b02      	ldr	r3, [sp, #8]
 8005eba:	701a      	strb	r2, [r3, #0]
 8005ebc:	e7d9      	b.n	8005e72 <sniprintf+0x16>
 8005ebe:	bf00      	nop
 8005ec0:	200002e0 	.word	0x200002e0

08005ec4 <siprintf>:
 8005ec4:	b40e      	push	{r1, r2, r3}
 8005ec6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005eca:	b500      	push	{lr}
 8005ecc:	b09c      	sub	sp, #112	@ 0x70
 8005ece:	ab1d      	add	r3, sp, #116	@ 0x74
 8005ed0:	9002      	str	r0, [sp, #8]
 8005ed2:	9006      	str	r0, [sp, #24]
 8005ed4:	9107      	str	r1, [sp, #28]
 8005ed6:	9104      	str	r1, [sp, #16]
 8005ed8:	4808      	ldr	r0, [pc, #32]	@ (8005efc <siprintf+0x38>)
 8005eda:	4909      	ldr	r1, [pc, #36]	@ (8005f00 <siprintf+0x3c>)
 8005edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ee0:	9105      	str	r1, [sp, #20]
 8005ee2:	6800      	ldr	r0, [r0, #0]
 8005ee4:	a902      	add	r1, sp, #8
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	f000 fa1e 	bl	8006328 <_svfiprintf_r>
 8005eec:	2200      	movs	r2, #0
 8005eee:	9b02      	ldr	r3, [sp, #8]
 8005ef0:	701a      	strb	r2, [r3, #0]
 8005ef2:	b01c      	add	sp, #112	@ 0x70
 8005ef4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ef8:	b003      	add	sp, #12
 8005efa:	4770      	bx	lr
 8005efc:	200002e0 	.word	0x200002e0
 8005f00:	ffff0208 	.word	0xffff0208

08005f04 <__sread>:
 8005f04:	b510      	push	{r4, lr}
 8005f06:	460c      	mov	r4, r1
 8005f08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0c:	f000 f868 	bl	8005fe0 <_read_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	bfab      	itete	ge
 8005f14:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005f16:	89a3      	ldrhlt	r3, [r4, #12]
 8005f18:	181b      	addge	r3, r3, r0
 8005f1a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005f1e:	bfac      	ite	ge
 8005f20:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005f22:	81a3      	strhlt	r3, [r4, #12]
 8005f24:	bd10      	pop	{r4, pc}

08005f26 <__swrite>:
 8005f26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f2a:	461f      	mov	r7, r3
 8005f2c:	898b      	ldrh	r3, [r1, #12]
 8005f2e:	4605      	mov	r5, r0
 8005f30:	05db      	lsls	r3, r3, #23
 8005f32:	460c      	mov	r4, r1
 8005f34:	4616      	mov	r6, r2
 8005f36:	d505      	bpl.n	8005f44 <__swrite+0x1e>
 8005f38:	2302      	movs	r3, #2
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f40:	f000 f83c 	bl	8005fbc <_lseek_r>
 8005f44:	89a3      	ldrh	r3, [r4, #12]
 8005f46:	4632      	mov	r2, r6
 8005f48:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f4c:	81a3      	strh	r3, [r4, #12]
 8005f4e:	4628      	mov	r0, r5
 8005f50:	463b      	mov	r3, r7
 8005f52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005f5a:	f000 b853 	b.w	8006004 <_write_r>

08005f5e <__sseek>:
 8005f5e:	b510      	push	{r4, lr}
 8005f60:	460c      	mov	r4, r1
 8005f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f66:	f000 f829 	bl	8005fbc <_lseek_r>
 8005f6a:	1c43      	adds	r3, r0, #1
 8005f6c:	89a3      	ldrh	r3, [r4, #12]
 8005f6e:	bf15      	itete	ne
 8005f70:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005f72:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005f76:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005f7a:	81a3      	strheq	r3, [r4, #12]
 8005f7c:	bf18      	it	ne
 8005f7e:	81a3      	strhne	r3, [r4, #12]
 8005f80:	bd10      	pop	{r4, pc}

08005f82 <__sclose>:
 8005f82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f86:	f000 b809 	b.w	8005f9c <_close_r>

08005f8a <memset>:
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	4402      	add	r2, r0
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d100      	bne.n	8005f94 <memset+0xa>
 8005f92:	4770      	bx	lr
 8005f94:	f803 1b01 	strb.w	r1, [r3], #1
 8005f98:	e7f9      	b.n	8005f8e <memset+0x4>
	...

08005f9c <_close_r>:
 8005f9c:	b538      	push	{r3, r4, r5, lr}
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	4d05      	ldr	r5, [pc, #20]	@ (8005fb8 <_close_r+0x1c>)
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4608      	mov	r0, r1
 8005fa6:	602b      	str	r3, [r5, #0]
 8005fa8:	f7ff fb7c 	bl	80056a4 <_close>
 8005fac:	1c43      	adds	r3, r0, #1
 8005fae:	d102      	bne.n	8005fb6 <_close_r+0x1a>
 8005fb0:	682b      	ldr	r3, [r5, #0]
 8005fb2:	b103      	cbz	r3, 8005fb6 <_close_r+0x1a>
 8005fb4:	6023      	str	r3, [r4, #0]
 8005fb6:	bd38      	pop	{r3, r4, r5, pc}
 8005fb8:	20000754 	.word	0x20000754

08005fbc <_lseek_r>:
 8005fbc:	b538      	push	{r3, r4, r5, lr}
 8005fbe:	4604      	mov	r4, r0
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	4d05      	ldr	r5, [pc, #20]	@ (8005fdc <_lseek_r+0x20>)
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	461a      	mov	r2, r3
 8005fcc:	f7ff fb2b 	bl	8005626 <_lseek>
 8005fd0:	1c43      	adds	r3, r0, #1
 8005fd2:	d102      	bne.n	8005fda <_lseek_r+0x1e>
 8005fd4:	682b      	ldr	r3, [r5, #0]
 8005fd6:	b103      	cbz	r3, 8005fda <_lseek_r+0x1e>
 8005fd8:	6023      	str	r3, [r4, #0]
 8005fda:	bd38      	pop	{r3, r4, r5, pc}
 8005fdc:	20000754 	.word	0x20000754

08005fe0 <_read_r>:
 8005fe0:	b538      	push	{r3, r4, r5, lr}
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	4608      	mov	r0, r1
 8005fe6:	4611      	mov	r1, r2
 8005fe8:	2200      	movs	r2, #0
 8005fea:	4d05      	ldr	r5, [pc, #20]	@ (8006000 <_read_r+0x20>)
 8005fec:	602a      	str	r2, [r5, #0]
 8005fee:	461a      	mov	r2, r3
 8005ff0:	f7ff fac3 	bl	800557a <_read>
 8005ff4:	1c43      	adds	r3, r0, #1
 8005ff6:	d102      	bne.n	8005ffe <_read_r+0x1e>
 8005ff8:	682b      	ldr	r3, [r5, #0]
 8005ffa:	b103      	cbz	r3, 8005ffe <_read_r+0x1e>
 8005ffc:	6023      	str	r3, [r4, #0]
 8005ffe:	bd38      	pop	{r3, r4, r5, pc}
 8006000:	20000754 	.word	0x20000754

08006004 <_write_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4604      	mov	r4, r0
 8006008:	4608      	mov	r0, r1
 800600a:	4611      	mov	r1, r2
 800600c:	2200      	movs	r2, #0
 800600e:	4d05      	ldr	r5, [pc, #20]	@ (8006024 <_write_r+0x20>)
 8006010:	602a      	str	r2, [r5, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	f7ff fb19 	bl	800564a <_write>
 8006018:	1c43      	adds	r3, r0, #1
 800601a:	d102      	bne.n	8006022 <_write_r+0x1e>
 800601c:	682b      	ldr	r3, [r5, #0]
 800601e:	b103      	cbz	r3, 8006022 <_write_r+0x1e>
 8006020:	6023      	str	r3, [r4, #0]
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	20000754 	.word	0x20000754

08006028 <__errno>:
 8006028:	4b01      	ldr	r3, [pc, #4]	@ (8006030 <__errno+0x8>)
 800602a:	6818      	ldr	r0, [r3, #0]
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	200002e0 	.word	0x200002e0

08006034 <__libc_init_array>:
 8006034:	b570      	push	{r4, r5, r6, lr}
 8006036:	2600      	movs	r6, #0
 8006038:	4d0c      	ldr	r5, [pc, #48]	@ (800606c <__libc_init_array+0x38>)
 800603a:	4c0d      	ldr	r4, [pc, #52]	@ (8006070 <__libc_init_array+0x3c>)
 800603c:	1b64      	subs	r4, r4, r5
 800603e:	10a4      	asrs	r4, r4, #2
 8006040:	42a6      	cmp	r6, r4
 8006042:	d109      	bne.n	8006058 <__libc_init_array+0x24>
 8006044:	f000 fed2 	bl	8006dec <_init>
 8006048:	2600      	movs	r6, #0
 800604a:	4d0a      	ldr	r5, [pc, #40]	@ (8006074 <__libc_init_array+0x40>)
 800604c:	4c0a      	ldr	r4, [pc, #40]	@ (8006078 <__libc_init_array+0x44>)
 800604e:	1b64      	subs	r4, r4, r5
 8006050:	10a4      	asrs	r4, r4, #2
 8006052:	42a6      	cmp	r6, r4
 8006054:	d105      	bne.n	8006062 <__libc_init_array+0x2e>
 8006056:	bd70      	pop	{r4, r5, r6, pc}
 8006058:	f855 3b04 	ldr.w	r3, [r5], #4
 800605c:	4798      	blx	r3
 800605e:	3601      	adds	r6, #1
 8006060:	e7ee      	b.n	8006040 <__libc_init_array+0xc>
 8006062:	f855 3b04 	ldr.w	r3, [r5], #4
 8006066:	4798      	blx	r3
 8006068:	3601      	adds	r6, #1
 800606a:	e7f2      	b.n	8006052 <__libc_init_array+0x1e>
 800606c:	08007714 	.word	0x08007714
 8006070:	08007714 	.word	0x08007714
 8006074:	08007714 	.word	0x08007714
 8006078:	08007718 	.word	0x08007718

0800607c <__retarget_lock_init_recursive>:
 800607c:	4770      	bx	lr

0800607e <__retarget_lock_acquire_recursive>:
 800607e:	4770      	bx	lr

08006080 <__retarget_lock_release_recursive>:
 8006080:	4770      	bx	lr
	...

08006084 <_free_r>:
 8006084:	b538      	push	{r3, r4, r5, lr}
 8006086:	4605      	mov	r5, r0
 8006088:	2900      	cmp	r1, #0
 800608a:	d040      	beq.n	800610e <_free_r+0x8a>
 800608c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006090:	1f0c      	subs	r4, r1, #4
 8006092:	2b00      	cmp	r3, #0
 8006094:	bfb8      	it	lt
 8006096:	18e4      	addlt	r4, r4, r3
 8006098:	f000 f8de 	bl	8006258 <__malloc_lock>
 800609c:	4a1c      	ldr	r2, [pc, #112]	@ (8006110 <_free_r+0x8c>)
 800609e:	6813      	ldr	r3, [r2, #0]
 80060a0:	b933      	cbnz	r3, 80060b0 <_free_r+0x2c>
 80060a2:	6063      	str	r3, [r4, #4]
 80060a4:	6014      	str	r4, [r2, #0]
 80060a6:	4628      	mov	r0, r5
 80060a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060ac:	f000 b8da 	b.w	8006264 <__malloc_unlock>
 80060b0:	42a3      	cmp	r3, r4
 80060b2:	d908      	bls.n	80060c6 <_free_r+0x42>
 80060b4:	6820      	ldr	r0, [r4, #0]
 80060b6:	1821      	adds	r1, r4, r0
 80060b8:	428b      	cmp	r3, r1
 80060ba:	bf01      	itttt	eq
 80060bc:	6819      	ldreq	r1, [r3, #0]
 80060be:	685b      	ldreq	r3, [r3, #4]
 80060c0:	1809      	addeq	r1, r1, r0
 80060c2:	6021      	streq	r1, [r4, #0]
 80060c4:	e7ed      	b.n	80060a2 <_free_r+0x1e>
 80060c6:	461a      	mov	r2, r3
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	b10b      	cbz	r3, 80060d0 <_free_r+0x4c>
 80060cc:	42a3      	cmp	r3, r4
 80060ce:	d9fa      	bls.n	80060c6 <_free_r+0x42>
 80060d0:	6811      	ldr	r1, [r2, #0]
 80060d2:	1850      	adds	r0, r2, r1
 80060d4:	42a0      	cmp	r0, r4
 80060d6:	d10b      	bne.n	80060f0 <_free_r+0x6c>
 80060d8:	6820      	ldr	r0, [r4, #0]
 80060da:	4401      	add	r1, r0
 80060dc:	1850      	adds	r0, r2, r1
 80060de:	4283      	cmp	r3, r0
 80060e0:	6011      	str	r1, [r2, #0]
 80060e2:	d1e0      	bne.n	80060a6 <_free_r+0x22>
 80060e4:	6818      	ldr	r0, [r3, #0]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	4408      	add	r0, r1
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	6053      	str	r3, [r2, #4]
 80060ee:	e7da      	b.n	80060a6 <_free_r+0x22>
 80060f0:	d902      	bls.n	80060f8 <_free_r+0x74>
 80060f2:	230c      	movs	r3, #12
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	e7d6      	b.n	80060a6 <_free_r+0x22>
 80060f8:	6820      	ldr	r0, [r4, #0]
 80060fa:	1821      	adds	r1, r4, r0
 80060fc:	428b      	cmp	r3, r1
 80060fe:	bf01      	itttt	eq
 8006100:	6819      	ldreq	r1, [r3, #0]
 8006102:	685b      	ldreq	r3, [r3, #4]
 8006104:	1809      	addeq	r1, r1, r0
 8006106:	6021      	streq	r1, [r4, #0]
 8006108:	6063      	str	r3, [r4, #4]
 800610a:	6054      	str	r4, [r2, #4]
 800610c:	e7cb      	b.n	80060a6 <_free_r+0x22>
 800610e:	bd38      	pop	{r3, r4, r5, pc}
 8006110:	20000760 	.word	0x20000760

08006114 <sbrk_aligned>:
 8006114:	b570      	push	{r4, r5, r6, lr}
 8006116:	4e0f      	ldr	r6, [pc, #60]	@ (8006154 <sbrk_aligned+0x40>)
 8006118:	460c      	mov	r4, r1
 800611a:	6831      	ldr	r1, [r6, #0]
 800611c:	4605      	mov	r5, r0
 800611e:	b911      	cbnz	r1, 8006126 <sbrk_aligned+0x12>
 8006120:	f000 fd7e 	bl	8006c20 <_sbrk_r>
 8006124:	6030      	str	r0, [r6, #0]
 8006126:	4621      	mov	r1, r4
 8006128:	4628      	mov	r0, r5
 800612a:	f000 fd79 	bl	8006c20 <_sbrk_r>
 800612e:	1c43      	adds	r3, r0, #1
 8006130:	d103      	bne.n	800613a <sbrk_aligned+0x26>
 8006132:	f04f 34ff 	mov.w	r4, #4294967295
 8006136:	4620      	mov	r0, r4
 8006138:	bd70      	pop	{r4, r5, r6, pc}
 800613a:	1cc4      	adds	r4, r0, #3
 800613c:	f024 0403 	bic.w	r4, r4, #3
 8006140:	42a0      	cmp	r0, r4
 8006142:	d0f8      	beq.n	8006136 <sbrk_aligned+0x22>
 8006144:	1a21      	subs	r1, r4, r0
 8006146:	4628      	mov	r0, r5
 8006148:	f000 fd6a 	bl	8006c20 <_sbrk_r>
 800614c:	3001      	adds	r0, #1
 800614e:	d1f2      	bne.n	8006136 <sbrk_aligned+0x22>
 8006150:	e7ef      	b.n	8006132 <sbrk_aligned+0x1e>
 8006152:	bf00      	nop
 8006154:	2000075c 	.word	0x2000075c

08006158 <_malloc_r>:
 8006158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	f025 0503 	bic.w	r5, r5, #3
 8006162:	3508      	adds	r5, #8
 8006164:	2d0c      	cmp	r5, #12
 8006166:	bf38      	it	cc
 8006168:	250c      	movcc	r5, #12
 800616a:	2d00      	cmp	r5, #0
 800616c:	4606      	mov	r6, r0
 800616e:	db01      	blt.n	8006174 <_malloc_r+0x1c>
 8006170:	42a9      	cmp	r1, r5
 8006172:	d904      	bls.n	800617e <_malloc_r+0x26>
 8006174:	230c      	movs	r3, #12
 8006176:	6033      	str	r3, [r6, #0]
 8006178:	2000      	movs	r0, #0
 800617a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800617e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006254 <_malloc_r+0xfc>
 8006182:	f000 f869 	bl	8006258 <__malloc_lock>
 8006186:	f8d8 3000 	ldr.w	r3, [r8]
 800618a:	461c      	mov	r4, r3
 800618c:	bb44      	cbnz	r4, 80061e0 <_malloc_r+0x88>
 800618e:	4629      	mov	r1, r5
 8006190:	4630      	mov	r0, r6
 8006192:	f7ff ffbf 	bl	8006114 <sbrk_aligned>
 8006196:	1c43      	adds	r3, r0, #1
 8006198:	4604      	mov	r4, r0
 800619a:	d158      	bne.n	800624e <_malloc_r+0xf6>
 800619c:	f8d8 4000 	ldr.w	r4, [r8]
 80061a0:	4627      	mov	r7, r4
 80061a2:	2f00      	cmp	r7, #0
 80061a4:	d143      	bne.n	800622e <_malloc_r+0xd6>
 80061a6:	2c00      	cmp	r4, #0
 80061a8:	d04b      	beq.n	8006242 <_malloc_r+0xea>
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	4639      	mov	r1, r7
 80061ae:	4630      	mov	r0, r6
 80061b0:	eb04 0903 	add.w	r9, r4, r3
 80061b4:	f000 fd34 	bl	8006c20 <_sbrk_r>
 80061b8:	4581      	cmp	r9, r0
 80061ba:	d142      	bne.n	8006242 <_malloc_r+0xea>
 80061bc:	6821      	ldr	r1, [r4, #0]
 80061be:	4630      	mov	r0, r6
 80061c0:	1a6d      	subs	r5, r5, r1
 80061c2:	4629      	mov	r1, r5
 80061c4:	f7ff ffa6 	bl	8006114 <sbrk_aligned>
 80061c8:	3001      	adds	r0, #1
 80061ca:	d03a      	beq.n	8006242 <_malloc_r+0xea>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	442b      	add	r3, r5
 80061d0:	6023      	str	r3, [r4, #0]
 80061d2:	f8d8 3000 	ldr.w	r3, [r8]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	bb62      	cbnz	r2, 8006234 <_malloc_r+0xdc>
 80061da:	f8c8 7000 	str.w	r7, [r8]
 80061de:	e00f      	b.n	8006200 <_malloc_r+0xa8>
 80061e0:	6822      	ldr	r2, [r4, #0]
 80061e2:	1b52      	subs	r2, r2, r5
 80061e4:	d420      	bmi.n	8006228 <_malloc_r+0xd0>
 80061e6:	2a0b      	cmp	r2, #11
 80061e8:	d917      	bls.n	800621a <_malloc_r+0xc2>
 80061ea:	1961      	adds	r1, r4, r5
 80061ec:	42a3      	cmp	r3, r4
 80061ee:	6025      	str	r5, [r4, #0]
 80061f0:	bf18      	it	ne
 80061f2:	6059      	strne	r1, [r3, #4]
 80061f4:	6863      	ldr	r3, [r4, #4]
 80061f6:	bf08      	it	eq
 80061f8:	f8c8 1000 	streq.w	r1, [r8]
 80061fc:	5162      	str	r2, [r4, r5]
 80061fe:	604b      	str	r3, [r1, #4]
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f82f 	bl	8006264 <__malloc_unlock>
 8006206:	f104 000b 	add.w	r0, r4, #11
 800620a:	1d23      	adds	r3, r4, #4
 800620c:	f020 0007 	bic.w	r0, r0, #7
 8006210:	1ac2      	subs	r2, r0, r3
 8006212:	bf1c      	itt	ne
 8006214:	1a1b      	subne	r3, r3, r0
 8006216:	50a3      	strne	r3, [r4, r2]
 8006218:	e7af      	b.n	800617a <_malloc_r+0x22>
 800621a:	6862      	ldr	r2, [r4, #4]
 800621c:	42a3      	cmp	r3, r4
 800621e:	bf0c      	ite	eq
 8006220:	f8c8 2000 	streq.w	r2, [r8]
 8006224:	605a      	strne	r2, [r3, #4]
 8006226:	e7eb      	b.n	8006200 <_malloc_r+0xa8>
 8006228:	4623      	mov	r3, r4
 800622a:	6864      	ldr	r4, [r4, #4]
 800622c:	e7ae      	b.n	800618c <_malloc_r+0x34>
 800622e:	463c      	mov	r4, r7
 8006230:	687f      	ldr	r7, [r7, #4]
 8006232:	e7b6      	b.n	80061a2 <_malloc_r+0x4a>
 8006234:	461a      	mov	r2, r3
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	42a3      	cmp	r3, r4
 800623a:	d1fb      	bne.n	8006234 <_malloc_r+0xdc>
 800623c:	2300      	movs	r3, #0
 800623e:	6053      	str	r3, [r2, #4]
 8006240:	e7de      	b.n	8006200 <_malloc_r+0xa8>
 8006242:	230c      	movs	r3, #12
 8006244:	4630      	mov	r0, r6
 8006246:	6033      	str	r3, [r6, #0]
 8006248:	f000 f80c 	bl	8006264 <__malloc_unlock>
 800624c:	e794      	b.n	8006178 <_malloc_r+0x20>
 800624e:	6005      	str	r5, [r0, #0]
 8006250:	e7d6      	b.n	8006200 <_malloc_r+0xa8>
 8006252:	bf00      	nop
 8006254:	20000760 	.word	0x20000760

08006258 <__malloc_lock>:
 8006258:	4801      	ldr	r0, [pc, #4]	@ (8006260 <__malloc_lock+0x8>)
 800625a:	f7ff bf10 	b.w	800607e <__retarget_lock_acquire_recursive>
 800625e:	bf00      	nop
 8006260:	20000758 	.word	0x20000758

08006264 <__malloc_unlock>:
 8006264:	4801      	ldr	r0, [pc, #4]	@ (800626c <__malloc_unlock+0x8>)
 8006266:	f7ff bf0b 	b.w	8006080 <__retarget_lock_release_recursive>
 800626a:	bf00      	nop
 800626c:	20000758 	.word	0x20000758

08006270 <__ssputs_r>:
 8006270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006274:	461f      	mov	r7, r3
 8006276:	688e      	ldr	r6, [r1, #8]
 8006278:	4682      	mov	sl, r0
 800627a:	42be      	cmp	r6, r7
 800627c:	460c      	mov	r4, r1
 800627e:	4690      	mov	r8, r2
 8006280:	680b      	ldr	r3, [r1, #0]
 8006282:	d82d      	bhi.n	80062e0 <__ssputs_r+0x70>
 8006284:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006288:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800628c:	d026      	beq.n	80062dc <__ssputs_r+0x6c>
 800628e:	6965      	ldr	r5, [r4, #20]
 8006290:	6909      	ldr	r1, [r1, #16]
 8006292:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006296:	eba3 0901 	sub.w	r9, r3, r1
 800629a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800629e:	1c7b      	adds	r3, r7, #1
 80062a0:	444b      	add	r3, r9
 80062a2:	106d      	asrs	r5, r5, #1
 80062a4:	429d      	cmp	r5, r3
 80062a6:	bf38      	it	cc
 80062a8:	461d      	movcc	r5, r3
 80062aa:	0553      	lsls	r3, r2, #21
 80062ac:	d527      	bpl.n	80062fe <__ssputs_r+0x8e>
 80062ae:	4629      	mov	r1, r5
 80062b0:	f7ff ff52 	bl	8006158 <_malloc_r>
 80062b4:	4606      	mov	r6, r0
 80062b6:	b360      	cbz	r0, 8006312 <__ssputs_r+0xa2>
 80062b8:	464a      	mov	r2, r9
 80062ba:	6921      	ldr	r1, [r4, #16]
 80062bc:	f000 fcce 	bl	8006c5c <memcpy>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80062c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	6126      	str	r6, [r4, #16]
 80062ce:	444e      	add	r6, r9
 80062d0:	6026      	str	r6, [r4, #0]
 80062d2:	463e      	mov	r6, r7
 80062d4:	6165      	str	r5, [r4, #20]
 80062d6:	eba5 0509 	sub.w	r5, r5, r9
 80062da:	60a5      	str	r5, [r4, #8]
 80062dc:	42be      	cmp	r6, r7
 80062de:	d900      	bls.n	80062e2 <__ssputs_r+0x72>
 80062e0:	463e      	mov	r6, r7
 80062e2:	4632      	mov	r2, r6
 80062e4:	4641      	mov	r1, r8
 80062e6:	6820      	ldr	r0, [r4, #0]
 80062e8:	f000 fc80 	bl	8006bec <memmove>
 80062ec:	2000      	movs	r0, #0
 80062ee:	68a3      	ldr	r3, [r4, #8]
 80062f0:	1b9b      	subs	r3, r3, r6
 80062f2:	60a3      	str	r3, [r4, #8]
 80062f4:	6823      	ldr	r3, [r4, #0]
 80062f6:	4433      	add	r3, r6
 80062f8:	6023      	str	r3, [r4, #0]
 80062fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062fe:	462a      	mov	r2, r5
 8006300:	f000 fcba 	bl	8006c78 <_realloc_r>
 8006304:	4606      	mov	r6, r0
 8006306:	2800      	cmp	r0, #0
 8006308:	d1e0      	bne.n	80062cc <__ssputs_r+0x5c>
 800630a:	4650      	mov	r0, sl
 800630c:	6921      	ldr	r1, [r4, #16]
 800630e:	f7ff feb9 	bl	8006084 <_free_r>
 8006312:	230c      	movs	r3, #12
 8006314:	f8ca 3000 	str.w	r3, [sl]
 8006318:	89a3      	ldrh	r3, [r4, #12]
 800631a:	f04f 30ff 	mov.w	r0, #4294967295
 800631e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006322:	81a3      	strh	r3, [r4, #12]
 8006324:	e7e9      	b.n	80062fa <__ssputs_r+0x8a>
	...

08006328 <_svfiprintf_r>:
 8006328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800632c:	4698      	mov	r8, r3
 800632e:	898b      	ldrh	r3, [r1, #12]
 8006330:	4607      	mov	r7, r0
 8006332:	061b      	lsls	r3, r3, #24
 8006334:	460d      	mov	r5, r1
 8006336:	4614      	mov	r4, r2
 8006338:	b09d      	sub	sp, #116	@ 0x74
 800633a:	d510      	bpl.n	800635e <_svfiprintf_r+0x36>
 800633c:	690b      	ldr	r3, [r1, #16]
 800633e:	b973      	cbnz	r3, 800635e <_svfiprintf_r+0x36>
 8006340:	2140      	movs	r1, #64	@ 0x40
 8006342:	f7ff ff09 	bl	8006158 <_malloc_r>
 8006346:	6028      	str	r0, [r5, #0]
 8006348:	6128      	str	r0, [r5, #16]
 800634a:	b930      	cbnz	r0, 800635a <_svfiprintf_r+0x32>
 800634c:	230c      	movs	r3, #12
 800634e:	603b      	str	r3, [r7, #0]
 8006350:	f04f 30ff 	mov.w	r0, #4294967295
 8006354:	b01d      	add	sp, #116	@ 0x74
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	2340      	movs	r3, #64	@ 0x40
 800635c:	616b      	str	r3, [r5, #20]
 800635e:	2300      	movs	r3, #0
 8006360:	9309      	str	r3, [sp, #36]	@ 0x24
 8006362:	2320      	movs	r3, #32
 8006364:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006368:	2330      	movs	r3, #48	@ 0x30
 800636a:	f04f 0901 	mov.w	r9, #1
 800636e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006372:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800650c <_svfiprintf_r+0x1e4>
 8006376:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800637a:	4623      	mov	r3, r4
 800637c:	469a      	mov	sl, r3
 800637e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006382:	b10a      	cbz	r2, 8006388 <_svfiprintf_r+0x60>
 8006384:	2a25      	cmp	r2, #37	@ 0x25
 8006386:	d1f9      	bne.n	800637c <_svfiprintf_r+0x54>
 8006388:	ebba 0b04 	subs.w	fp, sl, r4
 800638c:	d00b      	beq.n	80063a6 <_svfiprintf_r+0x7e>
 800638e:	465b      	mov	r3, fp
 8006390:	4622      	mov	r2, r4
 8006392:	4629      	mov	r1, r5
 8006394:	4638      	mov	r0, r7
 8006396:	f7ff ff6b 	bl	8006270 <__ssputs_r>
 800639a:	3001      	adds	r0, #1
 800639c:	f000 80a7 	beq.w	80064ee <_svfiprintf_r+0x1c6>
 80063a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063a2:	445a      	add	r2, fp
 80063a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80063a6:	f89a 3000 	ldrb.w	r3, [sl]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	f000 809f 	beq.w	80064ee <_svfiprintf_r+0x1c6>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f04f 32ff 	mov.w	r2, #4294967295
 80063b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063ba:	f10a 0a01 	add.w	sl, sl, #1
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	9307      	str	r3, [sp, #28]
 80063c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80063c8:	4654      	mov	r4, sl
 80063ca:	2205      	movs	r2, #5
 80063cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d0:	484e      	ldr	r0, [pc, #312]	@ (800650c <_svfiprintf_r+0x1e4>)
 80063d2:	f000 fc35 	bl	8006c40 <memchr>
 80063d6:	9a04      	ldr	r2, [sp, #16]
 80063d8:	b9d8      	cbnz	r0, 8006412 <_svfiprintf_r+0xea>
 80063da:	06d0      	lsls	r0, r2, #27
 80063dc:	bf44      	itt	mi
 80063de:	2320      	movmi	r3, #32
 80063e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063e4:	0711      	lsls	r1, r2, #28
 80063e6:	bf44      	itt	mi
 80063e8:	232b      	movmi	r3, #43	@ 0x2b
 80063ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80063ee:	f89a 3000 	ldrb.w	r3, [sl]
 80063f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80063f4:	d015      	beq.n	8006422 <_svfiprintf_r+0xfa>
 80063f6:	4654      	mov	r4, sl
 80063f8:	2000      	movs	r0, #0
 80063fa:	f04f 0c0a 	mov.w	ip, #10
 80063fe:	9a07      	ldr	r2, [sp, #28]
 8006400:	4621      	mov	r1, r4
 8006402:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006406:	3b30      	subs	r3, #48	@ 0x30
 8006408:	2b09      	cmp	r3, #9
 800640a:	d94b      	bls.n	80064a4 <_svfiprintf_r+0x17c>
 800640c:	b1b0      	cbz	r0, 800643c <_svfiprintf_r+0x114>
 800640e:	9207      	str	r2, [sp, #28]
 8006410:	e014      	b.n	800643c <_svfiprintf_r+0x114>
 8006412:	eba0 0308 	sub.w	r3, r0, r8
 8006416:	fa09 f303 	lsl.w	r3, r9, r3
 800641a:	4313      	orrs	r3, r2
 800641c:	46a2      	mov	sl, r4
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	e7d2      	b.n	80063c8 <_svfiprintf_r+0xa0>
 8006422:	9b03      	ldr	r3, [sp, #12]
 8006424:	1d19      	adds	r1, r3, #4
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	9103      	str	r1, [sp, #12]
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfbb      	ittet	lt
 800642e:	425b      	neglt	r3, r3
 8006430:	f042 0202 	orrlt.w	r2, r2, #2
 8006434:	9307      	strge	r3, [sp, #28]
 8006436:	9307      	strlt	r3, [sp, #28]
 8006438:	bfb8      	it	lt
 800643a:	9204      	strlt	r2, [sp, #16]
 800643c:	7823      	ldrb	r3, [r4, #0]
 800643e:	2b2e      	cmp	r3, #46	@ 0x2e
 8006440:	d10a      	bne.n	8006458 <_svfiprintf_r+0x130>
 8006442:	7863      	ldrb	r3, [r4, #1]
 8006444:	2b2a      	cmp	r3, #42	@ 0x2a
 8006446:	d132      	bne.n	80064ae <_svfiprintf_r+0x186>
 8006448:	9b03      	ldr	r3, [sp, #12]
 800644a:	3402      	adds	r4, #2
 800644c:	1d1a      	adds	r2, r3, #4
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	9203      	str	r2, [sp, #12]
 8006452:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006456:	9305      	str	r3, [sp, #20]
 8006458:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8006510 <_svfiprintf_r+0x1e8>
 800645c:	2203      	movs	r2, #3
 800645e:	4650      	mov	r0, sl
 8006460:	7821      	ldrb	r1, [r4, #0]
 8006462:	f000 fbed 	bl	8006c40 <memchr>
 8006466:	b138      	cbz	r0, 8006478 <_svfiprintf_r+0x150>
 8006468:	2240      	movs	r2, #64	@ 0x40
 800646a:	9b04      	ldr	r3, [sp, #16]
 800646c:	eba0 000a 	sub.w	r0, r0, sl
 8006470:	4082      	lsls	r2, r0
 8006472:	4313      	orrs	r3, r2
 8006474:	3401      	adds	r4, #1
 8006476:	9304      	str	r3, [sp, #16]
 8006478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800647c:	2206      	movs	r2, #6
 800647e:	4825      	ldr	r0, [pc, #148]	@ (8006514 <_svfiprintf_r+0x1ec>)
 8006480:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006484:	f000 fbdc 	bl	8006c40 <memchr>
 8006488:	2800      	cmp	r0, #0
 800648a:	d036      	beq.n	80064fa <_svfiprintf_r+0x1d2>
 800648c:	4b22      	ldr	r3, [pc, #136]	@ (8006518 <_svfiprintf_r+0x1f0>)
 800648e:	bb1b      	cbnz	r3, 80064d8 <_svfiprintf_r+0x1b0>
 8006490:	9b03      	ldr	r3, [sp, #12]
 8006492:	3307      	adds	r3, #7
 8006494:	f023 0307 	bic.w	r3, r3, #7
 8006498:	3308      	adds	r3, #8
 800649a:	9303      	str	r3, [sp, #12]
 800649c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800649e:	4433      	add	r3, r6
 80064a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80064a2:	e76a      	b.n	800637a <_svfiprintf_r+0x52>
 80064a4:	460c      	mov	r4, r1
 80064a6:	2001      	movs	r0, #1
 80064a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ac:	e7a8      	b.n	8006400 <_svfiprintf_r+0xd8>
 80064ae:	2300      	movs	r3, #0
 80064b0:	f04f 0c0a 	mov.w	ip, #10
 80064b4:	4619      	mov	r1, r3
 80064b6:	3401      	adds	r4, #1
 80064b8:	9305      	str	r3, [sp, #20]
 80064ba:	4620      	mov	r0, r4
 80064bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064c0:	3a30      	subs	r2, #48	@ 0x30
 80064c2:	2a09      	cmp	r2, #9
 80064c4:	d903      	bls.n	80064ce <_svfiprintf_r+0x1a6>
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d0c6      	beq.n	8006458 <_svfiprintf_r+0x130>
 80064ca:	9105      	str	r1, [sp, #20]
 80064cc:	e7c4      	b.n	8006458 <_svfiprintf_r+0x130>
 80064ce:	4604      	mov	r4, r0
 80064d0:	2301      	movs	r3, #1
 80064d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80064d6:	e7f0      	b.n	80064ba <_svfiprintf_r+0x192>
 80064d8:	ab03      	add	r3, sp, #12
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	462a      	mov	r2, r5
 80064de:	4638      	mov	r0, r7
 80064e0:	4b0e      	ldr	r3, [pc, #56]	@ (800651c <_svfiprintf_r+0x1f4>)
 80064e2:	a904      	add	r1, sp, #16
 80064e4:	f3af 8000 	nop.w
 80064e8:	1c42      	adds	r2, r0, #1
 80064ea:	4606      	mov	r6, r0
 80064ec:	d1d6      	bne.n	800649c <_svfiprintf_r+0x174>
 80064ee:	89ab      	ldrh	r3, [r5, #12]
 80064f0:	065b      	lsls	r3, r3, #25
 80064f2:	f53f af2d 	bmi.w	8006350 <_svfiprintf_r+0x28>
 80064f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80064f8:	e72c      	b.n	8006354 <_svfiprintf_r+0x2c>
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	462a      	mov	r2, r5
 8006500:	4638      	mov	r0, r7
 8006502:	4b06      	ldr	r3, [pc, #24]	@ (800651c <_svfiprintf_r+0x1f4>)
 8006504:	a904      	add	r1, sp, #16
 8006506:	f000 f9bd 	bl	8006884 <_printf_i>
 800650a:	e7ed      	b.n	80064e8 <_svfiprintf_r+0x1c0>
 800650c:	080076d7 	.word	0x080076d7
 8006510:	080076dd 	.word	0x080076dd
 8006514:	080076e1 	.word	0x080076e1
 8006518:	00000000 	.word	0x00000000
 800651c:	08006271 	.word	0x08006271

08006520 <__sfputc_r>:
 8006520:	6893      	ldr	r3, [r2, #8]
 8006522:	b410      	push	{r4}
 8006524:	3b01      	subs	r3, #1
 8006526:	2b00      	cmp	r3, #0
 8006528:	6093      	str	r3, [r2, #8]
 800652a:	da07      	bge.n	800653c <__sfputc_r+0x1c>
 800652c:	6994      	ldr	r4, [r2, #24]
 800652e:	42a3      	cmp	r3, r4
 8006530:	db01      	blt.n	8006536 <__sfputc_r+0x16>
 8006532:	290a      	cmp	r1, #10
 8006534:	d102      	bne.n	800653c <__sfputc_r+0x1c>
 8006536:	bc10      	pop	{r4}
 8006538:	f000 bac4 	b.w	8006ac4 <__swbuf_r>
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	1c58      	adds	r0, r3, #1
 8006540:	6010      	str	r0, [r2, #0]
 8006542:	7019      	strb	r1, [r3, #0]
 8006544:	4608      	mov	r0, r1
 8006546:	bc10      	pop	{r4}
 8006548:	4770      	bx	lr

0800654a <__sfputs_r>:
 800654a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800654c:	4606      	mov	r6, r0
 800654e:	460f      	mov	r7, r1
 8006550:	4614      	mov	r4, r2
 8006552:	18d5      	adds	r5, r2, r3
 8006554:	42ac      	cmp	r4, r5
 8006556:	d101      	bne.n	800655c <__sfputs_r+0x12>
 8006558:	2000      	movs	r0, #0
 800655a:	e007      	b.n	800656c <__sfputs_r+0x22>
 800655c:	463a      	mov	r2, r7
 800655e:	4630      	mov	r0, r6
 8006560:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006564:	f7ff ffdc 	bl	8006520 <__sfputc_r>
 8006568:	1c43      	adds	r3, r0, #1
 800656a:	d1f3      	bne.n	8006554 <__sfputs_r+0xa>
 800656c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006570 <_vfiprintf_r>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	460d      	mov	r5, r1
 8006576:	4614      	mov	r4, r2
 8006578:	4698      	mov	r8, r3
 800657a:	4606      	mov	r6, r0
 800657c:	b09d      	sub	sp, #116	@ 0x74
 800657e:	b118      	cbz	r0, 8006588 <_vfiprintf_r+0x18>
 8006580:	6a03      	ldr	r3, [r0, #32]
 8006582:	b90b      	cbnz	r3, 8006588 <_vfiprintf_r+0x18>
 8006584:	f7ff fc22 	bl	8005dcc <__sinit>
 8006588:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800658a:	07d9      	lsls	r1, r3, #31
 800658c:	d405      	bmi.n	800659a <_vfiprintf_r+0x2a>
 800658e:	89ab      	ldrh	r3, [r5, #12]
 8006590:	059a      	lsls	r2, r3, #22
 8006592:	d402      	bmi.n	800659a <_vfiprintf_r+0x2a>
 8006594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006596:	f7ff fd72 	bl	800607e <__retarget_lock_acquire_recursive>
 800659a:	89ab      	ldrh	r3, [r5, #12]
 800659c:	071b      	lsls	r3, r3, #28
 800659e:	d501      	bpl.n	80065a4 <_vfiprintf_r+0x34>
 80065a0:	692b      	ldr	r3, [r5, #16]
 80065a2:	b99b      	cbnz	r3, 80065cc <_vfiprintf_r+0x5c>
 80065a4:	4629      	mov	r1, r5
 80065a6:	4630      	mov	r0, r6
 80065a8:	f000 faca 	bl	8006b40 <__swsetup_r>
 80065ac:	b170      	cbz	r0, 80065cc <_vfiprintf_r+0x5c>
 80065ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80065b0:	07dc      	lsls	r4, r3, #31
 80065b2:	d504      	bpl.n	80065be <_vfiprintf_r+0x4e>
 80065b4:	f04f 30ff 	mov.w	r0, #4294967295
 80065b8:	b01d      	add	sp, #116	@ 0x74
 80065ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065be:	89ab      	ldrh	r3, [r5, #12]
 80065c0:	0598      	lsls	r0, r3, #22
 80065c2:	d4f7      	bmi.n	80065b4 <_vfiprintf_r+0x44>
 80065c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80065c6:	f7ff fd5b 	bl	8006080 <__retarget_lock_release_recursive>
 80065ca:	e7f3      	b.n	80065b4 <_vfiprintf_r+0x44>
 80065cc:	2300      	movs	r3, #0
 80065ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d0:	2320      	movs	r3, #32
 80065d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065d6:	2330      	movs	r3, #48	@ 0x30
 80065d8:	f04f 0901 	mov.w	r9, #1
 80065dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800678c <_vfiprintf_r+0x21c>
 80065e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065e8:	4623      	mov	r3, r4
 80065ea:	469a      	mov	sl, r3
 80065ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f0:	b10a      	cbz	r2, 80065f6 <_vfiprintf_r+0x86>
 80065f2:	2a25      	cmp	r2, #37	@ 0x25
 80065f4:	d1f9      	bne.n	80065ea <_vfiprintf_r+0x7a>
 80065f6:	ebba 0b04 	subs.w	fp, sl, r4
 80065fa:	d00b      	beq.n	8006614 <_vfiprintf_r+0xa4>
 80065fc:	465b      	mov	r3, fp
 80065fe:	4622      	mov	r2, r4
 8006600:	4629      	mov	r1, r5
 8006602:	4630      	mov	r0, r6
 8006604:	f7ff ffa1 	bl	800654a <__sfputs_r>
 8006608:	3001      	adds	r0, #1
 800660a:	f000 80a7 	beq.w	800675c <_vfiprintf_r+0x1ec>
 800660e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006610:	445a      	add	r2, fp
 8006612:	9209      	str	r2, [sp, #36]	@ 0x24
 8006614:	f89a 3000 	ldrb.w	r3, [sl]
 8006618:	2b00      	cmp	r3, #0
 800661a:	f000 809f 	beq.w	800675c <_vfiprintf_r+0x1ec>
 800661e:	2300      	movs	r3, #0
 8006620:	f04f 32ff 	mov.w	r2, #4294967295
 8006624:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006628:	f10a 0a01 	add.w	sl, sl, #1
 800662c:	9304      	str	r3, [sp, #16]
 800662e:	9307      	str	r3, [sp, #28]
 8006630:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006634:	931a      	str	r3, [sp, #104]	@ 0x68
 8006636:	4654      	mov	r4, sl
 8006638:	2205      	movs	r2, #5
 800663a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800663e:	4853      	ldr	r0, [pc, #332]	@ (800678c <_vfiprintf_r+0x21c>)
 8006640:	f000 fafe 	bl	8006c40 <memchr>
 8006644:	9a04      	ldr	r2, [sp, #16]
 8006646:	b9d8      	cbnz	r0, 8006680 <_vfiprintf_r+0x110>
 8006648:	06d1      	lsls	r1, r2, #27
 800664a:	bf44      	itt	mi
 800664c:	2320      	movmi	r3, #32
 800664e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006652:	0713      	lsls	r3, r2, #28
 8006654:	bf44      	itt	mi
 8006656:	232b      	movmi	r3, #43	@ 0x2b
 8006658:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800665c:	f89a 3000 	ldrb.w	r3, [sl]
 8006660:	2b2a      	cmp	r3, #42	@ 0x2a
 8006662:	d015      	beq.n	8006690 <_vfiprintf_r+0x120>
 8006664:	4654      	mov	r4, sl
 8006666:	2000      	movs	r0, #0
 8006668:	f04f 0c0a 	mov.w	ip, #10
 800666c:	9a07      	ldr	r2, [sp, #28]
 800666e:	4621      	mov	r1, r4
 8006670:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006674:	3b30      	subs	r3, #48	@ 0x30
 8006676:	2b09      	cmp	r3, #9
 8006678:	d94b      	bls.n	8006712 <_vfiprintf_r+0x1a2>
 800667a:	b1b0      	cbz	r0, 80066aa <_vfiprintf_r+0x13a>
 800667c:	9207      	str	r2, [sp, #28]
 800667e:	e014      	b.n	80066aa <_vfiprintf_r+0x13a>
 8006680:	eba0 0308 	sub.w	r3, r0, r8
 8006684:	fa09 f303 	lsl.w	r3, r9, r3
 8006688:	4313      	orrs	r3, r2
 800668a:	46a2      	mov	sl, r4
 800668c:	9304      	str	r3, [sp, #16]
 800668e:	e7d2      	b.n	8006636 <_vfiprintf_r+0xc6>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	1d19      	adds	r1, r3, #4
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	9103      	str	r1, [sp, #12]
 8006698:	2b00      	cmp	r3, #0
 800669a:	bfbb      	ittet	lt
 800669c:	425b      	neglt	r3, r3
 800669e:	f042 0202 	orrlt.w	r2, r2, #2
 80066a2:	9307      	strge	r3, [sp, #28]
 80066a4:	9307      	strlt	r3, [sp, #28]
 80066a6:	bfb8      	it	lt
 80066a8:	9204      	strlt	r2, [sp, #16]
 80066aa:	7823      	ldrb	r3, [r4, #0]
 80066ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80066ae:	d10a      	bne.n	80066c6 <_vfiprintf_r+0x156>
 80066b0:	7863      	ldrb	r3, [r4, #1]
 80066b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80066b4:	d132      	bne.n	800671c <_vfiprintf_r+0x1ac>
 80066b6:	9b03      	ldr	r3, [sp, #12]
 80066b8:	3402      	adds	r4, #2
 80066ba:	1d1a      	adds	r2, r3, #4
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	9203      	str	r2, [sp, #12]
 80066c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066c4:	9305      	str	r3, [sp, #20]
 80066c6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006790 <_vfiprintf_r+0x220>
 80066ca:	2203      	movs	r2, #3
 80066cc:	4650      	mov	r0, sl
 80066ce:	7821      	ldrb	r1, [r4, #0]
 80066d0:	f000 fab6 	bl	8006c40 <memchr>
 80066d4:	b138      	cbz	r0, 80066e6 <_vfiprintf_r+0x176>
 80066d6:	2240      	movs	r2, #64	@ 0x40
 80066d8:	9b04      	ldr	r3, [sp, #16]
 80066da:	eba0 000a 	sub.w	r0, r0, sl
 80066de:	4082      	lsls	r2, r0
 80066e0:	4313      	orrs	r3, r2
 80066e2:	3401      	adds	r4, #1
 80066e4:	9304      	str	r3, [sp, #16]
 80066e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066ea:	2206      	movs	r2, #6
 80066ec:	4829      	ldr	r0, [pc, #164]	@ (8006794 <_vfiprintf_r+0x224>)
 80066ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066f2:	f000 faa5 	bl	8006c40 <memchr>
 80066f6:	2800      	cmp	r0, #0
 80066f8:	d03f      	beq.n	800677a <_vfiprintf_r+0x20a>
 80066fa:	4b27      	ldr	r3, [pc, #156]	@ (8006798 <_vfiprintf_r+0x228>)
 80066fc:	bb1b      	cbnz	r3, 8006746 <_vfiprintf_r+0x1d6>
 80066fe:	9b03      	ldr	r3, [sp, #12]
 8006700:	3307      	adds	r3, #7
 8006702:	f023 0307 	bic.w	r3, r3, #7
 8006706:	3308      	adds	r3, #8
 8006708:	9303      	str	r3, [sp, #12]
 800670a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800670c:	443b      	add	r3, r7
 800670e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006710:	e76a      	b.n	80065e8 <_vfiprintf_r+0x78>
 8006712:	460c      	mov	r4, r1
 8006714:	2001      	movs	r0, #1
 8006716:	fb0c 3202 	mla	r2, ip, r2, r3
 800671a:	e7a8      	b.n	800666e <_vfiprintf_r+0xfe>
 800671c:	2300      	movs	r3, #0
 800671e:	f04f 0c0a 	mov.w	ip, #10
 8006722:	4619      	mov	r1, r3
 8006724:	3401      	adds	r4, #1
 8006726:	9305      	str	r3, [sp, #20]
 8006728:	4620      	mov	r0, r4
 800672a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800672e:	3a30      	subs	r2, #48	@ 0x30
 8006730:	2a09      	cmp	r2, #9
 8006732:	d903      	bls.n	800673c <_vfiprintf_r+0x1cc>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0c6      	beq.n	80066c6 <_vfiprintf_r+0x156>
 8006738:	9105      	str	r1, [sp, #20]
 800673a:	e7c4      	b.n	80066c6 <_vfiprintf_r+0x156>
 800673c:	4604      	mov	r4, r0
 800673e:	2301      	movs	r3, #1
 8006740:	fb0c 2101 	mla	r1, ip, r1, r2
 8006744:	e7f0      	b.n	8006728 <_vfiprintf_r+0x1b8>
 8006746:	ab03      	add	r3, sp, #12
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	462a      	mov	r2, r5
 800674c:	4630      	mov	r0, r6
 800674e:	4b13      	ldr	r3, [pc, #76]	@ (800679c <_vfiprintf_r+0x22c>)
 8006750:	a904      	add	r1, sp, #16
 8006752:	f3af 8000 	nop.w
 8006756:	4607      	mov	r7, r0
 8006758:	1c78      	adds	r0, r7, #1
 800675a:	d1d6      	bne.n	800670a <_vfiprintf_r+0x19a>
 800675c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800675e:	07d9      	lsls	r1, r3, #31
 8006760:	d405      	bmi.n	800676e <_vfiprintf_r+0x1fe>
 8006762:	89ab      	ldrh	r3, [r5, #12]
 8006764:	059a      	lsls	r2, r3, #22
 8006766:	d402      	bmi.n	800676e <_vfiprintf_r+0x1fe>
 8006768:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800676a:	f7ff fc89 	bl	8006080 <__retarget_lock_release_recursive>
 800676e:	89ab      	ldrh	r3, [r5, #12]
 8006770:	065b      	lsls	r3, r3, #25
 8006772:	f53f af1f 	bmi.w	80065b4 <_vfiprintf_r+0x44>
 8006776:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006778:	e71e      	b.n	80065b8 <_vfiprintf_r+0x48>
 800677a:	ab03      	add	r3, sp, #12
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	462a      	mov	r2, r5
 8006780:	4630      	mov	r0, r6
 8006782:	4b06      	ldr	r3, [pc, #24]	@ (800679c <_vfiprintf_r+0x22c>)
 8006784:	a904      	add	r1, sp, #16
 8006786:	f000 f87d 	bl	8006884 <_printf_i>
 800678a:	e7e4      	b.n	8006756 <_vfiprintf_r+0x1e6>
 800678c:	080076d7 	.word	0x080076d7
 8006790:	080076dd 	.word	0x080076dd
 8006794:	080076e1 	.word	0x080076e1
 8006798:	00000000 	.word	0x00000000
 800679c:	0800654b 	.word	0x0800654b

080067a0 <_printf_common>:
 80067a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067a4:	4616      	mov	r6, r2
 80067a6:	4698      	mov	r8, r3
 80067a8:	688a      	ldr	r2, [r1, #8]
 80067aa:	690b      	ldr	r3, [r1, #16]
 80067ac:	4607      	mov	r7, r0
 80067ae:	4293      	cmp	r3, r2
 80067b0:	bfb8      	it	lt
 80067b2:	4613      	movlt	r3, r2
 80067b4:	6033      	str	r3, [r6, #0]
 80067b6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067ba:	460c      	mov	r4, r1
 80067bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067c0:	b10a      	cbz	r2, 80067c6 <_printf_common+0x26>
 80067c2:	3301      	adds	r3, #1
 80067c4:	6033      	str	r3, [r6, #0]
 80067c6:	6823      	ldr	r3, [r4, #0]
 80067c8:	0699      	lsls	r1, r3, #26
 80067ca:	bf42      	ittt	mi
 80067cc:	6833      	ldrmi	r3, [r6, #0]
 80067ce:	3302      	addmi	r3, #2
 80067d0:	6033      	strmi	r3, [r6, #0]
 80067d2:	6825      	ldr	r5, [r4, #0]
 80067d4:	f015 0506 	ands.w	r5, r5, #6
 80067d8:	d106      	bne.n	80067e8 <_printf_common+0x48>
 80067da:	f104 0a19 	add.w	sl, r4, #25
 80067de:	68e3      	ldr	r3, [r4, #12]
 80067e0:	6832      	ldr	r2, [r6, #0]
 80067e2:	1a9b      	subs	r3, r3, r2
 80067e4:	42ab      	cmp	r3, r5
 80067e6:	dc2b      	bgt.n	8006840 <_printf_common+0xa0>
 80067e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067ec:	6822      	ldr	r2, [r4, #0]
 80067ee:	3b00      	subs	r3, #0
 80067f0:	bf18      	it	ne
 80067f2:	2301      	movne	r3, #1
 80067f4:	0692      	lsls	r2, r2, #26
 80067f6:	d430      	bmi.n	800685a <_printf_common+0xba>
 80067f8:	4641      	mov	r1, r8
 80067fa:	4638      	mov	r0, r7
 80067fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006800:	47c8      	blx	r9
 8006802:	3001      	adds	r0, #1
 8006804:	d023      	beq.n	800684e <_printf_common+0xae>
 8006806:	6823      	ldr	r3, [r4, #0]
 8006808:	6922      	ldr	r2, [r4, #16]
 800680a:	f003 0306 	and.w	r3, r3, #6
 800680e:	2b04      	cmp	r3, #4
 8006810:	bf14      	ite	ne
 8006812:	2500      	movne	r5, #0
 8006814:	6833      	ldreq	r3, [r6, #0]
 8006816:	f04f 0600 	mov.w	r6, #0
 800681a:	bf08      	it	eq
 800681c:	68e5      	ldreq	r5, [r4, #12]
 800681e:	f104 041a 	add.w	r4, r4, #26
 8006822:	bf08      	it	eq
 8006824:	1aed      	subeq	r5, r5, r3
 8006826:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800682a:	bf08      	it	eq
 800682c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006830:	4293      	cmp	r3, r2
 8006832:	bfc4      	itt	gt
 8006834:	1a9b      	subgt	r3, r3, r2
 8006836:	18ed      	addgt	r5, r5, r3
 8006838:	42b5      	cmp	r5, r6
 800683a:	d11a      	bne.n	8006872 <_printf_common+0xd2>
 800683c:	2000      	movs	r0, #0
 800683e:	e008      	b.n	8006852 <_printf_common+0xb2>
 8006840:	2301      	movs	r3, #1
 8006842:	4652      	mov	r2, sl
 8006844:	4641      	mov	r1, r8
 8006846:	4638      	mov	r0, r7
 8006848:	47c8      	blx	r9
 800684a:	3001      	adds	r0, #1
 800684c:	d103      	bne.n	8006856 <_printf_common+0xb6>
 800684e:	f04f 30ff 	mov.w	r0, #4294967295
 8006852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006856:	3501      	adds	r5, #1
 8006858:	e7c1      	b.n	80067de <_printf_common+0x3e>
 800685a:	2030      	movs	r0, #48	@ 0x30
 800685c:	18e1      	adds	r1, r4, r3
 800685e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006862:	1c5a      	adds	r2, r3, #1
 8006864:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006868:	4422      	add	r2, r4
 800686a:	3302      	adds	r3, #2
 800686c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006870:	e7c2      	b.n	80067f8 <_printf_common+0x58>
 8006872:	2301      	movs	r3, #1
 8006874:	4622      	mov	r2, r4
 8006876:	4641      	mov	r1, r8
 8006878:	4638      	mov	r0, r7
 800687a:	47c8      	blx	r9
 800687c:	3001      	adds	r0, #1
 800687e:	d0e6      	beq.n	800684e <_printf_common+0xae>
 8006880:	3601      	adds	r6, #1
 8006882:	e7d9      	b.n	8006838 <_printf_common+0x98>

08006884 <_printf_i>:
 8006884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	7e0f      	ldrb	r7, [r1, #24]
 800688a:	4691      	mov	r9, r2
 800688c:	2f78      	cmp	r7, #120	@ 0x78
 800688e:	4680      	mov	r8, r0
 8006890:	460c      	mov	r4, r1
 8006892:	469a      	mov	sl, r3
 8006894:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006896:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800689a:	d807      	bhi.n	80068ac <_printf_i+0x28>
 800689c:	2f62      	cmp	r7, #98	@ 0x62
 800689e:	d80a      	bhi.n	80068b6 <_printf_i+0x32>
 80068a0:	2f00      	cmp	r7, #0
 80068a2:	f000 80d3 	beq.w	8006a4c <_printf_i+0x1c8>
 80068a6:	2f58      	cmp	r7, #88	@ 0x58
 80068a8:	f000 80ba 	beq.w	8006a20 <_printf_i+0x19c>
 80068ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068b4:	e03a      	b.n	800692c <_printf_i+0xa8>
 80068b6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068ba:	2b15      	cmp	r3, #21
 80068bc:	d8f6      	bhi.n	80068ac <_printf_i+0x28>
 80068be:	a101      	add	r1, pc, #4	@ (adr r1, 80068c4 <_printf_i+0x40>)
 80068c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068c4:	0800691d 	.word	0x0800691d
 80068c8:	08006931 	.word	0x08006931
 80068cc:	080068ad 	.word	0x080068ad
 80068d0:	080068ad 	.word	0x080068ad
 80068d4:	080068ad 	.word	0x080068ad
 80068d8:	080068ad 	.word	0x080068ad
 80068dc:	08006931 	.word	0x08006931
 80068e0:	080068ad 	.word	0x080068ad
 80068e4:	080068ad 	.word	0x080068ad
 80068e8:	080068ad 	.word	0x080068ad
 80068ec:	080068ad 	.word	0x080068ad
 80068f0:	08006a33 	.word	0x08006a33
 80068f4:	0800695b 	.word	0x0800695b
 80068f8:	080069ed 	.word	0x080069ed
 80068fc:	080068ad 	.word	0x080068ad
 8006900:	080068ad 	.word	0x080068ad
 8006904:	08006a55 	.word	0x08006a55
 8006908:	080068ad 	.word	0x080068ad
 800690c:	0800695b 	.word	0x0800695b
 8006910:	080068ad 	.word	0x080068ad
 8006914:	080068ad 	.word	0x080068ad
 8006918:	080069f5 	.word	0x080069f5
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	1d1a      	adds	r2, r3, #4
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	6032      	str	r2, [r6, #0]
 8006924:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006928:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800692c:	2301      	movs	r3, #1
 800692e:	e09e      	b.n	8006a6e <_printf_i+0x1ea>
 8006930:	6833      	ldr	r3, [r6, #0]
 8006932:	6820      	ldr	r0, [r4, #0]
 8006934:	1d19      	adds	r1, r3, #4
 8006936:	6031      	str	r1, [r6, #0]
 8006938:	0606      	lsls	r6, r0, #24
 800693a:	d501      	bpl.n	8006940 <_printf_i+0xbc>
 800693c:	681d      	ldr	r5, [r3, #0]
 800693e:	e003      	b.n	8006948 <_printf_i+0xc4>
 8006940:	0645      	lsls	r5, r0, #25
 8006942:	d5fb      	bpl.n	800693c <_printf_i+0xb8>
 8006944:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006948:	2d00      	cmp	r5, #0
 800694a:	da03      	bge.n	8006954 <_printf_i+0xd0>
 800694c:	232d      	movs	r3, #45	@ 0x2d
 800694e:	426d      	negs	r5, r5
 8006950:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006954:	230a      	movs	r3, #10
 8006956:	4859      	ldr	r0, [pc, #356]	@ (8006abc <_printf_i+0x238>)
 8006958:	e011      	b.n	800697e <_printf_i+0xfa>
 800695a:	6821      	ldr	r1, [r4, #0]
 800695c:	6833      	ldr	r3, [r6, #0]
 800695e:	0608      	lsls	r0, r1, #24
 8006960:	f853 5b04 	ldr.w	r5, [r3], #4
 8006964:	d402      	bmi.n	800696c <_printf_i+0xe8>
 8006966:	0649      	lsls	r1, r1, #25
 8006968:	bf48      	it	mi
 800696a:	b2ad      	uxthmi	r5, r5
 800696c:	2f6f      	cmp	r7, #111	@ 0x6f
 800696e:	6033      	str	r3, [r6, #0]
 8006970:	bf14      	ite	ne
 8006972:	230a      	movne	r3, #10
 8006974:	2308      	moveq	r3, #8
 8006976:	4851      	ldr	r0, [pc, #324]	@ (8006abc <_printf_i+0x238>)
 8006978:	2100      	movs	r1, #0
 800697a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800697e:	6866      	ldr	r6, [r4, #4]
 8006980:	2e00      	cmp	r6, #0
 8006982:	bfa8      	it	ge
 8006984:	6821      	ldrge	r1, [r4, #0]
 8006986:	60a6      	str	r6, [r4, #8]
 8006988:	bfa4      	itt	ge
 800698a:	f021 0104 	bicge.w	r1, r1, #4
 800698e:	6021      	strge	r1, [r4, #0]
 8006990:	b90d      	cbnz	r5, 8006996 <_printf_i+0x112>
 8006992:	2e00      	cmp	r6, #0
 8006994:	d04b      	beq.n	8006a2e <_printf_i+0x1aa>
 8006996:	4616      	mov	r6, r2
 8006998:	fbb5 f1f3 	udiv	r1, r5, r3
 800699c:	fb03 5711 	mls	r7, r3, r1, r5
 80069a0:	5dc7      	ldrb	r7, [r0, r7]
 80069a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80069a6:	462f      	mov	r7, r5
 80069a8:	42bb      	cmp	r3, r7
 80069aa:	460d      	mov	r5, r1
 80069ac:	d9f4      	bls.n	8006998 <_printf_i+0x114>
 80069ae:	2b08      	cmp	r3, #8
 80069b0:	d10b      	bne.n	80069ca <_printf_i+0x146>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	07df      	lsls	r7, r3, #31
 80069b6:	d508      	bpl.n	80069ca <_printf_i+0x146>
 80069b8:	6923      	ldr	r3, [r4, #16]
 80069ba:	6861      	ldr	r1, [r4, #4]
 80069bc:	4299      	cmp	r1, r3
 80069be:	bfde      	ittt	le
 80069c0:	2330      	movle	r3, #48	@ 0x30
 80069c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069ca:	1b92      	subs	r2, r2, r6
 80069cc:	6122      	str	r2, [r4, #16]
 80069ce:	464b      	mov	r3, r9
 80069d0:	4621      	mov	r1, r4
 80069d2:	4640      	mov	r0, r8
 80069d4:	f8cd a000 	str.w	sl, [sp]
 80069d8:	aa03      	add	r2, sp, #12
 80069da:	f7ff fee1 	bl	80067a0 <_printf_common>
 80069de:	3001      	adds	r0, #1
 80069e0:	d14a      	bne.n	8006a78 <_printf_i+0x1f4>
 80069e2:	f04f 30ff 	mov.w	r0, #4294967295
 80069e6:	b004      	add	sp, #16
 80069e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	f043 0320 	orr.w	r3, r3, #32
 80069f2:	6023      	str	r3, [r4, #0]
 80069f4:	2778      	movs	r7, #120	@ 0x78
 80069f6:	4832      	ldr	r0, [pc, #200]	@ (8006ac0 <_printf_i+0x23c>)
 80069f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069fc:	6823      	ldr	r3, [r4, #0]
 80069fe:	6831      	ldr	r1, [r6, #0]
 8006a00:	061f      	lsls	r7, r3, #24
 8006a02:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a06:	d402      	bmi.n	8006a0e <_printf_i+0x18a>
 8006a08:	065f      	lsls	r7, r3, #25
 8006a0a:	bf48      	it	mi
 8006a0c:	b2ad      	uxthmi	r5, r5
 8006a0e:	6031      	str	r1, [r6, #0]
 8006a10:	07d9      	lsls	r1, r3, #31
 8006a12:	bf44      	itt	mi
 8006a14:	f043 0320 	orrmi.w	r3, r3, #32
 8006a18:	6023      	strmi	r3, [r4, #0]
 8006a1a:	b11d      	cbz	r5, 8006a24 <_printf_i+0x1a0>
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	e7ab      	b.n	8006978 <_printf_i+0xf4>
 8006a20:	4826      	ldr	r0, [pc, #152]	@ (8006abc <_printf_i+0x238>)
 8006a22:	e7e9      	b.n	80069f8 <_printf_i+0x174>
 8006a24:	6823      	ldr	r3, [r4, #0]
 8006a26:	f023 0320 	bic.w	r3, r3, #32
 8006a2a:	6023      	str	r3, [r4, #0]
 8006a2c:	e7f6      	b.n	8006a1c <_printf_i+0x198>
 8006a2e:	4616      	mov	r6, r2
 8006a30:	e7bd      	b.n	80069ae <_printf_i+0x12a>
 8006a32:	6833      	ldr	r3, [r6, #0]
 8006a34:	6825      	ldr	r5, [r4, #0]
 8006a36:	1d18      	adds	r0, r3, #4
 8006a38:	6961      	ldr	r1, [r4, #20]
 8006a3a:	6030      	str	r0, [r6, #0]
 8006a3c:	062e      	lsls	r6, r5, #24
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	d501      	bpl.n	8006a46 <_printf_i+0x1c2>
 8006a42:	6019      	str	r1, [r3, #0]
 8006a44:	e002      	b.n	8006a4c <_printf_i+0x1c8>
 8006a46:	0668      	lsls	r0, r5, #25
 8006a48:	d5fb      	bpl.n	8006a42 <_printf_i+0x1be>
 8006a4a:	8019      	strh	r1, [r3, #0]
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	4616      	mov	r6, r2
 8006a50:	6123      	str	r3, [r4, #16]
 8006a52:	e7bc      	b.n	80069ce <_printf_i+0x14a>
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	2100      	movs	r1, #0
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	6032      	str	r2, [r6, #0]
 8006a5c:	681e      	ldr	r6, [r3, #0]
 8006a5e:	6862      	ldr	r2, [r4, #4]
 8006a60:	4630      	mov	r0, r6
 8006a62:	f000 f8ed 	bl	8006c40 <memchr>
 8006a66:	b108      	cbz	r0, 8006a6c <_printf_i+0x1e8>
 8006a68:	1b80      	subs	r0, r0, r6
 8006a6a:	6060      	str	r0, [r4, #4]
 8006a6c:	6863      	ldr	r3, [r4, #4]
 8006a6e:	6123      	str	r3, [r4, #16]
 8006a70:	2300      	movs	r3, #0
 8006a72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a76:	e7aa      	b.n	80069ce <_printf_i+0x14a>
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	4640      	mov	r0, r8
 8006a7e:	6923      	ldr	r3, [r4, #16]
 8006a80:	47d0      	blx	sl
 8006a82:	3001      	adds	r0, #1
 8006a84:	d0ad      	beq.n	80069e2 <_printf_i+0x15e>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	079b      	lsls	r3, r3, #30
 8006a8a:	d413      	bmi.n	8006ab4 <_printf_i+0x230>
 8006a8c:	68e0      	ldr	r0, [r4, #12]
 8006a8e:	9b03      	ldr	r3, [sp, #12]
 8006a90:	4298      	cmp	r0, r3
 8006a92:	bfb8      	it	lt
 8006a94:	4618      	movlt	r0, r3
 8006a96:	e7a6      	b.n	80069e6 <_printf_i+0x162>
 8006a98:	2301      	movs	r3, #1
 8006a9a:	4632      	mov	r2, r6
 8006a9c:	4649      	mov	r1, r9
 8006a9e:	4640      	mov	r0, r8
 8006aa0:	47d0      	blx	sl
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	d09d      	beq.n	80069e2 <_printf_i+0x15e>
 8006aa6:	3501      	adds	r5, #1
 8006aa8:	68e3      	ldr	r3, [r4, #12]
 8006aaa:	9903      	ldr	r1, [sp, #12]
 8006aac:	1a5b      	subs	r3, r3, r1
 8006aae:	42ab      	cmp	r3, r5
 8006ab0:	dcf2      	bgt.n	8006a98 <_printf_i+0x214>
 8006ab2:	e7eb      	b.n	8006a8c <_printf_i+0x208>
 8006ab4:	2500      	movs	r5, #0
 8006ab6:	f104 0619 	add.w	r6, r4, #25
 8006aba:	e7f5      	b.n	8006aa8 <_printf_i+0x224>
 8006abc:	080076e8 	.word	0x080076e8
 8006ac0:	080076f9 	.word	0x080076f9

08006ac4 <__swbuf_r>:
 8006ac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ac6:	460e      	mov	r6, r1
 8006ac8:	4614      	mov	r4, r2
 8006aca:	4605      	mov	r5, r0
 8006acc:	b118      	cbz	r0, 8006ad6 <__swbuf_r+0x12>
 8006ace:	6a03      	ldr	r3, [r0, #32]
 8006ad0:	b90b      	cbnz	r3, 8006ad6 <__swbuf_r+0x12>
 8006ad2:	f7ff f97b 	bl	8005dcc <__sinit>
 8006ad6:	69a3      	ldr	r3, [r4, #24]
 8006ad8:	60a3      	str	r3, [r4, #8]
 8006ada:	89a3      	ldrh	r3, [r4, #12]
 8006adc:	071a      	lsls	r2, r3, #28
 8006ade:	d501      	bpl.n	8006ae4 <__swbuf_r+0x20>
 8006ae0:	6923      	ldr	r3, [r4, #16]
 8006ae2:	b943      	cbnz	r3, 8006af6 <__swbuf_r+0x32>
 8006ae4:	4621      	mov	r1, r4
 8006ae6:	4628      	mov	r0, r5
 8006ae8:	f000 f82a 	bl	8006b40 <__swsetup_r>
 8006aec:	b118      	cbz	r0, 8006af6 <__swbuf_r+0x32>
 8006aee:	f04f 37ff 	mov.w	r7, #4294967295
 8006af2:	4638      	mov	r0, r7
 8006af4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006af6:	6823      	ldr	r3, [r4, #0]
 8006af8:	6922      	ldr	r2, [r4, #16]
 8006afa:	b2f6      	uxtb	r6, r6
 8006afc:	1a98      	subs	r0, r3, r2
 8006afe:	6963      	ldr	r3, [r4, #20]
 8006b00:	4637      	mov	r7, r6
 8006b02:	4283      	cmp	r3, r0
 8006b04:	dc05      	bgt.n	8006b12 <__swbuf_r+0x4e>
 8006b06:	4621      	mov	r1, r4
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f7ff f897 	bl	8005c3c <_fflush_r>
 8006b0e:	2800      	cmp	r0, #0
 8006b10:	d1ed      	bne.n	8006aee <__swbuf_r+0x2a>
 8006b12:	68a3      	ldr	r3, [r4, #8]
 8006b14:	3b01      	subs	r3, #1
 8006b16:	60a3      	str	r3, [r4, #8]
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	6022      	str	r2, [r4, #0]
 8006b1e:	701e      	strb	r6, [r3, #0]
 8006b20:	6962      	ldr	r2, [r4, #20]
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d004      	beq.n	8006b32 <__swbuf_r+0x6e>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	07db      	lsls	r3, r3, #31
 8006b2c:	d5e1      	bpl.n	8006af2 <__swbuf_r+0x2e>
 8006b2e:	2e0a      	cmp	r6, #10
 8006b30:	d1df      	bne.n	8006af2 <__swbuf_r+0x2e>
 8006b32:	4621      	mov	r1, r4
 8006b34:	4628      	mov	r0, r5
 8006b36:	f7ff f881 	bl	8005c3c <_fflush_r>
 8006b3a:	2800      	cmp	r0, #0
 8006b3c:	d0d9      	beq.n	8006af2 <__swbuf_r+0x2e>
 8006b3e:	e7d6      	b.n	8006aee <__swbuf_r+0x2a>

08006b40 <__swsetup_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4b29      	ldr	r3, [pc, #164]	@ (8006be8 <__swsetup_r+0xa8>)
 8006b44:	4605      	mov	r5, r0
 8006b46:	6818      	ldr	r0, [r3, #0]
 8006b48:	460c      	mov	r4, r1
 8006b4a:	b118      	cbz	r0, 8006b54 <__swsetup_r+0x14>
 8006b4c:	6a03      	ldr	r3, [r0, #32]
 8006b4e:	b90b      	cbnz	r3, 8006b54 <__swsetup_r+0x14>
 8006b50:	f7ff f93c 	bl	8005dcc <__sinit>
 8006b54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b58:	0719      	lsls	r1, r3, #28
 8006b5a:	d422      	bmi.n	8006ba2 <__swsetup_r+0x62>
 8006b5c:	06da      	lsls	r2, r3, #27
 8006b5e:	d407      	bmi.n	8006b70 <__swsetup_r+0x30>
 8006b60:	2209      	movs	r2, #9
 8006b62:	602a      	str	r2, [r5, #0]
 8006b64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b68:	f04f 30ff 	mov.w	r0, #4294967295
 8006b6c:	81a3      	strh	r3, [r4, #12]
 8006b6e:	e033      	b.n	8006bd8 <__swsetup_r+0x98>
 8006b70:	0758      	lsls	r0, r3, #29
 8006b72:	d512      	bpl.n	8006b9a <__swsetup_r+0x5a>
 8006b74:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006b76:	b141      	cbz	r1, 8006b8a <__swsetup_r+0x4a>
 8006b78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006b7c:	4299      	cmp	r1, r3
 8006b7e:	d002      	beq.n	8006b86 <__swsetup_r+0x46>
 8006b80:	4628      	mov	r0, r5
 8006b82:	f7ff fa7f 	bl	8006084 <_free_r>
 8006b86:	2300      	movs	r3, #0
 8006b88:	6363      	str	r3, [r4, #52]	@ 0x34
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006b90:	81a3      	strh	r3, [r4, #12]
 8006b92:	2300      	movs	r3, #0
 8006b94:	6063      	str	r3, [r4, #4]
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	6023      	str	r3, [r4, #0]
 8006b9a:	89a3      	ldrh	r3, [r4, #12]
 8006b9c:	f043 0308 	orr.w	r3, r3, #8
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	6923      	ldr	r3, [r4, #16]
 8006ba4:	b94b      	cbnz	r3, 8006bba <__swsetup_r+0x7a>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006bb0:	d003      	beq.n	8006bba <__swsetup_r+0x7a>
 8006bb2:	4621      	mov	r1, r4
 8006bb4:	4628      	mov	r0, r5
 8006bb6:	f000 f8b2 	bl	8006d1e <__smakebuf_r>
 8006bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bbe:	f013 0201 	ands.w	r2, r3, #1
 8006bc2:	d00a      	beq.n	8006bda <__swsetup_r+0x9a>
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	60a2      	str	r2, [r4, #8]
 8006bc8:	6962      	ldr	r2, [r4, #20]
 8006bca:	4252      	negs	r2, r2
 8006bcc:	61a2      	str	r2, [r4, #24]
 8006bce:	6922      	ldr	r2, [r4, #16]
 8006bd0:	b942      	cbnz	r2, 8006be4 <__swsetup_r+0xa4>
 8006bd2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006bd6:	d1c5      	bne.n	8006b64 <__swsetup_r+0x24>
 8006bd8:	bd38      	pop	{r3, r4, r5, pc}
 8006bda:	0799      	lsls	r1, r3, #30
 8006bdc:	bf58      	it	pl
 8006bde:	6962      	ldrpl	r2, [r4, #20]
 8006be0:	60a2      	str	r2, [r4, #8]
 8006be2:	e7f4      	b.n	8006bce <__swsetup_r+0x8e>
 8006be4:	2000      	movs	r0, #0
 8006be6:	e7f7      	b.n	8006bd8 <__swsetup_r+0x98>
 8006be8:	200002e0 	.word	0x200002e0

08006bec <memmove>:
 8006bec:	4288      	cmp	r0, r1
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	eb01 0402 	add.w	r4, r1, r2
 8006bf4:	d902      	bls.n	8006bfc <memmove+0x10>
 8006bf6:	4284      	cmp	r4, r0
 8006bf8:	4623      	mov	r3, r4
 8006bfa:	d807      	bhi.n	8006c0c <memmove+0x20>
 8006bfc:	1e43      	subs	r3, r0, #1
 8006bfe:	42a1      	cmp	r1, r4
 8006c00:	d008      	beq.n	8006c14 <memmove+0x28>
 8006c02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006c06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006c0a:	e7f8      	b.n	8006bfe <memmove+0x12>
 8006c0c:	4601      	mov	r1, r0
 8006c0e:	4402      	add	r2, r0
 8006c10:	428a      	cmp	r2, r1
 8006c12:	d100      	bne.n	8006c16 <memmove+0x2a>
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006c1e:	e7f7      	b.n	8006c10 <memmove+0x24>

08006c20 <_sbrk_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	2300      	movs	r3, #0
 8006c24:	4d05      	ldr	r5, [pc, #20]	@ (8006c3c <_sbrk_r+0x1c>)
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fa fb1a 	bl	8001264 <_sbrk>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_sbrk_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_sbrk_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	20000754 	.word	0x20000754

08006c40 <memchr>:
 8006c40:	4603      	mov	r3, r0
 8006c42:	b510      	push	{r4, lr}
 8006c44:	b2c9      	uxtb	r1, r1
 8006c46:	4402      	add	r2, r0
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	d101      	bne.n	8006c52 <memchr+0x12>
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e003      	b.n	8006c5a <memchr+0x1a>
 8006c52:	7804      	ldrb	r4, [r0, #0]
 8006c54:	3301      	adds	r3, #1
 8006c56:	428c      	cmp	r4, r1
 8006c58:	d1f6      	bne.n	8006c48 <memchr+0x8>
 8006c5a:	bd10      	pop	{r4, pc}

08006c5c <memcpy>:
 8006c5c:	440a      	add	r2, r1
 8006c5e:	4291      	cmp	r1, r2
 8006c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c64:	d100      	bne.n	8006c68 <memcpy+0xc>
 8006c66:	4770      	bx	lr
 8006c68:	b510      	push	{r4, lr}
 8006c6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c6e:	4291      	cmp	r1, r2
 8006c70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c74:	d1f9      	bne.n	8006c6a <memcpy+0xe>
 8006c76:	bd10      	pop	{r4, pc}

08006c78 <_realloc_r>:
 8006c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c7c:	4680      	mov	r8, r0
 8006c7e:	4615      	mov	r5, r2
 8006c80:	460c      	mov	r4, r1
 8006c82:	b921      	cbnz	r1, 8006c8e <_realloc_r+0x16>
 8006c84:	4611      	mov	r1, r2
 8006c86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c8a:	f7ff ba65 	b.w	8006158 <_malloc_r>
 8006c8e:	b92a      	cbnz	r2, 8006c9c <_realloc_r+0x24>
 8006c90:	f7ff f9f8 	bl	8006084 <_free_r>
 8006c94:	2400      	movs	r4, #0
 8006c96:	4620      	mov	r0, r4
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	f000 f89e 	bl	8006ddc <_malloc_usable_size_r>
 8006ca0:	4285      	cmp	r5, r0
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	d802      	bhi.n	8006cac <_realloc_r+0x34>
 8006ca6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006caa:	d8f4      	bhi.n	8006c96 <_realloc_r+0x1e>
 8006cac:	4629      	mov	r1, r5
 8006cae:	4640      	mov	r0, r8
 8006cb0:	f7ff fa52 	bl	8006158 <_malloc_r>
 8006cb4:	4607      	mov	r7, r0
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d0ec      	beq.n	8006c94 <_realloc_r+0x1c>
 8006cba:	42b5      	cmp	r5, r6
 8006cbc:	462a      	mov	r2, r5
 8006cbe:	4621      	mov	r1, r4
 8006cc0:	bf28      	it	cs
 8006cc2:	4632      	movcs	r2, r6
 8006cc4:	f7ff ffca 	bl	8006c5c <memcpy>
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f7ff f9da 	bl	8006084 <_free_r>
 8006cd0:	463c      	mov	r4, r7
 8006cd2:	e7e0      	b.n	8006c96 <_realloc_r+0x1e>

08006cd4 <__swhatbuf_r>:
 8006cd4:	b570      	push	{r4, r5, r6, lr}
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cdc:	4615      	mov	r5, r2
 8006cde:	2900      	cmp	r1, #0
 8006ce0:	461e      	mov	r6, r3
 8006ce2:	b096      	sub	sp, #88	@ 0x58
 8006ce4:	da0c      	bge.n	8006d00 <__swhatbuf_r+0x2c>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	2100      	movs	r1, #0
 8006cea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006cee:	bf14      	ite	ne
 8006cf0:	2340      	movne	r3, #64	@ 0x40
 8006cf2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006cf6:	2000      	movs	r0, #0
 8006cf8:	6031      	str	r1, [r6, #0]
 8006cfa:	602b      	str	r3, [r5, #0]
 8006cfc:	b016      	add	sp, #88	@ 0x58
 8006cfe:	bd70      	pop	{r4, r5, r6, pc}
 8006d00:	466a      	mov	r2, sp
 8006d02:	f000 f849 	bl	8006d98 <_fstat_r>
 8006d06:	2800      	cmp	r0, #0
 8006d08:	dbed      	blt.n	8006ce6 <__swhatbuf_r+0x12>
 8006d0a:	9901      	ldr	r1, [sp, #4]
 8006d0c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d10:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d14:	4259      	negs	r1, r3
 8006d16:	4159      	adcs	r1, r3
 8006d18:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d1c:	e7eb      	b.n	8006cf6 <__swhatbuf_r+0x22>

08006d1e <__smakebuf_r>:
 8006d1e:	898b      	ldrh	r3, [r1, #12]
 8006d20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d22:	079d      	lsls	r5, r3, #30
 8006d24:	4606      	mov	r6, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	d507      	bpl.n	8006d3a <__smakebuf_r+0x1c>
 8006d2a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d2e:	6023      	str	r3, [r4, #0]
 8006d30:	6123      	str	r3, [r4, #16]
 8006d32:	2301      	movs	r3, #1
 8006d34:	6163      	str	r3, [r4, #20]
 8006d36:	b003      	add	sp, #12
 8006d38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d3a:	466a      	mov	r2, sp
 8006d3c:	ab01      	add	r3, sp, #4
 8006d3e:	f7ff ffc9 	bl	8006cd4 <__swhatbuf_r>
 8006d42:	9f00      	ldr	r7, [sp, #0]
 8006d44:	4605      	mov	r5, r0
 8006d46:	4639      	mov	r1, r7
 8006d48:	4630      	mov	r0, r6
 8006d4a:	f7ff fa05 	bl	8006158 <_malloc_r>
 8006d4e:	b948      	cbnz	r0, 8006d64 <__smakebuf_r+0x46>
 8006d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d54:	059a      	lsls	r2, r3, #22
 8006d56:	d4ee      	bmi.n	8006d36 <__smakebuf_r+0x18>
 8006d58:	f023 0303 	bic.w	r3, r3, #3
 8006d5c:	f043 0302 	orr.w	r3, r3, #2
 8006d60:	81a3      	strh	r3, [r4, #12]
 8006d62:	e7e2      	b.n	8006d2a <__smakebuf_r+0xc>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	9b01      	ldr	r3, [sp, #4]
 8006d72:	6020      	str	r0, [r4, #0]
 8006d74:	b15b      	cbz	r3, 8006d8e <__smakebuf_r+0x70>
 8006d76:	4630      	mov	r0, r6
 8006d78:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d7c:	f000 f81e 	bl	8006dbc <_isatty_r>
 8006d80:	b128      	cbz	r0, 8006d8e <__smakebuf_r+0x70>
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	f023 0303 	bic.w	r3, r3, #3
 8006d88:	f043 0301 	orr.w	r3, r3, #1
 8006d8c:	81a3      	strh	r3, [r4, #12]
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	431d      	orrs	r5, r3
 8006d92:	81a5      	strh	r5, [r4, #12]
 8006d94:	e7cf      	b.n	8006d36 <__smakebuf_r+0x18>
	...

08006d98 <_fstat_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	4d06      	ldr	r5, [pc, #24]	@ (8006db8 <_fstat_r+0x20>)
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	602b      	str	r3, [r5, #0]
 8006da6:	f7fe fcc0 	bl	800572a <_fstat>
 8006daa:	1c43      	adds	r3, r0, #1
 8006dac:	d102      	bne.n	8006db4 <_fstat_r+0x1c>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	b103      	cbz	r3, 8006db4 <_fstat_r+0x1c>
 8006db2:	6023      	str	r3, [r4, #0]
 8006db4:	bd38      	pop	{r3, r4, r5, pc}
 8006db6:	bf00      	nop
 8006db8:	20000754 	.word	0x20000754

08006dbc <_isatty_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	4d05      	ldr	r5, [pc, #20]	@ (8006dd8 <_isatty_r+0x1c>)
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	602b      	str	r3, [r5, #0]
 8006dc8:	f7fe fe12 	bl	80059f0 <_isatty>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_isatty_r+0x1a>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_isatty_r+0x1a>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	20000754 	.word	0x20000754

08006ddc <_malloc_usable_size_r>:
 8006ddc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006de0:	1f18      	subs	r0, r3, #4
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	bfbc      	itt	lt
 8006de6:	580b      	ldrlt	r3, [r1, r0]
 8006de8:	18c0      	addlt	r0, r0, r3
 8006dea:	4770      	bx	lr

08006dec <_init>:
 8006dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dee:	bf00      	nop
 8006df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006df2:	bc08      	pop	{r3}
 8006df4:	469e      	mov	lr, r3
 8006df6:	4770      	bx	lr

08006df8 <_fini>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr
