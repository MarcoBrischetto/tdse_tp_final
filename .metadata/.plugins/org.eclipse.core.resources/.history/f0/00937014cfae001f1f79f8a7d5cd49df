
tdse-tp_final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004960  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08004a6c  08004a6c  00005a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ee0  08004ee0  000062d4  2**0
                  CONTENTS
  4 .ARM          00000008  08004ee0  08004ee0  00005ee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ee8  08004ee8  000062d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ee8  08004ee8  00005ee8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eec  08004eec  00005eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  08004ef0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  200002d4  080051c4  000062d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000650  080051c4  00006650  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000062d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f71  00000000  00000000  000062fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002302  00000000  00000000  0000f26e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007e0  00000000  00000000  00011570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005d2  00000000  00000000  00011d50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f07  00000000  00000000  00012322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0bf  00000000  00000000  0002b229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084577  00000000  00000000  000392e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd85f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002938  00000000  00000000  000bd8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000c01dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002d4 	.word	0x200002d4
 8000128:	00000000 	.word	0x00000000
 800012c:	08004a54 	.word	0x08004a54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002d8 	.word	0x200002d8
 8000148:	08004a54 	.word	0x08004a54

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f003 faa2 	bl	80036a8 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa36 	bl	80005d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 faa4 	bl	80016c0 <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fb60 	bl	800183c <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 fd30 	bl	8003bf2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd90 	bl	8000ce4 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f8f5 	bl	80003b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fffd 	bl	80011e8 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8e0 	bl	80003b8 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f964 	bl	8001504 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f8b9 	bl	80003b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200002f0 	.word	0x200002f0
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b4e      	ldr	r3, [pc, #312]	@ (80003a4 <MX_GPIO_Init+0x150>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a4d      	ldr	r2, [pc, #308]	@ (80003a4 <MX_GPIO_Init+0x150>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b4b      	ldr	r3, [pc, #300]	@ (80003a4 <MX_GPIO_Init+0x150>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b48      	ldr	r3, [pc, #288]	@ (80003a4 <MX_GPIO_Init+0x150>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a47      	ldr	r2, [pc, #284]	@ (80003a4 <MX_GPIO_Init+0x150>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b45      	ldr	r3, [pc, #276]	@ (80003a4 <MX_GPIO_Init+0x150>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b42      	ldr	r3, [pc, #264]	@ (80003a4 <MX_GPIO_Init+0x150>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a41      	ldr	r2, [pc, #260]	@ (80003a4 <MX_GPIO_Init+0x150>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b3f      	ldr	r3, [pc, #252]	@ (80003a4 <MX_GPIO_Init+0x150>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b3c      	ldr	r3, [pc, #240]	@ (80003a4 <MX_GPIO_Init+0x150>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a3b      	ldr	r2, [pc, #236]	@ (80003a4 <MX_GPIO_Init+0x150>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b39      	ldr	r3, [pc, #228]	@ (80003a4 <MX_GPIO_Init+0x150>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 7178 	mov.w	r1, #992	@ 0x3e0
 80002ce:	4836      	ldr	r0, [pc, #216]	@ (80003a8 <MX_GPIO_Init+0x154>)
 80002d0:	f000 fcb5 	bl	8000c3e <HAL_GPIO_WritePin>
                          |D8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	2180      	movs	r1, #128	@ 0x80
 80002d8:	4834      	ldr	r0, [pc, #208]	@ (80003ac <MX_GPIO_Init+0x158>)
 80002da:	f000 fcb0 	bl	8000c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, GPIO_PIN_RESET);
 80002de:	2200      	movs	r2, #0
 80002e0:	2140      	movs	r1, #64	@ 0x40
 80002e2:	4833      	ldr	r0, [pc, #204]	@ (80003b0 <MX_GPIO_Init+0x15c>)
 80002e4:	f000 fcab 	bl	8000c3e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ee:	4b31      	ldr	r3, [pc, #196]	@ (80003b4 <MX_GPIO_Init+0x160>)
 80002f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0310 	add.w	r3, r7, #16
 80002fa:	4619      	mov	r1, r3
 80002fc:	482b      	ldr	r0, [pc, #172]	@ (80003ac <MX_GPIO_Init+0x158>)
 80002fe:	f000 fb03 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D12_Pin D11_Pin D7_Pin
                           D8_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D12_Pin|D11_Pin|D7_Pin
 8000302:	f44f 7378 	mov.w	r3, #992	@ 0x3e0
 8000306:	613b      	str	r3, [r7, #16]
                          |D8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	4823      	ldr	r0, [pc, #140]	@ (80003a8 <MX_GPIO_Init+0x154>)
 800031c:	f000 faf4 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000320:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 8000324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000326:	2300      	movs	r3, #0
 8000328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800032a:	2301      	movs	r3, #1
 800032c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800032e:	f107 0310 	add.w	r3, r7, #16
 8000332:	4619      	mov	r1, r3
 8000334:	481e      	ldr	r0, [pc, #120]	@ (80003b0 <MX_GPIO_Init+0x15c>)
 8000336:	f000 fae7 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 800033a:	2380      	movs	r3, #128	@ 0x80
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000342:	2300      	movs	r3, #0
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	4816      	ldr	r0, [pc, #88]	@ (80003ac <MX_GPIO_Init+0x158>)
 8000352:	f000 fad9 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pin : D2_Pin */
  GPIO_InitStruct.Pin = D2_Pin;
 8000356:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800035a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800035c:	2300      	movs	r3, #0
 800035e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000360:	2301      	movs	r3, #1
 8000362:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D2_GPIO_Port, &GPIO_InitStruct);
 8000364:	f107 0310 	add.w	r3, r7, #16
 8000368:	4619      	mov	r1, r3
 800036a:	480f      	ldr	r0, [pc, #60]	@ (80003a8 <MX_GPIO_Init+0x154>)
 800036c:	f000 facc 	bl	8000908 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000370:	2340      	movs	r3, #64	@ 0x40
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	480a      	ldr	r0, [pc, #40]	@ (80003b0 <MX_GPIO_Init+0x15c>)
 8000388:	f000 fabe 	bl	8000908 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800038c:	2200      	movs	r2, #0
 800038e:	2100      	movs	r1, #0
 8000390:	2028      	movs	r0, #40	@ 0x28
 8000392:	f000 fa7c 	bl	800088e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000396:	2028      	movs	r0, #40	@ 0x28
 8000398:	f000 fa95 	bl	80008c6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800039c:	bf00      	nop
 800039e:	3720      	adds	r7, #32
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40010800 	.word	0x40010800
 80003ac:	40011000 	.word	0x40011000
 80003b0:	40010c00 	.word	0x40010c00
 80003b4:	10110000 	.word	0x10110000

080003b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003b8:	b480      	push	{r7}
 80003ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003bc:	b672      	cpsid	i
}
 80003be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c0:	bf00      	nop
 80003c2:	e7fd      	b.n	80003c0 <Error_Handler+0x8>

080003c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003ca:	4b15      	ldr	r3, [pc, #84]	@ (8000420 <HAL_MspInit+0x5c>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a14      	ldr	r2, [pc, #80]	@ (8000420 <HAL_MspInit+0x5c>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b12      	ldr	r3, [pc, #72]	@ (8000420 <HAL_MspInit+0x5c>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0301 	and.w	r3, r3, #1
 80003de:	60bb      	str	r3, [r7, #8]
 80003e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000420 <HAL_MspInit+0x5c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000420 <HAL_MspInit+0x5c>)
 80003e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003ec:	61d3      	str	r3, [r2, #28]
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <HAL_MspInit+0x5c>)
 80003f0:	69db      	ldr	r3, [r3, #28]
 80003f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003f6:	607b      	str	r3, [r7, #4]
 80003f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80003fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000424 <HAL_MspInit+0x60>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	60fb      	str	r3, [r7, #12]
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000406:	60fb      	str	r3, [r7, #12]
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800040e:	60fb      	str	r3, [r7, #12]
 8000410:	4a04      	ldr	r2, [pc, #16]	@ (8000424 <HAL_MspInit+0x60>)
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	bc80      	pop	{r7}
 800041e:	4770      	bx	lr
 8000420:	40021000 	.word	0x40021000
 8000424:	40010000 	.word	0x40010000

08000428 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b088      	sub	sp, #32
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000430:	f107 0310 	add.w	r3, r7, #16
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
 8000438:	605a      	str	r2, [r3, #4]
 800043a:	609a      	str	r2, [r3, #8]
 800043c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	681b      	ldr	r3, [r3, #0]
 8000442:	4a15      	ldr	r2, [pc, #84]	@ (8000498 <HAL_UART_MspInit+0x70>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d123      	bne.n	8000490 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000448:	4b14      	ldr	r3, [pc, #80]	@ (800049c <HAL_UART_MspInit+0x74>)
 800044a:	69db      	ldr	r3, [r3, #28]
 800044c:	4a13      	ldr	r2, [pc, #76]	@ (800049c <HAL_UART_MspInit+0x74>)
 800044e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000452:	61d3      	str	r3, [r2, #28]
 8000454:	4b11      	ldr	r3, [pc, #68]	@ (800049c <HAL_UART_MspInit+0x74>)
 8000456:	69db      	ldr	r3, [r3, #28]
 8000458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800045c:	60fb      	str	r3, [r7, #12]
 800045e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000460:	4b0e      	ldr	r3, [pc, #56]	@ (800049c <HAL_UART_MspInit+0x74>)
 8000462:	699b      	ldr	r3, [r3, #24]
 8000464:	4a0d      	ldr	r2, [pc, #52]	@ (800049c <HAL_UART_MspInit+0x74>)
 8000466:	f043 0304 	orr.w	r3, r3, #4
 800046a:	6193      	str	r3, [r2, #24]
 800046c:	4b0b      	ldr	r3, [pc, #44]	@ (800049c <HAL_UART_MspInit+0x74>)
 800046e:	699b      	ldr	r3, [r3, #24]
 8000470:	f003 0304 	and.w	r3, r3, #4
 8000474:	60bb      	str	r3, [r7, #8]
 8000476:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000478:	230c      	movs	r3, #12
 800047a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800047c:	2302      	movs	r3, #2
 800047e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2302      	movs	r3, #2
 8000482:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	4805      	ldr	r0, [pc, #20]	@ (80004a0 <HAL_UART_MspInit+0x78>)
 800048c:	f000 fa3c 	bl	8000908 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000490:	bf00      	nop
 8000492:	3720      	adds	r7, #32
 8000494:	46bd      	mov	sp, r7
 8000496:	bd80      	pop	{r7, pc}
 8000498:	40004400 	.word	0x40004400
 800049c:	40021000 	.word	0x40021000
 80004a0:	40010800 	.word	0x40010800

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	bf00      	nop
 80004aa:	e7fd      	b.n	80004a8 <NMI_Handler+0x4>

080004ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004b0:	bf00      	nop
 80004b2:	e7fd      	b.n	80004b0 <HardFault_Handler+0x4>

080004b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <MemManage_Handler+0x4>

080004bc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004c0:	bf00      	nop
 80004c2:	e7fd      	b.n	80004c0 <BusFault_Handler+0x4>

080004c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c8:	bf00      	nop
 80004ca:	e7fd      	b.n	80004c8 <UsageFault_Handler+0x4>

080004cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004d0:	bf00      	nop
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bc80      	pop	{r7}
 80004d6:	4770      	bx	lr

080004d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004dc:	bf00      	nop
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr

080004e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004e8:	bf00      	nop
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bc80      	pop	{r7}
 80004ee:	4770      	bx	lr

080004f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004f4:	f000 f8b4 	bl	8000660 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 80004f8:	f000 f9ff 	bl	80008fa <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 80004fc:	bf00      	nop
 80004fe:	bd80      	pop	{r7, pc}

08000500 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000504:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000508:	f000 fbca 	bl	8000ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}

08000510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b086      	sub	sp, #24
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000518:	4a14      	ldr	r2, [pc, #80]	@ (800056c <_sbrk+0x5c>)
 800051a:	4b15      	ldr	r3, [pc, #84]	@ (8000570 <_sbrk+0x60>)
 800051c:	1ad3      	subs	r3, r2, r3
 800051e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000520:	697b      	ldr	r3, [r7, #20]
 8000522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000524:	4b13      	ldr	r3, [pc, #76]	@ (8000574 <_sbrk+0x64>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d102      	bne.n	8000532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800052c:	4b11      	ldr	r3, [pc, #68]	@ (8000574 <_sbrk+0x64>)
 800052e:	4a12      	ldr	r2, [pc, #72]	@ (8000578 <_sbrk+0x68>)
 8000530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000532:	4b10      	ldr	r3, [pc, #64]	@ (8000574 <_sbrk+0x64>)
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4413      	add	r3, r2
 800053a:	693a      	ldr	r2, [r7, #16]
 800053c:	429a      	cmp	r2, r3
 800053e:	d207      	bcs.n	8000550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000540:	f003 fba6 	bl	8003c90 <__errno>
 8000544:	4603      	mov	r3, r0
 8000546:	220c      	movs	r2, #12
 8000548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054a:	f04f 33ff 	mov.w	r3, #4294967295
 800054e:	e009      	b.n	8000564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000550:	4b08      	ldr	r3, [pc, #32]	@ (8000574 <_sbrk+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000556:	4b07      	ldr	r3, [pc, #28]	@ (8000574 <_sbrk+0x64>)
 8000558:	681a      	ldr	r2, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	4413      	add	r3, r2
 800055e:	4a05      	ldr	r2, [pc, #20]	@ (8000574 <_sbrk+0x64>)
 8000560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000562:	68fb      	ldr	r3, [r7, #12]
}
 8000564:	4618      	mov	r0, r3
 8000566:	3718      	adds	r7, #24
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20005000 	.word	0x20005000
 8000570:	00000400 	.word	0x00000400
 8000574:	20000338 	.word	0x20000338
 8000578:	20000650 	.word	0x20000650

0800057c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr

08000588 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000588:	f7ff fff8 	bl	800057c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800058c:	480b      	ldr	r0, [pc, #44]	@ (80005bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800058e:	490c      	ldr	r1, [pc, #48]	@ (80005c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000590:	4a0c      	ldr	r2, [pc, #48]	@ (80005c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000594:	e002      	b.n	800059c <LoopCopyDataInit>

08000596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059a:	3304      	adds	r3, #4

0800059c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800059c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a0:	d3f9      	bcc.n	8000596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a2:	4a09      	ldr	r2, [pc, #36]	@ (80005c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005a4:	4c09      	ldr	r4, [pc, #36]	@ (80005cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a8:	e001      	b.n	80005ae <LoopFillZerobss>

080005aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005ac:	3204      	adds	r2, #4

080005ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b0:	d3fb      	bcc.n	80005aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005b2:	f003 fb73 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005b6:	f7ff fdd1 	bl	800015c <main>
  bx lr
 80005ba:	4770      	bx	lr
  ldr r0, =_sdata
 80005bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c0:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 80005c4:	08004ef0 	.word	0x08004ef0
  ldr r2, =_sbss
 80005c8:	200002d4 	.word	0x200002d4
  ldr r4, =_ebss
 80005cc:	20000650 	.word	0x20000650

080005d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d0:	e7fe      	b.n	80005d0 <ADC1_2_IRQHandler>
	...

080005d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005d8:	4b08      	ldr	r3, [pc, #32]	@ (80005fc <HAL_Init+0x28>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a07      	ldr	r2, [pc, #28]	@ (80005fc <HAL_Init+0x28>)
 80005de:	f043 0310 	orr.w	r3, r3, #16
 80005e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e4:	2003      	movs	r0, #3
 80005e6:	f000 f947 	bl	8000878 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ea:	2000      	movs	r0, #0
 80005ec:	f000 f808 	bl	8000600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f0:	f7ff fee8 	bl	80003c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f4:	2300      	movs	r3, #0
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40022000 	.word	0x40022000

08000600 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000608:	4b12      	ldr	r3, [pc, #72]	@ (8000654 <HAL_InitTick+0x54>)
 800060a:	681a      	ldr	r2, [r3, #0]
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <HAL_InitTick+0x58>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	4619      	mov	r1, r3
 8000612:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000616:	fbb3 f3f1 	udiv	r3, r3, r1
 800061a:	fbb2 f3f3 	udiv	r3, r2, r3
 800061e:	4618      	mov	r0, r3
 8000620:	f000 f95f 	bl	80008e2 <HAL_SYSTICK_Config>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d001      	beq.n	800062e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e00e      	b.n	800064c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2b0f      	cmp	r3, #15
 8000632:	d80a      	bhi.n	800064a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000634:	2200      	movs	r2, #0
 8000636:	6879      	ldr	r1, [r7, #4]
 8000638:	f04f 30ff 	mov.w	r0, #4294967295
 800063c:	f000 f927 	bl	800088e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000640:	4a06      	ldr	r2, [pc, #24]	@ (800065c <HAL_InitTick+0x5c>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000646:	2300      	movs	r3, #0
 8000648:	e000      	b.n	800064c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800064a:	2301      	movs	r3, #1
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000000 	.word	0x20000000
 8000658:	20000008 	.word	0x20000008
 800065c:	20000004 	.word	0x20000004

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	@ (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	@ (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a03      	ldr	r2, [pc, #12]	@ (8000680 <HAL_IncTick+0x20>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000008 	.word	0x20000008
 8000680:	2000033c 	.word	0x2000033c

08000684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	@ (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	2000033c 	.word	0x2000033c

08000698 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b084      	sub	sp, #16
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a0:	f7ff fff0 	bl	8000684 <HAL_GetTick>
 80006a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b0:	d005      	beq.n	80006be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_Delay+0x44>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006be:	bf00      	nop
 80006c0:	f7ff ffe0 	bl	8000684 <HAL_GetTick>
 80006c4:	4602      	mov	r2, r0
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	68fa      	ldr	r2, [r7, #12]
 80006cc:	429a      	cmp	r2, r3
 80006ce:	d8f7      	bhi.n	80006c0 <HAL_Delay+0x28>
  {
  }
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000008 	.word	0x20000008

080006e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006f6:	68ba      	ldr	r2, [r7, #8]
 80006f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006fc:	4013      	ands	r3, r2
 80006fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000708:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800070c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000712:	4a04      	ldr	r2, [pc, #16]	@ (8000724 <__NVIC_SetPriorityGrouping+0x44>)
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	60d3      	str	r3, [r2, #12]
}
 8000718:	bf00      	nop
 800071a:	3714      	adds	r7, #20
 800071c:	46bd      	mov	sp, r7
 800071e:	bc80      	pop	{r7}
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800072c:	4b04      	ldr	r3, [pc, #16]	@ (8000740 <__NVIC_GetPriorityGrouping+0x18>)
 800072e:	68db      	ldr	r3, [r3, #12]
 8000730:	0a1b      	lsrs	r3, r3, #8
 8000732:	f003 0307 	and.w	r3, r3, #7
}
 8000736:	4618      	mov	r0, r3
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	2b00      	cmp	r3, #0
 8000754:	db0b      	blt.n	800076e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	f003 021f 	and.w	r2, r3, #31
 800075c:	4906      	ldr	r1, [pc, #24]	@ (8000778 <__NVIC_EnableIRQ+0x34>)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	095b      	lsrs	r3, r3, #5
 8000764:	2001      	movs	r0, #1
 8000766:	fa00 f202 	lsl.w	r2, r0, r2
 800076a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	e000e100 	.word	0xe000e100

0800077c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	6039      	str	r1, [r7, #0]
 8000786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0a      	blt.n	80007a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000790:	683b      	ldr	r3, [r7, #0]
 8000792:	b2da      	uxtb	r2, r3
 8000794:	490c      	ldr	r1, [pc, #48]	@ (80007c8 <__NVIC_SetPriority+0x4c>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	0112      	lsls	r2, r2, #4
 800079c:	b2d2      	uxtb	r2, r2
 800079e:	440b      	add	r3, r1
 80007a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a4:	e00a      	b.n	80007bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4908      	ldr	r1, [pc, #32]	@ (80007cc <__NVIC_SetPriority+0x50>)
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	f003 030f 	and.w	r3, r3, #15
 80007b2:	3b04      	subs	r3, #4
 80007b4:	0112      	lsls	r2, r2, #4
 80007b6:	b2d2      	uxtb	r2, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	761a      	strb	r2, [r3, #24]
}
 80007bc:	bf00      	nop
 80007be:	370c      	adds	r7, #12
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bc80      	pop	{r7}
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	e000e100 	.word	0xe000e100
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b089      	sub	sp, #36	@ 0x24
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	60f8      	str	r0, [r7, #12]
 80007d8:	60b9      	str	r1, [r7, #8]
 80007da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e4:	69fb      	ldr	r3, [r7, #28]
 80007e6:	f1c3 0307 	rsb	r3, r3, #7
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	bf28      	it	cs
 80007ee:	2304      	movcs	r3, #4
 80007f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	3304      	adds	r3, #4
 80007f6:	2b06      	cmp	r3, #6
 80007f8:	d902      	bls.n	8000800 <NVIC_EncodePriority+0x30>
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3b03      	subs	r3, #3
 80007fe:	e000      	b.n	8000802 <NVIC_EncodePriority+0x32>
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	69bb      	ldr	r3, [r7, #24]
 800080a:	fa02 f303 	lsl.w	r3, r2, r3
 800080e:	43da      	mvns	r2, r3
 8000810:	68bb      	ldr	r3, [r7, #8]
 8000812:	401a      	ands	r2, r3
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000818:	f04f 31ff 	mov.w	r1, #4294967295
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	fa01 f303 	lsl.w	r3, r1, r3
 8000822:	43d9      	mvns	r1, r3
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000828:	4313      	orrs	r3, r2
         );
}
 800082a:	4618      	mov	r0, r3
 800082c:	3724      	adds	r7, #36	@ 0x24
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	3b01      	subs	r3, #1
 8000840:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000844:	d301      	bcc.n	800084a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000846:	2301      	movs	r3, #1
 8000848:	e00f      	b.n	800086a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <SysTick_Config+0x40>)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	3b01      	subs	r3, #1
 8000850:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000852:	210f      	movs	r1, #15
 8000854:	f04f 30ff 	mov.w	r0, #4294967295
 8000858:	f7ff ff90 	bl	800077c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	4b05      	ldr	r3, [pc, #20]	@ (8000874 <SysTick_Config+0x40>)
 800085e:	2200      	movs	r2, #0
 8000860:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	4b04      	ldr	r3, [pc, #16]	@ (8000874 <SysTick_Config+0x40>)
 8000864:	2207      	movs	r2, #7
 8000866:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000868:	2300      	movs	r3, #0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	e000e010 	.word	0xe000e010

08000878 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ff2d 	bl	80006e0 <__NVIC_SetPriorityGrouping>
}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}

0800088e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800088e:	b580      	push	{r7, lr}
 8000890:	b086      	sub	sp, #24
 8000892:	af00      	add	r7, sp, #0
 8000894:	4603      	mov	r3, r0
 8000896:	60b9      	str	r1, [r7, #8]
 8000898:	607a      	str	r2, [r7, #4]
 800089a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008a0:	f7ff ff42 	bl	8000728 <__NVIC_GetPriorityGrouping>
 80008a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	68b9      	ldr	r1, [r7, #8]
 80008aa:	6978      	ldr	r0, [r7, #20]
 80008ac:	f7ff ff90 	bl	80007d0 <NVIC_EncodePriority>
 80008b0:	4602      	mov	r2, r0
 80008b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f7ff ff5f 	bl	800077c <__NVIC_SetPriority>
}
 80008be:	bf00      	nop
 80008c0:	3718      	adds	r7, #24
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}

080008c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008c6:	b580      	push	{r7, lr}
 80008c8:	b082      	sub	sp, #8
 80008ca:	af00      	add	r7, sp, #0
 80008cc:	4603      	mov	r3, r0
 80008ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff35 	bl	8000744 <__NVIC_EnableIRQ>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ea:	6878      	ldr	r0, [r7, #4]
 80008ec:	f7ff ffa2 	bl	8000834 <SysTick_Config>
 80008f0:	4603      	mov	r3, r0
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	3708      	adds	r7, #8
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80008fe:	f001 f813 	bl	8001928 <HAL_SYSTICK_Callback>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
	...

08000908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000908:	b480      	push	{r7}
 800090a:	b08b      	sub	sp, #44	@ 0x2c
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800091a:	e169      	b.n	8000bf0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800091c:	2201      	movs	r2, #1
 800091e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000920:	fa02 f303 	lsl.w	r3, r2, r3
 8000924:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	69fa      	ldr	r2, [r7, #28]
 800092c:	4013      	ands	r3, r2
 800092e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000930:	69ba      	ldr	r2, [r7, #24]
 8000932:	69fb      	ldr	r3, [r7, #28]
 8000934:	429a      	cmp	r2, r3
 8000936:	f040 8158 	bne.w	8000bea <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	4a9a      	ldr	r2, [pc, #616]	@ (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d05e      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000944:	4a98      	ldr	r2, [pc, #608]	@ (8000ba8 <HAL_GPIO_Init+0x2a0>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d875      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800094a:	4a98      	ldr	r2, [pc, #608]	@ (8000bac <HAL_GPIO_Init+0x2a4>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d058      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000950:	4a96      	ldr	r2, [pc, #600]	@ (8000bac <HAL_GPIO_Init+0x2a4>)
 8000952:	4293      	cmp	r3, r2
 8000954:	d86f      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000956:	4a96      	ldr	r2, [pc, #600]	@ (8000bb0 <HAL_GPIO_Init+0x2a8>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d052      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 800095c:	4a94      	ldr	r2, [pc, #592]	@ (8000bb0 <HAL_GPIO_Init+0x2a8>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d869      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000962:	4a94      	ldr	r2, [pc, #592]	@ (8000bb4 <HAL_GPIO_Init+0x2ac>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d04c      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000968:	4a92      	ldr	r2, [pc, #584]	@ (8000bb4 <HAL_GPIO_Init+0x2ac>)
 800096a:	4293      	cmp	r3, r2
 800096c:	d863      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800096e:	4a92      	ldr	r2, [pc, #584]	@ (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000970:	4293      	cmp	r3, r2
 8000972:	d046      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
 8000974:	4a90      	ldr	r2, [pc, #576]	@ (8000bb8 <HAL_GPIO_Init+0x2b0>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d85d      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 800097a:	2b12      	cmp	r3, #18
 800097c:	d82a      	bhi.n	80009d4 <HAL_GPIO_Init+0xcc>
 800097e:	2b12      	cmp	r3, #18
 8000980:	d859      	bhi.n	8000a36 <HAL_GPIO_Init+0x12e>
 8000982:	a201      	add	r2, pc, #4	@ (adr r2, 8000988 <HAL_GPIO_Init+0x80>)
 8000984:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000988:	08000a03 	.word	0x08000a03
 800098c:	080009dd 	.word	0x080009dd
 8000990:	080009ef 	.word	0x080009ef
 8000994:	08000a31 	.word	0x08000a31
 8000998:	08000a37 	.word	0x08000a37
 800099c:	08000a37 	.word	0x08000a37
 80009a0:	08000a37 	.word	0x08000a37
 80009a4:	08000a37 	.word	0x08000a37
 80009a8:	08000a37 	.word	0x08000a37
 80009ac:	08000a37 	.word	0x08000a37
 80009b0:	08000a37 	.word	0x08000a37
 80009b4:	08000a37 	.word	0x08000a37
 80009b8:	08000a37 	.word	0x08000a37
 80009bc:	08000a37 	.word	0x08000a37
 80009c0:	08000a37 	.word	0x08000a37
 80009c4:	08000a37 	.word	0x08000a37
 80009c8:	08000a37 	.word	0x08000a37
 80009cc:	080009e5 	.word	0x080009e5
 80009d0:	080009f9 	.word	0x080009f9
 80009d4:	4a79      	ldr	r2, [pc, #484]	@ (8000bbc <HAL_GPIO_Init+0x2b4>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d013      	beq.n	8000a02 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009da:	e02c      	b.n	8000a36 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009dc:	683b      	ldr	r3, [r7, #0]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	623b      	str	r3, [r7, #32]
          break;
 80009e2:	e029      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	3304      	adds	r3, #4
 80009ea:	623b      	str	r3, [r7, #32]
          break;
 80009ec:	e024      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	68db      	ldr	r3, [r3, #12]
 80009f2:	3308      	adds	r3, #8
 80009f4:	623b      	str	r3, [r7, #32]
          break;
 80009f6:	e01f      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	330c      	adds	r3, #12
 80009fe:	623b      	str	r3, [r7, #32]
          break;
 8000a00:	e01a      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	689b      	ldr	r3, [r3, #8]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d102      	bne.n	8000a10 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	623b      	str	r3, [r7, #32]
          break;
 8000a0e:	e013      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d105      	bne.n	8000a24 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a18:	2308      	movs	r3, #8
 8000a1a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	69fa      	ldr	r2, [r7, #28]
 8000a20:	611a      	str	r2, [r3, #16]
          break;
 8000a22:	e009      	b.n	8000a38 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a24:	2308      	movs	r3, #8
 8000a26:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	69fa      	ldr	r2, [r7, #28]
 8000a2c:	615a      	str	r2, [r3, #20]
          break;
 8000a2e:	e003      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a30:	2300      	movs	r3, #0
 8000a32:	623b      	str	r3, [r7, #32]
          break;
 8000a34:	e000      	b.n	8000a38 <HAL_GPIO_Init+0x130>
          break;
 8000a36:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a38:	69bb      	ldr	r3, [r7, #24]
 8000a3a:	2bff      	cmp	r3, #255	@ 0xff
 8000a3c:	d801      	bhi.n	8000a42 <HAL_GPIO_Init+0x13a>
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	e001      	b.n	8000a46 <HAL_GPIO_Init+0x13e>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	3304      	adds	r3, #4
 8000a46:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a48:	69bb      	ldr	r3, [r7, #24]
 8000a4a:	2bff      	cmp	r3, #255	@ 0xff
 8000a4c:	d802      	bhi.n	8000a54 <HAL_GPIO_Init+0x14c>
 8000a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	e002      	b.n	8000a5a <HAL_GPIO_Init+0x152>
 8000a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a56:	3b08      	subs	r3, #8
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	210f      	movs	r1, #15
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	43db      	mvns	r3, r3
 8000a6a:	401a      	ands	r2, r3
 8000a6c:	6a39      	ldr	r1, [r7, #32]
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	fa01 f303 	lsl.w	r3, r1, r3
 8000a74:	431a      	orrs	r2, r3
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 80b1 	beq.w	8000bea <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a88:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc0 <HAL_GPIO_Init+0x2b8>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000aa0:	4a48      	ldr	r2, [pc, #288]	@ (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	68fa      	ldr	r2, [r7, #12]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	4a40      	ldr	r2, [pc, #256]	@ (8000bc8 <HAL_GPIO_Init+0x2c0>)
 8000ac8:	4293      	cmp	r3, r2
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1ec>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	@ (8000bcc <HAL_GPIO_Init+0x2c4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1e8>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a3e      	ldr	r2, [pc, #248]	@ (8000bd0 <HAL_GPIO_Init+0x2c8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1e4>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a3d      	ldr	r2, [pc, #244]	@ (8000bd4 <HAL_GPIO_Init+0x2cc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1e0>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000ae8:	2304      	movs	r3, #4
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1ee>
 8000af4:	2300      	movs	r3, #0
 8000af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b06:	492f      	ldr	r1, [pc, #188]	@ (8000bc4 <HAL_GPIO_Init+0x2bc>)
 8000b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d006      	beq.n	8000b2e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b20:	4b2d      	ldr	r3, [pc, #180]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	492c      	ldr	r1, [pc, #176]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b26:	69bb      	ldr	r3, [r7, #24]
 8000b28:	4313      	orrs	r3, r2
 8000b2a:	608b      	str	r3, [r1, #8]
 8000b2c:	e006      	b.n	8000b3c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b30:	689a      	ldr	r2, [r3, #8]
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	43db      	mvns	r3, r3
 8000b36:	4928      	ldr	r1, [pc, #160]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b38:	4013      	ands	r3, r2
 8000b3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d006      	beq.n	8000b56 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b48:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4a:	68da      	ldr	r2, [r3, #12]
 8000b4c:	4922      	ldr	r1, [pc, #136]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	60cb      	str	r3, [r1, #12]
 8000b54:	e006      	b.n	8000b64 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	69bb      	ldr	r3, [r7, #24]
 8000b5c:	43db      	mvns	r3, r3
 8000b5e:	491e      	ldr	r1, [pc, #120]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d006      	beq.n	8000b7e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b70:	4b19      	ldr	r3, [pc, #100]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b72:	685a      	ldr	r2, [r3, #4]
 8000b74:	4918      	ldr	r1, [pc, #96]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	4313      	orrs	r3, r2
 8000b7a:	604b      	str	r3, [r1, #4]
 8000b7c:	e006      	b.n	8000b8c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b7e:	4b16      	ldr	r3, [pc, #88]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b80:	685a      	ldr	r2, [r3, #4]
 8000b82:	69bb      	ldr	r3, [r7, #24]
 8000b84:	43db      	mvns	r3, r3
 8000b86:	4914      	ldr	r1, [pc, #80]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b88:	4013      	ands	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d021      	beq.n	8000bdc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	490e      	ldr	r1, [pc, #56]	@ (8000bd8 <HAL_GPIO_Init+0x2d0>)
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	600b      	str	r3, [r1, #0]
 8000ba4:	e021      	b.n	8000bea <HAL_GPIO_Init+0x2e2>
 8000ba6:	bf00      	nop
 8000ba8:	10320000 	.word	0x10320000
 8000bac:	10310000 	.word	0x10310000
 8000bb0:	10220000 	.word	0x10220000
 8000bb4:	10210000 	.word	0x10210000
 8000bb8:	10120000 	.word	0x10120000
 8000bbc:	10110000 	.word	0x10110000
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	40010000 	.word	0x40010000
 8000bc8:	40010800 	.word	0x40010800
 8000bcc:	40010c00 	.word	0x40010c00
 8000bd0:	40011000 	.word	0x40011000
 8000bd4:	40011400 	.word	0x40011400
 8000bd8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_GPIO_Init+0x304>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	69bb      	ldr	r3, [r7, #24]
 8000be2:	43db      	mvns	r3, r3
 8000be4:	4909      	ldr	r1, [pc, #36]	@ (8000c0c <HAL_GPIO_Init+0x304>)
 8000be6:	4013      	ands	r3, r2
 8000be8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	3301      	adds	r3, #1
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	f47f ae8e 	bne.w	800091c <HAL_GPIO_Init+0x14>
  }
}
 8000c00:	bf00      	nop
 8000c02:	bf00      	nop
 8000c04:	372c      	adds	r7, #44	@ 0x2c
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr
 8000c0c:	40010400 	.word	0x40010400

08000c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b085      	sub	sp, #20
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
 8000c18:	460b      	mov	r3, r1
 8000c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689a      	ldr	r2, [r3, #8]
 8000c20:	887b      	ldrh	r3, [r7, #2]
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d002      	beq.n	8000c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c28:	2301      	movs	r3, #1
 8000c2a:	73fb      	strb	r3, [r7, #15]
 8000c2c:	e001      	b.n	8000c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3714      	adds	r7, #20
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	807b      	strh	r3, [r7, #2]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c4e:	787b      	ldrb	r3, [r7, #1]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d003      	beq.n	8000c5c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c54:	887a      	ldrh	r2, [r7, #2]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c5a:	e003      	b.n	8000c64 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c5c:	887b      	ldrh	r3, [r7, #2]
 8000c5e:	041a      	lsls	r2, r3, #16
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	611a      	str	r2, [r3, #16]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bc80      	pop	{r7}
 8000c6c:	4770      	bx	lr

08000c6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b085      	sub	sp, #20
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	460b      	mov	r3, r1
 8000c78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000c80:	887a      	ldrh	r2, [r7, #2]
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	4013      	ands	r3, r2
 8000c86:	041a      	lsls	r2, r3, #16
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	43d9      	mvns	r1, r3
 8000c8c:	887b      	ldrh	r3, [r7, #2]
 8000c8e:	400b      	ands	r3, r1
 8000c90:	431a      	orrs	r2, r3
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	611a      	str	r2, [r3, #16]
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000caa:	4b08      	ldr	r3, [pc, #32]	@ (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cac:	695a      	ldr	r2, [r3, #20]
 8000cae:	88fb      	ldrh	r3, [r7, #6]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d006      	beq.n	8000cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000cb6:	4a05      	ldr	r2, [pc, #20]	@ (8000ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cb8:	88fb      	ldrh	r3, [r7, #6]
 8000cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000cbc:	88fb      	ldrh	r3, [r7, #6]
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f000 f806 	bl	8000cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40010400 	.word	0x40010400

08000cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bc80      	pop	{r7}
 8000ce2:	4770      	bx	lr

08000ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e272      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 8087 	beq.w	8000e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d04:	4b92      	ldr	r3, [pc, #584]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d00c      	beq.n	8000d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d10:	4b8f      	ldr	r3, [pc, #572]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d112      	bne.n	8000d42 <HAL_RCC_OscConfig+0x5e>
 8000d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d28:	d10b      	bne.n	8000d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2a:	4b89      	ldr	r3, [pc, #548]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d06c      	beq.n	8000e10 <HAL_RCC_OscConfig+0x12c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d168      	bne.n	8000e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e24c      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4a:	d106      	bne.n	8000d5a <HAL_RCC_OscConfig+0x76>
 8000d4c:	4b80      	ldr	r3, [pc, #512]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a7f      	ldr	r2, [pc, #508]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e02e      	b.n	8000db8 <HAL_RCC_OscConfig+0xd4>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x98>
 8000d62:	4b7b      	ldr	r3, [pc, #492]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a7a      	ldr	r2, [pc, #488]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b78      	ldr	r3, [pc, #480]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a77      	ldr	r2, [pc, #476]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e01d      	b.n	8000db8 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0xbc>
 8000d86:	4b72      	ldr	r3, [pc, #456]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a71      	ldr	r2, [pc, #452]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b6f      	ldr	r3, [pc, #444]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a6e      	ldr	r2, [pc, #440]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e00b      	b.n	8000db8 <HAL_RCC_OscConfig+0xd4>
 8000da0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b68      	ldr	r3, [pc, #416]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a67      	ldr	r2, [pc, #412]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d013      	beq.n	8000de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fc60 	bl	8000684 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fc5c 	bl	8000684 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	@ 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e200      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	4b5d      	ldr	r3, [pc, #372]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xe4>
 8000de6:	e014      	b.n	8000e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fc4c 	bl	8000684 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df0:	f7ff fc48 	bl	8000684 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	@ 0x64
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e1ec      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e02:	4b53      	ldr	r3, [pc, #332]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0x10c>
 8000e0e:	e000      	b.n	8000e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d063      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00b      	beq.n	8000e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2a:	4b49      	ldr	r3, [pc, #292]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d11c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x18c>
 8000e36:	4b46      	ldr	r3, [pc, #280]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d116      	bne.n	8000e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	4b43      	ldr	r3, [pc, #268]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <HAL_RCC_OscConfig+0x176>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d001      	beq.n	8000e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e1c0      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4939      	ldr	r1, [pc, #228]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	e03a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d020      	beq.n	8000eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e78:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fc01 	bl	8000684 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fbfd 	bl	8000684 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1a1      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	4927      	ldr	r1, [pc, #156]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
 8000eb8:	e015      	b.n	8000ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fbe0 	bl	8000684 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fbdc 	bl	8000684 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e180      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d03a      	beq.n	8000f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d019      	beq.n	8000f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_RCC_OscConfig+0x274>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f00:	f7ff fbc0 	bl	8000684 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fbbc 	bl	8000684 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e160      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 face 	bl	80014c8 <RCC_Delay>
 8000f2c:	e01c      	b.n	8000f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_RCC_OscConfig+0x274>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fba6 	bl	8000684 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3a:	e00f      	b.n	8000f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fba2 	bl	8000684 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d908      	bls.n	8000f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e146      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	42420000 	.word	0x42420000
 8000f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e9      	bne.n	8000f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80a6 	beq.w	80010c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10d      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b88      	ldr	r3, [pc, #544]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a87      	ldr	r2, [pc, #540]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b85      	ldr	r3, [pc, #532]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa2:	4b82      	ldr	r3, [pc, #520]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d118      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fae:	4b7f      	ldr	r3, [pc, #508]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fb63 	bl	8000684 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc2:	f7ff fb5f 	bl	8000684 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b64      	cmp	r3, #100	@ 0x64
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e103      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	4b75      	ldr	r3, [pc, #468]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x312>
 8000fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a6e      	ldr	r2, [pc, #440]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	e02d      	b.n	8001052 <HAL_RCC_OscConfig+0x36e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x334>
 8000ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a69      	ldr	r2, [pc, #420]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	4b67      	ldr	r3, [pc, #412]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a66      	ldr	r2, [pc, #408]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	e01c      	b.n	8001052 <HAL_RCC_OscConfig+0x36e>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d10c      	bne.n	800103a <HAL_RCC_OscConfig+0x356>
 8001020:	4b61      	ldr	r3, [pc, #388]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a60      	ldr	r2, [pc, #384]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6213      	str	r3, [r2, #32]
 800102c:	4b5e      	ldr	r3, [pc, #376]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4a5d      	ldr	r2, [pc, #372]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6213      	str	r3, [r2, #32]
 8001038:	e00b      	b.n	8001052 <HAL_RCC_OscConfig+0x36e>
 800103a:	4b5b      	ldr	r3, [pc, #364]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a5a      	ldr	r2, [pc, #360]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	4b58      	ldr	r3, [pc, #352]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a57      	ldr	r2, [pc, #348]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f023 0304 	bic.w	r3, r3, #4
 8001050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d015      	beq.n	8001086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fb13 	bl	8000684 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fb0f 	bl	8000684 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e0b1      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	4b4b      	ldr	r3, [pc, #300]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0ee      	beq.n	8001062 <HAL_RCC_OscConfig+0x37e>
 8001084:	e014      	b.n	80010b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fafd 	bl	8000684 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff faf9 	bl	8000684 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e09b      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	4b40      	ldr	r3, [pc, #256]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ee      	bne.n	800108e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d105      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a3b      	ldr	r2, [pc, #236]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8087 	beq.w	80011da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010cc:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d061      	beq.n	800119c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d146      	bne.n	800116e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e0:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <HAL_RCC_OscConfig+0x4cc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff facd 	bl	8000684 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fac9 	bl	8000684 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e06d      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001114:	d108      	bne.n	8001128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4921      	ldr	r1, [pc, #132]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a19      	ldr	r1, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001138:	430b      	orrs	r3, r1
 800113a:	491b      	ldr	r1, [pc, #108]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_RCC_OscConfig+0x4cc>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fa9d 	bl	8000684 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fa99 	bl	8000684 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e03d      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x46a>
 800116c:	e035      	b.n	80011da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <HAL_RCC_OscConfig+0x4cc>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff fa86 	bl	8000684 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff fa82 	bl	8000684 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e026      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x498>
 800119a:	e01e      	b.n	80011da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d107      	bne.n	80011b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e019      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40007000 	.word	0x40007000
 80011b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_RCC_OscConfig+0x500>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0d0      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011fc:	4b6a      	ldr	r3, [pc, #424]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d910      	bls.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b67      	ldr	r3, [pc, #412]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0207 	bic.w	r2, r3, #7
 8001212:	4965      	ldr	r1, [pc, #404]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a58      	ldr	r2, [pc, #352]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800124e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d040      	beq.n	8001308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d115      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e073      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06b      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f023 0203 	bic.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4936      	ldr	r1, [pc, #216]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff f9d4 	bl	8000684 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff f9d0 	bl	8000684 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e053      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 020c 	and.w	r2, r3, #12
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d1eb      	bne.n	80012e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d210      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f821 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 800137a:	4602      	mov	r2, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	490a      	ldr	r1, [pc, #40]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001388:	5ccb      	ldrb	r3, [r1, r3]
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f932 	bl	8000600 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	08004dec 	.word	0x08004dec
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x94>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x30>
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ea:	e027      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	613b      	str	r3, [r7, #16]
      break;
 80013f0:	e027      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d010      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x94>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	0c5b      	lsrs	r3, r3, #17
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	4a11      	ldr	r2, [pc, #68]	@ (800145c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	fb03 f202 	mul.w	r2, r3, r2
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e004      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	613b      	str	r3, [r7, #16]
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x98>)
 800143e:	613b      	str	r3, [r7, #16]
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	693b      	ldr	r3, [r7, #16]
}
 8001444:	4618      	mov	r0, r3
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	007a1200 	.word	0x007a1200
 8001458:	08004e04 	.word	0x08004e04
 800145c:	08004e14 	.word	0x08004e14
 8001460:	003d0900 	.word	0x003d0900

08001464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001468:	4b02      	ldr	r3, [pc, #8]	@ (8001474 <HAL_RCC_GetHCLKFreq+0x10>)
 800146a:	681b      	ldr	r3, [r3, #0]
}
 800146c:	4618      	mov	r0, r3
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr
 8001474:	20000000 	.word	0x20000000

08001478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800147c:	f7ff fff2 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 8001480:	4602      	mov	r2, r0
 8001482:	4b05      	ldr	r3, [pc, #20]	@ (8001498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	0a1b      	lsrs	r3, r3, #8
 8001488:	f003 0307 	and.w	r3, r3, #7
 800148c:	4903      	ldr	r1, [pc, #12]	@ (800149c <HAL_RCC_GetPCLK1Freq+0x24>)
 800148e:	5ccb      	ldrb	r3, [r1, r3]
 8001490:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001494:	4618      	mov	r0, r3
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40021000 	.word	0x40021000
 800149c:	08004dfc 	.word	0x08004dfc

080014a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80014a4:	f7ff ffde 	bl	8001464 <HAL_RCC_GetHCLKFreq>
 80014a8:	4602      	mov	r2, r0
 80014aa:	4b05      	ldr	r3, [pc, #20]	@ (80014c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	0adb      	lsrs	r3, r3, #11
 80014b0:	f003 0307 	and.w	r3, r3, #7
 80014b4:	4903      	ldr	r1, [pc, #12]	@ (80014c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014b6:	5ccb      	ldrb	r3, [r1, r3]
 80014b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014bc:	4618      	mov	r0, r3
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	08004dfc 	.word	0x08004dfc

080014c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014d0:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <RCC_Delay+0x34>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001500 <RCC_Delay+0x38>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0a5b      	lsrs	r3, r3, #9
 80014dc:	687a      	ldr	r2, [r7, #4]
 80014de:	fb02 f303 	mul.w	r3, r2, r3
 80014e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014e4:	bf00      	nop
  }
  while (Delay --);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1e5a      	subs	r2, r3, #1
 80014ea:	60fa      	str	r2, [r7, #12]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f9      	bne.n	80014e4 <RCC_Delay+0x1c>
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr
 80014fc:	20000000 	.word	0x20000000
 8001500:	10624dd3 	.word	0x10624dd3

08001504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d101      	bne.n	8001516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e042      	b.n	800159c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800151c:	b2db      	uxtb	r3, r3
 800151e:	2b00      	cmp	r3, #0
 8001520:	d106      	bne.n	8001530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2200      	movs	r2, #0
 8001526:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7fe ff7c 	bl	8000428 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2224      	movs	r2, #36	@ 0x24
 8001534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68da      	ldr	r2, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 f82b 	bl	80015a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800155c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	695a      	ldr	r2, [r3, #20]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800156c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	68da      	ldr	r2, [r3, #12]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800157c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2200      	movs	r2, #0
 8001582:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2220      	movs	r2, #32
 8001588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2220      	movs	r2, #32
 8001590:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800159a:	2300      	movs	r3, #0
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689a      	ldr	r2, [r3, #8]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	431a      	orrs	r2, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68db      	ldr	r3, [r3, #12]
 80015da:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015de:	f023 030c 	bic.w	r3, r3, #12
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	6812      	ldr	r2, [r2, #0]
 80015e6:	68b9      	ldr	r1, [r7, #8]
 80015e8:	430b      	orrs	r3, r1
 80015ea:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699a      	ldr	r2, [r3, #24]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	430a      	orrs	r2, r1
 8001600:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a2c      	ldr	r2, [pc, #176]	@ (80016b8 <UART_SetConfig+0x114>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d103      	bne.n	8001614 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800160c:	f7ff ff48 	bl	80014a0 <HAL_RCC_GetPCLK2Freq>
 8001610:	60f8      	str	r0, [r7, #12]
 8001612:	e002      	b.n	800161a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001614:	f7ff ff30 	bl	8001478 <HAL_RCC_GetPCLK1Freq>
 8001618:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800161a:	68fa      	ldr	r2, [r7, #12]
 800161c:	4613      	mov	r3, r2
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	4413      	add	r3, r2
 8001622:	009a      	lsls	r2, r3, #2
 8001624:	441a      	add	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001630:	4a22      	ldr	r2, [pc, #136]	@ (80016bc <UART_SetConfig+0x118>)
 8001632:	fba2 2303 	umull	r2, r3, r2, r3
 8001636:	095b      	lsrs	r3, r3, #5
 8001638:	0119      	lsls	r1, r3, #4
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4613      	mov	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	4413      	add	r3, r2
 8001642:	009a      	lsls	r2, r3, #2
 8001644:	441a      	add	r2, r3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	009b      	lsls	r3, r3, #2
 800164c:	fbb2 f2f3 	udiv	r2, r2, r3
 8001650:	4b1a      	ldr	r3, [pc, #104]	@ (80016bc <UART_SetConfig+0x118>)
 8001652:	fba3 0302 	umull	r0, r3, r3, r2
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	2064      	movs	r0, #100	@ 0x64
 800165a:	fb00 f303 	mul.w	r3, r0, r3
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	3332      	adds	r3, #50	@ 0x32
 8001664:	4a15      	ldr	r2, [pc, #84]	@ (80016bc <UART_SetConfig+0x118>)
 8001666:	fba2 2303 	umull	r2, r3, r2, r3
 800166a:	095b      	lsrs	r3, r3, #5
 800166c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001670:	4419      	add	r1, r3
 8001672:	68fa      	ldr	r2, [r7, #12]
 8001674:	4613      	mov	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	4413      	add	r3, r2
 800167a:	009a      	lsls	r2, r3, #2
 800167c:	441a      	add	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fbb2 f2f3 	udiv	r2, r2, r3
 8001688:	4b0c      	ldr	r3, [pc, #48]	@ (80016bc <UART_SetConfig+0x118>)
 800168a:	fba3 0302 	umull	r0, r3, r3, r2
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2064      	movs	r0, #100	@ 0x64
 8001692:	fb00 f303 	mul.w	r3, r0, r3
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	011b      	lsls	r3, r3, #4
 800169a:	3332      	adds	r3, #50	@ 0x32
 800169c:	4a07      	ldr	r2, [pc, #28]	@ (80016bc <UART_SetConfig+0x118>)
 800169e:	fba2 2303 	umull	r2, r3, r2, r3
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	f003 020f 	and.w	r2, r3, #15
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	440a      	add	r2, r1
 80016ae:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80016b0:	bf00      	nop
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40013800 	.word	0x40013800
 80016bc:	51eb851f 	.word	0x51eb851f

080016c0 <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 80016c0:	b590      	push	{r4, r7, lr}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 80016c6:	b672      	cpsid	i
 80016c8:	4b4d      	ldr	r3, [pc, #308]	@ (8001800 <app_init+0x140>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a4d      	ldr	r2, [pc, #308]	@ (8001804 <app_init+0x144>)
 80016ce:	213f      	movs	r1, #63	@ 0x3f
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 f9f7 	bl	8003ac4 <sniprintf>
 80016d6:	4603      	mov	r3, r0
 80016d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001808 <app_init+0x148>)
 80016da:	6013      	str	r3, [r2, #0]
 80016dc:	4b48      	ldr	r3, [pc, #288]	@ (8001800 <app_init+0x140>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fc83 	bl	8001fec <logger_log_print_>
 80016e6:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 80016e8:	b672      	cpsid	i
 80016ea:	4b45      	ldr	r3, [pc, #276]	@ (8001800 <app_init+0x140>)
 80016ec:	681c      	ldr	r4, [r3, #0]
 80016ee:	f7fe ffc9 	bl	8000684 <HAL_GetTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	4b45      	ldr	r3, [pc, #276]	@ (800180c <app_init+0x14c>)
 80016f8:	4a45      	ldr	r2, [pc, #276]	@ (8001810 <app_init+0x150>)
 80016fa:	213f      	movs	r1, #63	@ 0x3f
 80016fc:	4620      	mov	r0, r4
 80016fe:	f002 f9e1 	bl	8003ac4 <sniprintf>
 8001702:	4603      	mov	r3, r0
 8001704:	4a40      	ldr	r2, [pc, #256]	@ (8001808 <app_init+0x148>)
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	4b3d      	ldr	r3, [pc, #244]	@ (8001800 <app_init+0x140>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f000 fc6d 	bl	8001fec <logger_log_print_>
 8001712:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001714:	b672      	cpsid	i
 8001716:	4b3a      	ldr	r3, [pc, #232]	@ (8001800 <app_init+0x140>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a3e      	ldr	r2, [pc, #248]	@ (8001814 <app_init+0x154>)
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	213f      	movs	r1, #63	@ 0x3f
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f9cf 	bl	8003ac4 <sniprintf>
 8001726:	4603      	mov	r3, r0
 8001728:	4a37      	ldr	r2, [pc, #220]	@ (8001808 <app_init+0x148>)
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b34      	ldr	r3, [pc, #208]	@ (8001800 <app_init+0x140>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fc5b 	bl	8001fec <logger_log_print_>
 8001736:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001738:	b672      	cpsid	i
 800173a:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <app_init+0x140>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a36      	ldr	r2, [pc, #216]	@ (8001818 <app_init+0x158>)
 8001740:	6812      	ldr	r2, [r2, #0]
 8001742:	213f      	movs	r1, #63	@ 0x3f
 8001744:	4618      	mov	r0, r3
 8001746:	f002 f9bd 	bl	8003ac4 <sniprintf>
 800174a:	4603      	mov	r3, r0
 800174c:	4a2e      	ldr	r2, [pc, #184]	@ (8001808 <app_init+0x148>)
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b2b      	ldr	r3, [pc, #172]	@ (8001800 <app_init+0x140>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4618      	mov	r0, r3
 8001756:	f000 fc49 	bl	8001fec <logger_log_print_>
 800175a:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 800175c:	4b2f      	ldr	r3, [pc, #188]	@ (800181c <app_init+0x15c>)
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 8001762:	b672      	cpsid	i
 8001764:	4b26      	ldr	r3, [pc, #152]	@ (8001800 <app_init+0x140>)
 8001766:	6818      	ldr	r0, [r3, #0]
 8001768:	4b2c      	ldr	r3, [pc, #176]	@ (800181c <app_init+0x15c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4b2c      	ldr	r3, [pc, #176]	@ (8001820 <app_init+0x160>)
 8001770:	4a2c      	ldr	r2, [pc, #176]	@ (8001824 <app_init+0x164>)
 8001772:	213f      	movs	r1, #63	@ 0x3f
 8001774:	f002 f9a6 	bl	8003ac4 <sniprintf>
 8001778:	4603      	mov	r3, r0
 800177a:	4a23      	ldr	r2, [pc, #140]	@ (8001808 <app_init+0x148>)
 800177c:	6013      	str	r3, [r2, #0]
 800177e:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <app_init+0x140>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 fc32 	bl	8001fec <logger_log_print_>
 8001788:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 800178a:	2300      	movs	r3, #0
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	e020      	b.n	80017d2 <app_init+0x112>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 8001790:	4925      	ldr	r1, [pc, #148]	@ (8001828 <app_init+0x168>)
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4613      	mov	r3, r2
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	4413      	add	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	440b      	add	r3, r1
 800179e:	6819      	ldr	r1, [r3, #0]
 80017a0:	4821      	ldr	r0, [pc, #132]	@ (8001828 <app_init+0x168>)
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	4403      	add	r3, r0
 80017ae:	3308      	adds	r3, #8
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80017b6:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <app_init+0x16c>)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2100      	movs	r1, #0
 80017bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		task_dta_list[index].BCET = TASK_X_BCET_INI;
 80017c0:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <app_init+0x16c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	00db      	lsls	r3, r3, #3
 80017c6:	4413      	add	r3, r2
 80017c8:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <app_init+0x170>)
 80017ca:	605a      	str	r2, [r3, #4]
	for (index = 0; TASK_QTY > index; index++)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3301      	adds	r3, #1
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d9db      	bls.n	8001790 <app_init+0xd0>
	}

	cycle_counter_init();
 80017d8:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <app_init+0x174>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	4a15      	ldr	r2, [pc, #84]	@ (8001834 <app_init+0x174>)
 80017de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017e2:	60d3      	str	r3, [r2, #12]
 80017e4:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <app_init+0x178>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <app_init+0x178>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a12      	ldr	r2, [pc, #72]	@ (8001838 <app_init+0x178>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	6013      	str	r3, [r2, #0]
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}
 80017fe:	bf00      	nop
 8001800:	08004e3c 	.word	0x08004e3c
 8001804:	08004ab8 	.word	0x08004ab8
 8001808:	200003bc 	.word	0x200003bc
 800180c:	08004abc 	.word	0x08004abc
 8001810:	08004ac8 	.word	0x08004ac8
 8001814:	2000000c 	.word	0x2000000c
 8001818:	20000010 	.word	0x20000010
 800181c:	20000340 	.word	0x20000340
 8001820:	08004aec 	.word	0x08004aec
 8001824:	08004af8 	.word	0x08004af8
 8001828:	08004e18 	.word	0x08004e18
 800182c:	2000034c 	.word	0x2000034c
 8001830:	0007a120 	.word	0x0007a120
 8001834:	e000edf0 	.word	0xe000edf0
 8001838:	e0001000 	.word	0xe0001000

0800183c <app_update>:

void app_update(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 8001842:	4b31      	ldr	r3, [pc, #196]	@ (8001908 <app_update+0xcc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d05a      	beq.n	8001900 <app_update+0xc4>
    {
    	g_app_tick_cnt--;
 800184a:	4b2f      	ldr	r3, [pc, #188]	@ (8001908 <app_update+0xcc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	3b01      	subs	r3, #1
 8001850:	4a2d      	ldr	r2, [pc, #180]	@ (8001908 <app_update+0xcc>)
 8001852:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8001854:	4b2d      	ldr	r3, [pc, #180]	@ (800190c <app_update+0xd0>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3301      	adds	r3, #1
 800185a:	4a2c      	ldr	r2, [pc, #176]	@ (800190c <app_update+0xd0>)
 800185c:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 800185e:	4b2c      	ldr	r3, [pc, #176]	@ (8001910 <app_update+0xd4>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e047      	b.n	80018fa <app_update+0xbe>
    	{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 800186a:	4b2a      	ldr	r3, [pc, #168]	@ (8001914 <app_update+0xd8>)
 800186c:	2200      	movs	r2, #0
 800186e:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 8001870:	4929      	ldr	r1, [pc, #164]	@ (8001918 <app_update+0xdc>)
 8001872:	68fa      	ldr	r2, [r7, #12]
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	440b      	add	r3, r1
 800187e:	3304      	adds	r3, #4
 8001880:	6819      	ldr	r1, [r3, #0]
 8001882:	4825      	ldr	r0, [pc, #148]	@ (8001918 <app_update+0xdc>)
 8001884:	68fa      	ldr	r2, [r7, #12]
 8001886:	4613      	mov	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	4413      	add	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4403      	add	r3, r0
 8001890:	3308      	adds	r3, #8
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8001898:	4b1e      	ldr	r3, [pc, #120]	@ (8001914 <app_update+0xd8>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 800189e:	4b1d      	ldr	r3, [pc, #116]	@ (8001914 <app_update+0xd8>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	4b1e      	ldr	r3, [pc, #120]	@ (800191c <app_update+0xe0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	491e      	ldr	r1, [pc, #120]	@ (8001920 <app_update+0xe4>)
 80018a8:	fba1 1303 	umull	r1, r3, r1, r3
 80018ac:	0c9b      	lsrs	r3, r3, #18
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 80018b4:	4b16      	ldr	r3, [pc, #88]	@ (8001910 <app_update+0xd4>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	4a14      	ldr	r2, [pc, #80]	@ (8001910 <app_update+0xd4>)
 80018be:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 80018c0:	4a18      	ldr	r2, [pc, #96]	@ (8001924 <app_update+0xe8>)
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d904      	bls.n	80018d8 <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 80018ce:	4915      	ldr	r1, [pc, #84]	@ (8001924 <app_update+0xe8>)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			}
			if (task_dta_list[index].BCET > cycle_counter_time_us)
 80018d8:	4a12      	ldr	r2, [pc, #72]	@ (8001924 <app_update+0xe8>)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d205      	bcs.n	80018f4 <app_update+0xb8>
			{
				task_dta_list[index].BCET = cycle_counter_time_us;
 80018e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001924 <app_update+0xe8>)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	605a      	str	r2, [r3, #4]
    	for (index = 0; TASK_QTY > index; index++)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d9b4      	bls.n	800186a <app_update+0x2e>
			}
	    }
    }
}
 8001900:	bf00      	nop
 8001902:	3710      	adds	r7, #16
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	20000348 	.word	0x20000348
 800190c:	20000340 	.word	0x20000340
 8001910:	20000344 	.word	0x20000344
 8001914:	e0001000 	.word	0xe0001000
 8001918:	08004e18 	.word	0x08004e18
 800191c:	20000000 	.word	0x20000000
 8001920:	431bde83 	.word	0x431bde83
 8001924:	2000034c 	.word	0x2000034c

08001928 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 800192c:	4b09      	ldr	r3, [pc, #36]	@ (8001954 <HAL_SYSTICK_Callback+0x2c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	3301      	adds	r3, #1
 8001932:	4a08      	ldr	r2, [pc, #32]	@ (8001954 <HAL_SYSTICK_Callback+0x2c>)
 8001934:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 8001936:	4b08      	ldr	r3, [pc, #32]	@ (8001958 <HAL_SYSTICK_Callback+0x30>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a06      	ldr	r2, [pc, #24]	@ (8001958 <HAL_SYSTICK_Callback+0x30>)
 800193e:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <HAL_SYSTICK_Callback+0x34>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	3301      	adds	r3, #1
 8001946:	4a05      	ldr	r2, [pc, #20]	@ (800195c <HAL_SYSTICK_Callback+0x34>)
 8001948:	6013      	str	r3, [r2, #0]

	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000348 	.word	0x20000348
 8001958:	20000454 	.word	0x20000454
 800195c:	200003c4 	.word	0x200003c4

08001960 <displayInit>:

/********************** internal data definition *****************************/
/********************** external data declaration ****************************/
/********************** external functions definition ************************/
void displayInit( displayConnection_t connection )
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 800196a:	4a38      	ldr	r2, [pc, #224]	@ (8001a4c <displayInit+0xec>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	7013      	strb	r3, [r2, #0]

    if( display.connection == DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER) {
 8001970:	4b36      	ldr	r3, [pc, #216]	@ (8001a4c <displayInit+0xec>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b02      	cmp	r3, #2
 8001976:	d109      	bne.n	800198c <displayInit+0x2c>
        pcf8574.address = PCF8574_I2C_BUS_8BIT_WRITE_ADDRESS ;
 8001978:	4b35      	ldr	r3, [pc, #212]	@ (8001a50 <displayInit+0xf0>)
 800197a:	224e      	movs	r2, #78	@ 0x4e
 800197c:	601a      	str	r2, [r3, #0]
        pcf8574.data = 0b00000000;
 800197e:	4b34      	ldr	r3, [pc, #208]	@ (8001a50 <displayInit+0xf0>)
 8001980:	2200      	movs	r2, #0
 8001982:	711a      	strb	r2, [r3, #4]
        /*Definido en el .ioc*/
        //i2cPcf8574.frequency(100000);

        displayPinWrite( DISPLAY_PIN_A_PCF8574,  ON );
 8001984:	2101      	movs	r1, #1
 8001986:	2003      	movs	r0, #3
 8001988:	f000 f8f6 	bl	8001b78 <displayPinWrite>
    }

    initial8BitCommunicationIsCompleted = false;
 800198c:	4b31      	ldr	r3, [pc, #196]	@ (8001a54 <displayInit+0xf4>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8001992:	2032      	movs	r0, #50	@ 0x32
 8001994:	f7fe fe80 	bl	8000698 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001998:	2130      	movs	r1, #48	@ 0x30
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f8c8 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 80019a0:	2005      	movs	r0, #5
 80019a2:	f7fe fe79 	bl	8000698 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019a6:	2130      	movs	r1, #48	@ 0x30
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f8c1 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7fe fe72 	bl	8000698 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019b4:	2130      	movs	r1, #48	@ 0x30
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f8ba 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7fe fe6b 	bl	8000698 <HAL_Delay>

    switch( display.connection ) {
 80019c2:	4b22      	ldr	r3, [pc, #136]	@ (8001a4c <displayInit+0xec>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d00d      	beq.n	80019e6 <displayInit+0x86>
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	dc1d      	bgt.n	8001a0a <displayInit+0xaa>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <displayInit+0x86>
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d119      	bne.n	8001a0a <displayInit+0xaa>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019d6:	2138      	movs	r1, #56	@ 0x38
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 f8a9 	bl	8001b30 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 80019de:	2001      	movs	r0, #1
 80019e0:	f7fe fe5a 	bl	8000698 <HAL_Delay>
        break;
 80019e4:	e011      	b.n	8001a0a <displayInit+0xaa>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019e6:	2120      	movs	r1, #32
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f8a1 	bl	8001b30 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7fe fe52 	bl	8000698 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 80019f4:	4b17      	ldr	r3, [pc, #92]	@ (8001a54 <displayInit+0xf4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019fa:	2128      	movs	r1, #40	@ 0x28
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 f897 	bl	8001b30 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f7fe fe48 	bl	8000698 <HAL_Delay>
        break;
 8001a08:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a0a:	2108      	movs	r1, #8
 8001a0c:	2000      	movs	r0, #0
 8001a0e:	f000 f88f 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8001a12:	2001      	movs	r0, #1
 8001a14:	f7fe fe40 	bl	8000698 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a18:	2101      	movs	r1, #1
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f888 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 8001a20:	2001      	movs	r0, #1
 8001a22:	f7fe fe39 	bl	8000698 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a26:	2106      	movs	r1, #6
 8001a28:	2000      	movs	r0, #0
 8001a2a:	f000 f881 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 8001a2e:	2001      	movs	r0, #1
 8001a30:	f7fe fe32 	bl	8000698 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a34:	210c      	movs	r1, #12
 8001a36:	2000      	movs	r0, #0
 8001a38:	f000 f87a 	bl	8001b30 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	f7fe fe2b 	bl	8000698 <HAL_Delay>
}
 8001a42:	bf00      	nop
 8001a44:	3708      	adds	r7, #8
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000364 	.word	0x20000364
 8001a50:	20000368 	.word	0x20000368
 8001a54:	20000378 	.word	0x20000378

08001a58 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	71fb      	strb	r3, [r7, #7]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 8001a68:	79bb      	ldrb	r3, [r7, #6]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d846      	bhi.n	8001afc <displayCharPositionWrite+0xa4>
 8001a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a74 <displayCharPositionWrite+0x1c>)
 8001a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a74:	08001a85 	.word	0x08001a85
 8001a78:	08001a9d 	.word	0x08001a9d
 8001a7c:	08001abd 	.word	0x08001abd
 8001a80:	08001add 	.word	0x08001add
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f84e 	bl	8001b30 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            HAL_Delay(1);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe fdff 	bl	8000698 <HAL_Delay>
        break;
 8001a9a:	e02f      	b.n	8001afc <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	3340      	adds	r3, #64	@ 0x40
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001aa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aa8:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 f83e 	bl	8001b30 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7fe fdef 	bl	8000698 <HAL_Delay>
        break;
 8001aba:	e01f      	b.n	8001afc <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	3314      	adds	r3, #20
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001ac4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ac8:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	4619      	mov	r1, r3
 8001ace:	2000      	movs	r0, #0
 8001ad0:	f000 f82e 	bl	8001b30 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f7fe fddf 	bl	8000698 <HAL_Delay>
        break;
 8001ada:	e00f      	b.n	8001afc <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	3354      	adds	r3, #84	@ 0x54
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001ae4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001ae8:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	4619      	mov	r1, r3
 8001aee:	2000      	movs	r0, #0
 8001af0:	f000 f81e 	bl	8001b30 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7fe fdcf 	bl	8000698 <HAL_Delay>
        break;
 8001afa:	bf00      	nop
    }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001b0c:	e007      	b.n	8001b1e <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	1c5a      	adds	r2, r3, #1
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	781b      	ldrb	r3, [r3, #0]
 8001b16:	4619      	mov	r1, r3
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f000 f809 	bl	8001b30 <displayCodeWrite>
    while (*str) {
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f3      	bne.n	8001b0e <displayStringWrite+0xa>
    }
}
 8001b26:	bf00      	nop
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <displayCodeWrite>:
/********************** internal functions definition ************************/
static void displayCodeWrite( bool type, uint8_t dataBus) {
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	460a      	mov	r2, r1
 8001b3a:	71fb      	strb	r3, [r7, #7]
 8001b3c:	4613      	mov	r3, r2
 8001b3e:	71bb      	strb	r3, [r7, #6]
	if (type == DISPLAY_RS_INSTRUCTION)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	f083 0301 	eor.w	r3, r3, #1
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d004      	beq.n	8001b56 <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION);
 8001b4c:	2100      	movs	r1, #0
 8001b4e:	2004      	movs	r0, #4
 8001b50:	f000 f812 	bl	8001b78 <displayPinWrite>
 8001b54:	e003      	b.n	8001b5e <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA);
 8001b56:	2101      	movs	r1, #1
 8001b58:	2004      	movs	r0, #4
 8001b5a:	f000 f80d 	bl	8001b78 <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE);
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2005      	movs	r0, #5
 8001b62:	f000 f809 	bl	8001b78 <displayPinWrite>
	displayDataBusWrite(dataBus);
 8001b66:	79bb      	ldrb	r3, [r7, #6]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f000 f9ad 	bl	8001ec8 <displayDataBusWrite>
}
 8001b6e:	bf00      	nop
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	6039      	str	r1, [r7, #0]
 8001b82:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8001b84:	4b99      	ldr	r3, [pc, #612]	@ (8001dec <displayPinWrite+0x274>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	f000 80ab 	beq.w	8001ce4 <displayPinWrite+0x16c>
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	f300 8193 	bgt.w	8001eba <displayPinWrite+0x342>
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d053      	beq.n	8001c40 <displayPinWrite+0xc8>
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	f040 818e 	bne.w	8001eba <displayPinWrite+0x342>

    	case DISPLAY_CONNECTION_GPIO_8BITS:
            switch( pinName ) {
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	3b04      	subs	r3, #4
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d84a      	bhi.n	8001c3c <displayPinWrite+0xc4>
 8001ba6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bac <displayPinWrite+0x34>)
 8001ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bac:	08001c1d 	.word	0x08001c1d
 8001bb0:	08001c3d 	.word	0x08001c3d
 8001bb4:	08001c2d 	.word	0x08001c2d
 8001bb8:	08001c3d 	.word	0x08001c3d
 8001bbc:	08001c3d 	.word	0x08001c3d
 8001bc0:	08001c3d 	.word	0x08001c3d
 8001bc4:	08001c3d 	.word	0x08001c3d
 8001bc8:	08001bd9 	.word	0x08001bd9
 8001bcc:	08001beb 	.word	0x08001beb
 8001bd0:	08001bfd 	.word	0x08001bfd
 8001bd4:	08001c0d 	.word	0x08001c0d
//                case DISPLAY_PIN_D0: HAL_GPIO_WritePin(D2_GPIO_Port,  D2_Pin,  value);   break;
//                case DISPLAY_PIN_D1: HAL_GPIO_WritePin(D4_GPIO_Port,  D4_Pin,  value);   break;
//                case DISPLAY_PIN_D2: HAL_GPIO_WritePin(D5_GPIO_Port,  D5_Pin,  value);   break;
//                case DISPLAY_PIN_D3: HAL_GPIO_WritePin(D6_GPIO_Port,  D6_Pin,  value);   break;
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	461a      	mov	r2, r3
 8001bde:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001be2:	4883      	ldr	r0, [pc, #524]	@ (8001df0 <displayPinWrite+0x278>)
 8001be4:	f7ff f82b 	bl	8000c3e <HAL_GPIO_WritePin>
 8001be8:	e029      	b.n	8001c3e <displayPinWrite+0xc6>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	461a      	mov	r2, r3
 8001bf0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bf4:	487e      	ldr	r0, [pc, #504]	@ (8001df0 <displayPinWrite+0x278>)
 8001bf6:	f7ff f822 	bl	8000c3e <HAL_GPIO_WritePin>
 8001bfa:	e020      	b.n	8001c3e <displayPinWrite+0xc6>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	461a      	mov	r2, r3
 8001c02:	2180      	movs	r1, #128	@ 0x80
 8001c04:	487b      	ldr	r0, [pc, #492]	@ (8001df4 <displayPinWrite+0x27c>)
 8001c06:	f7ff f81a 	bl	8000c3e <HAL_GPIO_WritePin>
 8001c0a:	e018      	b.n	8001c3e <displayPinWrite+0xc6>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	461a      	mov	r2, r3
 8001c12:	2140      	movs	r1, #64	@ 0x40
 8001c14:	4878      	ldr	r0, [pc, #480]	@ (8001df8 <displayPinWrite+0x280>)
 8001c16:	f7ff f812 	bl	8000c3e <HAL_GPIO_WritePin>
 8001c1a:	e010      	b.n	8001c3e <displayPinWrite+0xc6>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	461a      	mov	r2, r3
 8001c22:	2180      	movs	r1, #128	@ 0x80
 8001c24:	4872      	ldr	r0, [pc, #456]	@ (8001df0 <displayPinWrite+0x278>)
 8001c26:	f7ff f80a 	bl	8000c3e <HAL_GPIO_WritePin>
 8001c2a:	e008      	b.n	8001c3e <displayPinWrite+0xc6>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	461a      	mov	r2, r3
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	486e      	ldr	r0, [pc, #440]	@ (8001df0 <displayPinWrite+0x278>)
 8001c36:	f7ff f802 	bl	8000c3e <HAL_GPIO_WritePin>
 8001c3a:	e000      	b.n	8001c3e <displayPinWrite+0xc6>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001c3c:	bf00      	nop
            }
            break;
 8001c3e:	e13c      	b.n	8001eba <displayPinWrite+0x342>


        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	3b04      	subs	r3, #4
 8001c44:	2b0a      	cmp	r3, #10
 8001c46:	d84b      	bhi.n	8001ce0 <displayPinWrite+0x168>
 8001c48:	a201      	add	r2, pc, #4	@ (adr r2, 8001c50 <displayPinWrite+0xd8>)
 8001c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c4e:	bf00      	nop
 8001c50:	08001cc1 	.word	0x08001cc1
 8001c54:	08001ce1 	.word	0x08001ce1
 8001c58:	08001cd1 	.word	0x08001cd1
 8001c5c:	08001ce1 	.word	0x08001ce1
 8001c60:	08001ce1 	.word	0x08001ce1
 8001c64:	08001ce1 	.word	0x08001ce1
 8001c68:	08001ce1 	.word	0x08001ce1
 8001c6c:	08001c7d 	.word	0x08001c7d
 8001c70:	08001c8f 	.word	0x08001c8f
 8001c74:	08001ca1 	.word	0x08001ca1
 8001c78:	08001cb1 	.word	0x08001cb1
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c86:	485a      	ldr	r0, [pc, #360]	@ (8001df0 <displayPinWrite+0x278>)
 8001c88:	f7fe ffd9 	bl	8000c3e <HAL_GPIO_WritePin>
 8001c8c:	e029      	b.n	8001ce2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	461a      	mov	r2, r3
 8001c94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c98:	4855      	ldr	r0, [pc, #340]	@ (8001df0 <displayPinWrite+0x278>)
 8001c9a:	f7fe ffd0 	bl	8000c3e <HAL_GPIO_WritePin>
 8001c9e:	e020      	b.n	8001ce2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	b2db      	uxtb	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2180      	movs	r1, #128	@ 0x80
 8001ca8:	4852      	ldr	r0, [pc, #328]	@ (8001df4 <displayPinWrite+0x27c>)
 8001caa:	f7fe ffc8 	bl	8000c3e <HAL_GPIO_WritePin>
 8001cae:	e018      	b.n	8001ce2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	2140      	movs	r1, #64	@ 0x40
 8001cb8:	484f      	ldr	r0, [pc, #316]	@ (8001df8 <displayPinWrite+0x280>)
 8001cba:	f7fe ffc0 	bl	8000c3e <HAL_GPIO_WritePin>
 8001cbe:	e010      	b.n	8001ce2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2180      	movs	r1, #128	@ 0x80
 8001cc8:	4849      	ldr	r0, [pc, #292]	@ (8001df0 <displayPinWrite+0x278>)
 8001cca:	f7fe ffb8 	bl	8000c3e <HAL_GPIO_WritePin>
 8001cce:	e008      	b.n	8001ce2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	2140      	movs	r1, #64	@ 0x40
 8001cd8:	4845      	ldr	r0, [pc, #276]	@ (8001df0 <displayPinWrite+0x278>)
 8001cda:	f7fe ffb0 	bl	8000c3e <HAL_GPIO_WritePin>
 8001cde:	e000      	b.n	8001ce2 <displayPinWrite+0x16a>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001ce0:	bf00      	nop
            }
            break;
 8001ce2:	e0ea      	b.n	8001eba <displayPinWrite+0x342>

        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
           if ( value ) {
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d03e      	beq.n	8001d68 <displayPinWrite+0x1f0>
                switch( pinName ) {
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	3b03      	subs	r3, #3
 8001cee:	2b0b      	cmp	r3, #11
 8001cf0:	d87a      	bhi.n	8001de8 <displayPinWrite+0x270>
 8001cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf8 <displayPinWrite+0x180>)
 8001cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf8:	08001d61 	.word	0x08001d61
 8001cfc:	08001d49 	.word	0x08001d49
 8001d00:	08001d59 	.word	0x08001d59
 8001d04:	08001d51 	.word	0x08001d51
 8001d08:	08001de9 	.word	0x08001de9
 8001d0c:	08001de9 	.word	0x08001de9
 8001d10:	08001de9 	.word	0x08001de9
 8001d14:	08001de9 	.word	0x08001de9
 8001d18:	08001d29 	.word	0x08001d29
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d39 	.word	0x08001d39
 8001d24:	08001d41 	.word	0x08001d41
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = ON; break;
 8001d28:	4b34      	ldr	r3, [pc, #208]	@ (8001dfc <displayPinWrite+0x284>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	725a      	strb	r2, [r3, #9]
 8001d2e:	e068      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = ON; break;
 8001d30:	4b32      	ldr	r3, [pc, #200]	@ (8001dfc <displayPinWrite+0x284>)
 8001d32:	2201      	movs	r2, #1
 8001d34:	729a      	strb	r2, [r3, #10]
 8001d36:	e064      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = ON; break;
 8001d38:	4b30      	ldr	r3, [pc, #192]	@ (8001dfc <displayPinWrite+0x284>)
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	72da      	strb	r2, [r3, #11]
 8001d3e:	e060      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = ON; break;
 8001d40:	4b2e      	ldr	r3, [pc, #184]	@ (8001dfc <displayPinWrite+0x284>)
 8001d42:	2201      	movs	r2, #1
 8001d44:	731a      	strb	r2, [r3, #12]
 8001d46:	e05c      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = ON; break;
 8001d48:	4b2c      	ldr	r3, [pc, #176]	@ (8001dfc <displayPinWrite+0x284>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	715a      	strb	r2, [r3, #5]
 8001d4e:	e058      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = ON; break;
 8001d50:	4b2a      	ldr	r3, [pc, #168]	@ (8001dfc <displayPinWrite+0x284>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	71da      	strb	r2, [r3, #7]
 8001d56:	e054      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = ON; break;
 8001d58:	4b28      	ldr	r3, [pc, #160]	@ (8001dfc <displayPinWrite+0x284>)
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	719a      	strb	r2, [r3, #6]
 8001d5e:	e050      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = ON; break;
 8001d60:	4b26      	ldr	r3, [pc, #152]	@ (8001dfc <displayPinWrite+0x284>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	721a      	strb	r2, [r3, #8]
 8001d66:	e04c      	b.n	8001e02 <displayPinWrite+0x28a>
                    default: break;
                }
            }
            else {
                switch( pinName ) {
 8001d68:	79fb      	ldrb	r3, [r7, #7]
 8001d6a:	3b03      	subs	r3, #3
 8001d6c:	2b0b      	cmp	r3, #11
 8001d6e:	d847      	bhi.n	8001e00 <displayPinWrite+0x288>
 8001d70:	a201      	add	r2, pc, #4	@ (adr r2, 8001d78 <displayPinWrite+0x200>)
 8001d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d76:	bf00      	nop
 8001d78:	08001de1 	.word	0x08001de1
 8001d7c:	08001dc9 	.word	0x08001dc9
 8001d80:	08001dd9 	.word	0x08001dd9
 8001d84:	08001dd1 	.word	0x08001dd1
 8001d88:	08001e01 	.word	0x08001e01
 8001d8c:	08001e01 	.word	0x08001e01
 8001d90:	08001e01 	.word	0x08001e01
 8001d94:	08001e01 	.word	0x08001e01
 8001d98:	08001da9 	.word	0x08001da9
 8001d9c:	08001db1 	.word	0x08001db1
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dc1 	.word	0x08001dc1
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = OFF; break;
 8001da8:	4b14      	ldr	r3, [pc, #80]	@ (8001dfc <displayPinWrite+0x284>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	725a      	strb	r2, [r3, #9]
 8001dae:	e028      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = OFF; break;
 8001db0:	4b12      	ldr	r3, [pc, #72]	@ (8001dfc <displayPinWrite+0x284>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	729a      	strb	r2, [r3, #10]
 8001db6:	e024      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = OFF; break;
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <displayPinWrite+0x284>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	72da      	strb	r2, [r3, #11]
 8001dbe:	e020      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = OFF; break;
 8001dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8001dfc <displayPinWrite+0x284>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	731a      	strb	r2, [r3, #12]
 8001dc6:	e01c      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = OFF; break;
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	@ (8001dfc <displayPinWrite+0x284>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	715a      	strb	r2, [r3, #5]
 8001dce:	e018      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = OFF; break;
 8001dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dfc <displayPinWrite+0x284>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	71da      	strb	r2, [r3, #7]
 8001dd6:	e014      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = OFF; break;
 8001dd8:	4b08      	ldr	r3, [pc, #32]	@ (8001dfc <displayPinWrite+0x284>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	719a      	strb	r2, [r3, #6]
 8001dde:	e010      	b.n	8001e02 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = OFF; break;
 8001de0:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <displayPinWrite+0x284>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	721a      	strb	r2, [r3, #8]
 8001de6:	e00c      	b.n	8001e02 <displayPinWrite+0x28a>
                    default: break;
 8001de8:	bf00      	nop
 8001dea:	e00a      	b.n	8001e02 <displayPinWrite+0x28a>
 8001dec:	20000364 	.word	0x20000364
 8001df0:	40010800 	.word	0x40010800
 8001df4:	40011000 	.word	0x40011000
 8001df8:	40010c00 	.word	0x40010c00
 8001dfc:	20000368 	.word	0x20000368
                    default: break;
 8001e00:	bf00      	nop
                }
            }
            pcf8574.data = 0b00000000;
 8001e02:	4b30      	ldr	r3, [pc, #192]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRs ) pcf8574.data |= 0b00000001;
 8001e08:	4b2e      	ldr	r3, [pc, #184]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e0a:	795b      	ldrb	r3, [r3, #5]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d006      	beq.n	8001e1e <displayPinWrite+0x2a6>
 8001e10:	4b2c      	ldr	r3, [pc, #176]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e12:	791b      	ldrb	r3, [r3, #4]
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e1c:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRw ) pcf8574.data |= 0b00000010;
 8001e1e:	4b29      	ldr	r3, [pc, #164]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e20:	799b      	ldrb	r3, [r3, #6]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d006      	beq.n	8001e34 <displayPinWrite+0x2bc>
 8001e26:	4b27      	ldr	r3, [pc, #156]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e28:	791b      	ldrb	r3, [r3, #4]
 8001e2a:	f043 0302 	orr.w	r3, r3, #2
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b24      	ldr	r3, [pc, #144]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e32:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinEn ) pcf8574.data |= 0b00000100;
 8001e34:	4b23      	ldr	r3, [pc, #140]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e36:	79db      	ldrb	r3, [r3, #7]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d006      	beq.n	8001e4a <displayPinWrite+0x2d2>
 8001e3c:	4b21      	ldr	r3, [pc, #132]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e3e:	791b      	ldrb	r3, [r3, #4]
 8001e40:	f043 0304 	orr.w	r3, r3, #4
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e48:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinA  ) pcf8574.data |= 0b00001000;
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e4c:	7a1b      	ldrb	r3, [r3, #8]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d006      	beq.n	8001e60 <displayPinWrite+0x2e8>
 8001e52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e54:	791b      	ldrb	r3, [r3, #4]
 8001e56:	f043 0308 	orr.w	r3, r3, #8
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e5e:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD4 ) pcf8574.data |= 0b00010000;
 8001e60:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e62:	7a5b      	ldrb	r3, [r3, #9]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d006      	beq.n	8001e76 <displayPinWrite+0x2fe>
 8001e68:	4b16      	ldr	r3, [pc, #88]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e6a:	791b      	ldrb	r3, [r3, #4]
 8001e6c:	f043 0310 	orr.w	r3, r3, #16
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b14      	ldr	r3, [pc, #80]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e74:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD5 ) pcf8574.data |= 0b00100000;
 8001e76:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e78:	7a9b      	ldrb	r3, [r3, #10]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <displayPinWrite+0x314>
 8001e7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	f043 0320 	orr.w	r3, r3, #32
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e8a:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD6 ) pcf8574.data |= 0b01000000;
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e8e:	7adb      	ldrb	r3, [r3, #11]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <displayPinWrite+0x32a>
 8001e94:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001ea0:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD7 ) pcf8574.data |= 0b10000000;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001ea4:	7b1b      	ldrb	r3, [r3, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <displayPinWrite+0x340>
 8001eaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001eac:	791b      	ldrb	r3, [r3, #4]
 8001eae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001eb2:	b2da      	uxtb	r2, r3
 8001eb4:	4b03      	ldr	r3, [pc, #12]	@ (8001ec4 <displayPinWrite+0x34c>)
 8001eb6:	711a      	strb	r2, [r3, #4]

            //i2cPcf8574.write( pcf8574.address, &pcf8574.data, 1);
            //HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)pcf8574.address<<1, (uint8_t *)&pcf8574.data, (uint16_t)16, HAL_MAX_DELAY);

            break;
 8001eb8:	bf00      	nop
    }
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000368 	.word	0x20000368

08001ec8 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001ed2:	2100      	movs	r1, #0
 8001ed4:	2006      	movs	r0, #6
 8001ed6:	f7ff fe4f 	bl	8001b78 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8001eda:	79fb      	ldrb	r3, [r7, #7]
 8001edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	200e      	movs	r0, #14
 8001ee4:	f7ff fe48 	bl	8001b78 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eee:	4619      	mov	r1, r3
 8001ef0:	200d      	movs	r0, #13
 8001ef2:	f7ff fe41 	bl	8001b78 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8001ef6:	79fb      	ldrb	r3, [r7, #7]
 8001ef8:	f003 0320 	and.w	r3, r3, #32
 8001efc:	4619      	mov	r1, r3
 8001efe:	200c      	movs	r0, #12
 8001f00:	f7ff fe3a 	bl	8001b78 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 0310 	and.w	r3, r3, #16
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	200b      	movs	r0, #11
 8001f0e:	f7ff fe33 	bl	8001b78 <displayPinWrite>
    switch( display.connection ) {
 8001f12:	4b34      	ldr	r3, [pc, #208]	@ (8001fe4 <displayDataBusWrite+0x11c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d022      	beq.n	8001f60 <displayDataBusWrite+0x98>
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	dc4f      	bgt.n	8001fbe <displayDataBusWrite+0xf6>
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01e      	beq.n	8001f60 <displayDataBusWrite+0x98>
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d14b      	bne.n	8001fbe <displayDataBusWrite+0xf6>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8001f26:	79fb      	ldrb	r3, [r7, #7]
 8001f28:	f003 0308 	and.w	r3, r3, #8
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f7ff fe22 	bl	8001b78 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8001f34:	79fb      	ldrb	r3, [r7, #7]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	2009      	movs	r0, #9
 8001f3e:	f7ff fe1b 	bl	8001b78 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8001f42:	79fb      	ldrb	r3, [r7, #7]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	4619      	mov	r1, r3
 8001f4a:	2008      	movs	r0, #8
 8001f4c:	f7ff fe14 	bl	8001b78 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8001f50:	79fb      	ldrb	r3, [r7, #7]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	4619      	mov	r1, r3
 8001f58:	2007      	movs	r0, #7
 8001f5a:	f7ff fe0d 	bl	8001b78 <displayPinWrite>
        break;
 8001f5e:	e02e      	b.n	8001fbe <displayDataBusWrite+0xf6>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            if ( initial8BitCommunicationIsCompleted == true) {
 8001f60:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <displayDataBusWrite+0x120>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d029      	beq.n	8001fbc <displayDataBusWrite+0xf4>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8001f68:	2101      	movs	r1, #1
 8001f6a:	2006      	movs	r0, #6
 8001f6c:	f7ff fe04 	bl	8001b78 <displayPinWrite>
                HAL_Delay(1);
 8001f70:	2001      	movs	r0, #1
 8001f72:	f7fe fb91 	bl	8000698 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001f76:	2100      	movs	r1, #0
 8001f78:	2006      	movs	r0, #6
 8001f7a:	f7ff fdfd 	bl	8001b78 <displayPinWrite>
                HAL_Delay(1);
 8001f7e:	2001      	movs	r0, #1
 8001f80:	f7fe fb8a 	bl	8000698 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8001f84:	79fb      	ldrb	r3, [r7, #7]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	200e      	movs	r0, #14
 8001f8e:	f7ff fdf3 	bl	8001b78 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8001f92:	79fb      	ldrb	r3, [r7, #7]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	4619      	mov	r1, r3
 8001f9a:	200d      	movs	r0, #13
 8001f9c:	f7ff fdec 	bl	8001b78 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	200c      	movs	r0, #12
 8001faa:	f7ff fde5 	bl	8001b78 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	f003 0301 	and.w	r3, r3, #1
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	200b      	movs	r0, #11
 8001fb8:	f7ff fdde 	bl	8001b78 <displayPinWrite>
            }
        break;
 8001fbc:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	2006      	movs	r0, #6
 8001fc2:	f7ff fdd9 	bl	8001b78 <displayPinWrite>
    HAL_Delay(1);
 8001fc6:	2001      	movs	r0, #1
 8001fc8:	f7fe fb66 	bl	8000698 <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001fcc:	2100      	movs	r1, #0
 8001fce:	2006      	movs	r0, #6
 8001fd0:	f7ff fdd2 	bl	8001b78 <displayPinWrite>
    HAL_Delay(1);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7fe fb5f 	bl	8000698 <HAL_Delay>
}
 8001fda:	bf00      	nop
 8001fdc:	3708      	adds	r7, #8
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	20000364 	.word	0x20000364
 8001fe8:	20000378 	.word	0x20000378

08001fec <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f001 fd53 	bl	8003aa0 <iprintf>
	fflush(stdout);
 8001ffa:	4b05      	ldr	r3, [pc, #20]	@ (8002010 <logger_log_print_+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	4618      	mov	r0, r3
 8002002:	f001 fc77 	bl	80038f4 <fflush>
}
 8002006:	bf00      	nop
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20000284 	.word	0x20000284

08002014 <put_event_task_actuator>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void put_event_task_actuator(task_actuator_ev_t event, task_actuator_id_t identifier)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	4603      	mov	r3, r0
 800201c:	460a      	mov	r2, r1
 800201e:	71fb      	strb	r3, [r7, #7]
 8002020:	4613      	mov	r3, r2
 8002022:	71bb      	strb	r3, [r7, #6]
	task_actuator_dta_t *p_task_actuator_dta;

	p_task_actuator_dta = &task_actuator_dta_list[identifier];
 8002024:	79bb      	ldrb	r3, [r7, #6]
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4a06      	ldr	r2, [pc, #24]	@ (8002044 <put_event_task_actuator+0x30>)
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

	p_task_actuator_dta->event = event;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	79fa      	ldrb	r2, [r7, #7]
 8002032:	715a      	strb	r2, [r3, #5]
	p_task_actuator_dta->flag = true;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2201      	movs	r2, #1
 8002038:	719a      	strb	r2, [r3, #6]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr
 8002044:	20000014 	.word	0x20000014

08002048 <task_menu_init>:
//static void motor_init(motor_t motor);
//static void motor_actualizar(motor_t motor, uint8_t power, uint8_t speed, uint8_t spin);

/********************** external functions definition ************************/
void task_menu_init(void *parameters)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af02      	add	r7, sp, #8
 800204e:	6078      	str	r0, [r7, #4]
	task_menu_st_t	state;
	task_menu_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
 8002050:	b672      	cpsid	i
 8002052:	4b77      	ldr	r3, [pc, #476]	@ (8002230 <task_menu_init+0x1e8>)
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	4b77      	ldr	r3, [pc, #476]	@ (8002234 <task_menu_init+0x1ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	4b76      	ldr	r3, [pc, #472]	@ (8002238 <task_menu_init+0x1f0>)
 800205e:	4a77      	ldr	r2, [pc, #476]	@ (800223c <task_menu_init+0x1f4>)
 8002060:	213f      	movs	r1, #63	@ 0x3f
 8002062:	f001 fd2f 	bl	8003ac4 <sniprintf>
 8002066:	4603      	mov	r3, r0
 8002068:	4a75      	ldr	r2, [pc, #468]	@ (8002240 <task_menu_init+0x1f8>)
 800206a:	6013      	str	r3, [r2, #0]
 800206c:	4b70      	ldr	r3, [pc, #448]	@ (8002230 <task_menu_init+0x1e8>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ffbb 	bl	8001fec <logger_log_print_>
 8002076:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);
 8002078:	b672      	cpsid	i
 800207a:	4b6d      	ldr	r3, [pc, #436]	@ (8002230 <task_menu_init+0x1e8>)
 800207c:	6818      	ldr	r0, [r3, #0]
 800207e:	4b71      	ldr	r3, [pc, #452]	@ (8002244 <task_menu_init+0x1fc>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	4b70      	ldr	r3, [pc, #448]	@ (8002248 <task_menu_init+0x200>)
 8002086:	4a71      	ldr	r2, [pc, #452]	@ (800224c <task_menu_init+0x204>)
 8002088:	213f      	movs	r1, #63	@ 0x3f
 800208a:	f001 fd1b 	bl	8003ac4 <sniprintf>
 800208e:	4603      	mov	r3, r0
 8002090:	4a6b      	ldr	r2, [pc, #428]	@ (8002240 <task_menu_init+0x1f8>)
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b66      	ldr	r3, [pc, #408]	@ (8002230 <task_menu_init+0x1e8>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff ffa7 	bl	8001fec <logger_log_print_>
 800209e:	b662      	cpsie	i

	g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 80020a0:	4b6b      	ldr	r3, [pc, #428]	@ (8002250 <task_menu_init+0x208>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);
 80020a6:	b672      	cpsid	i
 80020a8:	4b61      	ldr	r3, [pc, #388]	@ (8002230 <task_menu_init+0x1e8>)
 80020aa:	6818      	ldr	r0, [r3, #0]
 80020ac:	4b68      	ldr	r3, [pc, #416]	@ (8002250 <task_menu_init+0x208>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4b68      	ldr	r3, [pc, #416]	@ (8002254 <task_menu_init+0x20c>)
 80020b4:	4a68      	ldr	r2, [pc, #416]	@ (8002258 <task_menu_init+0x210>)
 80020b6:	213f      	movs	r1, #63	@ 0x3f
 80020b8:	f001 fd04 	bl	8003ac4 <sniprintf>
 80020bc:	4603      	mov	r3, r0
 80020be:	4a60      	ldr	r2, [pc, #384]	@ (8002240 <task_menu_init+0x1f8>)
 80020c0:	6013      	str	r3, [r2, #0]
 80020c2:	4b5b      	ldr	r3, [pc, #364]	@ (8002230 <task_menu_init+0x1e8>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff ff90 	bl	8001fec <logger_log_print_>
 80020cc:	b662      	cpsie	i

	init_queue_event_task_menu();
 80020ce:	f000 fc71 	bl	80029b4 <init_queue_event_task_menu>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_menu_dta = &task_menu_dta;
 80020d2:	4b62      	ldr	r3, [pc, #392]	@ (800225c <task_menu_init+0x214>)
 80020d4:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_menu_dta->state;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	791b      	ldrb	r3, [r3, #4]
 80020da:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 80020dc:	b672      	cpsid	i
 80020de:	4b54      	ldr	r3, [pc, #336]	@ (8002230 <task_menu_init+0x1e8>)
 80020e0:	6818      	ldr	r0, [r3, #0]
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	4b5e      	ldr	r3, [pc, #376]	@ (8002260 <task_menu_init+0x218>)
 80020e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002264 <task_menu_init+0x21c>)
 80020ea:	213f      	movs	r1, #63	@ 0x3f
 80020ec:	f001 fcea 	bl	8003ac4 <sniprintf>
 80020f0:	4603      	mov	r3, r0
 80020f2:	4a53      	ldr	r2, [pc, #332]	@ (8002240 <task_menu_init+0x1f8>)
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b4e      	ldr	r3, [pc, #312]	@ (8002230 <task_menu_init+0x1e8>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff ff76 	bl	8001fec <logger_log_print_>
 8002100:	b662      	cpsie	i

	event = p_task_menu_dta->event;
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	795b      	ldrb	r3, [r3, #5]
 8002106:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002108:	b672      	cpsid	i
 800210a:	4b49      	ldr	r3, [pc, #292]	@ (8002230 <task_menu_init+0x1e8>)
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	7abb      	ldrb	r3, [r7, #10]
 8002110:	9300      	str	r3, [sp, #0]
 8002112:	4b55      	ldr	r3, [pc, #340]	@ (8002268 <task_menu_init+0x220>)
 8002114:	4a53      	ldr	r2, [pc, #332]	@ (8002264 <task_menu_init+0x21c>)
 8002116:	213f      	movs	r1, #63	@ 0x3f
 8002118:	f001 fcd4 	bl	8003ac4 <sniprintf>
 800211c:	4603      	mov	r3, r0
 800211e:	4a48      	ldr	r2, [pc, #288]	@ (8002240 <task_menu_init+0x1f8>)
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b43      	ldr	r3, [pc, #268]	@ (8002230 <task_menu_init+0x1e8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff ff60 	bl	8001fec <logger_log_print_>
 800212c:	b662      	cpsie	i

	b_event = p_task_menu_dta->flag;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	799b      	ldrb	r3, [r3, #6]
 8002132:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002134:	b672      	cpsid	i
 8002136:	4b3e      	ldr	r3, [pc, #248]	@ (8002230 <task_menu_init+0x1e8>)
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	7a7b      	ldrb	r3, [r7, #9]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <task_menu_init+0xfc>
 8002140:	4b4a      	ldr	r3, [pc, #296]	@ (800226c <task_menu_init+0x224>)
 8002142:	e000      	b.n	8002146 <task_menu_init+0xfe>
 8002144:	4b4a      	ldr	r3, [pc, #296]	@ (8002270 <task_menu_init+0x228>)
 8002146:	9300      	str	r3, [sp, #0]
 8002148:	4b4a      	ldr	r3, [pc, #296]	@ (8002274 <task_menu_init+0x22c>)
 800214a:	4a4b      	ldr	r2, [pc, #300]	@ (8002278 <task_menu_init+0x230>)
 800214c:	213f      	movs	r1, #63	@ 0x3f
 800214e:	f001 fcb9 	bl	8003ac4 <sniprintf>
 8002152:	4603      	mov	r3, r0
 8002154:	4a3a      	ldr	r2, [pc, #232]	@ (8002240 <task_menu_init+0x1f8>)
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	4b35      	ldr	r3, [pc, #212]	@ (8002230 <task_menu_init+0x1e8>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff ff45 	bl	8001fec <logger_log_print_>
 8002162:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff fbfb 	bl	8001960 <displayInit>

	//displayCharPositionWrite(0, 1);
	//SdisplayStringWrite("Test Nro: ");

    // Primera escritura
    sprintf(aux1,"Motor1:%s,%s,%s",string_motor1[motor[0].power-1],string_motor2[motor[0].speed-1],string_motor3[motor[0].spin-1]);
 800216a:	4b44      	ldr	r3, [pc, #272]	@ (800227c <task_menu_init+0x234>)
 800216c:	785b      	ldrb	r3, [r3, #1]
 800216e:	3b01      	subs	r3, #1
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	4a43      	ldr	r2, [pc, #268]	@ (8002280 <task_menu_init+0x238>)
 8002174:	441a      	add	r2, r3
 8002176:	4b41      	ldr	r3, [pc, #260]	@ (800227c <task_menu_init+0x234>)
 8002178:	789b      	ldrb	r3, [r3, #2]
 800217a:	3b01      	subs	r3, #1
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	4941      	ldr	r1, [pc, #260]	@ (8002284 <task_menu_init+0x23c>)
 8002180:	4419      	add	r1, r3
 8002182:	4b3e      	ldr	r3, [pc, #248]	@ (800227c <task_menu_init+0x234>)
 8002184:	78db      	ldrb	r3, [r3, #3]
 8002186:	3b01      	subs	r3, #1
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	483f      	ldr	r0, [pc, #252]	@ (8002288 <task_menu_init+0x240>)
 800218c:	4403      	add	r3, r0
 800218e:	9300      	str	r3, [sp, #0]
 8002190:	460b      	mov	r3, r1
 8002192:	493e      	ldr	r1, [pc, #248]	@ (800228c <task_menu_init+0x244>)
 8002194:	483e      	ldr	r0, [pc, #248]	@ (8002290 <task_menu_init+0x248>)
 8002196:	f001 fcc9 	bl	8003b2c <siprintf>
    sprintf(aux2,"Motor2:%s,%s,%s",string_motor1[motor[1].power-1],string_motor2[motor[1].speed-1],string_motor3[motor[1].spin-1]);
 800219a:	4b38      	ldr	r3, [pc, #224]	@ (800227c <task_menu_init+0x234>)
 800219c:	795b      	ldrb	r3, [r3, #5]
 800219e:	3b01      	subs	r3, #1
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	4a37      	ldr	r2, [pc, #220]	@ (8002280 <task_menu_init+0x238>)
 80021a4:	441a      	add	r2, r3
 80021a6:	4b35      	ldr	r3, [pc, #212]	@ (800227c <task_menu_init+0x234>)
 80021a8:	799b      	ldrb	r3, [r3, #6]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	011b      	lsls	r3, r3, #4
 80021ae:	4935      	ldr	r1, [pc, #212]	@ (8002284 <task_menu_init+0x23c>)
 80021b0:	4419      	add	r1, r3
 80021b2:	4b32      	ldr	r3, [pc, #200]	@ (800227c <task_menu_init+0x234>)
 80021b4:	79db      	ldrb	r3, [r3, #7]
 80021b6:	3b01      	subs	r3, #1
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4833      	ldr	r0, [pc, #204]	@ (8002288 <task_menu_init+0x240>)
 80021bc:	4403      	add	r3, r0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	460b      	mov	r3, r1
 80021c2:	4934      	ldr	r1, [pc, #208]	@ (8002294 <task_menu_init+0x24c>)
 80021c4:	4834      	ldr	r0, [pc, #208]	@ (8002298 <task_menu_init+0x250>)
 80021c6:	f001 fcb1 	bl	8003b2c <siprintf>
    linea1=aux1;
 80021ca:	4b34      	ldr	r3, [pc, #208]	@ (800229c <task_menu_init+0x254>)
 80021cc:	4a30      	ldr	r2, [pc, #192]	@ (8002290 <task_menu_init+0x248>)
 80021ce:	601a      	str	r2, [r3, #0]
    linea2=aux2;
 80021d0:	4b33      	ldr	r3, [pc, #204]	@ (80022a0 <task_menu_init+0x258>)
 80021d2:	4a31      	ldr	r2, [pc, #196]	@ (8002298 <task_menu_init+0x250>)
 80021d4:	601a      	str	r2, [r3, #0]

    displayCharPositionWrite(0, 0);
 80021d6:	2100      	movs	r1, #0
 80021d8:	2000      	movs	r0, #0
 80021da:	f7ff fc3d 	bl	8001a58 <displayCharPositionWrite>
	displayStringWrite("                ");
 80021de:	4831      	ldr	r0, [pc, #196]	@ (80022a4 <task_menu_init+0x25c>)
 80021e0:	f7ff fc90 	bl	8001b04 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 80021e4:	2101      	movs	r1, #1
 80021e6:	2000      	movs	r0, #0
 80021e8:	f7ff fc36 	bl	8001a58 <displayCharPositionWrite>
	displayStringWrite("                ");
 80021ec:	482d      	ldr	r0, [pc, #180]	@ (80022a4 <task_menu_init+0x25c>)
 80021ee:	f7ff fc89 	bl	8001b04 <displayStringWrite>

	displayCharPositionWrite(0, 0);
 80021f2:	2100      	movs	r1, #0
 80021f4:	2000      	movs	r0, #0
 80021f6:	f7ff fc2f 	bl	8001a58 <displayCharPositionWrite>
	displayStringWrite(linea1);
 80021fa:	4b28      	ldr	r3, [pc, #160]	@ (800229c <task_menu_init+0x254>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fc80 	bl	8001b04 <displayStringWrite>
	displayCharPositionWrite(0, 1);
 8002204:	2101      	movs	r1, #1
 8002206:	2000      	movs	r0, #0
 8002208:	f7ff fc26 	bl	8001a58 <displayCharPositionWrite>
	displayStringWrite(linea2);
 800220c:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <task_menu_init+0x258>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fc77 	bl	8001b04 <displayStringWrite>

	HAL_GPIO_WritePin(LED_A_PORT, LED_A_PIN, LED_A_ON);
 8002216:	2201      	movs	r2, #1
 8002218:	2120      	movs	r1, #32
 800221a:	4823      	ldr	r0, [pc, #140]	@ (80022a8 <task_menu_init+0x260>)
 800221c:	f7fe fd0f 	bl	8000c3e <HAL_GPIO_WritePin>

	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 8002220:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <task_menu_init+0x264>)
 8002222:	2200      	movs	r2, #0
 8002224:	601a      	str	r2, [r3, #0]
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	08004e3c 	.word	0x08004e3c
 8002234:	20000028 	.word	0x20000028
 8002238:	08004b48 	.word	0x08004b48
 800223c:	08004b58 	.word	0x08004b58
 8002240:	200003bc 	.word	0x200003bc
 8002244:	2000002c 	.word	0x2000002c
 8002248:	08004b70 	.word	0x08004b70
 800224c:	08004b7c 	.word	0x08004b7c
 8002250:	200003c0 	.word	0x200003c0
 8002254:	08004b8c 	.word	0x08004b8c
 8002258:	08004b9c 	.word	0x08004b9c
 800225c:	2000001c 	.word	0x2000001c
 8002260:	08004bac 	.word	0x08004bac
 8002264:	08004bb4 	.word	0x08004bb4
 8002268:	08004bc0 	.word	0x08004bc0
 800226c:	08004bc8 	.word	0x08004bc8
 8002270:	08004bd0 	.word	0x08004bd0
 8002274:	08004bd8 	.word	0x08004bd8
 8002278:	08004be0 	.word	0x08004be0
 800227c:	20000250 	.word	0x20000250
 8002280:	20000170 	.word	0x20000170
 8002284:	20000190 	.word	0x20000190
 8002288:	20000230 	.word	0x20000230
 800228c:	08004bf0 	.word	0x08004bf0
 8002290:	200003d0 	.word	0x200003d0
 8002294:	08004c00 	.word	0x08004c00
 8002298:	200003e0 	.word	0x200003e0
 800229c:	200003c8 	.word	0x200003c8
 80022a0:	200003cc 	.word	0x200003cc
 80022a4:	08004c10 	.word	0x08004c10
 80022a8:	40010800 	.word	0x40010800
 80022ac:	200003c4 	.word	0x200003c4

080022b0 <task_menu_update>:

void task_menu_update(void *parameters)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	6078      	str	r0, [r7, #4]
	task_menu_dta_t *p_task_menu_dta;
	bool b_time_update_required = false;
 80022b8:	2300      	movs	r3, #0
 80022ba:	75fb      	strb	r3, [r7, #23]
	char menu_str[4];

	/* Update Task Menu Counter */
	g_task_menu_cnt++;
 80022bc:	4b94      	ldr	r3, [pc, #592]	@ (8002510 <task_menu_update+0x260>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	3301      	adds	r3, #1
 80022c2:	4a93      	ldr	r2, [pc, #588]	@ (8002510 <task_menu_update+0x260>)
 80022c4:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_menu_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 80022c6:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 80022c8:	4b92      	ldr	r3, [pc, #584]	@ (8002514 <task_menu_update+0x264>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d006      	beq.n	80022de <task_menu_update+0x2e>
    {
    	g_task_menu_tick_cnt--;
 80022d0:	4b90      	ldr	r3, [pc, #576]	@ (8002514 <task_menu_update+0x264>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3b01      	subs	r3, #1
 80022d6:	4a8f      	ldr	r2, [pc, #572]	@ (8002514 <task_menu_update+0x264>)
 80022d8:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 80022da:	2301      	movs	r3, #1
 80022dc:	75fb      	strb	r3, [r7, #23]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 80022de:	b662      	cpsie	i

    while (b_time_update_required)
 80022e0:	e344      	b.n	800296c <task_menu_update+0x6bc>
    {
		/* Protect shared resource (g_task_menu_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 80022e2:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 80022e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002514 <task_menu_update+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d007      	beq.n	80022fc <task_menu_update+0x4c>
		{
			g_task_menu_tick_cnt--;
 80022ec:	4b89      	ldr	r3, [pc, #548]	@ (8002514 <task_menu_update+0x264>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	4a88      	ldr	r2, [pc, #544]	@ (8002514 <task_menu_update+0x264>)
 80022f4:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80022f6:	2301      	movs	r3, #1
 80022f8:	75fb      	strb	r3, [r7, #23]
 80022fa:	e001      	b.n	8002300 <task_menu_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 80022fc:	2300      	movs	r3, #0
 80022fe:	75fb      	strb	r3, [r7, #23]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002300:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_menu_dta = &task_menu_dta;
 8002302:	4b85      	ldr	r3, [pc, #532]	@ (8002518 <task_menu_update+0x268>)
 8002304:	613b      	str	r3, [r7, #16]

    	if (DEL_MEN_XX_MIN < p_task_menu_dta->tick)
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d005      	beq.n	800231a <task_menu_update+0x6a>
		{
			p_task_menu_dta->tick--;
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	1e5a      	subs	r2, r3, #1
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e328      	b.n	800296c <task_menu_update+0x6bc>
		}
		else
		{
			HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
 800231a:	2120      	movs	r1, #32
 800231c:	487f      	ldr	r0, [pc, #508]	@ (800251c <task_menu_update+0x26c>)
 800231e:	f7fe fca6 	bl	8000c6e <HAL_GPIO_TogglePin>

			//snprintf(menu_str, sizeof(menu_str), "%lu", (g_task_menu_cnt/1000ul));
			//displayCharPositionWrite(10, 1);
			//displayStringWrite(menu_str);

			p_task_menu_dta->tick = DEL_MEN_XX_MAX;
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8002328:	601a      	str	r2, [r3, #0]
				p_task_menu_dta->flag = true;
				p_task_menu_dta->event = get_event_task_menu();
			}
			*/

			if(true == any_event_task_menu()){
 800232a:	f000 fbaf 	bl	8002a8c <any_event_task_menu>
 800232e:	4603      	mov	r3, r0
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 831b 	beq.w	800296c <task_menu_update+0x6bc>
				p_task_menu_dta->flag = true;
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	2201      	movs	r2, #1
 800233a:	719a      	strb	r2, [r3, #6]
				p_task_menu_dta->event = get_event_task_menu();
 800233c:	f000 fb80 	bl	8002a40 <get_event_task_menu>
 8002340:	4603      	mov	r3, r0
 8002342:	461a      	mov	r2, r3
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	715a      	strb	r2, [r3, #5]

			switch (p_task_menu_dta->state)
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	2b07      	cmp	r3, #7
 800234e:	f200 82d1 	bhi.w	80028f4 <task_menu_update+0x644>
 8002352:	a201      	add	r2, pc, #4	@ (adr r2, 8002358 <task_menu_update+0xa8>)
 8002354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002358:	08002379 	.word	0x08002379
 800235c:	0800239b 	.word	0x0800239b
 8002360:	080023bd 	.word	0x080023bd
 8002364:	080023f5 	.word	0x080023f5
 8002368:	08002499 	.word	0x08002499
 800236c:	080025cb 	.word	0x080025cb
 8002370:	080026bf 	.word	0x080026bf
 8002374:	08002805 	.word	0x08002805
			{
				case ST_MEN_XX_IDLE:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_MEN_ACTIVE == p_task_menu_dta->event))
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	799b      	ldrb	r3, [r3, #6]
 800237c:	2b00      	cmp	r3, #0
 800237e:	f000 82c6 	beq.w	800290e <task_menu_update+0x65e>
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	795b      	ldrb	r3, [r3, #5]
 8002386:	2b01      	cmp	r3, #1
 8002388:	f040 82c1 	bne.w	800290e <task_menu_update+0x65e>
					{
						p_task_menu_dta->flag = false;
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	2200      	movs	r2, #0
 8002390:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_ACTIVE;
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	2201      	movs	r2, #1
 8002396:	711a      	strb	r2, [r3, #4]
					}

					break;
 8002398:	e2b9      	b.n	800290e <task_menu_update+0x65e>

				case ST_MEN_XX_ACTIVE:

					if ((true == p_task_menu_dta->flag) && (EV_MEN_MEN_IDLE == p_task_menu_dta->event))
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	799b      	ldrb	r3, [r3, #6]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	f000 82b7 	beq.w	8002912 <task_menu_update+0x662>
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	795b      	ldrb	r3, [r3, #5]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f040 82b2 	bne.w	8002912 <task_menu_update+0x662>
					{
						p_task_menu_dta->flag = false;
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	2200      	movs	r2, #0
 80023b2:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_IDLE;
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	2200      	movs	r2, #0
 80023b8:	711a      	strb	r2, [r3, #4]

					}

					break;
 80023ba:	e2aa      	b.n	8002912 <task_menu_update+0x662>

				case ST_MEN_XX_MAIN:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_MEN_ACTIVE == p_task_menu_dta->event))
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	799b      	ldrb	r3, [r3, #6]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f000 82a8 	beq.w	8002916 <task_menu_update+0x666>
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	795b      	ldrb	r3, [r3, #5]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	f040 82a3 	bne.w	8002916 <task_menu_update+0x666>
					{
						linea1 = menu_fijo;
 80023d0:	4b53      	ldr	r3, [pc, #332]	@ (8002520 <task_menu_update+0x270>)
 80023d2:	4a54      	ldr	r2, [pc, #336]	@ (8002524 <task_menu_update+0x274>)
 80023d4:	601a      	str	r2, [r3, #0]
						linea2 = menu1[p_task_menu_dta->motor_id - 1];
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	79db      	ldrb	r3, [r3, #7]
 80023da:	3b01      	subs	r3, #1
 80023dc:	011b      	lsls	r3, r3, #4
 80023de:	4a52      	ldr	r2, [pc, #328]	@ (8002528 <task_menu_update+0x278>)
 80023e0:	4413      	add	r3, r2
 80023e2:	4a52      	ldr	r2, [pc, #328]	@ (800252c <task_menu_update+0x27c>)
 80023e4:	6013      	str	r3, [r2, #0]
						p_task_menu_dta->flag = false;
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	2200      	movs	r2, #0
 80023ea:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU_1;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	2203      	movs	r2, #3
 80023f0:	711a      	strb	r2, [r3, #4]
					}

					break;
 80023f2:	e290      	b.n	8002916 <task_menu_update+0x666>

				case ST_MEN_XX_MENU_1:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	799b      	ldrb	r3, [r3, #6]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <task_menu_update+0x178>
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	795b      	ldrb	r3, [r3, #5]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d111      	bne.n	8002428 <task_menu_update+0x178>
					{
						linea1=menu_fijo;
 8002404:	4b46      	ldr	r3, [pc, #280]	@ (8002520 <task_menu_update+0x270>)
 8002406:	4a47      	ldr	r2, [pc, #284]	@ (8002524 <task_menu_update+0x274>)
 8002408:	601a      	str	r2, [r3, #0]
						linea2 = menu2[p_task_menu_dta->motor_opt - 1];
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	7a1b      	ldrb	r3, [r3, #8]
 800240e:	3b01      	subs	r3, #1
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4a47      	ldr	r2, [pc, #284]	@ (8002530 <task_menu_update+0x280>)
 8002414:	4413      	add	r3, r2
 8002416:	4a45      	ldr	r2, [pc, #276]	@ (800252c <task_menu_update+0x27c>)
 8002418:	6013      	str	r3, [r2, #0]
						p_task_menu_dta->flag = false;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2200      	movs	r2, #0
 800241e:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU_2;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	2204      	movs	r2, #4
 8002424:	711a      	strb	r2, [r3, #4]
 8002426:	e036      	b.n	8002496 <task_menu_update+0x1e6>
					}
					else if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	799b      	ldrb	r3, [r3, #6]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d010      	beq.n	8002452 <task_menu_update+0x1a2>
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	795b      	ldrb	r3, [r3, #5]
 8002434:	2b07      	cmp	r3, #7
 8002436:	d10c      	bne.n	8002452 <task_menu_update+0x1a2>
					{
						p_task_menu_dta->flag = false;
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	2200      	movs	r2, #0
 800243c:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MAIN;
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	2202      	movs	r2, #2
 8002442:	711a      	strb	r2, [r3, #4]
						linea1=aux1;
 8002444:	4b36      	ldr	r3, [pc, #216]	@ (8002520 <task_menu_update+0x270>)
 8002446:	4a3b      	ldr	r2, [pc, #236]	@ (8002534 <task_menu_update+0x284>)
 8002448:	601a      	str	r2, [r3, #0]
						linea2=aux2;
 800244a:	4b38      	ldr	r3, [pc, #224]	@ (800252c <task_menu_update+0x27c>)
 800244c:	4a3a      	ldr	r2, [pc, #232]	@ (8002538 <task_menu_update+0x288>)
 800244e:	601a      	str	r2, [r3, #0]
 8002450:	e021      	b.n	8002496 <task_menu_update+0x1e6>
					}
					else if((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	799b      	ldrb	r3, [r3, #6]
 8002456:	2b00      	cmp	r3, #0
 8002458:	f000 825f 	beq.w	800291a <task_menu_update+0x66a>
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	795b      	ldrb	r3, [r3, #5]
 8002460:	2b05      	cmp	r3, #5
 8002462:	f040 825a 	bne.w	800291a <task_menu_update+0x66a>
						p_task_menu_dta->flag = false;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2200      	movs	r2, #0
 800246a:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->motor_id = (p_task_menu_dta->motor_id%2) + 1;
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	79db      	ldrb	r3, [r3, #7]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	b2db      	uxtb	r3, r3
 8002476:	3301      	adds	r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	71da      	strb	r2, [r3, #7]
						linea1 = menu_fijo;
 800247e:	4b28      	ldr	r3, [pc, #160]	@ (8002520 <task_menu_update+0x270>)
 8002480:	4a28      	ldr	r2, [pc, #160]	@ (8002524 <task_menu_update+0x274>)
 8002482:	601a      	str	r2, [r3, #0]
						linea2 = menu1[p_task_menu_dta->motor_id - 1];
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	79db      	ldrb	r3, [r3, #7]
 8002488:	3b01      	subs	r3, #1
 800248a:	011b      	lsls	r3, r3, #4
 800248c:	4a26      	ldr	r2, [pc, #152]	@ (8002528 <task_menu_update+0x278>)
 800248e:	4413      	add	r3, r2
 8002490:	4a26      	ldr	r2, [pc, #152]	@ (800252c <task_menu_update+0x27c>)
 8002492:	6013      	str	r3, [r2, #0]
					}
					break;
 8002494:	e241      	b.n	800291a <task_menu_update+0x66a>
 8002496:	e240      	b.n	800291a <task_menu_update+0x66a>

				case ST_MEN_XX_MENU_2:
					if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event))
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	799b      	ldrb	r3, [r3, #6]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d053      	beq.n	8002548 <task_menu_update+0x298>
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	795b      	ldrb	r3, [r3, #5]
 80024a4:	2b03      	cmp	r3, #3
 80024a6:	d14f      	bne.n	8002548 <task_menu_update+0x298>
					{
						p_task_menu_dta->flag = false;
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	2200      	movs	r2, #0
 80024ac:	719a      	strb	r2, [r3, #6]

						if(p_task_menu_dta->motor_opt == 1){
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	7a1b      	ldrb	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d10b      	bne.n	80024ce <task_menu_update+0x21e>
							p_task_menu_dta->state = ST_MEN_XX_MENU_POWER;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2205      	movs	r2, #5
 80024ba:	711a      	strb	r2, [r3, #4]
							linea2 = menu3[p_task_menu_dta->power_opt - 1];
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	7a5b      	ldrb	r3, [r3, #9]
 80024c0:	3b01      	subs	r3, #1
 80024c2:	011b      	lsls	r3, r3, #4
 80024c4:	4a1d      	ldr	r2, [pc, #116]	@ (800253c <task_menu_update+0x28c>)
 80024c6:	4413      	add	r3, r2
 80024c8:	4a18      	ldr	r2, [pc, #96]	@ (800252c <task_menu_update+0x27c>)
 80024ca:	6013      	str	r3, [r2, #0]
						if(p_task_menu_dta->motor_opt == 1){
 80024cc:	e07b      	b.n	80025c6 <task_menu_update+0x316>
						}
						else if(p_task_menu_dta->motor_opt == 2){
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	7a1b      	ldrb	r3, [r3, #8]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d10b      	bne.n	80024ee <task_menu_update+0x23e>
							p_task_menu_dta->state = ST_MEN_XX_MENU_SPEED;
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	2206      	movs	r2, #6
 80024da:	711a      	strb	r2, [r3, #4]
							linea2 = menu4[p_task_menu_dta->speed_opt - 1];
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	7a9b      	ldrb	r3, [r3, #10]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	011b      	lsls	r3, r3, #4
 80024e4:	4a16      	ldr	r2, [pc, #88]	@ (8002540 <task_menu_update+0x290>)
 80024e6:	4413      	add	r3, r2
 80024e8:	4a10      	ldr	r2, [pc, #64]	@ (800252c <task_menu_update+0x27c>)
 80024ea:	6013      	str	r3, [r2, #0]
						if(p_task_menu_dta->motor_opt == 1){
 80024ec:	e06b      	b.n	80025c6 <task_menu_update+0x316>
						}
						else if(p_task_menu_dta->motor_opt == 3){
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	7a1b      	ldrb	r3, [r3, #8]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d167      	bne.n	80025c6 <task_menu_update+0x316>
							p_task_menu_dta->state = ST_MEN_XX_MENU_SPIN;
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	2207      	movs	r2, #7
 80024fa:	711a      	strb	r2, [r3, #4]
							linea2 = menu5[p_task_menu_dta->spin_opt - 1];
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	7adb      	ldrb	r3, [r3, #11]
 8002500:	3b01      	subs	r3, #1
 8002502:	011b      	lsls	r3, r3, #4
 8002504:	4a0f      	ldr	r2, [pc, #60]	@ (8002544 <task_menu_update+0x294>)
 8002506:	4413      	add	r3, r2
 8002508:	4a08      	ldr	r2, [pc, #32]	@ (800252c <task_menu_update+0x27c>)
 800250a:	6013      	str	r3, [r2, #0]
						if(p_task_menu_dta->motor_opt == 1){
 800250c:	e05b      	b.n	80025c6 <task_menu_update+0x316>
 800250e:	bf00      	nop
 8002510:	200003c0 	.word	0x200003c0
 8002514:	200003c4 	.word	0x200003c4
 8002518:	2000001c 	.word	0x2000001c
 800251c:	40010800 	.word	0x40010800
 8002520:	200003c8 	.word	0x200003c8
 8002524:	20000030 	.word	0x20000030
 8002528:	20000040 	.word	0x20000040
 800252c:	200003cc 	.word	0x200003cc
 8002530:	20000060 	.word	0x20000060
 8002534:	200003d0 	.word	0x200003d0
 8002538:	200003e0 	.word	0x200003e0
 800253c:	20000090 	.word	0x20000090
 8002540:	200000b0 	.word	0x200000b0
 8002544:	20000150 	.word	0x20000150
						}

					}
					else if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	799b      	ldrb	r3, [r3, #6]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d015      	beq.n	800257c <task_menu_update+0x2cc>
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	795b      	ldrb	r3, [r3, #5]
 8002554:	2b07      	cmp	r3, #7
 8002556:	d111      	bne.n	800257c <task_menu_update+0x2cc>
					{
						p_task_menu_dta->flag = false;
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	2200      	movs	r2, #0
 800255c:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU_1;
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2203      	movs	r2, #3
 8002562:	711a      	strb	r2, [r3, #4]
						linea1 = menu_fijo;
 8002564:	4b96      	ldr	r3, [pc, #600]	@ (80027c0 <task_menu_update+0x510>)
 8002566:	4a97      	ldr	r2, [pc, #604]	@ (80027c4 <task_menu_update+0x514>)
 8002568:	601a      	str	r2, [r3, #0]
						linea2 = menu1[p_task_menu_dta->motor_id - 1];
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	79db      	ldrb	r3, [r3, #7]
 800256e:	3b01      	subs	r3, #1
 8002570:	011b      	lsls	r3, r3, #4
 8002572:	4a95      	ldr	r2, [pc, #596]	@ (80027c8 <task_menu_update+0x518>)
 8002574:	4413      	add	r3, r2
 8002576:	4a95      	ldr	r2, [pc, #596]	@ (80027cc <task_menu_update+0x51c>)
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e025      	b.n	80025c8 <task_menu_update+0x318>
					}
					else if((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	799b      	ldrb	r3, [r3, #6]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 81cc 	beq.w	800291e <task_menu_update+0x66e>
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	795b      	ldrb	r3, [r3, #5]
 800258a:	2b05      	cmp	r3, #5
 800258c:	f040 81c7 	bne.w	800291e <task_menu_update+0x66e>
						p_task_menu_dta->motor_opt = (p_task_menu_dta->motor_opt%3) + 1;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	7a1a      	ldrb	r2, [r3, #8]
 8002594:	4b8e      	ldr	r3, [pc, #568]	@ (80027d0 <task_menu_update+0x520>)
 8002596:	fba3 1302 	umull	r1, r3, r3, r2
 800259a:	0859      	lsrs	r1, r3, #1
 800259c:	460b      	mov	r3, r1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	440b      	add	r3, r1
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	721a      	strb	r2, [r3, #8]
						p_task_menu_dta->flag = false;
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2200      	movs	r2, #0
 80025b2:	719a      	strb	r2, [r3, #6]
						linea2 = menu2[p_task_menu_dta->motor_opt - 1];
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	7a1b      	ldrb	r3, [r3, #8]
 80025b8:	3b01      	subs	r3, #1
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	4a85      	ldr	r2, [pc, #532]	@ (80027d4 <task_menu_update+0x524>)
 80025be:	4413      	add	r3, r2
 80025c0:	4a82      	ldr	r2, [pc, #520]	@ (80027cc <task_menu_update+0x51c>)
 80025c2:	6013      	str	r3, [r2, #0]
					}

					break;
 80025c4:	e1ab      	b.n	800291e <task_menu_update+0x66e>
						if(p_task_menu_dta->motor_opt == 1){
 80025c6:	bf00      	nop
					break;
 80025c8:	e1a9      	b.n	800291e <task_menu_update+0x66e>

				case ST_MEN_XX_MENU_POWER:

					if((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	799b      	ldrb	r3, [r3, #6]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d03e      	beq.n	8002650 <task_menu_update+0x3a0>
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	795b      	ldrb	r3, [r3, #5]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d13a      	bne.n	8002650 <task_menu_update+0x3a0>
						motor[p_task_menu_dta->motor_id-1].power = p_task_menu_dta->power_opt;
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	79db      	ldrb	r3, [r3, #7]
 80025de:	3b01      	subs	r3, #1
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	7a51      	ldrb	r1, [r2, #9]
 80025e4:	4a7c      	ldr	r2, [pc, #496]	@ (80027d8 <task_menu_update+0x528>)
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4413      	add	r3, r2
 80025ea:	460a      	mov	r2, r1
 80025ec:	705a      	strb	r2, [r3, #1]
						sprintf(aux1,"Motor1:%s,%s,%s",string_motor1[motor[0].power-1],string_motor2[motor[0].speed-1],string_motor3[motor[0].spin-1]);
 80025ee:	4b7a      	ldr	r3, [pc, #488]	@ (80027d8 <task_menu_update+0x528>)
 80025f0:	785b      	ldrb	r3, [r3, #1]
 80025f2:	3b01      	subs	r3, #1
 80025f4:	011b      	lsls	r3, r3, #4
 80025f6:	4a79      	ldr	r2, [pc, #484]	@ (80027dc <task_menu_update+0x52c>)
 80025f8:	441a      	add	r2, r3
 80025fa:	4b77      	ldr	r3, [pc, #476]	@ (80027d8 <task_menu_update+0x528>)
 80025fc:	789b      	ldrb	r3, [r3, #2]
 80025fe:	3b01      	subs	r3, #1
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	4977      	ldr	r1, [pc, #476]	@ (80027e0 <task_menu_update+0x530>)
 8002604:	4419      	add	r1, r3
 8002606:	4b74      	ldr	r3, [pc, #464]	@ (80027d8 <task_menu_update+0x528>)
 8002608:	78db      	ldrb	r3, [r3, #3]
 800260a:	3b01      	subs	r3, #1
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	4875      	ldr	r0, [pc, #468]	@ (80027e4 <task_menu_update+0x534>)
 8002610:	4403      	add	r3, r0
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	460b      	mov	r3, r1
 8002616:	4974      	ldr	r1, [pc, #464]	@ (80027e8 <task_menu_update+0x538>)
 8002618:	4874      	ldr	r0, [pc, #464]	@ (80027ec <task_menu_update+0x53c>)
 800261a:	f001 fa87 	bl	8003b2c <siprintf>
						sprintf(aux2,"Motor2:%s,%s,%s",string_motor1[motor[1].power-1],string_motor2[motor[1].speed-1],string_motor3[motor[1].spin-1]);
 800261e:	4b6e      	ldr	r3, [pc, #440]	@ (80027d8 <task_menu_update+0x528>)
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	3b01      	subs	r3, #1
 8002624:	011b      	lsls	r3, r3, #4
 8002626:	4a6d      	ldr	r2, [pc, #436]	@ (80027dc <task_menu_update+0x52c>)
 8002628:	441a      	add	r2, r3
 800262a:	4b6b      	ldr	r3, [pc, #428]	@ (80027d8 <task_menu_update+0x528>)
 800262c:	799b      	ldrb	r3, [r3, #6]
 800262e:	3b01      	subs	r3, #1
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	496b      	ldr	r1, [pc, #428]	@ (80027e0 <task_menu_update+0x530>)
 8002634:	4419      	add	r1, r3
 8002636:	4b68      	ldr	r3, [pc, #416]	@ (80027d8 <task_menu_update+0x528>)
 8002638:	79db      	ldrb	r3, [r3, #7]
 800263a:	3b01      	subs	r3, #1
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	4869      	ldr	r0, [pc, #420]	@ (80027e4 <task_menu_update+0x534>)
 8002640:	4403      	add	r3, r0
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	460b      	mov	r3, r1
 8002646:	496a      	ldr	r1, [pc, #424]	@ (80027f0 <task_menu_update+0x540>)
 8002648:	486a      	ldr	r0, [pc, #424]	@ (80027f4 <task_menu_update+0x544>)
 800264a:	f001 fa6f 	bl	8003b2c <siprintf>
 800264e:	e035      	b.n	80026bc <task_menu_update+0x40c>
					}
					else if((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	799b      	ldrb	r3, [r3, #6]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d018      	beq.n	800268a <task_menu_update+0x3da>
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	795b      	ldrb	r3, [r3, #5]
 800265c:	2b05      	cmp	r3, #5
 800265e:	d114      	bne.n	800268a <task_menu_update+0x3da>
						p_task_menu_dta->power_opt = (p_task_menu_dta->power_opt%2) + 1;
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	7a5b      	ldrb	r3, [r3, #9]
 8002664:	f003 0301 	and.w	r3, r3, #1
 8002668:	b2db      	uxtb	r3, r3
 800266a:	3301      	adds	r3, #1
 800266c:	b2da      	uxtb	r2, r3
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	725a      	strb	r2, [r3, #9]
						p_task_menu_dta->flag = false;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2200      	movs	r2, #0
 8002676:	719a      	strb	r2, [r3, #6]
						linea2 = menu3[p_task_menu_dta->power_opt - 1];
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	7a5b      	ldrb	r3, [r3, #9]
 800267c:	3b01      	subs	r3, #1
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	4a5d      	ldr	r2, [pc, #372]	@ (80027f8 <task_menu_update+0x548>)
 8002682:	4413      	add	r3, r2
 8002684:	4a51      	ldr	r2, [pc, #324]	@ (80027cc <task_menu_update+0x51c>)
 8002686:	6013      	str	r3, [r2, #0]
 8002688:	e018      	b.n	80026bc <task_menu_update+0x40c>
					}
					else if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	799b      	ldrb	r3, [r3, #6]
 800268e:	2b00      	cmp	r3, #0
 8002690:	f000 8147 	beq.w	8002922 <task_menu_update+0x672>
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	795b      	ldrb	r3, [r3, #5]
 8002698:	2b07      	cmp	r3, #7
 800269a:	f040 8142 	bne.w	8002922 <task_menu_update+0x672>
					{
						p_task_menu_dta->flag = false;
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	2200      	movs	r2, #0
 80026a2:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU_2;
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	2204      	movs	r2, #4
 80026a8:	711a      	strb	r2, [r3, #4]
						linea2 = menu2[p_task_menu_dta->motor_opt - 1];
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	7a1b      	ldrb	r3, [r3, #8]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	4a48      	ldr	r2, [pc, #288]	@ (80027d4 <task_menu_update+0x524>)
 80026b4:	4413      	add	r3, r2
 80026b6:	4a45      	ldr	r2, [pc, #276]	@ (80027cc <task_menu_update+0x51c>)
 80026b8:	6013      	str	r3, [r2, #0]

					}

					break;
 80026ba:	e132      	b.n	8002922 <task_menu_update+0x672>
 80026bc:	e131      	b.n	8002922 <task_menu_update+0x672>

				case ST_MEN_XX_MENU_SPEED:
					if((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	799b      	ldrb	r3, [r3, #6]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d03e      	beq.n	8002744 <task_menu_update+0x494>
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	795b      	ldrb	r3, [r3, #5]
 80026ca:	2b03      	cmp	r3, #3
 80026cc:	d13a      	bne.n	8002744 <task_menu_update+0x494>
						motor[p_task_menu_dta->motor_id-1].speed = p_task_menu_dta->speed_opt;
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	79db      	ldrb	r3, [r3, #7]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	693a      	ldr	r2, [r7, #16]
 80026d6:	7a91      	ldrb	r1, [r2, #10]
 80026d8:	4a3f      	ldr	r2, [pc, #252]	@ (80027d8 <task_menu_update+0x528>)
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	460a      	mov	r2, r1
 80026e0:	709a      	strb	r2, [r3, #2]
						sprintf(aux1,"Motor1:%s,%s,%s",string_motor1[motor[0].power-1],string_motor2[motor[0].speed-1],string_motor3[motor[0].spin-1]);
 80026e2:	4b3d      	ldr	r3, [pc, #244]	@ (80027d8 <task_menu_update+0x528>)
 80026e4:	785b      	ldrb	r3, [r3, #1]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	011b      	lsls	r3, r3, #4
 80026ea:	4a3c      	ldr	r2, [pc, #240]	@ (80027dc <task_menu_update+0x52c>)
 80026ec:	441a      	add	r2, r3
 80026ee:	4b3a      	ldr	r3, [pc, #232]	@ (80027d8 <task_menu_update+0x528>)
 80026f0:	789b      	ldrb	r3, [r3, #2]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	493a      	ldr	r1, [pc, #232]	@ (80027e0 <task_menu_update+0x530>)
 80026f8:	4419      	add	r1, r3
 80026fa:	4b37      	ldr	r3, [pc, #220]	@ (80027d8 <task_menu_update+0x528>)
 80026fc:	78db      	ldrb	r3, [r3, #3]
 80026fe:	3b01      	subs	r3, #1
 8002700:	011b      	lsls	r3, r3, #4
 8002702:	4838      	ldr	r0, [pc, #224]	@ (80027e4 <task_menu_update+0x534>)
 8002704:	4403      	add	r3, r0
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	4937      	ldr	r1, [pc, #220]	@ (80027e8 <task_menu_update+0x538>)
 800270c:	4837      	ldr	r0, [pc, #220]	@ (80027ec <task_menu_update+0x53c>)
 800270e:	f001 fa0d 	bl	8003b2c <siprintf>
						sprintf(aux2,"Motor2:%s,%s,%s",string_motor1[motor[1].power-1],string_motor2[motor[1].speed-1],string_motor3[motor[1].spin-1]);
 8002712:	4b31      	ldr	r3, [pc, #196]	@ (80027d8 <task_menu_update+0x528>)
 8002714:	795b      	ldrb	r3, [r3, #5]
 8002716:	3b01      	subs	r3, #1
 8002718:	011b      	lsls	r3, r3, #4
 800271a:	4a30      	ldr	r2, [pc, #192]	@ (80027dc <task_menu_update+0x52c>)
 800271c:	441a      	add	r2, r3
 800271e:	4b2e      	ldr	r3, [pc, #184]	@ (80027d8 <task_menu_update+0x528>)
 8002720:	799b      	ldrb	r3, [r3, #6]
 8002722:	3b01      	subs	r3, #1
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	492e      	ldr	r1, [pc, #184]	@ (80027e0 <task_menu_update+0x530>)
 8002728:	4419      	add	r1, r3
 800272a:	4b2b      	ldr	r3, [pc, #172]	@ (80027d8 <task_menu_update+0x528>)
 800272c:	79db      	ldrb	r3, [r3, #7]
 800272e:	3b01      	subs	r3, #1
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	482c      	ldr	r0, [pc, #176]	@ (80027e4 <task_menu_update+0x534>)
 8002734:	4403      	add	r3, r0
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	460b      	mov	r3, r1
 800273a:	492d      	ldr	r1, [pc, #180]	@ (80027f0 <task_menu_update+0x540>)
 800273c:	482d      	ldr	r0, [pc, #180]	@ (80027f4 <task_menu_update+0x544>)
 800273e:	f001 f9f5 	bl	8003b2c <siprintf>
 8002742:	e03c      	b.n	80027be <task_menu_update+0x50e>

					}
					else if((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	799b      	ldrb	r3, [r3, #6]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01f      	beq.n	800278c <task_menu_update+0x4dc>
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	795b      	ldrb	r3, [r3, #5]
 8002750:	2b05      	cmp	r3, #5
 8002752:	d11b      	bne.n	800278c <task_menu_update+0x4dc>
						p_task_menu_dta->speed_opt = (p_task_menu_dta->speed_opt%10) + 1;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	7a9a      	ldrb	r2, [r3, #10]
 8002758:	4b28      	ldr	r3, [pc, #160]	@ (80027fc <task_menu_update+0x54c>)
 800275a:	fba3 1302 	umull	r1, r3, r3, r2
 800275e:	08d9      	lsrs	r1, r3, #3
 8002760:	460b      	mov	r3, r1
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	3301      	adds	r3, #1
 800276e:	b2da      	uxtb	r2, r3
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	729a      	strb	r2, [r3, #10]
						p_task_menu_dta->flag = false;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	2200      	movs	r2, #0
 8002778:	719a      	strb	r2, [r3, #6]
						linea2 = menu4[p_task_menu_dta->speed_opt - 1];
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	7a9b      	ldrb	r3, [r3, #10]
 800277e:	3b01      	subs	r3, #1
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	4a1f      	ldr	r2, [pc, #124]	@ (8002800 <task_menu_update+0x550>)
 8002784:	4413      	add	r3, r2
 8002786:	4a11      	ldr	r2, [pc, #68]	@ (80027cc <task_menu_update+0x51c>)
 8002788:	6013      	str	r3, [r2, #0]
 800278a:	e018      	b.n	80027be <task_menu_update+0x50e>
					}
					else if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	799b      	ldrb	r3, [r3, #6]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80c8 	beq.w	8002926 <task_menu_update+0x676>
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	795b      	ldrb	r3, [r3, #5]
 800279a:	2b07      	cmp	r3, #7
 800279c:	f040 80c3 	bne.w	8002926 <task_menu_update+0x676>
					{
						p_task_menu_dta->flag = false;
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	2200      	movs	r2, #0
 80027a4:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU_2;
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	2204      	movs	r2, #4
 80027aa:	711a      	strb	r2, [r3, #4]
						linea2 = menu2[p_task_menu_dta->motor_opt - 1];
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	7a1b      	ldrb	r3, [r3, #8]
 80027b0:	3b01      	subs	r3, #1
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	4a07      	ldr	r2, [pc, #28]	@ (80027d4 <task_menu_update+0x524>)
 80027b6:	4413      	add	r3, r2
 80027b8:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <task_menu_update+0x51c>)
 80027ba:	6013      	str	r3, [r2, #0]
					}

					break;
 80027bc:	e0b3      	b.n	8002926 <task_menu_update+0x676>
 80027be:	e0b2      	b.n	8002926 <task_menu_update+0x676>
 80027c0:	200003c8 	.word	0x200003c8
 80027c4:	20000030 	.word	0x20000030
 80027c8:	20000040 	.word	0x20000040
 80027cc:	200003cc 	.word	0x200003cc
 80027d0:	aaaaaaab 	.word	0xaaaaaaab
 80027d4:	20000060 	.word	0x20000060
 80027d8:	20000250 	.word	0x20000250
 80027dc:	20000170 	.word	0x20000170
 80027e0:	20000190 	.word	0x20000190
 80027e4:	20000230 	.word	0x20000230
 80027e8:	08004bf0 	.word	0x08004bf0
 80027ec:	200003d0 	.word	0x200003d0
 80027f0:	08004c00 	.word	0x08004c00
 80027f4:	200003e0 	.word	0x200003e0
 80027f8:	20000090 	.word	0x20000090
 80027fc:	cccccccd 	.word	0xcccccccd
 8002800:	200000b0 	.word	0x200000b0

				case ST_MEN_XX_MENU_SPIN:
					if((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	799b      	ldrb	r3, [r3, #6]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d03e      	beq.n	800288a <task_menu_update+0x5da>
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	795b      	ldrb	r3, [r3, #5]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d13a      	bne.n	800288a <task_menu_update+0x5da>
						motor[p_task_menu_dta->motor_id-1].spin = p_task_menu_dta->spin_opt;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	79db      	ldrb	r3, [r3, #7]
 8002818:	3b01      	subs	r3, #1
 800281a:	693a      	ldr	r2, [r7, #16]
 800281c:	7ad1      	ldrb	r1, [r2, #11]
 800281e:	4a58      	ldr	r2, [pc, #352]	@ (8002980 <task_menu_update+0x6d0>)
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4413      	add	r3, r2
 8002824:	460a      	mov	r2, r1
 8002826:	70da      	strb	r2, [r3, #3]
						sprintf(aux1,"Motor1:%s,%s,%s",string_motor1[motor[0].power-1],string_motor2[motor[0].speed-1],string_motor3[motor[0].spin-1]);
 8002828:	4b55      	ldr	r3, [pc, #340]	@ (8002980 <task_menu_update+0x6d0>)
 800282a:	785b      	ldrb	r3, [r3, #1]
 800282c:	3b01      	subs	r3, #1
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4a54      	ldr	r2, [pc, #336]	@ (8002984 <task_menu_update+0x6d4>)
 8002832:	441a      	add	r2, r3
 8002834:	4b52      	ldr	r3, [pc, #328]	@ (8002980 <task_menu_update+0x6d0>)
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	3b01      	subs	r3, #1
 800283a:	011b      	lsls	r3, r3, #4
 800283c:	4952      	ldr	r1, [pc, #328]	@ (8002988 <task_menu_update+0x6d8>)
 800283e:	4419      	add	r1, r3
 8002840:	4b4f      	ldr	r3, [pc, #316]	@ (8002980 <task_menu_update+0x6d0>)
 8002842:	78db      	ldrb	r3, [r3, #3]
 8002844:	3b01      	subs	r3, #1
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	4850      	ldr	r0, [pc, #320]	@ (800298c <task_menu_update+0x6dc>)
 800284a:	4403      	add	r3, r0
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	460b      	mov	r3, r1
 8002850:	494f      	ldr	r1, [pc, #316]	@ (8002990 <task_menu_update+0x6e0>)
 8002852:	4850      	ldr	r0, [pc, #320]	@ (8002994 <task_menu_update+0x6e4>)
 8002854:	f001 f96a 	bl	8003b2c <siprintf>
						sprintf(aux2,"Motor2:%s,%s,%s",string_motor1[motor[1].power-1],string_motor2[motor[1].speed-1],string_motor3[motor[1].spin-1]);
 8002858:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <task_menu_update+0x6d0>)
 800285a:	795b      	ldrb	r3, [r3, #5]
 800285c:	3b01      	subs	r3, #1
 800285e:	011b      	lsls	r3, r3, #4
 8002860:	4a48      	ldr	r2, [pc, #288]	@ (8002984 <task_menu_update+0x6d4>)
 8002862:	441a      	add	r2, r3
 8002864:	4b46      	ldr	r3, [pc, #280]	@ (8002980 <task_menu_update+0x6d0>)
 8002866:	799b      	ldrb	r3, [r3, #6]
 8002868:	3b01      	subs	r3, #1
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	4946      	ldr	r1, [pc, #280]	@ (8002988 <task_menu_update+0x6d8>)
 800286e:	4419      	add	r1, r3
 8002870:	4b43      	ldr	r3, [pc, #268]	@ (8002980 <task_menu_update+0x6d0>)
 8002872:	79db      	ldrb	r3, [r3, #7]
 8002874:	3b01      	subs	r3, #1
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	4844      	ldr	r0, [pc, #272]	@ (800298c <task_menu_update+0x6dc>)
 800287a:	4403      	add	r3, r0
 800287c:	9300      	str	r3, [sp, #0]
 800287e:	460b      	mov	r3, r1
 8002880:	4945      	ldr	r1, [pc, #276]	@ (8002998 <task_menu_update+0x6e8>)
 8002882:	4846      	ldr	r0, [pc, #280]	@ (800299c <task_menu_update+0x6ec>)
 8002884:	f001 f952 	bl	8003b2c <siprintf>
 8002888:	e033      	b.n	80028f2 <task_menu_update+0x642>

					}
					else if((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	799b      	ldrb	r3, [r3, #6]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d018      	beq.n	80028c4 <task_menu_update+0x614>
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	795b      	ldrb	r3, [r3, #5]
 8002896:	2b05      	cmp	r3, #5
 8002898:	d114      	bne.n	80028c4 <task_menu_update+0x614>
						p_task_menu_dta->spin_opt = (p_task_menu_dta->spin_opt%2) + 1;
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	7adb      	ldrb	r3, [r3, #11]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	3301      	adds	r3, #1
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	72da      	strb	r2, [r3, #11]
						p_task_menu_dta->flag = false;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	2200      	movs	r2, #0
 80028b0:	719a      	strb	r2, [r3, #6]

						linea2 = menu5[p_task_menu_dta->spin_opt - 1];
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	7adb      	ldrb	r3, [r3, #11]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	011b      	lsls	r3, r3, #4
 80028ba:	4a39      	ldr	r2, [pc, #228]	@ (80029a0 <task_menu_update+0x6f0>)
 80028bc:	4413      	add	r3, r2
 80028be:	4a39      	ldr	r2, [pc, #228]	@ (80029a4 <task_menu_update+0x6f4>)
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	e016      	b.n	80028f2 <task_menu_update+0x642>
					}
					else if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event))
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	799b      	ldrb	r3, [r3, #6]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d02e      	beq.n	800292a <task_menu_update+0x67a>
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	795b      	ldrb	r3, [r3, #5]
 80028d0:	2b07      	cmp	r3, #7
 80028d2:	d12a      	bne.n	800292a <task_menu_update+0x67a>
					{
						p_task_menu_dta->flag = false;
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	2200      	movs	r2, #0
 80028d8:	719a      	strb	r2, [r3, #6]
						p_task_menu_dta->state = ST_MEN_XX_MENU_2;
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2204      	movs	r2, #4
 80028de:	711a      	strb	r2, [r3, #4]
						linea2 = menu2[p_task_menu_dta->motor_opt - 1];
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	7a1b      	ldrb	r3, [r3, #8]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	011b      	lsls	r3, r3, #4
 80028e8:	4a2f      	ldr	r2, [pc, #188]	@ (80029a8 <task_menu_update+0x6f8>)
 80028ea:	4413      	add	r3, r2
 80028ec:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <task_menu_update+0x6f4>)
 80028ee:	6013      	str	r3, [r2, #0]
					}

					break;
 80028f0:	e01b      	b.n	800292a <task_menu_update+0x67a>
 80028f2:	e01a      	b.n	800292a <task_menu_update+0x67a>

				default:

					p_task_menu_dta->tick  = DEL_MEN_XX_MIN;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	2200      	movs	r2, #0
 80028f8:	601a      	str	r2, [r3, #0]
					p_task_menu_dta->state = ST_MEN_XX_IDLE;
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2200      	movs	r2, #0
 80028fe:	711a      	strb	r2, [r3, #4]
					p_task_menu_dta->event = EV_MEN_MEN_IDLE;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2200      	movs	r2, #0
 8002904:	715a      	strb	r2, [r3, #5]
					p_task_menu_dta->flag  = false;
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	2200      	movs	r2, #0
 800290a:	719a      	strb	r2, [r3, #6]

					break;
 800290c:	e00e      	b.n	800292c <task_menu_update+0x67c>
					break;
 800290e:	bf00      	nop
 8002910:	e00c      	b.n	800292c <task_menu_update+0x67c>
					break;
 8002912:	bf00      	nop
 8002914:	e00a      	b.n	800292c <task_menu_update+0x67c>
					break;
 8002916:	bf00      	nop
 8002918:	e008      	b.n	800292c <task_menu_update+0x67c>
					break;
 800291a:	bf00      	nop
 800291c:	e006      	b.n	800292c <task_menu_update+0x67c>
					break;
 800291e:	bf00      	nop
 8002920:	e004      	b.n	800292c <task_menu_update+0x67c>
					break;
 8002922:	bf00      	nop
 8002924:	e002      	b.n	800292c <task_menu_update+0x67c>
					break;
 8002926:	bf00      	nop
 8002928:	e000      	b.n	800292c <task_menu_update+0x67c>
					break;
 800292a:	bf00      	nop
			}
			displayCharPositionWrite(0, 0);
 800292c:	2100      	movs	r1, #0
 800292e:	2000      	movs	r0, #0
 8002930:	f7ff f892 	bl	8001a58 <displayCharPositionWrite>
			displayStringWrite("                ");
 8002934:	481d      	ldr	r0, [pc, #116]	@ (80029ac <task_menu_update+0x6fc>)
 8002936:	f7ff f8e5 	bl	8001b04 <displayStringWrite>
			displayCharPositionWrite(0, 1);
 800293a:	2101      	movs	r1, #1
 800293c:	2000      	movs	r0, #0
 800293e:	f7ff f88b 	bl	8001a58 <displayCharPositionWrite>
			displayStringWrite("                ");
 8002942:	481a      	ldr	r0, [pc, #104]	@ (80029ac <task_menu_update+0x6fc>)
 8002944:	f7ff f8de 	bl	8001b04 <displayStringWrite>

			displayCharPositionWrite(0, 0);
 8002948:	2100      	movs	r1, #0
 800294a:	2000      	movs	r0, #0
 800294c:	f7ff f884 	bl	8001a58 <displayCharPositionWrite>
			displayStringWrite(linea1);
 8002950:	4b17      	ldr	r3, [pc, #92]	@ (80029b0 <task_menu_update+0x700>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff f8d5 	bl	8001b04 <displayStringWrite>
			displayCharPositionWrite(0, 1);
 800295a:	2101      	movs	r1, #1
 800295c:	2000      	movs	r0, #0
 800295e:	f7ff f87b 	bl	8001a58 <displayCharPositionWrite>
			displayStringWrite(linea2);
 8002962:	4b10      	ldr	r3, [pc, #64]	@ (80029a4 <task_menu_update+0x6f4>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff f8cc 	bl	8001b04 <displayStringWrite>
    while (b_time_update_required)
 800296c:	7dfb      	ldrb	r3, [r7, #23]
 800296e:	2b00      	cmp	r3, #0
 8002970:	f47f acb7 	bne.w	80022e2 <task_menu_update+0x32>
		}
		}
	}
}
 8002974:	bf00      	nop
 8002976:	bf00      	nop
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000250 	.word	0x20000250
 8002984:	20000170 	.word	0x20000170
 8002988:	20000190 	.word	0x20000190
 800298c:	20000230 	.word	0x20000230
 8002990:	08004bf0 	.word	0x08004bf0
 8002994:	200003d0 	.word	0x200003d0
 8002998:	08004c00 	.word	0x08004c00
 800299c:	200003e0 	.word	0x200003e0
 80029a0:	20000150 	.word	0x20000150
 80029a4:	200003cc 	.word	0x200003cc
 80029a8:	20000060 	.word	0x20000060
 80029ac:	08004c10 	.word	0x08004c10
 80029b0:	200003c8 	.word	0x200003c8

080029b4 <init_queue_event_task_menu>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_menu(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80029ba:	4b0f      	ldr	r3, [pc, #60]	@ (80029f8 <init_queue_event_task_menu+0x44>)
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80029c0:	4b0d      	ldr	r3, [pc, #52]	@ (80029f8 <init_queue_event_task_menu+0x44>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80029c6:	4b0c      	ldr	r3, [pc, #48]	@ (80029f8 <init_queue_event_task_menu+0x44>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80029cc:	2300      	movs	r3, #0
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	e008      	b.n	80029e4 <init_queue_event_task_menu+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80029d2:	4a09      	ldr	r2, [pc, #36]	@ (80029f8 <init_queue_event_task_menu+0x44>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	330c      	adds	r3, #12
 80029da:	22ff      	movs	r2, #255	@ 0xff
 80029dc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	3301      	adds	r3, #1
 80029e2:	607b      	str	r3, [r7, #4]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2b0f      	cmp	r3, #15
 80029e8:	d9f3      	bls.n	80029d2 <init_queue_event_task_menu+0x1e>
}
 80029ea:	bf00      	nop
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bc80      	pop	{r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200003f0 	.word	0x200003f0

080029fc <put_event_task_menu>:

void put_event_task_menu(task_menu_ev_t event)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 8002a06:	4b0d      	ldr	r3, [pc, #52]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a0e:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002a10:	4b0a      	ldr	r3, [pc, #40]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	1c5a      	adds	r2, r3, #1
 8002a16:	4909      	ldr	r1, [pc, #36]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a18:	600a      	str	r2, [r1, #0]
 8002a1a:	4a08      	ldr	r2, [pc, #32]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a1c:	4413      	add	r3, r2
 8002a1e:	79fa      	ldrb	r2, [r7, #7]
 8002a20:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2b10      	cmp	r3, #16
 8002a28:	d102      	bne.n	8002a30 <put_event_task_menu+0x34>
		queue_task_a.head = 0;
 8002a2a:	4b04      	ldr	r3, [pc, #16]	@ (8002a3c <put_event_task_menu+0x40>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	601a      	str	r2, [r3, #0]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr
 8002a3a:	bf00      	nop
 8002a3c:	200003f0 	.word	0x200003f0

08002a40 <get_event_task_menu>:

task_menu_ev_t get_event_task_menu(void)

{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
	task_menu_ev_t event;

	queue_task_a.count--;
 8002a46:	4b10      	ldr	r3, [pc, #64]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	4a0e      	ldr	r2, [pc, #56]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a4e:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	4a0c      	ldr	r2, [pc, #48]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a56:	4413      	add	r3, r2
 8002a58:	7b1b      	ldrb	r3, [r3, #12]
 8002a5a:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	1c5a      	adds	r2, r3, #1
 8002a62:	4909      	ldr	r1, [pc, #36]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a64:	604a      	str	r2, [r1, #4]
 8002a66:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a68:	4413      	add	r3, r2
 8002a6a:	22ff      	movs	r2, #255	@ 0xff
 8002a6c:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b10      	cmp	r3, #16
 8002a74:	d102      	bne.n	8002a7c <get_event_task_menu+0x3c>
		queue_task_a.tail = 0;
 8002a76:	4b04      	ldr	r3, [pc, #16]	@ (8002a88 <get_event_task_menu+0x48>)
 8002a78:	2200      	movs	r2, #0
 8002a7a:	605a      	str	r2, [r3, #4]

	return event;
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	370c      	adds	r7, #12
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr
 8002a88:	200003f0 	.word	0x200003f0

08002a8c <any_event_task_menu>:

bool any_event_task_menu(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8002a90:	4b06      	ldr	r3, [pc, #24]	@ (8002aac <any_event_task_menu+0x20>)
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b05      	ldr	r3, [pc, #20]	@ (8002aac <any_event_task_menu+0x20>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	bf14      	ite	ne
 8002a9c:	2301      	movne	r3, #1
 8002a9e:	2300      	moveq	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bc80      	pop	{r7}
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	200003f0 	.word	0x200003f0

08002ab0 <task_normal_init>:
uint32_t g_task_normal_cnt;
volatile uint32_t g_task_normal_tick_cnt;

/********************** external functions definition ************************/
void task_normal_init(void *parameters)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af02      	add	r7, sp, #8
 8002ab6:	6078      	str	r0, [r7, #4]
	task_normal_st_t	state;
	task_normal_ev_t	event;
	bool b_event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_normal_init), p_task_normal);
 8002ab8:	b672      	cpsid	i
 8002aba:	4b48      	ldr	r3, [pc, #288]	@ (8002bdc <task_normal_init+0x12c>)
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	4b48      	ldr	r3, [pc, #288]	@ (8002be0 <task_normal_init+0x130>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4b47      	ldr	r3, [pc, #284]	@ (8002be4 <task_normal_init+0x134>)
 8002ac6:	4a48      	ldr	r2, [pc, #288]	@ (8002be8 <task_normal_init+0x138>)
 8002ac8:	213f      	movs	r1, #63	@ 0x3f
 8002aca:	f000 fffb 	bl	8003ac4 <sniprintf>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4a46      	ldr	r2, [pc, #280]	@ (8002bec <task_normal_init+0x13c>)
 8002ad2:	6013      	str	r3, [r2, #0]
 8002ad4:	4b41      	ldr	r3, [pc, #260]	@ (8002bdc <task_normal_init+0x12c>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fa87 	bl	8001fec <logger_log_print_>
 8002ade:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_normal), p_task_normal_);
 8002ae0:	b672      	cpsid	i
 8002ae2:	4b3e      	ldr	r3, [pc, #248]	@ (8002bdc <task_normal_init+0x12c>)
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	4b42      	ldr	r3, [pc, #264]	@ (8002bf0 <task_normal_init+0x140>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	4b41      	ldr	r3, [pc, #260]	@ (8002bf4 <task_normal_init+0x144>)
 8002aee:	4a42      	ldr	r2, [pc, #264]	@ (8002bf8 <task_normal_init+0x148>)
 8002af0:	213f      	movs	r1, #63	@ 0x3f
 8002af2:	f000 ffe7 	bl	8003ac4 <sniprintf>
 8002af6:	4603      	mov	r3, r0
 8002af8:	4a3c      	ldr	r2, [pc, #240]	@ (8002bec <task_normal_init+0x13c>)
 8002afa:	6013      	str	r3, [r2, #0]
 8002afc:	4b37      	ldr	r3, [pc, #220]	@ (8002bdc <task_normal_init+0x12c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fa73 	bl	8001fec <logger_log_print_>
 8002b06:	b662      	cpsie	i

	g_task_normal_cnt = G_TASK_SYS_CNT_INI;
 8002b08:	4b3c      	ldr	r3, [pc, #240]	@ (8002bfc <task_normal_init+0x14c>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_normal_cnt), g_task_normal_cnt);
 8002b0e:	b672      	cpsid	i
 8002b10:	4b32      	ldr	r3, [pc, #200]	@ (8002bdc <task_normal_init+0x12c>)
 8002b12:	6818      	ldr	r0, [r3, #0]
 8002b14:	4b39      	ldr	r3, [pc, #228]	@ (8002bfc <task_normal_init+0x14c>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	4b39      	ldr	r3, [pc, #228]	@ (8002c00 <task_normal_init+0x150>)
 8002b1c:	4a39      	ldr	r2, [pc, #228]	@ (8002c04 <task_normal_init+0x154>)
 8002b1e:	213f      	movs	r1, #63	@ 0x3f
 8002b20:	f000 ffd0 	bl	8003ac4 <sniprintf>
 8002b24:	4603      	mov	r3, r0
 8002b26:	4a31      	ldr	r2, [pc, #196]	@ (8002bec <task_normal_init+0x13c>)
 8002b28:	6013      	str	r3, [r2, #0]
 8002b2a:	4b2c      	ldr	r3, [pc, #176]	@ (8002bdc <task_normal_init+0x12c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7ff fa5c 	bl	8001fec <logger_log_print_>
 8002b34:	b662      	cpsie	i

	init_queue_event_task_normal();
 8002b36:	f000 f9bd 	bl	8002eb4 <init_queue_event_task_normal>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_normal_dta = &task_normal_dta;
 8002b3a:	4b33      	ldr	r3, [pc, #204]	@ (8002c08 <task_normal_init+0x158>)
 8002b3c:	60fb      	str	r3, [r7, #12]

	/* Print out: Task execution FSM */
	state = p_task_normal_dta->state;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	791b      	ldrb	r3, [r3, #4]
 8002b42:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002b44:	b672      	cpsid	i
 8002b46:	4b25      	ldr	r3, [pc, #148]	@ (8002bdc <task_normal_init+0x12c>)
 8002b48:	6818      	ldr	r0, [r3, #0]
 8002b4a:	7afb      	ldrb	r3, [r7, #11]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	4b2f      	ldr	r3, [pc, #188]	@ (8002c0c <task_normal_init+0x15c>)
 8002b50:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <task_normal_init+0x160>)
 8002b52:	213f      	movs	r1, #63	@ 0x3f
 8002b54:	f000 ffb6 	bl	8003ac4 <sniprintf>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	4a24      	ldr	r2, [pc, #144]	@ (8002bec <task_normal_init+0x13c>)
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bdc <task_normal_init+0x12c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fa42 	bl	8001fec <logger_log_print_>
 8002b68:	b662      	cpsie	i

	event = p_task_normal_dta->event;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	795b      	ldrb	r3, [r3, #5]
 8002b6e:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002b70:	b672      	cpsid	i
 8002b72:	4b1a      	ldr	r3, [pc, #104]	@ (8002bdc <task_normal_init+0x12c>)
 8002b74:	6818      	ldr	r0, [r3, #0]
 8002b76:	7abb      	ldrb	r3, [r7, #10]
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	4b26      	ldr	r3, [pc, #152]	@ (8002c14 <task_normal_init+0x164>)
 8002b7c:	4a24      	ldr	r2, [pc, #144]	@ (8002c10 <task_normal_init+0x160>)
 8002b7e:	213f      	movs	r1, #63	@ 0x3f
 8002b80:	f000 ffa0 	bl	8003ac4 <sniprintf>
 8002b84:	4603      	mov	r3, r0
 8002b86:	4a19      	ldr	r2, [pc, #100]	@ (8002bec <task_normal_init+0x13c>)
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <task_normal_init+0x12c>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fa2c 	bl	8001fec <logger_log_print_>
 8002b94:	b662      	cpsie	i

	b_event = p_task_normal_dta->flag;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	799b      	ldrb	r3, [r3, #6]
 8002b9a:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 8002b9c:	b672      	cpsid	i
 8002b9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <task_normal_init+0x12c>)
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	7a7b      	ldrb	r3, [r7, #9]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d001      	beq.n	8002bac <task_normal_init+0xfc>
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c18 <task_normal_init+0x168>)
 8002baa:	e000      	b.n	8002bae <task_normal_init+0xfe>
 8002bac:	4b1b      	ldr	r3, [pc, #108]	@ (8002c1c <task_normal_init+0x16c>)
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c20 <task_normal_init+0x170>)
 8002bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8002c24 <task_normal_init+0x174>)
 8002bb4:	213f      	movs	r1, #63	@ 0x3f
 8002bb6:	f000 ff85 	bl	8003ac4 <sniprintf>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	4a0b      	ldr	r2, [pc, #44]	@ (8002bec <task_normal_init+0x13c>)
 8002bbe:	6013      	str	r3, [r2, #0]
 8002bc0:	4b06      	ldr	r3, [pc, #24]	@ (8002bdc <task_normal_init+0x12c>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7ff fa11 	bl	8001fec <logger_log_print_>
 8002bca:	b662      	cpsie	i

	g_task_normal_tick_cnt = G_TASK_SYS_TICK_CNT_INI;
 8002bcc:	4b16      	ldr	r3, [pc, #88]	@ (8002c28 <task_normal_init+0x178>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
}
 8002bd2:	bf00      	nop
 8002bd4:	3710      	adds	r7, #16
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	08004e3c 	.word	0x08004e3c
 8002be0:	20000260 	.word	0x20000260
 8002be4:	08004c68 	.word	0x08004c68
 8002be8:	08004c7c 	.word	0x08004c7c
 8002bec:	200003bc 	.word	0x200003bc
 8002bf0:	20000264 	.word	0x20000264
 8002bf4:	08004c94 	.word	0x08004c94
 8002bf8:	08004ca0 	.word	0x08004ca0
 8002bfc:	2000040c 	.word	0x2000040c
 8002c00:	08004cb0 	.word	0x08004cb0
 8002c04:	08004cc4 	.word	0x08004cc4
 8002c08:	20000258 	.word	0x20000258
 8002c0c:	08004cd4 	.word	0x08004cd4
 8002c10:	08004cdc 	.word	0x08004cdc
 8002c14:	08004ce8 	.word	0x08004ce8
 8002c18:	08004cf0 	.word	0x08004cf0
 8002c1c:	08004cf8 	.word	0x08004cf8
 8002c20:	08004d00 	.word	0x08004d00
 8002c24:	08004d08 	.word	0x08004d08
 8002c28:	20000410 	.word	0x20000410

08002c2c <task_normal_update>:

void task_normal_update(void *parameters)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
	task_normal_dta_t *p_task_normal_dta;
	bool b_time_update_required = false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	73fb      	strb	r3, [r7, #15]

	/* Update Task normal Counter */
	g_task_normal_cnt++;
 8002c38:	4b9b      	ldr	r3, [pc, #620]	@ (8002ea8 <task_normal_update+0x27c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	4a9a      	ldr	r2, [pc, #616]	@ (8002ea8 <task_normal_update+0x27c>)
 8002c40:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_normal_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8002c42:	b672      	cpsid	i
    if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8002c44:	4b99      	ldr	r3, [pc, #612]	@ (8002eac <task_normal_update+0x280>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d006      	beq.n	8002c5a <task_normal_update+0x2e>
    {
    	g_task_normal_tick_cnt--;
 8002c4c:	4b97      	ldr	r3, [pc, #604]	@ (8002eac <task_normal_update+0x280>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	4a96      	ldr	r2, [pc, #600]	@ (8002eac <task_normal_update+0x280>)
 8002c54:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002c56:	2301      	movs	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002c5a:	b662      	cpsie	i

    while (b_time_update_required)
 8002c5c:	e11a      	b.n	8002e94 <task_normal_update+0x268>
    {
		/* Protect shared resource (g_task_normal_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 8002c5e:	b672      	cpsid	i
		if (G_TASK_SYS_TICK_CNT_INI < g_task_normal_tick_cnt)
 8002c60:	4b92      	ldr	r3, [pc, #584]	@ (8002eac <task_normal_update+0x280>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d007      	beq.n	8002c78 <task_normal_update+0x4c>
		{
			g_task_normal_tick_cnt--;
 8002c68:	4b90      	ldr	r3, [pc, #576]	@ (8002eac <task_normal_update+0x280>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	4a8f      	ldr	r2, [pc, #572]	@ (8002eac <task_normal_update+0x280>)
 8002c70:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8002c72:	2301      	movs	r3, #1
 8002c74:	73fb      	strb	r3, [r7, #15]
 8002c76:	e001      	b.n	8002c7c <task_normal_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	73fb      	strb	r3, [r7, #15]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002c7c:	b662      	cpsie	i

    	/* Update Task normal Data Pointer */
		p_task_normal_dta = &task_normal_dta;
 8002c7e:	4b8c      	ldr	r3, [pc, #560]	@ (8002eb0 <task_normal_update+0x284>)
 8002c80:	60bb      	str	r3, [r7, #8]

		if (true == any_event_task_normal())
 8002c82:	f000 f961 	bl	8002f48 <any_event_task_normal>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <task_normal_update+0x72>
		{
			p_task_normal_dta->flag = true;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	719a      	strb	r2, [r3, #6]
			p_task_normal_dta->event = get_event_task_normal();
 8002c92:	f000 f933 	bl	8002efc <get_event_task_normal>
 8002c96:	4603      	mov	r3, r0
 8002c98:	461a      	mov	r2, r3
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	715a      	strb	r2, [r3, #5]
		}

		switch (p_task_normal_dta->state)
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	791b      	ldrb	r3, [r3, #4]
 8002ca2:	3b02      	subs	r3, #2
 8002ca4:	2b06      	cmp	r3, #6
 8002ca6:	f200 80e6 	bhi.w	8002e76 <task_normal_update+0x24a>
 8002caa:	a201      	add	r2, pc, #4	@ (adr r2, 8002cb0 <task_normal_update+0x84>)
 8002cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cb0:	08002ccd 	.word	0x08002ccd
 8002cb4:	08002d0d 	.word	0x08002d0d
 8002cb8:	08002d75 	.word	0x08002d75
 8002cbc:	08002dc1 	.word	0x08002dc1
 8002cc0:	08002de7 	.word	0x08002de7
 8002cc4:	08002e2b 	.word	0x08002e2b
 8002cc8:	08002e51 	.word	0x08002e51
		{
			case ST_SYS_01_AUTOAUSENTE:

				if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_ACTIVO ==  p_task_normal_dta->event))
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	799b      	ldrb	r3, [r3, #6]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <task_normal_update+0xbe>
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	795b      	ldrb	r3, [r3, #5]
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d106      	bne.n	8002cea <task_normal_update+0xbe>
				{
					p_task_normal_dta->flag = false;
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	719a      	strb	r2, [r3, #6]
					p_task_normal_dta->state = ST_SYS_01_AUTOPRESENTE;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2203      	movs	r2, #3
 8002ce6:	711a      	strb	r2, [r3, #4]
				{
					p_task_normal_dta->flag = false;
					p_task_normal_dta->state = ST_SYS_01_AUTOAUSENTE;
				}

				break;
 8002ce8:	e0c7      	b.n	8002e7a <task_normal_update+0x24e>
				else if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_NO_ACTIVO ==  p_task_normal_dta->event))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	799b      	ldrb	r3, [r3, #6]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 80c3 	beq.w	8002e7a <task_normal_update+0x24e>
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	795b      	ldrb	r3, [r3, #5]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	f040 80be 	bne.w	8002e7a <task_normal_update+0x24e>
					p_task_normal_dta->flag = false;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2200      	movs	r2, #0
 8002d02:	719a      	strb	r2, [r3, #6]
					p_task_normal_dta->state = ST_SYS_01_AUTOAUSENTE;
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	2202      	movs	r2, #2
 8002d08:	711a      	strb	r2, [r3, #4]
				break;
 8002d0a:	e0b6      	b.n	8002e7a <task_normal_update+0x24e>

			case ST_SYS_01_AUTOPRESENTE:
				if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_NO_ACTIVO == p_task_normal_dta->event)){
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	799b      	ldrb	r3, [r3, #6]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d00a      	beq.n	8002d2a <task_normal_update+0xfe>
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	795b      	ldrb	r3, [r3, #5]
 8002d18:	2b03      	cmp	r3, #3
 8002d1a:	d106      	bne.n	8002d2a <task_normal_update+0xfe>
					p_task_normal_dta->flag = false;
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	719a      	strb	r2, [r3, #6]
					p_task_normal_dta->state = ST_SYS_01_AUTOAUSENTE;
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2202      	movs	r2, #2
 8002d26:	711a      	strb	r2, [r3, #4]
 8002d28:	e023      	b.n	8002d72 <task_normal_update+0x146>
				}
				else if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_ACTIVO == p_task_normal_dta->event)){
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	799b      	ldrb	r3, [r3, #6]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <task_normal_update+0x11c>
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	795b      	ldrb	r3, [r3, #5]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d106      	bne.n	8002d48 <task_normal_update+0x11c>
					p_task_normal_dta->flag = false;
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	719a      	strb	r2, [r3, #6]
					p_task_normal_dta->state = ST_SYS_01_AUTOPRESENTE;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	2203      	movs	r2, #3
 8002d44:	711a      	strb	r2, [r3, #4]
 8002d46:	e014      	b.n	8002d72 <task_normal_update+0x146>
				}
				else if((true == p_task_normal_dta->flag) && (EV_SYS_01_BTN_DOWN == p_task_normal_dta->event)){
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	799b      	ldrb	r3, [r3, #6]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f000 8096 	beq.w	8002e7e <task_normal_update+0x252>
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	795b      	ldrb	r3, [r3, #5]
 8002d56:	2b05      	cmp	r3, #5
 8002d58:	f040 8091 	bne.w	8002e7e <task_normal_update+0x252>
					p_task_normal_dta->flag = false;
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_PULSE, ID_LED_01_GENERAR_TICKET);
 8002d62:	2101      	movs	r1, #1
 8002d64:	2004      	movs	r0, #4
 8002d66:	f7ff f955 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_RETIRAR_TICKET;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2204      	movs	r2, #4
 8002d6e:	711a      	strb	r2, [r3, #4]
				}

				break;
 8002d70:	e085      	b.n	8002e7e <task_normal_update+0x252>
 8002d72:	e084      	b.n	8002e7e <task_normal_update+0x252>

			case ST_SYS_01_RETIRAR_TICKET:
				if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_TICKET_NO_ACTIVO == p_task_normal_dta->event)){
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	799b      	ldrb	r3, [r3, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d00e      	beq.n	8002d9a <task_normal_update+0x16e>
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	795b      	ldrb	r3, [r3, #5]
 8002d80:	2b07      	cmp	r3, #7
 8002d82:	d10a      	bne.n	8002d9a <task_normal_update+0x16e>
					p_task_normal_dta->flag = false;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	2200      	movs	r2, #0
 8002d88:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_02_SUBIR_BARRERA);
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	2003      	movs	r0, #3
 8002d8e:	f7ff f941 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_BARRERA_SUBIENDO;
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2205      	movs	r2, #5
 8002d96:	711a      	strb	r2, [r3, #4]
					p_task_normal_dta->flag = false;
					put_event_task_actuator(EV_LED_XX_PULSE, ID_LED_01_TRAGAR_TICKET);
					p_task_normal_dta->state = ST_SYS_01_AUTOAUSENTE;
				}

				break;
 8002d98:	e073      	b.n	8002e82 <task_normal_update+0x256>
				else if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_NO_ACTIVO== p_task_normal_dta->event)){
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	799b      	ldrb	r3, [r3, #6]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d06f      	beq.n	8002e82 <task_normal_update+0x256>
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	795b      	ldrb	r3, [r3, #5]
 8002da6:	2b03      	cmp	r3, #3
 8002da8:	d16b      	bne.n	8002e82 <task_normal_update+0x256>
					p_task_normal_dta->flag = false;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_PULSE, ID_LED_01_TRAGAR_TICKET);
 8002db0:	2103      	movs	r1, #3
 8002db2:	2004      	movs	r0, #4
 8002db4:	f7ff f92e 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_AUTOAUSENTE;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	711a      	strb	r2, [r3, #4]
				break;
 8002dbe:	e060      	b.n	8002e82 <task_normal_update+0x256>

			case ST_SYS_01_BARRERA_SUBIENDO:
				if((true == p_task_normal_dta->flag) && (EV_SYS_01_FINAL_CARRERA_SUPERIOR == p_task_normal_dta->event)){
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	799b      	ldrb	r3, [r3, #6]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d05e      	beq.n	8002e86 <task_normal_update+0x25a>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	795b      	ldrb	r3, [r3, #5]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d15a      	bne.n	8002e86 <task_normal_update+0x25a>
					p_task_normal_dta->flag = false;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_02_SUBIR_BARRERA);
 8002dd6:	2102      	movs	r1, #2
 8002dd8:	2000      	movs	r0, #0
 8002dda:	f7ff f91b 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_BARRERA_ARRIBA;
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	2206      	movs	r2, #6
 8002de2:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002de4:	e04f      	b.n	8002e86 <task_normal_update+0x25a>

			case ST_SYS_01_BARRERA_ARRIBA:
				if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_LASER_ACTIVO == p_task_normal_dta->event)){
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	799b      	ldrb	r3, [r3, #6]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d00a      	beq.n	8002e04 <task_normal_update+0x1d8>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	795b      	ldrb	r3, [r3, #5]
 8002df2:	2b0a      	cmp	r3, #10
 8002df4:	d106      	bne.n	8002e04 <task_normal_update+0x1d8>
					p_task_normal_dta->flag = false;
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	719a      	strb	r2, [r3, #6]
					p_task_normal_dta->state = ST_SYS_01_AUTO_BARRERA;
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2207      	movs	r2, #7
 8002e00:	711a      	strb	r2, [r3, #4]
				else if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_NO_ACTIVO== p_task_normal_dta->event)){
					p_task_normal_dta->flag = false;
					put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_02_BAJAR_BARRERA);
					p_task_normal_dta->state = ST_SYS_01_BARRERA_BAJANDO;
				}
				break;
 8002e02:	e042      	b.n	8002e8a <task_normal_update+0x25e>
				else if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_MAGNETICO_NO_ACTIVO== p_task_normal_dta->event)){
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	799b      	ldrb	r3, [r3, #6]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d03e      	beq.n	8002e8a <task_normal_update+0x25e>
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	795b      	ldrb	r3, [r3, #5]
 8002e10:	2b03      	cmp	r3, #3
 8002e12:	d13a      	bne.n	8002e8a <task_normal_update+0x25e>
					p_task_normal_dta->flag = false;
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	2200      	movs	r2, #0
 8002e18:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_02_BAJAR_BARRERA);
 8002e1a:	2104      	movs	r1, #4
 8002e1c:	2003      	movs	r0, #3
 8002e1e:	f7ff f8f9 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_BARRERA_BAJANDO;
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2208      	movs	r2, #8
 8002e26:	711a      	strb	r2, [r3, #4]
				break;
 8002e28:	e02f      	b.n	8002e8a <task_normal_update+0x25e>

			case ST_SYS_01_AUTO_BARRERA:
				if((true == p_task_normal_dta->flag) && (EV_SYS_01_SENSOR_LASER_NO_ACTIVO == p_task_normal_dta->event)){
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	799b      	ldrb	r3, [r3, #6]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d02d      	beq.n	8002e8e <task_normal_update+0x262>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	795b      	ldrb	r3, [r3, #5]
 8002e36:	2b0b      	cmp	r3, #11
 8002e38:	d129      	bne.n	8002e8e <task_normal_update+0x262>
					p_task_normal_dta->flag = false;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_BLINK, ID_LED_02_BAJAR_BARRERA);
 8002e40:	2104      	movs	r1, #4
 8002e42:	2003      	movs	r0, #3
 8002e44:	f7ff f8e6 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_BARRERA_BAJANDO;
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	2208      	movs	r2, #8
 8002e4c:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002e4e:	e01e      	b.n	8002e8e <task_normal_update+0x262>

			case ST_SYS_01_BARRERA_BAJANDO:
				if((true == p_task_normal_dta->flag) && (EV_SYS_01_FINAL_CARRERA_INFERIOR == p_task_normal_dta->event)){
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	799b      	ldrb	r3, [r3, #6]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d01c      	beq.n	8002e92 <task_normal_update+0x266>
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	795b      	ldrb	r3, [r3, #5]
 8002e5c:	2b09      	cmp	r3, #9
 8002e5e:	d118      	bne.n	8002e92 <task_normal_update+0x266>
					p_task_normal_dta->flag = false;
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2200      	movs	r2, #0
 8002e64:	719a      	strb	r2, [r3, #6]
					put_event_task_actuator(EV_LED_XX_OFF, ID_LED_02_BAJAR_BARRERA);
 8002e66:	2104      	movs	r1, #4
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7ff f8d3 	bl	8002014 <put_event_task_actuator>
					p_task_normal_dta->state = ST_SYS_01_AUTOAUSENTE;
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2202      	movs	r2, #2
 8002e72:	711a      	strb	r2, [r3, #4]
				}
				break;
 8002e74:	e00d      	b.n	8002e92 <task_normal_update+0x266>

				break;
			 */
			default:

				break;
 8002e76:	bf00      	nop
 8002e78:	e00c      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e7a:	bf00      	nop
 8002e7c:	e00a      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e7e:	bf00      	nop
 8002e80:	e008      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e82:	bf00      	nop
 8002e84:	e006      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e86:	bf00      	nop
 8002e88:	e004      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e8a:	bf00      	nop
 8002e8c:	e002      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e8e:	bf00      	nop
 8002e90:	e000      	b.n	8002e94 <task_normal_update+0x268>
				break;
 8002e92:	bf00      	nop
    while (b_time_update_required)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f47f aee1 	bne.w	8002c5e <task_normal_update+0x32>
		}
	}
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	2000040c 	.word	0x2000040c
 8002eac:	20000410 	.word	0x20000410
 8002eb0:	20000258 	.word	0x20000258

08002eb4 <init_queue_event_task_normal>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_normal(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 8002eba:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef8 <init_queue_event_task_normal+0x44>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 8002ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8002ef8 <init_queue_event_task_normal+0x44>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 8002ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef8 <init_queue_event_task_normal+0x44>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 8002ecc:	2300      	movs	r3, #0
 8002ece:	607b      	str	r3, [r7, #4]
 8002ed0:	e008      	b.n	8002ee4 <init_queue_event_task_normal+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 8002ed2:	4a09      	ldr	r2, [pc, #36]	@ (8002ef8 <init_queue_event_task_normal+0x44>)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4413      	add	r3, r2
 8002ed8:	330c      	adds	r3, #12
 8002eda:	22ff      	movs	r2, #255	@ 0xff
 8002edc:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	607b      	str	r3, [r7, #4]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2b0f      	cmp	r3, #15
 8002ee8:	d9f3      	bls.n	8002ed2 <init_queue_event_task_normal+0x1e>
}
 8002eea:	bf00      	nop
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bc80      	pop	{r7}
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	20000414 	.word	0x20000414

08002efc <get_event_task_normal>:
		queue_task_a.head = 0;
}

task_normal_ev_t get_event_task_normal(void)

{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
	task_normal_ev_t event;

	queue_task_a.count--;
 8002f02:	4b10      	ldr	r3, [pc, #64]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	4a0e      	ldr	r2, [pc, #56]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f0a:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	4a0c      	ldr	r2, [pc, #48]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f12:	4413      	add	r3, r2
 8002f14:	7b1b      	ldrb	r3, [r3, #12]
 8002f16:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002f18:	4b0a      	ldr	r3, [pc, #40]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	4909      	ldr	r1, [pc, #36]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f20:	604a      	str	r2, [r1, #4]
 8002f22:	4a08      	ldr	r2, [pc, #32]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f24:	4413      	add	r3, r2
 8002f26:	22ff      	movs	r2, #255	@ 0xff
 8002f28:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d102      	bne.n	8002f38 <get_event_task_normal+0x3c>
		queue_task_a.tail = 0;
 8002f32:	4b04      	ldr	r3, [pc, #16]	@ (8002f44 <get_event_task_normal+0x48>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	605a      	str	r2, [r3, #4]

	return event;
 8002f38:	79fb      	ldrb	r3, [r7, #7]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	370c      	adds	r7, #12
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	20000414 	.word	0x20000414

08002f48 <any_event_task_normal>:

bool any_event_task_normal(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 8002f4c:	4b06      	ldr	r3, [pc, #24]	@ (8002f68 <any_event_task_normal+0x20>)
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	4b05      	ldr	r3, [pc, #20]	@ (8002f68 <any_event_task_normal+0x20>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	bf14      	ite	ne
 8002f58:	2301      	movne	r3, #1
 8002f5a:	2300      	moveq	r3, #0
 8002f5c:	b2db      	uxtb	r3, r3
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000414 	.word	0x20000414

08002f6c <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b088      	sub	sp, #32
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 8002f74:	b672      	cpsid	i
 8002f76:	4b49      	ldr	r3, [pc, #292]	@ (800309c <task_sensor_init+0x130>)
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	4b49      	ldr	r3, [pc, #292]	@ (80030a0 <task_sensor_init+0x134>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	9300      	str	r3, [sp, #0]
 8002f80:	4b48      	ldr	r3, [pc, #288]	@ (80030a4 <task_sensor_init+0x138>)
 8002f82:	4a49      	ldr	r2, [pc, #292]	@ (80030a8 <task_sensor_init+0x13c>)
 8002f84:	213f      	movs	r1, #63	@ 0x3f
 8002f86:	f000 fd9d 	bl	8003ac4 <sniprintf>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	4a47      	ldr	r2, [pc, #284]	@ (80030ac <task_sensor_init+0x140>)
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	4b42      	ldr	r3, [pc, #264]	@ (800309c <task_sensor_init+0x130>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff f829 	bl	8001fec <logger_log_print_>
 8002f9a:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 8002f9c:	b672      	cpsid	i
 8002f9e:	4b3f      	ldr	r3, [pc, #252]	@ (800309c <task_sensor_init+0x130>)
 8002fa0:	6818      	ldr	r0, [r3, #0]
 8002fa2:	4b43      	ldr	r3, [pc, #268]	@ (80030b0 <task_sensor_init+0x144>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	4b42      	ldr	r3, [pc, #264]	@ (80030b4 <task_sensor_init+0x148>)
 8002faa:	4a43      	ldr	r2, [pc, #268]	@ (80030b8 <task_sensor_init+0x14c>)
 8002fac:	213f      	movs	r1, #63	@ 0x3f
 8002fae:	f000 fd89 	bl	8003ac4 <sniprintf>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	4a3d      	ldr	r2, [pc, #244]	@ (80030ac <task_sensor_init+0x140>)
 8002fb6:	6013      	str	r3, [r2, #0]
 8002fb8:	4b38      	ldr	r3, [pc, #224]	@ (800309c <task_sensor_init+0x130>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f815 	bl	8001fec <logger_log_print_>
 8002fc2:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 8002fc4:	4b3d      	ldr	r3, [pc, #244]	@ (80030bc <task_sensor_init+0x150>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8002fca:	b672      	cpsid	i
 8002fcc:	4b33      	ldr	r3, [pc, #204]	@ (800309c <task_sensor_init+0x130>)
 8002fce:	6818      	ldr	r0, [r3, #0]
 8002fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80030bc <task_sensor_init+0x150>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80030c0 <task_sensor_init+0x154>)
 8002fd8:	4a3a      	ldr	r2, [pc, #232]	@ (80030c4 <task_sensor_init+0x158>)
 8002fda:	213f      	movs	r1, #63	@ 0x3f
 8002fdc:	f000 fd72 	bl	8003ac4 <sniprintf>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	4a32      	ldr	r2, [pc, #200]	@ (80030ac <task_sensor_init+0x140>)
 8002fe4:	6013      	str	r3, [r2, #0]
 8002fe6:	4b2d      	ldr	r3, [pc, #180]	@ (800309c <task_sensor_init+0x130>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fe fffe 	bl	8001fec <logger_log_print_>
 8002ff0:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
 8002ff6:	e046      	b.n	8003086 <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4a32      	ldr	r2, [pc, #200]	@ (80030c8 <task_sensor_init+0x15c>)
 8002ffe:	4413      	add	r3, r2
 8003000:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 8003002:	b672      	cpsid	i
 8003004:	4b25      	ldr	r3, [pc, #148]	@ (800309c <task_sensor_init+0x130>)
 8003006:	6818      	ldr	r0, [r3, #0]
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	9300      	str	r3, [sp, #0]
 800300c:	4b2f      	ldr	r3, [pc, #188]	@ (80030cc <task_sensor_init+0x160>)
 800300e:	4a30      	ldr	r2, [pc, #192]	@ (80030d0 <task_sensor_init+0x164>)
 8003010:	213f      	movs	r1, #63	@ 0x3f
 8003012:	f000 fd57 	bl	8003ac4 <sniprintf>
 8003016:	4603      	mov	r3, r0
 8003018:	4a24      	ldr	r2, [pc, #144]	@ (80030ac <task_sensor_init+0x140>)
 800301a:	6013      	str	r3, [r2, #0]
 800301c:	4b1f      	ldr	r3, [pc, #124]	@ (800309c <task_sensor_init+0x130>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4618      	mov	r0, r3
 8003022:	f7fe ffe3 	bl	8001fec <logger_log_print_>
 8003026:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	791b      	ldrb	r3, [r3, #4]
 800302c:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 800302e:	b672      	cpsid	i
 8003030:	4b1a      	ldr	r3, [pc, #104]	@ (800309c <task_sensor_init+0x130>)
 8003032:	6818      	ldr	r0, [r3, #0]
 8003034:	7bfb      	ldrb	r3, [r7, #15]
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <task_sensor_init+0x168>)
 800303a:	4a25      	ldr	r2, [pc, #148]	@ (80030d0 <task_sensor_init+0x164>)
 800303c:	213f      	movs	r1, #63	@ 0x3f
 800303e:	f000 fd41 	bl	8003ac4 <sniprintf>
 8003042:	4603      	mov	r3, r0
 8003044:	4a19      	ldr	r2, [pc, #100]	@ (80030ac <task_sensor_init+0x140>)
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	4b14      	ldr	r3, [pc, #80]	@ (800309c <task_sensor_init+0x130>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe ffcd 	bl	8001fec <logger_log_print_>
 8003052:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	795b      	ldrb	r3, [r3, #5]
 8003058:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 800305a:	b672      	cpsid	i
 800305c:	4b0f      	ldr	r3, [pc, #60]	@ (800309c <task_sensor_init+0x130>)
 800305e:	6818      	ldr	r0, [r3, #0]
 8003060:	7bbb      	ldrb	r3, [r7, #14]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	4b1c      	ldr	r3, [pc, #112]	@ (80030d8 <task_sensor_init+0x16c>)
 8003066:	4a17      	ldr	r2, [pc, #92]	@ (80030c4 <task_sensor_init+0x158>)
 8003068:	213f      	movs	r1, #63	@ 0x3f
 800306a:	f000 fd2b 	bl	8003ac4 <sniprintf>
 800306e:	4603      	mov	r3, r0
 8003070:	4a0e      	ldr	r2, [pc, #56]	@ (80030ac <task_sensor_init+0x140>)
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b09      	ldr	r3, [pc, #36]	@ (800309c <task_sensor_init+0x130>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fe ffb7 	bl	8001fec <logger_log_print_>
 800307e:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3301      	adds	r3, #1
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d9b5      	bls.n	8002ff8 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 800308c:	4b13      	ldr	r3, [pc, #76]	@ (80030dc <task_sensor_init+0x170>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
}
 8003092:	bf00      	nop
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	08004e3c 	.word	0x08004e3c
 80030a0:	20000268 	.word	0x20000268
 80030a4:	08004d5c 	.word	0x08004d5c
 80030a8:	08004d70 	.word	0x08004d70
 80030ac:	200003bc 	.word	0x200003bc
 80030b0:	2000026c 	.word	0x2000026c
 80030b4:	08004d88 	.word	0x08004d88
 80030b8:	08004d94 	.word	0x08004d94
 80030bc:	20000450 	.word	0x20000450
 80030c0:	08004da4 	.word	0x08004da4
 80030c4:	08004db8 	.word	0x08004db8
 80030c8:	20000430 	.word	0x20000430
 80030cc:	08004dc8 	.word	0x08004dc8
 80030d0:	08004dd0 	.word	0x08004dd0
 80030d4:	08004ddc 	.word	0x08004ddc
 80030d8:	08004de4 	.word	0x08004de4
 80030dc:	20000454 	.word	0x20000454

080030e0 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 80030e0:	b590      	push	{r4, r7, lr}
 80030e2:	b087      	sub	sp, #28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 80030e8:	2300      	movs	r3, #0
 80030ea:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 80030ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003268 <task_sensor_update+0x188>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	3301      	adds	r3, #1
 80030f2:	4a5d      	ldr	r2, [pc, #372]	@ (8003268 <task_sensor_update+0x188>)
 80030f4:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 80030f6:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 80030f8:	4b5c      	ldr	r3, [pc, #368]	@ (800326c <task_sensor_update+0x18c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8003100:	4b5a      	ldr	r3, [pc, #360]	@ (800326c <task_sensor_update+0x18c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	3b01      	subs	r3, #1
 8003106:	4a59      	ldr	r2, [pc, #356]	@ (800326c <task_sensor_update+0x18c>)
 8003108:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 800310a:	2301      	movs	r3, #1
 800310c:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800310e:	b662      	cpsie	i

    while (b_time_update_required)
 8003110:	e0a1      	b.n	8003256 <task_sensor_update+0x176>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 8003112:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8003114:	4b55      	ldr	r3, [pc, #340]	@ (800326c <task_sensor_update+0x18c>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d007      	beq.n	800312c <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 800311c:	4b53      	ldr	r3, [pc, #332]	@ (800326c <task_sensor_update+0x18c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3b01      	subs	r3, #1
 8003122:	4a52      	ldr	r2, [pc, #328]	@ (800326c <task_sensor_update+0x18c>)
 8003124:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 8003126:	2301      	movs	r3, #1
 8003128:	74fb      	strb	r3, [r7, #19]
 800312a:	e001      	b.n	8003130 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 800312c:	2300      	movs	r3, #0
 800312e:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8003130:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
 8003136:	e08a      	b.n	800324e <task_sensor_update+0x16e>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8003138:	697a      	ldr	r2, [r7, #20]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4a4b      	ldr	r2, [pc, #300]	@ (8003270 <task_sensor_update+0x190>)
 8003144:	4413      	add	r3, r2
 8003146:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4a49      	ldr	r2, [pc, #292]	@ (8003274 <task_sensor_update+0x194>)
 800314e:	4413      	add	r3, r2
 8003150:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	7a9c      	ldrb	r4, [r3, #10]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	891b      	ldrh	r3, [r3, #8]
 800315e:	4619      	mov	r1, r3
 8003160:	4610      	mov	r0, r2
 8003162:	f7fd fd55 	bl	8000c10 <HAL_GPIO_ReadPin>
 8003166:	4603      	mov	r3, r0
 8003168:	429c      	cmp	r4, r3
 800316a:	d103      	bne.n	8003174 <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2201      	movs	r2, #1
 8003170:	715a      	strb	r2, [r3, #5]
 8003172:	e002      	b.n	800317a <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	2200      	movs	r2, #0
 8003178:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	791b      	ldrb	r3, [r3, #4]
 800317e:	2b03      	cmp	r3, #3
 8003180:	d851      	bhi.n	8003226 <task_sensor_update+0x146>
 8003182:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <task_sensor_update+0xa8>)
 8003184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003188:	08003199 	.word	0x08003199
 800318c:	080031b1 	.word	0x080031b1
 8003190:	080031e5 	.word	0x080031e5
 8003194:	080031fd 	.word	0x080031fd
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	795b      	ldrb	r3, [r3, #5]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d14c      	bne.n	800323a <task_sensor_update+0x15a>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2201      	movs	r2, #1
 80031a4:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68da      	ldr	r2, [r3, #12]
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	601a      	str	r2, [r3, #0]
					}

					break;
 80031ae:	e044      	b.n	800323a <task_sensor_update+0x15a>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	1e5a      	subs	r2, r3, #1
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d13d      	bne.n	800323e <task_sensor_update+0x15e>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	795b      	ldrb	r3, [r3, #5]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d108      	bne.n	80031dc <task_sensor_update+0xfc>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_down);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	7c5b      	ldrb	r3, [r3, #17]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fc14 	bl	80029fc <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2202      	movs	r2, #2
 80031d8:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 80031da:	e030      	b.n	800323e <task_sensor_update+0x15e>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2200      	movs	r2, #0
 80031e0:	711a      	strb	r2, [r3, #4]
					break;
 80031e2:	e02c      	b.n	800323e <task_sensor_update+0x15e>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	795b      	ldrb	r3, [r3, #5]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d12a      	bne.n	8003242 <task_sensor_update+0x162>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	68da      	ldr	r2, [r3, #12]
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2203      	movs	r2, #3
 80031f8:	711a      	strb	r2, [r3, #4]
					}

					break;
 80031fa:	e022      	b.n	8003242 <task_sensor_update+0x162>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	1e5a      	subs	r2, r3, #1
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d11b      	bne.n	8003246 <task_sensor_update+0x166>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	795b      	ldrb	r3, [r3, #5]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d103      	bne.n	800321e <task_sensor_update+0x13e>
						{
							//put_event_task_menu(p_task_sensor_cfg->signal_up);
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	2200      	movs	r2, #0
 800321a:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 800321c:	e013      	b.n	8003246 <task_sensor_update+0x166>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2202      	movs	r2, #2
 8003222:	711a      	strb	r2, [r3, #4]
					break;
 8003224:	e00f      	b.n	8003246 <task_sensor_update+0x166>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2200      	movs	r2, #0
 800322a:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	715a      	strb	r2, [r3, #5]

					break;
 8003238:	e006      	b.n	8003248 <task_sensor_update+0x168>
					break;
 800323a:	bf00      	nop
 800323c:	e004      	b.n	8003248 <task_sensor_update+0x168>
					break;
 800323e:	bf00      	nop
 8003240:	e002      	b.n	8003248 <task_sensor_update+0x168>
					break;
 8003242:	bf00      	nop
 8003244:	e000      	b.n	8003248 <task_sensor_update+0x168>
					break;
 8003246:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	3301      	adds	r3, #1
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b03      	cmp	r3, #3
 8003252:	f67f af71 	bls.w	8003138 <task_sensor_update+0x58>
    while (b_time_update_required)
 8003256:	7cfb      	ldrb	r3, [r7, #19]
 8003258:	2b00      	cmp	r3, #0
 800325a:	f47f af5a 	bne.w	8003112 <task_sensor_update+0x32>
			}
		}
    }
}
 800325e:	bf00      	nop
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	bd90      	pop	{r4, r7, pc}
 8003268:	20000450 	.word	0x20000450
 800326c:	20000454 	.word	0x20000454
 8003270:	08004e40 	.word	0x08004e40
 8003274:	20000430 	.word	0x20000430

08003278 <findslot>:
 8003278:	4b0a      	ldr	r3, [pc, #40]	@ (80032a4 <findslot+0x2c>)
 800327a:	b510      	push	{r4, lr}
 800327c:	4604      	mov	r4, r0
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	b118      	cbz	r0, 800328a <findslot+0x12>
 8003282:	6a03      	ldr	r3, [r0, #32]
 8003284:	b90b      	cbnz	r3, 800328a <findslot+0x12>
 8003286:	f000 fbd5 	bl	8003a34 <__sinit>
 800328a:	2c13      	cmp	r4, #19
 800328c:	d807      	bhi.n	800329e <findslot+0x26>
 800328e:	4806      	ldr	r0, [pc, #24]	@ (80032a8 <findslot+0x30>)
 8003290:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8003294:	3201      	adds	r2, #1
 8003296:	d002      	beq.n	800329e <findslot+0x26>
 8003298:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800329c:	bd10      	pop	{r4, pc}
 800329e:	2000      	movs	r0, #0
 80032a0:	e7fc      	b.n	800329c <findslot+0x24>
 80032a2:	bf00      	nop
 80032a4:	20000284 	.word	0x20000284
 80032a8:	20000464 	.word	0x20000464

080032ac <error>:
 80032ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ae:	4604      	mov	r4, r0
 80032b0:	f000 fcee 	bl	8003c90 <__errno>
 80032b4:	2613      	movs	r6, #19
 80032b6:	4605      	mov	r5, r0
 80032b8:	2700      	movs	r7, #0
 80032ba:	4630      	mov	r0, r6
 80032bc:	4639      	mov	r1, r7
 80032be:	beab      	bkpt	0x00ab
 80032c0:	4606      	mov	r6, r0
 80032c2:	4620      	mov	r0, r4
 80032c4:	602e      	str	r6, [r5, #0]
 80032c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032c8 <checkerror>:
 80032c8:	1c43      	adds	r3, r0, #1
 80032ca:	d101      	bne.n	80032d0 <checkerror+0x8>
 80032cc:	f7ff bfee 	b.w	80032ac <error>
 80032d0:	4770      	bx	lr

080032d2 <_swiread>:
 80032d2:	b530      	push	{r4, r5, lr}
 80032d4:	b085      	sub	sp, #20
 80032d6:	2406      	movs	r4, #6
 80032d8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80032dc:	9203      	str	r2, [sp, #12]
 80032de:	ad01      	add	r5, sp, #4
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	beab      	bkpt	0x00ab
 80032e6:	4604      	mov	r4, r0
 80032e8:	4620      	mov	r0, r4
 80032ea:	f7ff ffed 	bl	80032c8 <checkerror>
 80032ee:	b005      	add	sp, #20
 80032f0:	bd30      	pop	{r4, r5, pc}

080032f2 <_read>:
 80032f2:	b570      	push	{r4, r5, r6, lr}
 80032f4:	460e      	mov	r6, r1
 80032f6:	4614      	mov	r4, r2
 80032f8:	f7ff ffbe 	bl	8003278 <findslot>
 80032fc:	4605      	mov	r5, r0
 80032fe:	b930      	cbnz	r0, 800330e <_read+0x1c>
 8003300:	f000 fcc6 	bl	8003c90 <__errno>
 8003304:	2309      	movs	r3, #9
 8003306:	6003      	str	r3, [r0, #0]
 8003308:	f04f 30ff 	mov.w	r0, #4294967295
 800330c:	bd70      	pop	{r4, r5, r6, pc}
 800330e:	4622      	mov	r2, r4
 8003310:	4631      	mov	r1, r6
 8003312:	6800      	ldr	r0, [r0, #0]
 8003314:	f7ff ffdd 	bl	80032d2 <_swiread>
 8003318:	1c43      	adds	r3, r0, #1
 800331a:	d0f5      	beq.n	8003308 <_read+0x16>
 800331c:	686b      	ldr	r3, [r5, #4]
 800331e:	1a20      	subs	r0, r4, r0
 8003320:	4403      	add	r3, r0
 8003322:	606b      	str	r3, [r5, #4]
 8003324:	e7f2      	b.n	800330c <_read+0x1a>

08003326 <_swilseek>:
 8003326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003328:	460c      	mov	r4, r1
 800332a:	4616      	mov	r6, r2
 800332c:	f7ff ffa4 	bl	8003278 <findslot>
 8003330:	4605      	mov	r5, r0
 8003332:	b940      	cbnz	r0, 8003346 <_swilseek+0x20>
 8003334:	f000 fcac 	bl	8003c90 <__errno>
 8003338:	2309      	movs	r3, #9
 800333a:	6003      	str	r3, [r0, #0]
 800333c:	f04f 34ff 	mov.w	r4, #4294967295
 8003340:	4620      	mov	r0, r4
 8003342:	b003      	add	sp, #12
 8003344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003346:	2e02      	cmp	r6, #2
 8003348:	d903      	bls.n	8003352 <_swilseek+0x2c>
 800334a:	f000 fca1 	bl	8003c90 <__errno>
 800334e:	2316      	movs	r3, #22
 8003350:	e7f3      	b.n	800333a <_swilseek+0x14>
 8003352:	2e01      	cmp	r6, #1
 8003354:	d112      	bne.n	800337c <_swilseek+0x56>
 8003356:	6843      	ldr	r3, [r0, #4]
 8003358:	18e4      	adds	r4, r4, r3
 800335a:	d4f6      	bmi.n	800334a <_swilseek+0x24>
 800335c:	682b      	ldr	r3, [r5, #0]
 800335e:	260a      	movs	r6, #10
 8003360:	466f      	mov	r7, sp
 8003362:	e9cd 3400 	strd	r3, r4, [sp]
 8003366:	4630      	mov	r0, r6
 8003368:	4639      	mov	r1, r7
 800336a:	beab      	bkpt	0x00ab
 800336c:	4606      	mov	r6, r0
 800336e:	4630      	mov	r0, r6
 8003370:	f7ff ffaa 	bl	80032c8 <checkerror>
 8003374:	2800      	cmp	r0, #0
 8003376:	dbe1      	blt.n	800333c <_swilseek+0x16>
 8003378:	606c      	str	r4, [r5, #4]
 800337a:	e7e1      	b.n	8003340 <_swilseek+0x1a>
 800337c:	2e02      	cmp	r6, #2
 800337e:	6803      	ldr	r3, [r0, #0]
 8003380:	d1ec      	bne.n	800335c <_swilseek+0x36>
 8003382:	260c      	movs	r6, #12
 8003384:	466f      	mov	r7, sp
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	4630      	mov	r0, r6
 800338a:	4639      	mov	r1, r7
 800338c:	beab      	bkpt	0x00ab
 800338e:	4606      	mov	r6, r0
 8003390:	4630      	mov	r0, r6
 8003392:	f7ff ff99 	bl	80032c8 <checkerror>
 8003396:	1c43      	adds	r3, r0, #1
 8003398:	d0d0      	beq.n	800333c <_swilseek+0x16>
 800339a:	4404      	add	r4, r0
 800339c:	e7de      	b.n	800335c <_swilseek+0x36>

0800339e <_lseek>:
 800339e:	f7ff bfc2 	b.w	8003326 <_swilseek>

080033a2 <_swiwrite>:
 80033a2:	b530      	push	{r4, r5, lr}
 80033a4:	b085      	sub	sp, #20
 80033a6:	2405      	movs	r4, #5
 80033a8:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80033ac:	9203      	str	r2, [sp, #12]
 80033ae:	ad01      	add	r5, sp, #4
 80033b0:	4620      	mov	r0, r4
 80033b2:	4629      	mov	r1, r5
 80033b4:	beab      	bkpt	0x00ab
 80033b6:	4604      	mov	r4, r0
 80033b8:	4620      	mov	r0, r4
 80033ba:	f7ff ff85 	bl	80032c8 <checkerror>
 80033be:	b005      	add	sp, #20
 80033c0:	bd30      	pop	{r4, r5, pc}

080033c2 <_write>:
 80033c2:	b570      	push	{r4, r5, r6, lr}
 80033c4:	460e      	mov	r6, r1
 80033c6:	4615      	mov	r5, r2
 80033c8:	f7ff ff56 	bl	8003278 <findslot>
 80033cc:	4604      	mov	r4, r0
 80033ce:	b930      	cbnz	r0, 80033de <_write+0x1c>
 80033d0:	f000 fc5e 	bl	8003c90 <__errno>
 80033d4:	2309      	movs	r3, #9
 80033d6:	6003      	str	r3, [r0, #0]
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	bd70      	pop	{r4, r5, r6, pc}
 80033de:	462a      	mov	r2, r5
 80033e0:	4631      	mov	r1, r6
 80033e2:	6800      	ldr	r0, [r0, #0]
 80033e4:	f7ff ffdd 	bl	80033a2 <_swiwrite>
 80033e8:	1e03      	subs	r3, r0, #0
 80033ea:	dbf5      	blt.n	80033d8 <_write+0x16>
 80033ec:	6862      	ldr	r2, [r4, #4]
 80033ee:	1ae8      	subs	r0, r5, r3
 80033f0:	4402      	add	r2, r0
 80033f2:	42ab      	cmp	r3, r5
 80033f4:	6062      	str	r2, [r4, #4]
 80033f6:	d1f1      	bne.n	80033dc <_write+0x1a>
 80033f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80033fc:	2000      	movs	r0, #0
 80033fe:	f7ff bf55 	b.w	80032ac <error>

08003402 <_swiclose>:
 8003402:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003404:	2402      	movs	r4, #2
 8003406:	9001      	str	r0, [sp, #4]
 8003408:	ad01      	add	r5, sp, #4
 800340a:	4620      	mov	r0, r4
 800340c:	4629      	mov	r1, r5
 800340e:	beab      	bkpt	0x00ab
 8003410:	4604      	mov	r4, r0
 8003412:	4620      	mov	r0, r4
 8003414:	f7ff ff58 	bl	80032c8 <checkerror>
 8003418:	b003      	add	sp, #12
 800341a:	bd30      	pop	{r4, r5, pc}

0800341c <_close>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4605      	mov	r5, r0
 8003420:	f7ff ff2a 	bl	8003278 <findslot>
 8003424:	4604      	mov	r4, r0
 8003426:	b930      	cbnz	r0, 8003436 <_close+0x1a>
 8003428:	f000 fc32 	bl	8003c90 <__errno>
 800342c:	2309      	movs	r3, #9
 800342e:	6003      	str	r3, [r0, #0]
 8003430:	f04f 30ff 	mov.w	r0, #4294967295
 8003434:	bd38      	pop	{r3, r4, r5, pc}
 8003436:	3d01      	subs	r5, #1
 8003438:	2d01      	cmp	r5, #1
 800343a:	d809      	bhi.n	8003450 <_close+0x34>
 800343c:	4b07      	ldr	r3, [pc, #28]	@ (800345c <_close+0x40>)
 800343e:	689a      	ldr	r2, [r3, #8]
 8003440:	691b      	ldr	r3, [r3, #16]
 8003442:	429a      	cmp	r2, r3
 8003444:	d104      	bne.n	8003450 <_close+0x34>
 8003446:	f04f 33ff 	mov.w	r3, #4294967295
 800344a:	2000      	movs	r0, #0
 800344c:	6023      	str	r3, [r4, #0]
 800344e:	e7f1      	b.n	8003434 <_close+0x18>
 8003450:	6820      	ldr	r0, [r4, #0]
 8003452:	f7ff ffd6 	bl	8003402 <_swiclose>
 8003456:	2800      	cmp	r0, #0
 8003458:	d0f5      	beq.n	8003446 <_close+0x2a>
 800345a:	e7eb      	b.n	8003434 <_close+0x18>
 800345c:	20000464 	.word	0x20000464

08003460 <_swistat>:
 8003460:	b570      	push	{r4, r5, r6, lr}
 8003462:	460c      	mov	r4, r1
 8003464:	f7ff ff08 	bl	8003278 <findslot>
 8003468:	4605      	mov	r5, r0
 800346a:	b930      	cbnz	r0, 800347a <_swistat+0x1a>
 800346c:	f000 fc10 	bl	8003c90 <__errno>
 8003470:	2309      	movs	r3, #9
 8003472:	6003      	str	r3, [r0, #0]
 8003474:	f04f 30ff 	mov.w	r0, #4294967295
 8003478:	bd70      	pop	{r4, r5, r6, pc}
 800347a:	6863      	ldr	r3, [r4, #4]
 800347c:	260c      	movs	r6, #12
 800347e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003482:	6063      	str	r3, [r4, #4]
 8003484:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003488:	64a3      	str	r3, [r4, #72]	@ 0x48
 800348a:	4630      	mov	r0, r6
 800348c:	4629      	mov	r1, r5
 800348e:	beab      	bkpt	0x00ab
 8003490:	4605      	mov	r5, r0
 8003492:	4628      	mov	r0, r5
 8003494:	f7ff ff18 	bl	80032c8 <checkerror>
 8003498:	1c43      	adds	r3, r0, #1
 800349a:	d0eb      	beq.n	8003474 <_swistat+0x14>
 800349c:	6120      	str	r0, [r4, #16]
 800349e:	2000      	movs	r0, #0
 80034a0:	e7ea      	b.n	8003478 <_swistat+0x18>

080034a2 <_fstat>:
 80034a2:	460b      	mov	r3, r1
 80034a4:	b510      	push	{r4, lr}
 80034a6:	2100      	movs	r1, #0
 80034a8:	4604      	mov	r4, r0
 80034aa:	2258      	movs	r2, #88	@ 0x58
 80034ac:	4618      	mov	r0, r3
 80034ae:	f000 fba0 	bl	8003bf2 <memset>
 80034b2:	4601      	mov	r1, r0
 80034b4:	4620      	mov	r0, r4
 80034b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80034ba:	f7ff bfd1 	b.w	8003460 <_swistat>

080034be <_stat>:
 80034be:	b538      	push	{r3, r4, r5, lr}
 80034c0:	460d      	mov	r5, r1
 80034c2:	4604      	mov	r4, r0
 80034c4:	2258      	movs	r2, #88	@ 0x58
 80034c6:	2100      	movs	r1, #0
 80034c8:	4628      	mov	r0, r5
 80034ca:	f000 fb92 	bl	8003bf2 <memset>
 80034ce:	4620      	mov	r0, r4
 80034d0:	2100      	movs	r1, #0
 80034d2:	f000 f811 	bl	80034f8 <_swiopen>
 80034d6:	1c43      	adds	r3, r0, #1
 80034d8:	4604      	mov	r4, r0
 80034da:	d00b      	beq.n	80034f4 <_stat+0x36>
 80034dc:	686b      	ldr	r3, [r5, #4]
 80034de:	4629      	mov	r1, r5
 80034e0:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 80034e4:	606b      	str	r3, [r5, #4]
 80034e6:	f7ff ffbb 	bl	8003460 <_swistat>
 80034ea:	4605      	mov	r5, r0
 80034ec:	4620      	mov	r0, r4
 80034ee:	f7ff ff95 	bl	800341c <_close>
 80034f2:	462c      	mov	r4, r5
 80034f4:	4620      	mov	r0, r4
 80034f6:	bd38      	pop	{r3, r4, r5, pc}

080034f8 <_swiopen>:
 80034f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034fc:	4682      	mov	sl, r0
 80034fe:	460e      	mov	r6, r1
 8003500:	2400      	movs	r4, #0
 8003502:	4f28      	ldr	r7, [pc, #160]	@ (80035a4 <_swiopen+0xac>)
 8003504:	b096      	sub	sp, #88	@ 0x58
 8003506:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800350a:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 800350e:	3301      	adds	r3, #1
 8003510:	d00c      	beq.n	800352c <_swiopen+0x34>
 8003512:	3401      	adds	r4, #1
 8003514:	2c14      	cmp	r4, #20
 8003516:	d1f6      	bne.n	8003506 <_swiopen+0xe>
 8003518:	f000 fbba 	bl	8003c90 <__errno>
 800351c:	2318      	movs	r3, #24
 800351e:	f04f 34ff 	mov.w	r4, #4294967295
 8003522:	6003      	str	r3, [r0, #0]
 8003524:	4620      	mov	r0, r4
 8003526:	b016      	add	sp, #88	@ 0x58
 8003528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800352c:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8003530:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003534:	46e9      	mov	r9, sp
 8003536:	d109      	bne.n	800354c <_swiopen+0x54>
 8003538:	4649      	mov	r1, r9
 800353a:	4650      	mov	r0, sl
 800353c:	f7ff ffbf 	bl	80034be <_stat>
 8003540:	3001      	adds	r0, #1
 8003542:	d003      	beq.n	800354c <_swiopen+0x54>
 8003544:	f000 fba4 	bl	8003c90 <__errno>
 8003548:	2311      	movs	r3, #17
 800354a:	e7e8      	b.n	800351e <_swiopen+0x26>
 800354c:	f240 6301 	movw	r3, #1537	@ 0x601
 8003550:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8003554:	07b2      	lsls	r2, r6, #30
 8003556:	bf48      	it	mi
 8003558:	f045 0502 	orrmi.w	r5, r5, #2
 800355c:	421e      	tst	r6, r3
 800355e:	bf18      	it	ne
 8003560:	f045 0504 	orrne.w	r5, r5, #4
 8003564:	0733      	lsls	r3, r6, #28
 8003566:	bf48      	it	mi
 8003568:	f025 0504 	bicmi.w	r5, r5, #4
 800356c:	4650      	mov	r0, sl
 800356e:	bf48      	it	mi
 8003570:	f045 0508 	orrmi.w	r5, r5, #8
 8003574:	f8cd a000 	str.w	sl, [sp]
 8003578:	f7fc fde8 	bl	800014c <strlen>
 800357c:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8003580:	2501      	movs	r5, #1
 8003582:	4628      	mov	r0, r5
 8003584:	4649      	mov	r1, r9
 8003586:	beab      	bkpt	0x00ab
 8003588:	4605      	mov	r5, r0
 800358a:	2d00      	cmp	r5, #0
 800358c:	db05      	blt.n	800359a <_swiopen+0xa2>
 800358e:	2300      	movs	r3, #0
 8003590:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8003594:	4447      	add	r7, r8
 8003596:	607b      	str	r3, [r7, #4]
 8003598:	e7c4      	b.n	8003524 <_swiopen+0x2c>
 800359a:	4628      	mov	r0, r5
 800359c:	f7ff fe86 	bl	80032ac <error>
 80035a0:	4604      	mov	r4, r0
 80035a2:	e7bf      	b.n	8003524 <_swiopen+0x2c>
 80035a4:	20000464 	.word	0x20000464

080035a8 <_get_semihosting_exts>:
 80035a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035ac:	4606      	mov	r6, r0
 80035ae:	460f      	mov	r7, r1
 80035b0:	4829      	ldr	r0, [pc, #164]	@ (8003658 <_get_semihosting_exts+0xb0>)
 80035b2:	2100      	movs	r1, #0
 80035b4:	4615      	mov	r5, r2
 80035b6:	f7ff ff9f 	bl	80034f8 <_swiopen>
 80035ba:	4604      	mov	r4, r0
 80035bc:	462a      	mov	r2, r5
 80035be:	2100      	movs	r1, #0
 80035c0:	4630      	mov	r0, r6
 80035c2:	f000 fb16 	bl	8003bf2 <memset>
 80035c6:	1c63      	adds	r3, r4, #1
 80035c8:	d014      	beq.n	80035f4 <_get_semihosting_exts+0x4c>
 80035ca:	4620      	mov	r0, r4
 80035cc:	f7ff fe54 	bl	8003278 <findslot>
 80035d0:	f04f 080c 	mov.w	r8, #12
 80035d4:	4681      	mov	r9, r0
 80035d6:	4640      	mov	r0, r8
 80035d8:	4649      	mov	r1, r9
 80035da:	beab      	bkpt	0x00ab
 80035dc:	4680      	mov	r8, r0
 80035de:	4640      	mov	r0, r8
 80035e0:	f7ff fe72 	bl	80032c8 <checkerror>
 80035e4:	2803      	cmp	r0, #3
 80035e6:	dd02      	ble.n	80035ee <_get_semihosting_exts+0x46>
 80035e8:	1ec3      	subs	r3, r0, #3
 80035ea:	42ab      	cmp	r3, r5
 80035ec:	dc07      	bgt.n	80035fe <_get_semihosting_exts+0x56>
 80035ee:	4620      	mov	r0, r4
 80035f0:	f7ff ff14 	bl	800341c <_close>
 80035f4:	f04f 30ff 	mov.w	r0, #4294967295
 80035f8:	b003      	add	sp, #12
 80035fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035fe:	2204      	movs	r2, #4
 8003600:	4620      	mov	r0, r4
 8003602:	eb0d 0102 	add.w	r1, sp, r2
 8003606:	f7ff fe74 	bl	80032f2 <_read>
 800360a:	2803      	cmp	r0, #3
 800360c:	ddef      	ble.n	80035ee <_get_semihosting_exts+0x46>
 800360e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003612:	2b53      	cmp	r3, #83	@ 0x53
 8003614:	d1eb      	bne.n	80035ee <_get_semihosting_exts+0x46>
 8003616:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800361a:	2b48      	cmp	r3, #72	@ 0x48
 800361c:	d1e7      	bne.n	80035ee <_get_semihosting_exts+0x46>
 800361e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003622:	2b46      	cmp	r3, #70	@ 0x46
 8003624:	d1e3      	bne.n	80035ee <_get_semihosting_exts+0x46>
 8003626:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800362a:	2b42      	cmp	r3, #66	@ 0x42
 800362c:	d1df      	bne.n	80035ee <_get_semihosting_exts+0x46>
 800362e:	2201      	movs	r2, #1
 8003630:	4639      	mov	r1, r7
 8003632:	4620      	mov	r0, r4
 8003634:	f7ff fe77 	bl	8003326 <_swilseek>
 8003638:	2800      	cmp	r0, #0
 800363a:	dbd8      	blt.n	80035ee <_get_semihosting_exts+0x46>
 800363c:	462a      	mov	r2, r5
 800363e:	4631      	mov	r1, r6
 8003640:	4620      	mov	r0, r4
 8003642:	f7ff fe56 	bl	80032f2 <_read>
 8003646:	4605      	mov	r5, r0
 8003648:	4620      	mov	r0, r4
 800364a:	f7ff fee7 	bl	800341c <_close>
 800364e:	4628      	mov	r0, r5
 8003650:	f7ff fe3a 	bl	80032c8 <checkerror>
 8003654:	e7d0      	b.n	80035f8 <_get_semihosting_exts+0x50>
 8003656:	bf00      	nop
 8003658:	08004e90 	.word	0x08004e90

0800365c <initialise_semihosting_exts>:
 800365c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800365e:	2100      	movs	r1, #0
 8003660:	2201      	movs	r2, #1
 8003662:	4d09      	ldr	r5, [pc, #36]	@ (8003688 <initialise_semihosting_exts+0x2c>)
 8003664:	4c09      	ldr	r4, [pc, #36]	@ (800368c <initialise_semihosting_exts+0x30>)
 8003666:	a801      	add	r0, sp, #4
 8003668:	6029      	str	r1, [r5, #0]
 800366a:	6022      	str	r2, [r4, #0]
 800366c:	f7ff ff9c 	bl	80035a8 <_get_semihosting_exts>
 8003670:	2800      	cmp	r0, #0
 8003672:	dd07      	ble.n	8003684 <initialise_semihosting_exts+0x28>
 8003674:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003678:	f003 0201 	and.w	r2, r3, #1
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	602a      	str	r2, [r5, #0]
 8003682:	6023      	str	r3, [r4, #0]
 8003684:	b003      	add	sp, #12
 8003686:	bd30      	pop	{r4, r5, pc}
 8003688:	20000274 	.word	0x20000274
 800368c:	20000270 	.word	0x20000270

08003690 <_has_ext_stdout_stderr>:
 8003690:	b510      	push	{r4, lr}
 8003692:	4c04      	ldr	r4, [pc, #16]	@ (80036a4 <_has_ext_stdout_stderr+0x14>)
 8003694:	6823      	ldr	r3, [r4, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	da01      	bge.n	800369e <_has_ext_stdout_stderr+0xe>
 800369a:	f7ff ffdf 	bl	800365c <initialise_semihosting_exts>
 800369e:	6820      	ldr	r0, [r4, #0]
 80036a0:	bd10      	pop	{r4, pc}
 80036a2:	bf00      	nop
 80036a4:	20000270 	.word	0x20000270

080036a8 <initialise_monitor_handles>:
 80036a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ac:	2303      	movs	r3, #3
 80036ae:	2400      	movs	r4, #0
 80036b0:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8003754 <initialise_monitor_handles+0xac>
 80036b4:	b085      	sub	sp, #20
 80036b6:	f8cd 9004 	str.w	r9, [sp, #4]
 80036ba:	af01      	add	r7, sp, #4
 80036bc:	9303      	str	r3, [sp, #12]
 80036be:	2501      	movs	r5, #1
 80036c0:	9402      	str	r4, [sp, #8]
 80036c2:	4628      	mov	r0, r5
 80036c4:	4639      	mov	r1, r7
 80036c6:	beab      	bkpt	0x00ab
 80036c8:	4605      	mov	r5, r0
 80036ca:	f04f 32ff 	mov.w	r2, #4294967295
 80036ce:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003758 <initialise_monitor_handles+0xb0>
 80036d2:	4623      	mov	r3, r4
 80036d4:	4c21      	ldr	r4, [pc, #132]	@ (800375c <initialise_monitor_handles+0xb4>)
 80036d6:	f8c8 5000 	str.w	r5, [r8]
 80036da:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80036de:	3301      	adds	r3, #1
 80036e0:	2b14      	cmp	r3, #20
 80036e2:	d1fa      	bne.n	80036da <initialise_monitor_handles+0x32>
 80036e4:	f7ff ffd4 	bl	8003690 <_has_ext_stdout_stderr>
 80036e8:	4d1d      	ldr	r5, [pc, #116]	@ (8003760 <initialise_monitor_handles+0xb8>)
 80036ea:	b1d0      	cbz	r0, 8003722 <initialise_monitor_handles+0x7a>
 80036ec:	f04f 0a03 	mov.w	sl, #3
 80036f0:	2304      	movs	r3, #4
 80036f2:	f8cd 9004 	str.w	r9, [sp, #4]
 80036f6:	2601      	movs	r6, #1
 80036f8:	f8cd a00c 	str.w	sl, [sp, #12]
 80036fc:	9302      	str	r3, [sp, #8]
 80036fe:	4630      	mov	r0, r6
 8003700:	4639      	mov	r1, r7
 8003702:	beab      	bkpt	0x00ab
 8003704:	4683      	mov	fp, r0
 8003706:	4b17      	ldr	r3, [pc, #92]	@ (8003764 <initialise_monitor_handles+0xbc>)
 8003708:	f8cd 9004 	str.w	r9, [sp, #4]
 800370c:	f8c3 b000 	str.w	fp, [r3]
 8003710:	2308      	movs	r3, #8
 8003712:	f8cd a00c 	str.w	sl, [sp, #12]
 8003716:	9302      	str	r3, [sp, #8]
 8003718:	4630      	mov	r0, r6
 800371a:	4639      	mov	r1, r7
 800371c:	beab      	bkpt	0x00ab
 800371e:	4606      	mov	r6, r0
 8003720:	602e      	str	r6, [r5, #0]
 8003722:	2600      	movs	r6, #0
 8003724:	682b      	ldr	r3, [r5, #0]
 8003726:	6066      	str	r6, [r4, #4]
 8003728:	3301      	adds	r3, #1
 800372a:	bf02      	ittt	eq
 800372c:	4b0d      	ldreq	r3, [pc, #52]	@ (8003764 <initialise_monitor_handles+0xbc>)
 800372e:	681b      	ldreq	r3, [r3, #0]
 8003730:	602b      	streq	r3, [r5, #0]
 8003732:	f8d8 3000 	ldr.w	r3, [r8]
 8003736:	6023      	str	r3, [r4, #0]
 8003738:	f7ff ffaa 	bl	8003690 <_has_ext_stdout_stderr>
 800373c:	b130      	cbz	r0, 800374c <initialise_monitor_handles+0xa4>
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <initialise_monitor_handles+0xbc>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8003746:	682b      	ldr	r3, [r5, #0]
 8003748:	e9c4 3604 	strd	r3, r6, [r4, #16]
 800374c:	b005      	add	sp, #20
 800374e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003752:	bf00      	nop
 8003754:	08004ea6 	.word	0x08004ea6
 8003758:	20000460 	.word	0x20000460
 800375c:	20000464 	.word	0x20000464
 8003760:	20000458 	.word	0x20000458
 8003764:	2000045c 	.word	0x2000045c

08003768 <_isatty>:
 8003768:	b570      	push	{r4, r5, r6, lr}
 800376a:	f7ff fd85 	bl	8003278 <findslot>
 800376e:	2409      	movs	r4, #9
 8003770:	4605      	mov	r5, r0
 8003772:	b920      	cbnz	r0, 800377e <_isatty+0x16>
 8003774:	f000 fa8c 	bl	8003c90 <__errno>
 8003778:	6004      	str	r4, [r0, #0]
 800377a:	2000      	movs	r0, #0
 800377c:	bd70      	pop	{r4, r5, r6, pc}
 800377e:	4620      	mov	r0, r4
 8003780:	4629      	mov	r1, r5
 8003782:	beab      	bkpt	0x00ab
 8003784:	4604      	mov	r4, r0
 8003786:	2c01      	cmp	r4, #1
 8003788:	4620      	mov	r0, r4
 800378a:	d0f7      	beq.n	800377c <_isatty+0x14>
 800378c:	f000 fa80 	bl	8003c90 <__errno>
 8003790:	2513      	movs	r5, #19
 8003792:	4604      	mov	r4, r0
 8003794:	2600      	movs	r6, #0
 8003796:	4628      	mov	r0, r5
 8003798:	4631      	mov	r1, r6
 800379a:	beab      	bkpt	0x00ab
 800379c:	4605      	mov	r5, r0
 800379e:	6025      	str	r5, [r4, #0]
 80037a0:	e7eb      	b.n	800377a <_isatty+0x12>
	...

080037a4 <__sflush_r>:
 80037a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037aa:	0716      	lsls	r6, r2, #28
 80037ac:	4605      	mov	r5, r0
 80037ae:	460c      	mov	r4, r1
 80037b0:	d454      	bmi.n	800385c <__sflush_r+0xb8>
 80037b2:	684b      	ldr	r3, [r1, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	dc02      	bgt.n	80037be <__sflush_r+0x1a>
 80037b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	dd48      	ble.n	8003850 <__sflush_r+0xac>
 80037be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037c0:	2e00      	cmp	r6, #0
 80037c2:	d045      	beq.n	8003850 <__sflush_r+0xac>
 80037c4:	2300      	movs	r3, #0
 80037c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80037ca:	682f      	ldr	r7, [r5, #0]
 80037cc:	6a21      	ldr	r1, [r4, #32]
 80037ce:	602b      	str	r3, [r5, #0]
 80037d0:	d030      	beq.n	8003834 <__sflush_r+0x90>
 80037d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	0759      	lsls	r1, r3, #29
 80037d8:	d505      	bpl.n	80037e6 <__sflush_r+0x42>
 80037da:	6863      	ldr	r3, [r4, #4]
 80037dc:	1ad2      	subs	r2, r2, r3
 80037de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80037e0:	b10b      	cbz	r3, 80037e6 <__sflush_r+0x42>
 80037e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80037e4:	1ad2      	subs	r2, r2, r3
 80037e6:	2300      	movs	r3, #0
 80037e8:	4628      	mov	r0, r5
 80037ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80037ec:	6a21      	ldr	r1, [r4, #32]
 80037ee:	47b0      	blx	r6
 80037f0:	1c43      	adds	r3, r0, #1
 80037f2:	89a3      	ldrh	r3, [r4, #12]
 80037f4:	d106      	bne.n	8003804 <__sflush_r+0x60>
 80037f6:	6829      	ldr	r1, [r5, #0]
 80037f8:	291d      	cmp	r1, #29
 80037fa:	d82b      	bhi.n	8003854 <__sflush_r+0xb0>
 80037fc:	4a28      	ldr	r2, [pc, #160]	@ (80038a0 <__sflush_r+0xfc>)
 80037fe:	410a      	asrs	r2, r1
 8003800:	07d6      	lsls	r6, r2, #31
 8003802:	d427      	bmi.n	8003854 <__sflush_r+0xb0>
 8003804:	2200      	movs	r2, #0
 8003806:	6062      	str	r2, [r4, #4]
 8003808:	6922      	ldr	r2, [r4, #16]
 800380a:	04d9      	lsls	r1, r3, #19
 800380c:	6022      	str	r2, [r4, #0]
 800380e:	d504      	bpl.n	800381a <__sflush_r+0x76>
 8003810:	1c42      	adds	r2, r0, #1
 8003812:	d101      	bne.n	8003818 <__sflush_r+0x74>
 8003814:	682b      	ldr	r3, [r5, #0]
 8003816:	b903      	cbnz	r3, 800381a <__sflush_r+0x76>
 8003818:	6560      	str	r0, [r4, #84]	@ 0x54
 800381a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800381c:	602f      	str	r7, [r5, #0]
 800381e:	b1b9      	cbz	r1, 8003850 <__sflush_r+0xac>
 8003820:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003824:	4299      	cmp	r1, r3
 8003826:	d002      	beq.n	800382e <__sflush_r+0x8a>
 8003828:	4628      	mov	r0, r5
 800382a:	f000 fa5f 	bl	8003cec <_free_r>
 800382e:	2300      	movs	r3, #0
 8003830:	6363      	str	r3, [r4, #52]	@ 0x34
 8003832:	e00d      	b.n	8003850 <__sflush_r+0xac>
 8003834:	2301      	movs	r3, #1
 8003836:	4628      	mov	r0, r5
 8003838:	47b0      	blx	r6
 800383a:	4602      	mov	r2, r0
 800383c:	1c50      	adds	r0, r2, #1
 800383e:	d1c9      	bne.n	80037d4 <__sflush_r+0x30>
 8003840:	682b      	ldr	r3, [r5, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0c6      	beq.n	80037d4 <__sflush_r+0x30>
 8003846:	2b1d      	cmp	r3, #29
 8003848:	d001      	beq.n	800384e <__sflush_r+0xaa>
 800384a:	2b16      	cmp	r3, #22
 800384c:	d11d      	bne.n	800388a <__sflush_r+0xe6>
 800384e:	602f      	str	r7, [r5, #0]
 8003850:	2000      	movs	r0, #0
 8003852:	e021      	b.n	8003898 <__sflush_r+0xf4>
 8003854:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003858:	b21b      	sxth	r3, r3
 800385a:	e01a      	b.n	8003892 <__sflush_r+0xee>
 800385c:	690f      	ldr	r7, [r1, #16]
 800385e:	2f00      	cmp	r7, #0
 8003860:	d0f6      	beq.n	8003850 <__sflush_r+0xac>
 8003862:	0793      	lsls	r3, r2, #30
 8003864:	bf18      	it	ne
 8003866:	2300      	movne	r3, #0
 8003868:	680e      	ldr	r6, [r1, #0]
 800386a:	bf08      	it	eq
 800386c:	694b      	ldreq	r3, [r1, #20]
 800386e:	1bf6      	subs	r6, r6, r7
 8003870:	600f      	str	r7, [r1, #0]
 8003872:	608b      	str	r3, [r1, #8]
 8003874:	2e00      	cmp	r6, #0
 8003876:	ddeb      	ble.n	8003850 <__sflush_r+0xac>
 8003878:	4633      	mov	r3, r6
 800387a:	463a      	mov	r2, r7
 800387c:	4628      	mov	r0, r5
 800387e:	6a21      	ldr	r1, [r4, #32]
 8003880:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8003884:	47e0      	blx	ip
 8003886:	2800      	cmp	r0, #0
 8003888:	dc07      	bgt.n	800389a <__sflush_r+0xf6>
 800388a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800388e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003892:	f04f 30ff 	mov.w	r0, #4294967295
 8003896:	81a3      	strh	r3, [r4, #12]
 8003898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800389a:	4407      	add	r7, r0
 800389c:	1a36      	subs	r6, r6, r0
 800389e:	e7e9      	b.n	8003874 <__sflush_r+0xd0>
 80038a0:	dfbffffe 	.word	0xdfbffffe

080038a4 <_fflush_r>:
 80038a4:	b538      	push	{r3, r4, r5, lr}
 80038a6:	690b      	ldr	r3, [r1, #16]
 80038a8:	4605      	mov	r5, r0
 80038aa:	460c      	mov	r4, r1
 80038ac:	b913      	cbnz	r3, 80038b4 <_fflush_r+0x10>
 80038ae:	2500      	movs	r5, #0
 80038b0:	4628      	mov	r0, r5
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	b118      	cbz	r0, 80038be <_fflush_r+0x1a>
 80038b6:	6a03      	ldr	r3, [r0, #32]
 80038b8:	b90b      	cbnz	r3, 80038be <_fflush_r+0x1a>
 80038ba:	f000 f8bb 	bl	8003a34 <__sinit>
 80038be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d0f3      	beq.n	80038ae <_fflush_r+0xa>
 80038c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80038c8:	07d0      	lsls	r0, r2, #31
 80038ca:	d404      	bmi.n	80038d6 <_fflush_r+0x32>
 80038cc:	0599      	lsls	r1, r3, #22
 80038ce:	d402      	bmi.n	80038d6 <_fflush_r+0x32>
 80038d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038d2:	f000 fa08 	bl	8003ce6 <__retarget_lock_acquire_recursive>
 80038d6:	4628      	mov	r0, r5
 80038d8:	4621      	mov	r1, r4
 80038da:	f7ff ff63 	bl	80037a4 <__sflush_r>
 80038de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80038e0:	4605      	mov	r5, r0
 80038e2:	07da      	lsls	r2, r3, #31
 80038e4:	d4e4      	bmi.n	80038b0 <_fflush_r+0xc>
 80038e6:	89a3      	ldrh	r3, [r4, #12]
 80038e8:	059b      	lsls	r3, r3, #22
 80038ea:	d4e1      	bmi.n	80038b0 <_fflush_r+0xc>
 80038ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80038ee:	f000 f9fb 	bl	8003ce8 <__retarget_lock_release_recursive>
 80038f2:	e7dd      	b.n	80038b0 <_fflush_r+0xc>

080038f4 <fflush>:
 80038f4:	4601      	mov	r1, r0
 80038f6:	b920      	cbnz	r0, 8003902 <fflush+0xe>
 80038f8:	4a04      	ldr	r2, [pc, #16]	@ (800390c <fflush+0x18>)
 80038fa:	4905      	ldr	r1, [pc, #20]	@ (8003910 <fflush+0x1c>)
 80038fc:	4805      	ldr	r0, [pc, #20]	@ (8003914 <fflush+0x20>)
 80038fe:	f000 b8b1 	b.w	8003a64 <_fwalk_sglue>
 8003902:	4b05      	ldr	r3, [pc, #20]	@ (8003918 <fflush+0x24>)
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	f7ff bfcd 	b.w	80038a4 <_fflush_r>
 800390a:	bf00      	nop
 800390c:	20000278 	.word	0x20000278
 8003910:	080038a5 	.word	0x080038a5
 8003914:	20000288 	.word	0x20000288
 8003918:	20000284 	.word	0x20000284

0800391c <std>:
 800391c:	2300      	movs	r3, #0
 800391e:	b510      	push	{r4, lr}
 8003920:	4604      	mov	r4, r0
 8003922:	e9c0 3300 	strd	r3, r3, [r0]
 8003926:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800392a:	6083      	str	r3, [r0, #8]
 800392c:	8181      	strh	r1, [r0, #12]
 800392e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003930:	81c2      	strh	r2, [r0, #14]
 8003932:	6183      	str	r3, [r0, #24]
 8003934:	4619      	mov	r1, r3
 8003936:	2208      	movs	r2, #8
 8003938:	305c      	adds	r0, #92	@ 0x5c
 800393a:	f000 f95a 	bl	8003bf2 <memset>
 800393e:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <std+0x58>)
 8003940:	6224      	str	r4, [r4, #32]
 8003942:	6263      	str	r3, [r4, #36]	@ 0x24
 8003944:	4b0c      	ldr	r3, [pc, #48]	@ (8003978 <std+0x5c>)
 8003946:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003948:	4b0c      	ldr	r3, [pc, #48]	@ (800397c <std+0x60>)
 800394a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800394c:	4b0c      	ldr	r3, [pc, #48]	@ (8003980 <std+0x64>)
 800394e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003950:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <std+0x68>)
 8003952:	429c      	cmp	r4, r3
 8003954:	d006      	beq.n	8003964 <std+0x48>
 8003956:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800395a:	4294      	cmp	r4, r2
 800395c:	d002      	beq.n	8003964 <std+0x48>
 800395e:	33d0      	adds	r3, #208	@ 0xd0
 8003960:	429c      	cmp	r4, r3
 8003962:	d105      	bne.n	8003970 <std+0x54>
 8003964:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003968:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800396c:	f000 b9ba 	b.w	8003ce4 <__retarget_lock_init_recursive>
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	08003b6d 	.word	0x08003b6d
 8003978:	08003b8f 	.word	0x08003b8f
 800397c:	08003bc7 	.word	0x08003bc7
 8003980:	08003beb 	.word	0x08003beb
 8003984:	20000504 	.word	0x20000504

08003988 <stdio_exit_handler>:
 8003988:	4a02      	ldr	r2, [pc, #8]	@ (8003994 <stdio_exit_handler+0xc>)
 800398a:	4903      	ldr	r1, [pc, #12]	@ (8003998 <stdio_exit_handler+0x10>)
 800398c:	4803      	ldr	r0, [pc, #12]	@ (800399c <stdio_exit_handler+0x14>)
 800398e:	f000 b869 	b.w	8003a64 <_fwalk_sglue>
 8003992:	bf00      	nop
 8003994:	20000278 	.word	0x20000278
 8003998:	080038a5 	.word	0x080038a5
 800399c:	20000288 	.word	0x20000288

080039a0 <cleanup_stdio>:
 80039a0:	6841      	ldr	r1, [r0, #4]
 80039a2:	4b0c      	ldr	r3, [pc, #48]	@ (80039d4 <cleanup_stdio+0x34>)
 80039a4:	b510      	push	{r4, lr}
 80039a6:	4299      	cmp	r1, r3
 80039a8:	4604      	mov	r4, r0
 80039aa:	d001      	beq.n	80039b0 <cleanup_stdio+0x10>
 80039ac:	f7ff ff7a 	bl	80038a4 <_fflush_r>
 80039b0:	68a1      	ldr	r1, [r4, #8]
 80039b2:	4b09      	ldr	r3, [pc, #36]	@ (80039d8 <cleanup_stdio+0x38>)
 80039b4:	4299      	cmp	r1, r3
 80039b6:	d002      	beq.n	80039be <cleanup_stdio+0x1e>
 80039b8:	4620      	mov	r0, r4
 80039ba:	f7ff ff73 	bl	80038a4 <_fflush_r>
 80039be:	68e1      	ldr	r1, [r4, #12]
 80039c0:	4b06      	ldr	r3, [pc, #24]	@ (80039dc <cleanup_stdio+0x3c>)
 80039c2:	4299      	cmp	r1, r3
 80039c4:	d004      	beq.n	80039d0 <cleanup_stdio+0x30>
 80039c6:	4620      	mov	r0, r4
 80039c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039cc:	f7ff bf6a 	b.w	80038a4 <_fflush_r>
 80039d0:	bd10      	pop	{r4, pc}
 80039d2:	bf00      	nop
 80039d4:	20000504 	.word	0x20000504
 80039d8:	2000056c 	.word	0x2000056c
 80039dc:	200005d4 	.word	0x200005d4

080039e0 <global_stdio_init.part.0>:
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003a10 <global_stdio_init.part.0+0x30>)
 80039e4:	4c0b      	ldr	r4, [pc, #44]	@ (8003a14 <global_stdio_init.part.0+0x34>)
 80039e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a18 <global_stdio_init.part.0+0x38>)
 80039e8:	4620      	mov	r0, r4
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	2104      	movs	r1, #4
 80039ee:	2200      	movs	r2, #0
 80039f0:	f7ff ff94 	bl	800391c <std>
 80039f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80039f8:	2201      	movs	r2, #1
 80039fa:	2109      	movs	r1, #9
 80039fc:	f7ff ff8e 	bl	800391c <std>
 8003a00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003a04:	2202      	movs	r2, #2
 8003a06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a0a:	2112      	movs	r1, #18
 8003a0c:	f7ff bf86 	b.w	800391c <std>
 8003a10:	2000063c 	.word	0x2000063c
 8003a14:	20000504 	.word	0x20000504
 8003a18:	08003989 	.word	0x08003989

08003a1c <__sfp_lock_acquire>:
 8003a1c:	4801      	ldr	r0, [pc, #4]	@ (8003a24 <__sfp_lock_acquire+0x8>)
 8003a1e:	f000 b962 	b.w	8003ce6 <__retarget_lock_acquire_recursive>
 8003a22:	bf00      	nop
 8003a24:	20000645 	.word	0x20000645

08003a28 <__sfp_lock_release>:
 8003a28:	4801      	ldr	r0, [pc, #4]	@ (8003a30 <__sfp_lock_release+0x8>)
 8003a2a:	f000 b95d 	b.w	8003ce8 <__retarget_lock_release_recursive>
 8003a2e:	bf00      	nop
 8003a30:	20000645 	.word	0x20000645

08003a34 <__sinit>:
 8003a34:	b510      	push	{r4, lr}
 8003a36:	4604      	mov	r4, r0
 8003a38:	f7ff fff0 	bl	8003a1c <__sfp_lock_acquire>
 8003a3c:	6a23      	ldr	r3, [r4, #32]
 8003a3e:	b11b      	cbz	r3, 8003a48 <__sinit+0x14>
 8003a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003a44:	f7ff bff0 	b.w	8003a28 <__sfp_lock_release>
 8003a48:	4b04      	ldr	r3, [pc, #16]	@ (8003a5c <__sinit+0x28>)
 8003a4a:	6223      	str	r3, [r4, #32]
 8003a4c:	4b04      	ldr	r3, [pc, #16]	@ (8003a60 <__sinit+0x2c>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d1f5      	bne.n	8003a40 <__sinit+0xc>
 8003a54:	f7ff ffc4 	bl	80039e0 <global_stdio_init.part.0>
 8003a58:	e7f2      	b.n	8003a40 <__sinit+0xc>
 8003a5a:	bf00      	nop
 8003a5c:	080039a1 	.word	0x080039a1
 8003a60:	2000063c 	.word	0x2000063c

08003a64 <_fwalk_sglue>:
 8003a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003a68:	4607      	mov	r7, r0
 8003a6a:	4688      	mov	r8, r1
 8003a6c:	4614      	mov	r4, r2
 8003a6e:	2600      	movs	r6, #0
 8003a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003a74:	f1b9 0901 	subs.w	r9, r9, #1
 8003a78:	d505      	bpl.n	8003a86 <_fwalk_sglue+0x22>
 8003a7a:	6824      	ldr	r4, [r4, #0]
 8003a7c:	2c00      	cmp	r4, #0
 8003a7e:	d1f7      	bne.n	8003a70 <_fwalk_sglue+0xc>
 8003a80:	4630      	mov	r0, r6
 8003a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003a86:	89ab      	ldrh	r3, [r5, #12]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d907      	bls.n	8003a9c <_fwalk_sglue+0x38>
 8003a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003a90:	3301      	adds	r3, #1
 8003a92:	d003      	beq.n	8003a9c <_fwalk_sglue+0x38>
 8003a94:	4629      	mov	r1, r5
 8003a96:	4638      	mov	r0, r7
 8003a98:	47c0      	blx	r8
 8003a9a:	4306      	orrs	r6, r0
 8003a9c:	3568      	adds	r5, #104	@ 0x68
 8003a9e:	e7e9      	b.n	8003a74 <_fwalk_sglue+0x10>

08003aa0 <iprintf>:
 8003aa0:	b40f      	push	{r0, r1, r2, r3}
 8003aa2:	b507      	push	{r0, r1, r2, lr}
 8003aa4:	4906      	ldr	r1, [pc, #24]	@ (8003ac0 <iprintf+0x20>)
 8003aa6:	ab04      	add	r3, sp, #16
 8003aa8:	6808      	ldr	r0, [r1, #0]
 8003aaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8003aae:	6881      	ldr	r1, [r0, #8]
 8003ab0:	9301      	str	r3, [sp, #4]
 8003ab2:	f000 fb91 	bl	80041d8 <_vfiprintf_r>
 8003ab6:	b003      	add	sp, #12
 8003ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003abc:	b004      	add	sp, #16
 8003abe:	4770      	bx	lr
 8003ac0:	20000284 	.word	0x20000284

08003ac4 <sniprintf>:
 8003ac4:	b40c      	push	{r2, r3}
 8003ac6:	b530      	push	{r4, r5, lr}
 8003ac8:	4b17      	ldr	r3, [pc, #92]	@ (8003b28 <sniprintf+0x64>)
 8003aca:	1e0c      	subs	r4, r1, #0
 8003acc:	681d      	ldr	r5, [r3, #0]
 8003ace:	b09d      	sub	sp, #116	@ 0x74
 8003ad0:	da08      	bge.n	8003ae4 <sniprintf+0x20>
 8003ad2:	238b      	movs	r3, #139	@ 0x8b
 8003ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	b01d      	add	sp, #116	@ 0x74
 8003adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ae0:	b002      	add	sp, #8
 8003ae2:	4770      	bx	lr
 8003ae4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003ae8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003aec:	bf0c      	ite	eq
 8003aee:	4623      	moveq	r3, r4
 8003af0:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003af4:	9304      	str	r3, [sp, #16]
 8003af6:	9307      	str	r3, [sp, #28]
 8003af8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003afc:	9002      	str	r0, [sp, #8]
 8003afe:	9006      	str	r0, [sp, #24]
 8003b00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003b04:	4628      	mov	r0, r5
 8003b06:	ab21      	add	r3, sp, #132	@ 0x84
 8003b08:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003b0a:	a902      	add	r1, sp, #8
 8003b0c:	9301      	str	r3, [sp, #4]
 8003b0e:	f000 fa3f 	bl	8003f90 <_svfiprintf_r>
 8003b12:	1c43      	adds	r3, r0, #1
 8003b14:	bfbc      	itt	lt
 8003b16:	238b      	movlt	r3, #139	@ 0x8b
 8003b18:	602b      	strlt	r3, [r5, #0]
 8003b1a:	2c00      	cmp	r4, #0
 8003b1c:	d0dd      	beq.n	8003ada <sniprintf+0x16>
 8003b1e:	2200      	movs	r2, #0
 8003b20:	9b02      	ldr	r3, [sp, #8]
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e7d9      	b.n	8003ada <sniprintf+0x16>
 8003b26:	bf00      	nop
 8003b28:	20000284 	.word	0x20000284

08003b2c <siprintf>:
 8003b2c:	b40e      	push	{r1, r2, r3}
 8003b2e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003b32:	b500      	push	{lr}
 8003b34:	b09c      	sub	sp, #112	@ 0x70
 8003b36:	ab1d      	add	r3, sp, #116	@ 0x74
 8003b38:	9002      	str	r0, [sp, #8]
 8003b3a:	9006      	str	r0, [sp, #24]
 8003b3c:	9107      	str	r1, [sp, #28]
 8003b3e:	9104      	str	r1, [sp, #16]
 8003b40:	4808      	ldr	r0, [pc, #32]	@ (8003b64 <siprintf+0x38>)
 8003b42:	4909      	ldr	r1, [pc, #36]	@ (8003b68 <siprintf+0x3c>)
 8003b44:	f853 2b04 	ldr.w	r2, [r3], #4
 8003b48:	9105      	str	r1, [sp, #20]
 8003b4a:	6800      	ldr	r0, [r0, #0]
 8003b4c:	a902      	add	r1, sp, #8
 8003b4e:	9301      	str	r3, [sp, #4]
 8003b50:	f000 fa1e 	bl	8003f90 <_svfiprintf_r>
 8003b54:	2200      	movs	r2, #0
 8003b56:	9b02      	ldr	r3, [sp, #8]
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	b01c      	add	sp, #112	@ 0x70
 8003b5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003b60:	b003      	add	sp, #12
 8003b62:	4770      	bx	lr
 8003b64:	20000284 	.word	0x20000284
 8003b68:	ffff0208 	.word	0xffff0208

08003b6c <__sread>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	460c      	mov	r4, r1
 8003b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b74:	f000 f868 	bl	8003c48 <_read_r>
 8003b78:	2800      	cmp	r0, #0
 8003b7a:	bfab      	itete	ge
 8003b7c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b80:	181b      	addge	r3, r3, r0
 8003b82:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003b86:	bfac      	ite	ge
 8003b88:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003b8a:	81a3      	strhlt	r3, [r4, #12]
 8003b8c:	bd10      	pop	{r4, pc}

08003b8e <__swrite>:
 8003b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b92:	461f      	mov	r7, r3
 8003b94:	898b      	ldrh	r3, [r1, #12]
 8003b96:	4605      	mov	r5, r0
 8003b98:	05db      	lsls	r3, r3, #23
 8003b9a:	460c      	mov	r4, r1
 8003b9c:	4616      	mov	r6, r2
 8003b9e:	d505      	bpl.n	8003bac <__swrite+0x1e>
 8003ba0:	2302      	movs	r3, #2
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba8:	f000 f83c 	bl	8003c24 <_lseek_r>
 8003bac:	89a3      	ldrh	r3, [r4, #12]
 8003bae:	4632      	mov	r2, r6
 8003bb0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003bb4:	81a3      	strh	r3, [r4, #12]
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	463b      	mov	r3, r7
 8003bba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003bc2:	f000 b853 	b.w	8003c6c <_write_r>

08003bc6 <__sseek>:
 8003bc6:	b510      	push	{r4, lr}
 8003bc8:	460c      	mov	r4, r1
 8003bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bce:	f000 f829 	bl	8003c24 <_lseek_r>
 8003bd2:	1c43      	adds	r3, r0, #1
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	bf15      	itete	ne
 8003bd8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003bda:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003bde:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003be2:	81a3      	strheq	r3, [r4, #12]
 8003be4:	bf18      	it	ne
 8003be6:	81a3      	strhne	r3, [r4, #12]
 8003be8:	bd10      	pop	{r4, pc}

08003bea <__sclose>:
 8003bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bee:	f000 b809 	b.w	8003c04 <_close_r>

08003bf2 <memset>:
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	4402      	add	r2, r0
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d100      	bne.n	8003bfc <memset+0xa>
 8003bfa:	4770      	bx	lr
 8003bfc:	f803 1b01 	strb.w	r1, [r3], #1
 8003c00:	e7f9      	b.n	8003bf6 <memset+0x4>
	...

08003c04 <_close_r>:
 8003c04:	b538      	push	{r3, r4, r5, lr}
 8003c06:	2300      	movs	r3, #0
 8003c08:	4d05      	ldr	r5, [pc, #20]	@ (8003c20 <_close_r+0x1c>)
 8003c0a:	4604      	mov	r4, r0
 8003c0c:	4608      	mov	r0, r1
 8003c0e:	602b      	str	r3, [r5, #0]
 8003c10:	f7ff fc04 	bl	800341c <_close>
 8003c14:	1c43      	adds	r3, r0, #1
 8003c16:	d102      	bne.n	8003c1e <_close_r+0x1a>
 8003c18:	682b      	ldr	r3, [r5, #0]
 8003c1a:	b103      	cbz	r3, 8003c1e <_close_r+0x1a>
 8003c1c:	6023      	str	r3, [r4, #0]
 8003c1e:	bd38      	pop	{r3, r4, r5, pc}
 8003c20:	20000640 	.word	0x20000640

08003c24 <_lseek_r>:
 8003c24:	b538      	push	{r3, r4, r5, lr}
 8003c26:	4604      	mov	r4, r0
 8003c28:	4608      	mov	r0, r1
 8003c2a:	4611      	mov	r1, r2
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	4d05      	ldr	r5, [pc, #20]	@ (8003c44 <_lseek_r+0x20>)
 8003c30:	602a      	str	r2, [r5, #0]
 8003c32:	461a      	mov	r2, r3
 8003c34:	f7ff fbb3 	bl	800339e <_lseek>
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	d102      	bne.n	8003c42 <_lseek_r+0x1e>
 8003c3c:	682b      	ldr	r3, [r5, #0]
 8003c3e:	b103      	cbz	r3, 8003c42 <_lseek_r+0x1e>
 8003c40:	6023      	str	r3, [r4, #0]
 8003c42:	bd38      	pop	{r3, r4, r5, pc}
 8003c44:	20000640 	.word	0x20000640

08003c48 <_read_r>:
 8003c48:	b538      	push	{r3, r4, r5, lr}
 8003c4a:	4604      	mov	r4, r0
 8003c4c:	4608      	mov	r0, r1
 8003c4e:	4611      	mov	r1, r2
 8003c50:	2200      	movs	r2, #0
 8003c52:	4d05      	ldr	r5, [pc, #20]	@ (8003c68 <_read_r+0x20>)
 8003c54:	602a      	str	r2, [r5, #0]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f7ff fb4b 	bl	80032f2 <_read>
 8003c5c:	1c43      	adds	r3, r0, #1
 8003c5e:	d102      	bne.n	8003c66 <_read_r+0x1e>
 8003c60:	682b      	ldr	r3, [r5, #0]
 8003c62:	b103      	cbz	r3, 8003c66 <_read_r+0x1e>
 8003c64:	6023      	str	r3, [r4, #0]
 8003c66:	bd38      	pop	{r3, r4, r5, pc}
 8003c68:	20000640 	.word	0x20000640

08003c6c <_write_r>:
 8003c6c:	b538      	push	{r3, r4, r5, lr}
 8003c6e:	4604      	mov	r4, r0
 8003c70:	4608      	mov	r0, r1
 8003c72:	4611      	mov	r1, r2
 8003c74:	2200      	movs	r2, #0
 8003c76:	4d05      	ldr	r5, [pc, #20]	@ (8003c8c <_write_r+0x20>)
 8003c78:	602a      	str	r2, [r5, #0]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f7ff fba1 	bl	80033c2 <_write>
 8003c80:	1c43      	adds	r3, r0, #1
 8003c82:	d102      	bne.n	8003c8a <_write_r+0x1e>
 8003c84:	682b      	ldr	r3, [r5, #0]
 8003c86:	b103      	cbz	r3, 8003c8a <_write_r+0x1e>
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	bd38      	pop	{r3, r4, r5, pc}
 8003c8c:	20000640 	.word	0x20000640

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	@ (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000284 	.word	0x20000284

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	4d0c      	ldr	r5, [pc, #48]	@ (8003cd4 <__libc_init_array+0x38>)
 8003ca2:	4c0d      	ldr	r4, [pc, #52]	@ (8003cd8 <__libc_init_array+0x3c>)
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	f000 fed2 	bl	8004a54 <_init>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4d0a      	ldr	r5, [pc, #40]	@ (8003cdc <__libc_init_array+0x40>)
 8003cb4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ce0 <__libc_init_array+0x44>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08004ee8 	.word	0x08004ee8
 8003cd8:	08004ee8 	.word	0x08004ee8
 8003cdc:	08004ee8 	.word	0x08004ee8
 8003ce0:	08004eec 	.word	0x08004eec

08003ce4 <__retarget_lock_init_recursive>:
 8003ce4:	4770      	bx	lr

08003ce6 <__retarget_lock_acquire_recursive>:
 8003ce6:	4770      	bx	lr

08003ce8 <__retarget_lock_release_recursive>:
 8003ce8:	4770      	bx	lr
	...

08003cec <_free_r>:
 8003cec:	b538      	push	{r3, r4, r5, lr}
 8003cee:	4605      	mov	r5, r0
 8003cf0:	2900      	cmp	r1, #0
 8003cf2:	d040      	beq.n	8003d76 <_free_r+0x8a>
 8003cf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf8:	1f0c      	subs	r4, r1, #4
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	bfb8      	it	lt
 8003cfe:	18e4      	addlt	r4, r4, r3
 8003d00:	f000 f8de 	bl	8003ec0 <__malloc_lock>
 8003d04:	4a1c      	ldr	r2, [pc, #112]	@ (8003d78 <_free_r+0x8c>)
 8003d06:	6813      	ldr	r3, [r2, #0]
 8003d08:	b933      	cbnz	r3, 8003d18 <_free_r+0x2c>
 8003d0a:	6063      	str	r3, [r4, #4]
 8003d0c:	6014      	str	r4, [r2, #0]
 8003d0e:	4628      	mov	r0, r5
 8003d10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d14:	f000 b8da 	b.w	8003ecc <__malloc_unlock>
 8003d18:	42a3      	cmp	r3, r4
 8003d1a:	d908      	bls.n	8003d2e <_free_r+0x42>
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	1821      	adds	r1, r4, r0
 8003d20:	428b      	cmp	r3, r1
 8003d22:	bf01      	itttt	eq
 8003d24:	6819      	ldreq	r1, [r3, #0]
 8003d26:	685b      	ldreq	r3, [r3, #4]
 8003d28:	1809      	addeq	r1, r1, r0
 8003d2a:	6021      	streq	r1, [r4, #0]
 8003d2c:	e7ed      	b.n	8003d0a <_free_r+0x1e>
 8003d2e:	461a      	mov	r2, r3
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	b10b      	cbz	r3, 8003d38 <_free_r+0x4c>
 8003d34:	42a3      	cmp	r3, r4
 8003d36:	d9fa      	bls.n	8003d2e <_free_r+0x42>
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	1850      	adds	r0, r2, r1
 8003d3c:	42a0      	cmp	r0, r4
 8003d3e:	d10b      	bne.n	8003d58 <_free_r+0x6c>
 8003d40:	6820      	ldr	r0, [r4, #0]
 8003d42:	4401      	add	r1, r0
 8003d44:	1850      	adds	r0, r2, r1
 8003d46:	4283      	cmp	r3, r0
 8003d48:	6011      	str	r1, [r2, #0]
 8003d4a:	d1e0      	bne.n	8003d0e <_free_r+0x22>
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	4408      	add	r0, r1
 8003d52:	6010      	str	r0, [r2, #0]
 8003d54:	6053      	str	r3, [r2, #4]
 8003d56:	e7da      	b.n	8003d0e <_free_r+0x22>
 8003d58:	d902      	bls.n	8003d60 <_free_r+0x74>
 8003d5a:	230c      	movs	r3, #12
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	e7d6      	b.n	8003d0e <_free_r+0x22>
 8003d60:	6820      	ldr	r0, [r4, #0]
 8003d62:	1821      	adds	r1, r4, r0
 8003d64:	428b      	cmp	r3, r1
 8003d66:	bf01      	itttt	eq
 8003d68:	6819      	ldreq	r1, [r3, #0]
 8003d6a:	685b      	ldreq	r3, [r3, #4]
 8003d6c:	1809      	addeq	r1, r1, r0
 8003d6e:	6021      	streq	r1, [r4, #0]
 8003d70:	6063      	str	r3, [r4, #4]
 8003d72:	6054      	str	r4, [r2, #4]
 8003d74:	e7cb      	b.n	8003d0e <_free_r+0x22>
 8003d76:	bd38      	pop	{r3, r4, r5, pc}
 8003d78:	2000064c 	.word	0x2000064c

08003d7c <sbrk_aligned>:
 8003d7c:	b570      	push	{r4, r5, r6, lr}
 8003d7e:	4e0f      	ldr	r6, [pc, #60]	@ (8003dbc <sbrk_aligned+0x40>)
 8003d80:	460c      	mov	r4, r1
 8003d82:	6831      	ldr	r1, [r6, #0]
 8003d84:	4605      	mov	r5, r0
 8003d86:	b911      	cbnz	r1, 8003d8e <sbrk_aligned+0x12>
 8003d88:	f000 fd7e 	bl	8004888 <_sbrk_r>
 8003d8c:	6030      	str	r0, [r6, #0]
 8003d8e:	4621      	mov	r1, r4
 8003d90:	4628      	mov	r0, r5
 8003d92:	f000 fd79 	bl	8004888 <_sbrk_r>
 8003d96:	1c43      	adds	r3, r0, #1
 8003d98:	d103      	bne.n	8003da2 <sbrk_aligned+0x26>
 8003d9a:	f04f 34ff 	mov.w	r4, #4294967295
 8003d9e:	4620      	mov	r0, r4
 8003da0:	bd70      	pop	{r4, r5, r6, pc}
 8003da2:	1cc4      	adds	r4, r0, #3
 8003da4:	f024 0403 	bic.w	r4, r4, #3
 8003da8:	42a0      	cmp	r0, r4
 8003daa:	d0f8      	beq.n	8003d9e <sbrk_aligned+0x22>
 8003dac:	1a21      	subs	r1, r4, r0
 8003dae:	4628      	mov	r0, r5
 8003db0:	f000 fd6a 	bl	8004888 <_sbrk_r>
 8003db4:	3001      	adds	r0, #1
 8003db6:	d1f2      	bne.n	8003d9e <sbrk_aligned+0x22>
 8003db8:	e7ef      	b.n	8003d9a <sbrk_aligned+0x1e>
 8003dba:	bf00      	nop
 8003dbc:	20000648 	.word	0x20000648

08003dc0 <_malloc_r>:
 8003dc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003dc4:	1ccd      	adds	r5, r1, #3
 8003dc6:	f025 0503 	bic.w	r5, r5, #3
 8003dca:	3508      	adds	r5, #8
 8003dcc:	2d0c      	cmp	r5, #12
 8003dce:	bf38      	it	cc
 8003dd0:	250c      	movcc	r5, #12
 8003dd2:	2d00      	cmp	r5, #0
 8003dd4:	4606      	mov	r6, r0
 8003dd6:	db01      	blt.n	8003ddc <_malloc_r+0x1c>
 8003dd8:	42a9      	cmp	r1, r5
 8003dda:	d904      	bls.n	8003de6 <_malloc_r+0x26>
 8003ddc:	230c      	movs	r3, #12
 8003dde:	6033      	str	r3, [r6, #0]
 8003de0:	2000      	movs	r0, #0
 8003de2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003de6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003ebc <_malloc_r+0xfc>
 8003dea:	f000 f869 	bl	8003ec0 <__malloc_lock>
 8003dee:	f8d8 3000 	ldr.w	r3, [r8]
 8003df2:	461c      	mov	r4, r3
 8003df4:	bb44      	cbnz	r4, 8003e48 <_malloc_r+0x88>
 8003df6:	4629      	mov	r1, r5
 8003df8:	4630      	mov	r0, r6
 8003dfa:	f7ff ffbf 	bl	8003d7c <sbrk_aligned>
 8003dfe:	1c43      	adds	r3, r0, #1
 8003e00:	4604      	mov	r4, r0
 8003e02:	d158      	bne.n	8003eb6 <_malloc_r+0xf6>
 8003e04:	f8d8 4000 	ldr.w	r4, [r8]
 8003e08:	4627      	mov	r7, r4
 8003e0a:	2f00      	cmp	r7, #0
 8003e0c:	d143      	bne.n	8003e96 <_malloc_r+0xd6>
 8003e0e:	2c00      	cmp	r4, #0
 8003e10:	d04b      	beq.n	8003eaa <_malloc_r+0xea>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	4639      	mov	r1, r7
 8003e16:	4630      	mov	r0, r6
 8003e18:	eb04 0903 	add.w	r9, r4, r3
 8003e1c:	f000 fd34 	bl	8004888 <_sbrk_r>
 8003e20:	4581      	cmp	r9, r0
 8003e22:	d142      	bne.n	8003eaa <_malloc_r+0xea>
 8003e24:	6821      	ldr	r1, [r4, #0]
 8003e26:	4630      	mov	r0, r6
 8003e28:	1a6d      	subs	r5, r5, r1
 8003e2a:	4629      	mov	r1, r5
 8003e2c:	f7ff ffa6 	bl	8003d7c <sbrk_aligned>
 8003e30:	3001      	adds	r0, #1
 8003e32:	d03a      	beq.n	8003eaa <_malloc_r+0xea>
 8003e34:	6823      	ldr	r3, [r4, #0]
 8003e36:	442b      	add	r3, r5
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	f8d8 3000 	ldr.w	r3, [r8]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	bb62      	cbnz	r2, 8003e9c <_malloc_r+0xdc>
 8003e42:	f8c8 7000 	str.w	r7, [r8]
 8003e46:	e00f      	b.n	8003e68 <_malloc_r+0xa8>
 8003e48:	6822      	ldr	r2, [r4, #0]
 8003e4a:	1b52      	subs	r2, r2, r5
 8003e4c:	d420      	bmi.n	8003e90 <_malloc_r+0xd0>
 8003e4e:	2a0b      	cmp	r2, #11
 8003e50:	d917      	bls.n	8003e82 <_malloc_r+0xc2>
 8003e52:	1961      	adds	r1, r4, r5
 8003e54:	42a3      	cmp	r3, r4
 8003e56:	6025      	str	r5, [r4, #0]
 8003e58:	bf18      	it	ne
 8003e5a:	6059      	strne	r1, [r3, #4]
 8003e5c:	6863      	ldr	r3, [r4, #4]
 8003e5e:	bf08      	it	eq
 8003e60:	f8c8 1000 	streq.w	r1, [r8]
 8003e64:	5162      	str	r2, [r4, r5]
 8003e66:	604b      	str	r3, [r1, #4]
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f000 f82f 	bl	8003ecc <__malloc_unlock>
 8003e6e:	f104 000b 	add.w	r0, r4, #11
 8003e72:	1d23      	adds	r3, r4, #4
 8003e74:	f020 0007 	bic.w	r0, r0, #7
 8003e78:	1ac2      	subs	r2, r0, r3
 8003e7a:	bf1c      	itt	ne
 8003e7c:	1a1b      	subne	r3, r3, r0
 8003e7e:	50a3      	strne	r3, [r4, r2]
 8003e80:	e7af      	b.n	8003de2 <_malloc_r+0x22>
 8003e82:	6862      	ldr	r2, [r4, #4]
 8003e84:	42a3      	cmp	r3, r4
 8003e86:	bf0c      	ite	eq
 8003e88:	f8c8 2000 	streq.w	r2, [r8]
 8003e8c:	605a      	strne	r2, [r3, #4]
 8003e8e:	e7eb      	b.n	8003e68 <_malloc_r+0xa8>
 8003e90:	4623      	mov	r3, r4
 8003e92:	6864      	ldr	r4, [r4, #4]
 8003e94:	e7ae      	b.n	8003df4 <_malloc_r+0x34>
 8003e96:	463c      	mov	r4, r7
 8003e98:	687f      	ldr	r7, [r7, #4]
 8003e9a:	e7b6      	b.n	8003e0a <_malloc_r+0x4a>
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d1fb      	bne.n	8003e9c <_malloc_r+0xdc>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	6053      	str	r3, [r2, #4]
 8003ea8:	e7de      	b.n	8003e68 <_malloc_r+0xa8>
 8003eaa:	230c      	movs	r3, #12
 8003eac:	4630      	mov	r0, r6
 8003eae:	6033      	str	r3, [r6, #0]
 8003eb0:	f000 f80c 	bl	8003ecc <__malloc_unlock>
 8003eb4:	e794      	b.n	8003de0 <_malloc_r+0x20>
 8003eb6:	6005      	str	r5, [r0, #0]
 8003eb8:	e7d6      	b.n	8003e68 <_malloc_r+0xa8>
 8003eba:	bf00      	nop
 8003ebc:	2000064c 	.word	0x2000064c

08003ec0 <__malloc_lock>:
 8003ec0:	4801      	ldr	r0, [pc, #4]	@ (8003ec8 <__malloc_lock+0x8>)
 8003ec2:	f7ff bf10 	b.w	8003ce6 <__retarget_lock_acquire_recursive>
 8003ec6:	bf00      	nop
 8003ec8:	20000644 	.word	0x20000644

08003ecc <__malloc_unlock>:
 8003ecc:	4801      	ldr	r0, [pc, #4]	@ (8003ed4 <__malloc_unlock+0x8>)
 8003ece:	f7ff bf0b 	b.w	8003ce8 <__retarget_lock_release_recursive>
 8003ed2:	bf00      	nop
 8003ed4:	20000644 	.word	0x20000644

08003ed8 <__ssputs_r>:
 8003ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003edc:	461f      	mov	r7, r3
 8003ede:	688e      	ldr	r6, [r1, #8]
 8003ee0:	4682      	mov	sl, r0
 8003ee2:	42be      	cmp	r6, r7
 8003ee4:	460c      	mov	r4, r1
 8003ee6:	4690      	mov	r8, r2
 8003ee8:	680b      	ldr	r3, [r1, #0]
 8003eea:	d82d      	bhi.n	8003f48 <__ssputs_r+0x70>
 8003eec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003ef0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003ef4:	d026      	beq.n	8003f44 <__ssputs_r+0x6c>
 8003ef6:	6965      	ldr	r5, [r4, #20]
 8003ef8:	6909      	ldr	r1, [r1, #16]
 8003efa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003efe:	eba3 0901 	sub.w	r9, r3, r1
 8003f02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003f06:	1c7b      	adds	r3, r7, #1
 8003f08:	444b      	add	r3, r9
 8003f0a:	106d      	asrs	r5, r5, #1
 8003f0c:	429d      	cmp	r5, r3
 8003f0e:	bf38      	it	cc
 8003f10:	461d      	movcc	r5, r3
 8003f12:	0553      	lsls	r3, r2, #21
 8003f14:	d527      	bpl.n	8003f66 <__ssputs_r+0x8e>
 8003f16:	4629      	mov	r1, r5
 8003f18:	f7ff ff52 	bl	8003dc0 <_malloc_r>
 8003f1c:	4606      	mov	r6, r0
 8003f1e:	b360      	cbz	r0, 8003f7a <__ssputs_r+0xa2>
 8003f20:	464a      	mov	r2, r9
 8003f22:	6921      	ldr	r1, [r4, #16]
 8003f24:	f000 fcce 	bl	80048c4 <memcpy>
 8003f28:	89a3      	ldrh	r3, [r4, #12]
 8003f2a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003f2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f32:	81a3      	strh	r3, [r4, #12]
 8003f34:	6126      	str	r6, [r4, #16]
 8003f36:	444e      	add	r6, r9
 8003f38:	6026      	str	r6, [r4, #0]
 8003f3a:	463e      	mov	r6, r7
 8003f3c:	6165      	str	r5, [r4, #20]
 8003f3e:	eba5 0509 	sub.w	r5, r5, r9
 8003f42:	60a5      	str	r5, [r4, #8]
 8003f44:	42be      	cmp	r6, r7
 8003f46:	d900      	bls.n	8003f4a <__ssputs_r+0x72>
 8003f48:	463e      	mov	r6, r7
 8003f4a:	4632      	mov	r2, r6
 8003f4c:	4641      	mov	r1, r8
 8003f4e:	6820      	ldr	r0, [r4, #0]
 8003f50:	f000 fc80 	bl	8004854 <memmove>
 8003f54:	2000      	movs	r0, #0
 8003f56:	68a3      	ldr	r3, [r4, #8]
 8003f58:	1b9b      	subs	r3, r3, r6
 8003f5a:	60a3      	str	r3, [r4, #8]
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	4433      	add	r3, r6
 8003f60:	6023      	str	r3, [r4, #0]
 8003f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f66:	462a      	mov	r2, r5
 8003f68:	f000 fcba 	bl	80048e0 <_realloc_r>
 8003f6c:	4606      	mov	r6, r0
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d1e0      	bne.n	8003f34 <__ssputs_r+0x5c>
 8003f72:	4650      	mov	r0, sl
 8003f74:	6921      	ldr	r1, [r4, #16]
 8003f76:	f7ff feb9 	bl	8003cec <_free_r>
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	f8ca 3000 	str.w	r3, [sl]
 8003f80:	89a3      	ldrh	r3, [r4, #12]
 8003f82:	f04f 30ff 	mov.w	r0, #4294967295
 8003f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f8a:	81a3      	strh	r3, [r4, #12]
 8003f8c:	e7e9      	b.n	8003f62 <__ssputs_r+0x8a>
	...

08003f90 <_svfiprintf_r>:
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	4698      	mov	r8, r3
 8003f96:	898b      	ldrh	r3, [r1, #12]
 8003f98:	4607      	mov	r7, r0
 8003f9a:	061b      	lsls	r3, r3, #24
 8003f9c:	460d      	mov	r5, r1
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	b09d      	sub	sp, #116	@ 0x74
 8003fa2:	d510      	bpl.n	8003fc6 <_svfiprintf_r+0x36>
 8003fa4:	690b      	ldr	r3, [r1, #16]
 8003fa6:	b973      	cbnz	r3, 8003fc6 <_svfiprintf_r+0x36>
 8003fa8:	2140      	movs	r1, #64	@ 0x40
 8003faa:	f7ff ff09 	bl	8003dc0 <_malloc_r>
 8003fae:	6028      	str	r0, [r5, #0]
 8003fb0:	6128      	str	r0, [r5, #16]
 8003fb2:	b930      	cbnz	r0, 8003fc2 <_svfiprintf_r+0x32>
 8003fb4:	230c      	movs	r3, #12
 8003fb6:	603b      	str	r3, [r7, #0]
 8003fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003fbc:	b01d      	add	sp, #116	@ 0x74
 8003fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fc2:	2340      	movs	r3, #64	@ 0x40
 8003fc4:	616b      	str	r3, [r5, #20]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8003fca:	2320      	movs	r3, #32
 8003fcc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003fd0:	2330      	movs	r3, #48	@ 0x30
 8003fd2:	f04f 0901 	mov.w	r9, #1
 8003fd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8003fda:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004174 <_svfiprintf_r+0x1e4>
 8003fde:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003fe2:	4623      	mov	r3, r4
 8003fe4:	469a      	mov	sl, r3
 8003fe6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003fea:	b10a      	cbz	r2, 8003ff0 <_svfiprintf_r+0x60>
 8003fec:	2a25      	cmp	r2, #37	@ 0x25
 8003fee:	d1f9      	bne.n	8003fe4 <_svfiprintf_r+0x54>
 8003ff0:	ebba 0b04 	subs.w	fp, sl, r4
 8003ff4:	d00b      	beq.n	800400e <_svfiprintf_r+0x7e>
 8003ff6:	465b      	mov	r3, fp
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4629      	mov	r1, r5
 8003ffc:	4638      	mov	r0, r7
 8003ffe:	f7ff ff6b 	bl	8003ed8 <__ssputs_r>
 8004002:	3001      	adds	r0, #1
 8004004:	f000 80a7 	beq.w	8004156 <_svfiprintf_r+0x1c6>
 8004008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800400a:	445a      	add	r2, fp
 800400c:	9209      	str	r2, [sp, #36]	@ 0x24
 800400e:	f89a 3000 	ldrb.w	r3, [sl]
 8004012:	2b00      	cmp	r3, #0
 8004014:	f000 809f 	beq.w	8004156 <_svfiprintf_r+0x1c6>
 8004018:	2300      	movs	r3, #0
 800401a:	f04f 32ff 	mov.w	r2, #4294967295
 800401e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004022:	f10a 0a01 	add.w	sl, sl, #1
 8004026:	9304      	str	r3, [sp, #16]
 8004028:	9307      	str	r3, [sp, #28]
 800402a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800402e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004030:	4654      	mov	r4, sl
 8004032:	2205      	movs	r2, #5
 8004034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004038:	484e      	ldr	r0, [pc, #312]	@ (8004174 <_svfiprintf_r+0x1e4>)
 800403a:	f000 fc35 	bl	80048a8 <memchr>
 800403e:	9a04      	ldr	r2, [sp, #16]
 8004040:	b9d8      	cbnz	r0, 800407a <_svfiprintf_r+0xea>
 8004042:	06d0      	lsls	r0, r2, #27
 8004044:	bf44      	itt	mi
 8004046:	2320      	movmi	r3, #32
 8004048:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800404c:	0711      	lsls	r1, r2, #28
 800404e:	bf44      	itt	mi
 8004050:	232b      	movmi	r3, #43	@ 0x2b
 8004052:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004056:	f89a 3000 	ldrb.w	r3, [sl]
 800405a:	2b2a      	cmp	r3, #42	@ 0x2a
 800405c:	d015      	beq.n	800408a <_svfiprintf_r+0xfa>
 800405e:	4654      	mov	r4, sl
 8004060:	2000      	movs	r0, #0
 8004062:	f04f 0c0a 	mov.w	ip, #10
 8004066:	9a07      	ldr	r2, [sp, #28]
 8004068:	4621      	mov	r1, r4
 800406a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800406e:	3b30      	subs	r3, #48	@ 0x30
 8004070:	2b09      	cmp	r3, #9
 8004072:	d94b      	bls.n	800410c <_svfiprintf_r+0x17c>
 8004074:	b1b0      	cbz	r0, 80040a4 <_svfiprintf_r+0x114>
 8004076:	9207      	str	r2, [sp, #28]
 8004078:	e014      	b.n	80040a4 <_svfiprintf_r+0x114>
 800407a:	eba0 0308 	sub.w	r3, r0, r8
 800407e:	fa09 f303 	lsl.w	r3, r9, r3
 8004082:	4313      	orrs	r3, r2
 8004084:	46a2      	mov	sl, r4
 8004086:	9304      	str	r3, [sp, #16]
 8004088:	e7d2      	b.n	8004030 <_svfiprintf_r+0xa0>
 800408a:	9b03      	ldr	r3, [sp, #12]
 800408c:	1d19      	adds	r1, r3, #4
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	9103      	str	r1, [sp, #12]
 8004092:	2b00      	cmp	r3, #0
 8004094:	bfbb      	ittet	lt
 8004096:	425b      	neglt	r3, r3
 8004098:	f042 0202 	orrlt.w	r2, r2, #2
 800409c:	9307      	strge	r3, [sp, #28]
 800409e:	9307      	strlt	r3, [sp, #28]
 80040a0:	bfb8      	it	lt
 80040a2:	9204      	strlt	r2, [sp, #16]
 80040a4:	7823      	ldrb	r3, [r4, #0]
 80040a6:	2b2e      	cmp	r3, #46	@ 0x2e
 80040a8:	d10a      	bne.n	80040c0 <_svfiprintf_r+0x130>
 80040aa:	7863      	ldrb	r3, [r4, #1]
 80040ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80040ae:	d132      	bne.n	8004116 <_svfiprintf_r+0x186>
 80040b0:	9b03      	ldr	r3, [sp, #12]
 80040b2:	3402      	adds	r4, #2
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	9203      	str	r2, [sp, #12]
 80040ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80040be:	9305      	str	r3, [sp, #20]
 80040c0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004178 <_svfiprintf_r+0x1e8>
 80040c4:	2203      	movs	r2, #3
 80040c6:	4650      	mov	r0, sl
 80040c8:	7821      	ldrb	r1, [r4, #0]
 80040ca:	f000 fbed 	bl	80048a8 <memchr>
 80040ce:	b138      	cbz	r0, 80040e0 <_svfiprintf_r+0x150>
 80040d0:	2240      	movs	r2, #64	@ 0x40
 80040d2:	9b04      	ldr	r3, [sp, #16]
 80040d4:	eba0 000a 	sub.w	r0, r0, sl
 80040d8:	4082      	lsls	r2, r0
 80040da:	4313      	orrs	r3, r2
 80040dc:	3401      	adds	r4, #1
 80040de:	9304      	str	r3, [sp, #16]
 80040e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040e4:	2206      	movs	r2, #6
 80040e6:	4825      	ldr	r0, [pc, #148]	@ (800417c <_svfiprintf_r+0x1ec>)
 80040e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80040ec:	f000 fbdc 	bl	80048a8 <memchr>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d036      	beq.n	8004162 <_svfiprintf_r+0x1d2>
 80040f4:	4b22      	ldr	r3, [pc, #136]	@ (8004180 <_svfiprintf_r+0x1f0>)
 80040f6:	bb1b      	cbnz	r3, 8004140 <_svfiprintf_r+0x1b0>
 80040f8:	9b03      	ldr	r3, [sp, #12]
 80040fa:	3307      	adds	r3, #7
 80040fc:	f023 0307 	bic.w	r3, r3, #7
 8004100:	3308      	adds	r3, #8
 8004102:	9303      	str	r3, [sp, #12]
 8004104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004106:	4433      	add	r3, r6
 8004108:	9309      	str	r3, [sp, #36]	@ 0x24
 800410a:	e76a      	b.n	8003fe2 <_svfiprintf_r+0x52>
 800410c:	460c      	mov	r4, r1
 800410e:	2001      	movs	r0, #1
 8004110:	fb0c 3202 	mla	r2, ip, r2, r3
 8004114:	e7a8      	b.n	8004068 <_svfiprintf_r+0xd8>
 8004116:	2300      	movs	r3, #0
 8004118:	f04f 0c0a 	mov.w	ip, #10
 800411c:	4619      	mov	r1, r3
 800411e:	3401      	adds	r4, #1
 8004120:	9305      	str	r3, [sp, #20]
 8004122:	4620      	mov	r0, r4
 8004124:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004128:	3a30      	subs	r2, #48	@ 0x30
 800412a:	2a09      	cmp	r2, #9
 800412c:	d903      	bls.n	8004136 <_svfiprintf_r+0x1a6>
 800412e:	2b00      	cmp	r3, #0
 8004130:	d0c6      	beq.n	80040c0 <_svfiprintf_r+0x130>
 8004132:	9105      	str	r1, [sp, #20]
 8004134:	e7c4      	b.n	80040c0 <_svfiprintf_r+0x130>
 8004136:	4604      	mov	r4, r0
 8004138:	2301      	movs	r3, #1
 800413a:	fb0c 2101 	mla	r1, ip, r1, r2
 800413e:	e7f0      	b.n	8004122 <_svfiprintf_r+0x192>
 8004140:	ab03      	add	r3, sp, #12
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	462a      	mov	r2, r5
 8004146:	4638      	mov	r0, r7
 8004148:	4b0e      	ldr	r3, [pc, #56]	@ (8004184 <_svfiprintf_r+0x1f4>)
 800414a:	a904      	add	r1, sp, #16
 800414c:	f3af 8000 	nop.w
 8004150:	1c42      	adds	r2, r0, #1
 8004152:	4606      	mov	r6, r0
 8004154:	d1d6      	bne.n	8004104 <_svfiprintf_r+0x174>
 8004156:	89ab      	ldrh	r3, [r5, #12]
 8004158:	065b      	lsls	r3, r3, #25
 800415a:	f53f af2d 	bmi.w	8003fb8 <_svfiprintf_r+0x28>
 800415e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004160:	e72c      	b.n	8003fbc <_svfiprintf_r+0x2c>
 8004162:	ab03      	add	r3, sp, #12
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	462a      	mov	r2, r5
 8004168:	4638      	mov	r0, r7
 800416a:	4b06      	ldr	r3, [pc, #24]	@ (8004184 <_svfiprintf_r+0x1f4>)
 800416c:	a904      	add	r1, sp, #16
 800416e:	f000 f9bd 	bl	80044ec <_printf_i>
 8004172:	e7ed      	b.n	8004150 <_svfiprintf_r+0x1c0>
 8004174:	08004eaa 	.word	0x08004eaa
 8004178:	08004eb0 	.word	0x08004eb0
 800417c:	08004eb4 	.word	0x08004eb4
 8004180:	00000000 	.word	0x00000000
 8004184:	08003ed9 	.word	0x08003ed9

08004188 <__sfputc_r>:
 8004188:	6893      	ldr	r3, [r2, #8]
 800418a:	b410      	push	{r4}
 800418c:	3b01      	subs	r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	6093      	str	r3, [r2, #8]
 8004192:	da07      	bge.n	80041a4 <__sfputc_r+0x1c>
 8004194:	6994      	ldr	r4, [r2, #24]
 8004196:	42a3      	cmp	r3, r4
 8004198:	db01      	blt.n	800419e <__sfputc_r+0x16>
 800419a:	290a      	cmp	r1, #10
 800419c:	d102      	bne.n	80041a4 <__sfputc_r+0x1c>
 800419e:	bc10      	pop	{r4}
 80041a0:	f000 bac4 	b.w	800472c <__swbuf_r>
 80041a4:	6813      	ldr	r3, [r2, #0]
 80041a6:	1c58      	adds	r0, r3, #1
 80041a8:	6010      	str	r0, [r2, #0]
 80041aa:	7019      	strb	r1, [r3, #0]
 80041ac:	4608      	mov	r0, r1
 80041ae:	bc10      	pop	{r4}
 80041b0:	4770      	bx	lr

080041b2 <__sfputs_r>:
 80041b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041b4:	4606      	mov	r6, r0
 80041b6:	460f      	mov	r7, r1
 80041b8:	4614      	mov	r4, r2
 80041ba:	18d5      	adds	r5, r2, r3
 80041bc:	42ac      	cmp	r4, r5
 80041be:	d101      	bne.n	80041c4 <__sfputs_r+0x12>
 80041c0:	2000      	movs	r0, #0
 80041c2:	e007      	b.n	80041d4 <__sfputs_r+0x22>
 80041c4:	463a      	mov	r2, r7
 80041c6:	4630      	mov	r0, r6
 80041c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041cc:	f7ff ffdc 	bl	8004188 <__sfputc_r>
 80041d0:	1c43      	adds	r3, r0, #1
 80041d2:	d1f3      	bne.n	80041bc <__sfputs_r+0xa>
 80041d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041d8 <_vfiprintf_r>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	460d      	mov	r5, r1
 80041de:	4614      	mov	r4, r2
 80041e0:	4698      	mov	r8, r3
 80041e2:	4606      	mov	r6, r0
 80041e4:	b09d      	sub	sp, #116	@ 0x74
 80041e6:	b118      	cbz	r0, 80041f0 <_vfiprintf_r+0x18>
 80041e8:	6a03      	ldr	r3, [r0, #32]
 80041ea:	b90b      	cbnz	r3, 80041f0 <_vfiprintf_r+0x18>
 80041ec:	f7ff fc22 	bl	8003a34 <__sinit>
 80041f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80041f2:	07d9      	lsls	r1, r3, #31
 80041f4:	d405      	bmi.n	8004202 <_vfiprintf_r+0x2a>
 80041f6:	89ab      	ldrh	r3, [r5, #12]
 80041f8:	059a      	lsls	r2, r3, #22
 80041fa:	d402      	bmi.n	8004202 <_vfiprintf_r+0x2a>
 80041fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80041fe:	f7ff fd72 	bl	8003ce6 <__retarget_lock_acquire_recursive>
 8004202:	89ab      	ldrh	r3, [r5, #12]
 8004204:	071b      	lsls	r3, r3, #28
 8004206:	d501      	bpl.n	800420c <_vfiprintf_r+0x34>
 8004208:	692b      	ldr	r3, [r5, #16]
 800420a:	b99b      	cbnz	r3, 8004234 <_vfiprintf_r+0x5c>
 800420c:	4629      	mov	r1, r5
 800420e:	4630      	mov	r0, r6
 8004210:	f000 faca 	bl	80047a8 <__swsetup_r>
 8004214:	b170      	cbz	r0, 8004234 <_vfiprintf_r+0x5c>
 8004216:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004218:	07dc      	lsls	r4, r3, #31
 800421a:	d504      	bpl.n	8004226 <_vfiprintf_r+0x4e>
 800421c:	f04f 30ff 	mov.w	r0, #4294967295
 8004220:	b01d      	add	sp, #116	@ 0x74
 8004222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004226:	89ab      	ldrh	r3, [r5, #12]
 8004228:	0598      	lsls	r0, r3, #22
 800422a:	d4f7      	bmi.n	800421c <_vfiprintf_r+0x44>
 800422c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800422e:	f7ff fd5b 	bl	8003ce8 <__retarget_lock_release_recursive>
 8004232:	e7f3      	b.n	800421c <_vfiprintf_r+0x44>
 8004234:	2300      	movs	r3, #0
 8004236:	9309      	str	r3, [sp, #36]	@ 0x24
 8004238:	2320      	movs	r3, #32
 800423a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800423e:	2330      	movs	r3, #48	@ 0x30
 8004240:	f04f 0901 	mov.w	r9, #1
 8004244:	f8cd 800c 	str.w	r8, [sp, #12]
 8004248:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80043f4 <_vfiprintf_r+0x21c>
 800424c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004250:	4623      	mov	r3, r4
 8004252:	469a      	mov	sl, r3
 8004254:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004258:	b10a      	cbz	r2, 800425e <_vfiprintf_r+0x86>
 800425a:	2a25      	cmp	r2, #37	@ 0x25
 800425c:	d1f9      	bne.n	8004252 <_vfiprintf_r+0x7a>
 800425e:	ebba 0b04 	subs.w	fp, sl, r4
 8004262:	d00b      	beq.n	800427c <_vfiprintf_r+0xa4>
 8004264:	465b      	mov	r3, fp
 8004266:	4622      	mov	r2, r4
 8004268:	4629      	mov	r1, r5
 800426a:	4630      	mov	r0, r6
 800426c:	f7ff ffa1 	bl	80041b2 <__sfputs_r>
 8004270:	3001      	adds	r0, #1
 8004272:	f000 80a7 	beq.w	80043c4 <_vfiprintf_r+0x1ec>
 8004276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004278:	445a      	add	r2, fp
 800427a:	9209      	str	r2, [sp, #36]	@ 0x24
 800427c:	f89a 3000 	ldrb.w	r3, [sl]
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 809f 	beq.w	80043c4 <_vfiprintf_r+0x1ec>
 8004286:	2300      	movs	r3, #0
 8004288:	f04f 32ff 	mov.w	r2, #4294967295
 800428c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004290:	f10a 0a01 	add.w	sl, sl, #1
 8004294:	9304      	str	r3, [sp, #16]
 8004296:	9307      	str	r3, [sp, #28]
 8004298:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800429c:	931a      	str	r3, [sp, #104]	@ 0x68
 800429e:	4654      	mov	r4, sl
 80042a0:	2205      	movs	r2, #5
 80042a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042a6:	4853      	ldr	r0, [pc, #332]	@ (80043f4 <_vfiprintf_r+0x21c>)
 80042a8:	f000 fafe 	bl	80048a8 <memchr>
 80042ac:	9a04      	ldr	r2, [sp, #16]
 80042ae:	b9d8      	cbnz	r0, 80042e8 <_vfiprintf_r+0x110>
 80042b0:	06d1      	lsls	r1, r2, #27
 80042b2:	bf44      	itt	mi
 80042b4:	2320      	movmi	r3, #32
 80042b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042ba:	0713      	lsls	r3, r2, #28
 80042bc:	bf44      	itt	mi
 80042be:	232b      	movmi	r3, #43	@ 0x2b
 80042c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80042c4:	f89a 3000 	ldrb.w	r3, [sl]
 80042c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80042ca:	d015      	beq.n	80042f8 <_vfiprintf_r+0x120>
 80042cc:	4654      	mov	r4, sl
 80042ce:	2000      	movs	r0, #0
 80042d0:	f04f 0c0a 	mov.w	ip, #10
 80042d4:	9a07      	ldr	r2, [sp, #28]
 80042d6:	4621      	mov	r1, r4
 80042d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80042dc:	3b30      	subs	r3, #48	@ 0x30
 80042de:	2b09      	cmp	r3, #9
 80042e0:	d94b      	bls.n	800437a <_vfiprintf_r+0x1a2>
 80042e2:	b1b0      	cbz	r0, 8004312 <_vfiprintf_r+0x13a>
 80042e4:	9207      	str	r2, [sp, #28]
 80042e6:	e014      	b.n	8004312 <_vfiprintf_r+0x13a>
 80042e8:	eba0 0308 	sub.w	r3, r0, r8
 80042ec:	fa09 f303 	lsl.w	r3, r9, r3
 80042f0:	4313      	orrs	r3, r2
 80042f2:	46a2      	mov	sl, r4
 80042f4:	9304      	str	r3, [sp, #16]
 80042f6:	e7d2      	b.n	800429e <_vfiprintf_r+0xc6>
 80042f8:	9b03      	ldr	r3, [sp, #12]
 80042fa:	1d19      	adds	r1, r3, #4
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	9103      	str	r1, [sp, #12]
 8004300:	2b00      	cmp	r3, #0
 8004302:	bfbb      	ittet	lt
 8004304:	425b      	neglt	r3, r3
 8004306:	f042 0202 	orrlt.w	r2, r2, #2
 800430a:	9307      	strge	r3, [sp, #28]
 800430c:	9307      	strlt	r3, [sp, #28]
 800430e:	bfb8      	it	lt
 8004310:	9204      	strlt	r2, [sp, #16]
 8004312:	7823      	ldrb	r3, [r4, #0]
 8004314:	2b2e      	cmp	r3, #46	@ 0x2e
 8004316:	d10a      	bne.n	800432e <_vfiprintf_r+0x156>
 8004318:	7863      	ldrb	r3, [r4, #1]
 800431a:	2b2a      	cmp	r3, #42	@ 0x2a
 800431c:	d132      	bne.n	8004384 <_vfiprintf_r+0x1ac>
 800431e:	9b03      	ldr	r3, [sp, #12]
 8004320:	3402      	adds	r4, #2
 8004322:	1d1a      	adds	r2, r3, #4
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	9203      	str	r2, [sp, #12]
 8004328:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800432c:	9305      	str	r3, [sp, #20]
 800432e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80043f8 <_vfiprintf_r+0x220>
 8004332:	2203      	movs	r2, #3
 8004334:	4650      	mov	r0, sl
 8004336:	7821      	ldrb	r1, [r4, #0]
 8004338:	f000 fab6 	bl	80048a8 <memchr>
 800433c:	b138      	cbz	r0, 800434e <_vfiprintf_r+0x176>
 800433e:	2240      	movs	r2, #64	@ 0x40
 8004340:	9b04      	ldr	r3, [sp, #16]
 8004342:	eba0 000a 	sub.w	r0, r0, sl
 8004346:	4082      	lsls	r2, r0
 8004348:	4313      	orrs	r3, r2
 800434a:	3401      	adds	r4, #1
 800434c:	9304      	str	r3, [sp, #16]
 800434e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004352:	2206      	movs	r2, #6
 8004354:	4829      	ldr	r0, [pc, #164]	@ (80043fc <_vfiprintf_r+0x224>)
 8004356:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800435a:	f000 faa5 	bl	80048a8 <memchr>
 800435e:	2800      	cmp	r0, #0
 8004360:	d03f      	beq.n	80043e2 <_vfiprintf_r+0x20a>
 8004362:	4b27      	ldr	r3, [pc, #156]	@ (8004400 <_vfiprintf_r+0x228>)
 8004364:	bb1b      	cbnz	r3, 80043ae <_vfiprintf_r+0x1d6>
 8004366:	9b03      	ldr	r3, [sp, #12]
 8004368:	3307      	adds	r3, #7
 800436a:	f023 0307 	bic.w	r3, r3, #7
 800436e:	3308      	adds	r3, #8
 8004370:	9303      	str	r3, [sp, #12]
 8004372:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004374:	443b      	add	r3, r7
 8004376:	9309      	str	r3, [sp, #36]	@ 0x24
 8004378:	e76a      	b.n	8004250 <_vfiprintf_r+0x78>
 800437a:	460c      	mov	r4, r1
 800437c:	2001      	movs	r0, #1
 800437e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004382:	e7a8      	b.n	80042d6 <_vfiprintf_r+0xfe>
 8004384:	2300      	movs	r3, #0
 8004386:	f04f 0c0a 	mov.w	ip, #10
 800438a:	4619      	mov	r1, r3
 800438c:	3401      	adds	r4, #1
 800438e:	9305      	str	r3, [sp, #20]
 8004390:	4620      	mov	r0, r4
 8004392:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004396:	3a30      	subs	r2, #48	@ 0x30
 8004398:	2a09      	cmp	r2, #9
 800439a:	d903      	bls.n	80043a4 <_vfiprintf_r+0x1cc>
 800439c:	2b00      	cmp	r3, #0
 800439e:	d0c6      	beq.n	800432e <_vfiprintf_r+0x156>
 80043a0:	9105      	str	r1, [sp, #20]
 80043a2:	e7c4      	b.n	800432e <_vfiprintf_r+0x156>
 80043a4:	4604      	mov	r4, r0
 80043a6:	2301      	movs	r3, #1
 80043a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80043ac:	e7f0      	b.n	8004390 <_vfiprintf_r+0x1b8>
 80043ae:	ab03      	add	r3, sp, #12
 80043b0:	9300      	str	r3, [sp, #0]
 80043b2:	462a      	mov	r2, r5
 80043b4:	4630      	mov	r0, r6
 80043b6:	4b13      	ldr	r3, [pc, #76]	@ (8004404 <_vfiprintf_r+0x22c>)
 80043b8:	a904      	add	r1, sp, #16
 80043ba:	f3af 8000 	nop.w
 80043be:	4607      	mov	r7, r0
 80043c0:	1c78      	adds	r0, r7, #1
 80043c2:	d1d6      	bne.n	8004372 <_vfiprintf_r+0x19a>
 80043c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043c6:	07d9      	lsls	r1, r3, #31
 80043c8:	d405      	bmi.n	80043d6 <_vfiprintf_r+0x1fe>
 80043ca:	89ab      	ldrh	r3, [r5, #12]
 80043cc:	059a      	lsls	r2, r3, #22
 80043ce:	d402      	bmi.n	80043d6 <_vfiprintf_r+0x1fe>
 80043d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043d2:	f7ff fc89 	bl	8003ce8 <__retarget_lock_release_recursive>
 80043d6:	89ab      	ldrh	r3, [r5, #12]
 80043d8:	065b      	lsls	r3, r3, #25
 80043da:	f53f af1f 	bmi.w	800421c <_vfiprintf_r+0x44>
 80043de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80043e0:	e71e      	b.n	8004220 <_vfiprintf_r+0x48>
 80043e2:	ab03      	add	r3, sp, #12
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	462a      	mov	r2, r5
 80043e8:	4630      	mov	r0, r6
 80043ea:	4b06      	ldr	r3, [pc, #24]	@ (8004404 <_vfiprintf_r+0x22c>)
 80043ec:	a904      	add	r1, sp, #16
 80043ee:	f000 f87d 	bl	80044ec <_printf_i>
 80043f2:	e7e4      	b.n	80043be <_vfiprintf_r+0x1e6>
 80043f4:	08004eaa 	.word	0x08004eaa
 80043f8:	08004eb0 	.word	0x08004eb0
 80043fc:	08004eb4 	.word	0x08004eb4
 8004400:	00000000 	.word	0x00000000
 8004404:	080041b3 	.word	0x080041b3

08004408 <_printf_common>:
 8004408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800440c:	4616      	mov	r6, r2
 800440e:	4698      	mov	r8, r3
 8004410:	688a      	ldr	r2, [r1, #8]
 8004412:	690b      	ldr	r3, [r1, #16]
 8004414:	4607      	mov	r7, r0
 8004416:	4293      	cmp	r3, r2
 8004418:	bfb8      	it	lt
 800441a:	4613      	movlt	r3, r2
 800441c:	6033      	str	r3, [r6, #0]
 800441e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004422:	460c      	mov	r4, r1
 8004424:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004428:	b10a      	cbz	r2, 800442e <_printf_common+0x26>
 800442a:	3301      	adds	r3, #1
 800442c:	6033      	str	r3, [r6, #0]
 800442e:	6823      	ldr	r3, [r4, #0]
 8004430:	0699      	lsls	r1, r3, #26
 8004432:	bf42      	ittt	mi
 8004434:	6833      	ldrmi	r3, [r6, #0]
 8004436:	3302      	addmi	r3, #2
 8004438:	6033      	strmi	r3, [r6, #0]
 800443a:	6825      	ldr	r5, [r4, #0]
 800443c:	f015 0506 	ands.w	r5, r5, #6
 8004440:	d106      	bne.n	8004450 <_printf_common+0x48>
 8004442:	f104 0a19 	add.w	sl, r4, #25
 8004446:	68e3      	ldr	r3, [r4, #12]
 8004448:	6832      	ldr	r2, [r6, #0]
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	42ab      	cmp	r3, r5
 800444e:	dc2b      	bgt.n	80044a8 <_printf_common+0xa0>
 8004450:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004454:	6822      	ldr	r2, [r4, #0]
 8004456:	3b00      	subs	r3, #0
 8004458:	bf18      	it	ne
 800445a:	2301      	movne	r3, #1
 800445c:	0692      	lsls	r2, r2, #26
 800445e:	d430      	bmi.n	80044c2 <_printf_common+0xba>
 8004460:	4641      	mov	r1, r8
 8004462:	4638      	mov	r0, r7
 8004464:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004468:	47c8      	blx	r9
 800446a:	3001      	adds	r0, #1
 800446c:	d023      	beq.n	80044b6 <_printf_common+0xae>
 800446e:	6823      	ldr	r3, [r4, #0]
 8004470:	6922      	ldr	r2, [r4, #16]
 8004472:	f003 0306 	and.w	r3, r3, #6
 8004476:	2b04      	cmp	r3, #4
 8004478:	bf14      	ite	ne
 800447a:	2500      	movne	r5, #0
 800447c:	6833      	ldreq	r3, [r6, #0]
 800447e:	f04f 0600 	mov.w	r6, #0
 8004482:	bf08      	it	eq
 8004484:	68e5      	ldreq	r5, [r4, #12]
 8004486:	f104 041a 	add.w	r4, r4, #26
 800448a:	bf08      	it	eq
 800448c:	1aed      	subeq	r5, r5, r3
 800448e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004492:	bf08      	it	eq
 8004494:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004498:	4293      	cmp	r3, r2
 800449a:	bfc4      	itt	gt
 800449c:	1a9b      	subgt	r3, r3, r2
 800449e:	18ed      	addgt	r5, r5, r3
 80044a0:	42b5      	cmp	r5, r6
 80044a2:	d11a      	bne.n	80044da <_printf_common+0xd2>
 80044a4:	2000      	movs	r0, #0
 80044a6:	e008      	b.n	80044ba <_printf_common+0xb2>
 80044a8:	2301      	movs	r3, #1
 80044aa:	4652      	mov	r2, sl
 80044ac:	4641      	mov	r1, r8
 80044ae:	4638      	mov	r0, r7
 80044b0:	47c8      	blx	r9
 80044b2:	3001      	adds	r0, #1
 80044b4:	d103      	bne.n	80044be <_printf_common+0xb6>
 80044b6:	f04f 30ff 	mov.w	r0, #4294967295
 80044ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044be:	3501      	adds	r5, #1
 80044c0:	e7c1      	b.n	8004446 <_printf_common+0x3e>
 80044c2:	2030      	movs	r0, #48	@ 0x30
 80044c4:	18e1      	adds	r1, r4, r3
 80044c6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80044ca:	1c5a      	adds	r2, r3, #1
 80044cc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80044d0:	4422      	add	r2, r4
 80044d2:	3302      	adds	r3, #2
 80044d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80044d8:	e7c2      	b.n	8004460 <_printf_common+0x58>
 80044da:	2301      	movs	r3, #1
 80044dc:	4622      	mov	r2, r4
 80044de:	4641      	mov	r1, r8
 80044e0:	4638      	mov	r0, r7
 80044e2:	47c8      	blx	r9
 80044e4:	3001      	adds	r0, #1
 80044e6:	d0e6      	beq.n	80044b6 <_printf_common+0xae>
 80044e8:	3601      	adds	r6, #1
 80044ea:	e7d9      	b.n	80044a0 <_printf_common+0x98>

080044ec <_printf_i>:
 80044ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044f0:	7e0f      	ldrb	r7, [r1, #24]
 80044f2:	4691      	mov	r9, r2
 80044f4:	2f78      	cmp	r7, #120	@ 0x78
 80044f6:	4680      	mov	r8, r0
 80044f8:	460c      	mov	r4, r1
 80044fa:	469a      	mov	sl, r3
 80044fc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80044fe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004502:	d807      	bhi.n	8004514 <_printf_i+0x28>
 8004504:	2f62      	cmp	r7, #98	@ 0x62
 8004506:	d80a      	bhi.n	800451e <_printf_i+0x32>
 8004508:	2f00      	cmp	r7, #0
 800450a:	f000 80d3 	beq.w	80046b4 <_printf_i+0x1c8>
 800450e:	2f58      	cmp	r7, #88	@ 0x58
 8004510:	f000 80ba 	beq.w	8004688 <_printf_i+0x19c>
 8004514:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004518:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800451c:	e03a      	b.n	8004594 <_printf_i+0xa8>
 800451e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004522:	2b15      	cmp	r3, #21
 8004524:	d8f6      	bhi.n	8004514 <_printf_i+0x28>
 8004526:	a101      	add	r1, pc, #4	@ (adr r1, 800452c <_printf_i+0x40>)
 8004528:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800452c:	08004585 	.word	0x08004585
 8004530:	08004599 	.word	0x08004599
 8004534:	08004515 	.word	0x08004515
 8004538:	08004515 	.word	0x08004515
 800453c:	08004515 	.word	0x08004515
 8004540:	08004515 	.word	0x08004515
 8004544:	08004599 	.word	0x08004599
 8004548:	08004515 	.word	0x08004515
 800454c:	08004515 	.word	0x08004515
 8004550:	08004515 	.word	0x08004515
 8004554:	08004515 	.word	0x08004515
 8004558:	0800469b 	.word	0x0800469b
 800455c:	080045c3 	.word	0x080045c3
 8004560:	08004655 	.word	0x08004655
 8004564:	08004515 	.word	0x08004515
 8004568:	08004515 	.word	0x08004515
 800456c:	080046bd 	.word	0x080046bd
 8004570:	08004515 	.word	0x08004515
 8004574:	080045c3 	.word	0x080045c3
 8004578:	08004515 	.word	0x08004515
 800457c:	08004515 	.word	0x08004515
 8004580:	0800465d 	.word	0x0800465d
 8004584:	6833      	ldr	r3, [r6, #0]
 8004586:	1d1a      	adds	r2, r3, #4
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	6032      	str	r2, [r6, #0]
 800458c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004590:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004594:	2301      	movs	r3, #1
 8004596:	e09e      	b.n	80046d6 <_printf_i+0x1ea>
 8004598:	6833      	ldr	r3, [r6, #0]
 800459a:	6820      	ldr	r0, [r4, #0]
 800459c:	1d19      	adds	r1, r3, #4
 800459e:	6031      	str	r1, [r6, #0]
 80045a0:	0606      	lsls	r6, r0, #24
 80045a2:	d501      	bpl.n	80045a8 <_printf_i+0xbc>
 80045a4:	681d      	ldr	r5, [r3, #0]
 80045a6:	e003      	b.n	80045b0 <_printf_i+0xc4>
 80045a8:	0645      	lsls	r5, r0, #25
 80045aa:	d5fb      	bpl.n	80045a4 <_printf_i+0xb8>
 80045ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	da03      	bge.n	80045bc <_printf_i+0xd0>
 80045b4:	232d      	movs	r3, #45	@ 0x2d
 80045b6:	426d      	negs	r5, r5
 80045b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045bc:	230a      	movs	r3, #10
 80045be:	4859      	ldr	r0, [pc, #356]	@ (8004724 <_printf_i+0x238>)
 80045c0:	e011      	b.n	80045e6 <_printf_i+0xfa>
 80045c2:	6821      	ldr	r1, [r4, #0]
 80045c4:	6833      	ldr	r3, [r6, #0]
 80045c6:	0608      	lsls	r0, r1, #24
 80045c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80045cc:	d402      	bmi.n	80045d4 <_printf_i+0xe8>
 80045ce:	0649      	lsls	r1, r1, #25
 80045d0:	bf48      	it	mi
 80045d2:	b2ad      	uxthmi	r5, r5
 80045d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	bf14      	ite	ne
 80045da:	230a      	movne	r3, #10
 80045dc:	2308      	moveq	r3, #8
 80045de:	4851      	ldr	r0, [pc, #324]	@ (8004724 <_printf_i+0x238>)
 80045e0:	2100      	movs	r1, #0
 80045e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80045e6:	6866      	ldr	r6, [r4, #4]
 80045e8:	2e00      	cmp	r6, #0
 80045ea:	bfa8      	it	ge
 80045ec:	6821      	ldrge	r1, [r4, #0]
 80045ee:	60a6      	str	r6, [r4, #8]
 80045f0:	bfa4      	itt	ge
 80045f2:	f021 0104 	bicge.w	r1, r1, #4
 80045f6:	6021      	strge	r1, [r4, #0]
 80045f8:	b90d      	cbnz	r5, 80045fe <_printf_i+0x112>
 80045fa:	2e00      	cmp	r6, #0
 80045fc:	d04b      	beq.n	8004696 <_printf_i+0x1aa>
 80045fe:	4616      	mov	r6, r2
 8004600:	fbb5 f1f3 	udiv	r1, r5, r3
 8004604:	fb03 5711 	mls	r7, r3, r1, r5
 8004608:	5dc7      	ldrb	r7, [r0, r7]
 800460a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800460e:	462f      	mov	r7, r5
 8004610:	42bb      	cmp	r3, r7
 8004612:	460d      	mov	r5, r1
 8004614:	d9f4      	bls.n	8004600 <_printf_i+0x114>
 8004616:	2b08      	cmp	r3, #8
 8004618:	d10b      	bne.n	8004632 <_printf_i+0x146>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	07df      	lsls	r7, r3, #31
 800461e:	d508      	bpl.n	8004632 <_printf_i+0x146>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	6861      	ldr	r1, [r4, #4]
 8004624:	4299      	cmp	r1, r3
 8004626:	bfde      	ittt	le
 8004628:	2330      	movle	r3, #48	@ 0x30
 800462a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800462e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004632:	1b92      	subs	r2, r2, r6
 8004634:	6122      	str	r2, [r4, #16]
 8004636:	464b      	mov	r3, r9
 8004638:	4621      	mov	r1, r4
 800463a:	4640      	mov	r0, r8
 800463c:	f8cd a000 	str.w	sl, [sp]
 8004640:	aa03      	add	r2, sp, #12
 8004642:	f7ff fee1 	bl	8004408 <_printf_common>
 8004646:	3001      	adds	r0, #1
 8004648:	d14a      	bne.n	80046e0 <_printf_i+0x1f4>
 800464a:	f04f 30ff 	mov.w	r0, #4294967295
 800464e:	b004      	add	sp, #16
 8004650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	f043 0320 	orr.w	r3, r3, #32
 800465a:	6023      	str	r3, [r4, #0]
 800465c:	2778      	movs	r7, #120	@ 0x78
 800465e:	4832      	ldr	r0, [pc, #200]	@ (8004728 <_printf_i+0x23c>)
 8004660:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004664:	6823      	ldr	r3, [r4, #0]
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	061f      	lsls	r7, r3, #24
 800466a:	f851 5b04 	ldr.w	r5, [r1], #4
 800466e:	d402      	bmi.n	8004676 <_printf_i+0x18a>
 8004670:	065f      	lsls	r7, r3, #25
 8004672:	bf48      	it	mi
 8004674:	b2ad      	uxthmi	r5, r5
 8004676:	6031      	str	r1, [r6, #0]
 8004678:	07d9      	lsls	r1, r3, #31
 800467a:	bf44      	itt	mi
 800467c:	f043 0320 	orrmi.w	r3, r3, #32
 8004680:	6023      	strmi	r3, [r4, #0]
 8004682:	b11d      	cbz	r5, 800468c <_printf_i+0x1a0>
 8004684:	2310      	movs	r3, #16
 8004686:	e7ab      	b.n	80045e0 <_printf_i+0xf4>
 8004688:	4826      	ldr	r0, [pc, #152]	@ (8004724 <_printf_i+0x238>)
 800468a:	e7e9      	b.n	8004660 <_printf_i+0x174>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	f023 0320 	bic.w	r3, r3, #32
 8004692:	6023      	str	r3, [r4, #0]
 8004694:	e7f6      	b.n	8004684 <_printf_i+0x198>
 8004696:	4616      	mov	r6, r2
 8004698:	e7bd      	b.n	8004616 <_printf_i+0x12a>
 800469a:	6833      	ldr	r3, [r6, #0]
 800469c:	6825      	ldr	r5, [r4, #0]
 800469e:	1d18      	adds	r0, r3, #4
 80046a0:	6961      	ldr	r1, [r4, #20]
 80046a2:	6030      	str	r0, [r6, #0]
 80046a4:	062e      	lsls	r6, r5, #24
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	d501      	bpl.n	80046ae <_printf_i+0x1c2>
 80046aa:	6019      	str	r1, [r3, #0]
 80046ac:	e002      	b.n	80046b4 <_printf_i+0x1c8>
 80046ae:	0668      	lsls	r0, r5, #25
 80046b0:	d5fb      	bpl.n	80046aa <_printf_i+0x1be>
 80046b2:	8019      	strh	r1, [r3, #0]
 80046b4:	2300      	movs	r3, #0
 80046b6:	4616      	mov	r6, r2
 80046b8:	6123      	str	r3, [r4, #16]
 80046ba:	e7bc      	b.n	8004636 <_printf_i+0x14a>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	2100      	movs	r1, #0
 80046c0:	1d1a      	adds	r2, r3, #4
 80046c2:	6032      	str	r2, [r6, #0]
 80046c4:	681e      	ldr	r6, [r3, #0]
 80046c6:	6862      	ldr	r2, [r4, #4]
 80046c8:	4630      	mov	r0, r6
 80046ca:	f000 f8ed 	bl	80048a8 <memchr>
 80046ce:	b108      	cbz	r0, 80046d4 <_printf_i+0x1e8>
 80046d0:	1b80      	subs	r0, r0, r6
 80046d2:	6060      	str	r0, [r4, #4]
 80046d4:	6863      	ldr	r3, [r4, #4]
 80046d6:	6123      	str	r3, [r4, #16]
 80046d8:	2300      	movs	r3, #0
 80046da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80046de:	e7aa      	b.n	8004636 <_printf_i+0x14a>
 80046e0:	4632      	mov	r2, r6
 80046e2:	4649      	mov	r1, r9
 80046e4:	4640      	mov	r0, r8
 80046e6:	6923      	ldr	r3, [r4, #16]
 80046e8:	47d0      	blx	sl
 80046ea:	3001      	adds	r0, #1
 80046ec:	d0ad      	beq.n	800464a <_printf_i+0x15e>
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	079b      	lsls	r3, r3, #30
 80046f2:	d413      	bmi.n	800471c <_printf_i+0x230>
 80046f4:	68e0      	ldr	r0, [r4, #12]
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	4298      	cmp	r0, r3
 80046fa:	bfb8      	it	lt
 80046fc:	4618      	movlt	r0, r3
 80046fe:	e7a6      	b.n	800464e <_printf_i+0x162>
 8004700:	2301      	movs	r3, #1
 8004702:	4632      	mov	r2, r6
 8004704:	4649      	mov	r1, r9
 8004706:	4640      	mov	r0, r8
 8004708:	47d0      	blx	sl
 800470a:	3001      	adds	r0, #1
 800470c:	d09d      	beq.n	800464a <_printf_i+0x15e>
 800470e:	3501      	adds	r5, #1
 8004710:	68e3      	ldr	r3, [r4, #12]
 8004712:	9903      	ldr	r1, [sp, #12]
 8004714:	1a5b      	subs	r3, r3, r1
 8004716:	42ab      	cmp	r3, r5
 8004718:	dcf2      	bgt.n	8004700 <_printf_i+0x214>
 800471a:	e7eb      	b.n	80046f4 <_printf_i+0x208>
 800471c:	2500      	movs	r5, #0
 800471e:	f104 0619 	add.w	r6, r4, #25
 8004722:	e7f5      	b.n	8004710 <_printf_i+0x224>
 8004724:	08004ebb 	.word	0x08004ebb
 8004728:	08004ecc 	.word	0x08004ecc

0800472c <__swbuf_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	460e      	mov	r6, r1
 8004730:	4614      	mov	r4, r2
 8004732:	4605      	mov	r5, r0
 8004734:	b118      	cbz	r0, 800473e <__swbuf_r+0x12>
 8004736:	6a03      	ldr	r3, [r0, #32]
 8004738:	b90b      	cbnz	r3, 800473e <__swbuf_r+0x12>
 800473a:	f7ff f97b 	bl	8003a34 <__sinit>
 800473e:	69a3      	ldr	r3, [r4, #24]
 8004740:	60a3      	str	r3, [r4, #8]
 8004742:	89a3      	ldrh	r3, [r4, #12]
 8004744:	071a      	lsls	r2, r3, #28
 8004746:	d501      	bpl.n	800474c <__swbuf_r+0x20>
 8004748:	6923      	ldr	r3, [r4, #16]
 800474a:	b943      	cbnz	r3, 800475e <__swbuf_r+0x32>
 800474c:	4621      	mov	r1, r4
 800474e:	4628      	mov	r0, r5
 8004750:	f000 f82a 	bl	80047a8 <__swsetup_r>
 8004754:	b118      	cbz	r0, 800475e <__swbuf_r+0x32>
 8004756:	f04f 37ff 	mov.w	r7, #4294967295
 800475a:	4638      	mov	r0, r7
 800475c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800475e:	6823      	ldr	r3, [r4, #0]
 8004760:	6922      	ldr	r2, [r4, #16]
 8004762:	b2f6      	uxtb	r6, r6
 8004764:	1a98      	subs	r0, r3, r2
 8004766:	6963      	ldr	r3, [r4, #20]
 8004768:	4637      	mov	r7, r6
 800476a:	4283      	cmp	r3, r0
 800476c:	dc05      	bgt.n	800477a <__swbuf_r+0x4e>
 800476e:	4621      	mov	r1, r4
 8004770:	4628      	mov	r0, r5
 8004772:	f7ff f897 	bl	80038a4 <_fflush_r>
 8004776:	2800      	cmp	r0, #0
 8004778:	d1ed      	bne.n	8004756 <__swbuf_r+0x2a>
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	3b01      	subs	r3, #1
 800477e:	60a3      	str	r3, [r4, #8]
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	701e      	strb	r6, [r3, #0]
 8004788:	6962      	ldr	r2, [r4, #20]
 800478a:	1c43      	adds	r3, r0, #1
 800478c:	429a      	cmp	r2, r3
 800478e:	d004      	beq.n	800479a <__swbuf_r+0x6e>
 8004790:	89a3      	ldrh	r3, [r4, #12]
 8004792:	07db      	lsls	r3, r3, #31
 8004794:	d5e1      	bpl.n	800475a <__swbuf_r+0x2e>
 8004796:	2e0a      	cmp	r6, #10
 8004798:	d1df      	bne.n	800475a <__swbuf_r+0x2e>
 800479a:	4621      	mov	r1, r4
 800479c:	4628      	mov	r0, r5
 800479e:	f7ff f881 	bl	80038a4 <_fflush_r>
 80047a2:	2800      	cmp	r0, #0
 80047a4:	d0d9      	beq.n	800475a <__swbuf_r+0x2e>
 80047a6:	e7d6      	b.n	8004756 <__swbuf_r+0x2a>

080047a8 <__swsetup_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4b29      	ldr	r3, [pc, #164]	@ (8004850 <__swsetup_r+0xa8>)
 80047ac:	4605      	mov	r5, r0
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	460c      	mov	r4, r1
 80047b2:	b118      	cbz	r0, 80047bc <__swsetup_r+0x14>
 80047b4:	6a03      	ldr	r3, [r0, #32]
 80047b6:	b90b      	cbnz	r3, 80047bc <__swsetup_r+0x14>
 80047b8:	f7ff f93c 	bl	8003a34 <__sinit>
 80047bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047c0:	0719      	lsls	r1, r3, #28
 80047c2:	d422      	bmi.n	800480a <__swsetup_r+0x62>
 80047c4:	06da      	lsls	r2, r3, #27
 80047c6:	d407      	bmi.n	80047d8 <__swsetup_r+0x30>
 80047c8:	2209      	movs	r2, #9
 80047ca:	602a      	str	r2, [r5, #0]
 80047cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	81a3      	strh	r3, [r4, #12]
 80047d6:	e033      	b.n	8004840 <__swsetup_r+0x98>
 80047d8:	0758      	lsls	r0, r3, #29
 80047da:	d512      	bpl.n	8004802 <__swsetup_r+0x5a>
 80047dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80047de:	b141      	cbz	r1, 80047f2 <__swsetup_r+0x4a>
 80047e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80047e4:	4299      	cmp	r1, r3
 80047e6:	d002      	beq.n	80047ee <__swsetup_r+0x46>
 80047e8:	4628      	mov	r0, r5
 80047ea:	f7ff fa7f 	bl	8003cec <_free_r>
 80047ee:	2300      	movs	r3, #0
 80047f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	2300      	movs	r3, #0
 80047fc:	6063      	str	r3, [r4, #4]
 80047fe:	6923      	ldr	r3, [r4, #16]
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	89a3      	ldrh	r3, [r4, #12]
 8004804:	f043 0308 	orr.w	r3, r3, #8
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	6923      	ldr	r3, [r4, #16]
 800480c:	b94b      	cbnz	r3, 8004822 <__swsetup_r+0x7a>
 800480e:	89a3      	ldrh	r3, [r4, #12]
 8004810:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d003      	beq.n	8004822 <__swsetup_r+0x7a>
 800481a:	4621      	mov	r1, r4
 800481c:	4628      	mov	r0, r5
 800481e:	f000 f8b2 	bl	8004986 <__smakebuf_r>
 8004822:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004826:	f013 0201 	ands.w	r2, r3, #1
 800482a:	d00a      	beq.n	8004842 <__swsetup_r+0x9a>
 800482c:	2200      	movs	r2, #0
 800482e:	60a2      	str	r2, [r4, #8]
 8004830:	6962      	ldr	r2, [r4, #20]
 8004832:	4252      	negs	r2, r2
 8004834:	61a2      	str	r2, [r4, #24]
 8004836:	6922      	ldr	r2, [r4, #16]
 8004838:	b942      	cbnz	r2, 800484c <__swsetup_r+0xa4>
 800483a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800483e:	d1c5      	bne.n	80047cc <__swsetup_r+0x24>
 8004840:	bd38      	pop	{r3, r4, r5, pc}
 8004842:	0799      	lsls	r1, r3, #30
 8004844:	bf58      	it	pl
 8004846:	6962      	ldrpl	r2, [r4, #20]
 8004848:	60a2      	str	r2, [r4, #8]
 800484a:	e7f4      	b.n	8004836 <__swsetup_r+0x8e>
 800484c:	2000      	movs	r0, #0
 800484e:	e7f7      	b.n	8004840 <__swsetup_r+0x98>
 8004850:	20000284 	.word	0x20000284

08004854 <memmove>:
 8004854:	4288      	cmp	r0, r1
 8004856:	b510      	push	{r4, lr}
 8004858:	eb01 0402 	add.w	r4, r1, r2
 800485c:	d902      	bls.n	8004864 <memmove+0x10>
 800485e:	4284      	cmp	r4, r0
 8004860:	4623      	mov	r3, r4
 8004862:	d807      	bhi.n	8004874 <memmove+0x20>
 8004864:	1e43      	subs	r3, r0, #1
 8004866:	42a1      	cmp	r1, r4
 8004868:	d008      	beq.n	800487c <memmove+0x28>
 800486a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800486e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004872:	e7f8      	b.n	8004866 <memmove+0x12>
 8004874:	4601      	mov	r1, r0
 8004876:	4402      	add	r2, r0
 8004878:	428a      	cmp	r2, r1
 800487a:	d100      	bne.n	800487e <memmove+0x2a>
 800487c:	bd10      	pop	{r4, pc}
 800487e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004886:	e7f7      	b.n	8004878 <memmove+0x24>

08004888 <_sbrk_r>:
 8004888:	b538      	push	{r3, r4, r5, lr}
 800488a:	2300      	movs	r3, #0
 800488c:	4d05      	ldr	r5, [pc, #20]	@ (80048a4 <_sbrk_r+0x1c>)
 800488e:	4604      	mov	r4, r0
 8004890:	4608      	mov	r0, r1
 8004892:	602b      	str	r3, [r5, #0]
 8004894:	f7fb fe3c 	bl	8000510 <_sbrk>
 8004898:	1c43      	adds	r3, r0, #1
 800489a:	d102      	bne.n	80048a2 <_sbrk_r+0x1a>
 800489c:	682b      	ldr	r3, [r5, #0]
 800489e:	b103      	cbz	r3, 80048a2 <_sbrk_r+0x1a>
 80048a0:	6023      	str	r3, [r4, #0]
 80048a2:	bd38      	pop	{r3, r4, r5, pc}
 80048a4:	20000640 	.word	0x20000640

080048a8 <memchr>:
 80048a8:	4603      	mov	r3, r0
 80048aa:	b510      	push	{r4, lr}
 80048ac:	b2c9      	uxtb	r1, r1
 80048ae:	4402      	add	r2, r0
 80048b0:	4293      	cmp	r3, r2
 80048b2:	4618      	mov	r0, r3
 80048b4:	d101      	bne.n	80048ba <memchr+0x12>
 80048b6:	2000      	movs	r0, #0
 80048b8:	e003      	b.n	80048c2 <memchr+0x1a>
 80048ba:	7804      	ldrb	r4, [r0, #0]
 80048bc:	3301      	adds	r3, #1
 80048be:	428c      	cmp	r4, r1
 80048c0:	d1f6      	bne.n	80048b0 <memchr+0x8>
 80048c2:	bd10      	pop	{r4, pc}

080048c4 <memcpy>:
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	4770      	bx	lr
 80048d0:	b510      	push	{r4, lr}
 80048d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d6:	4291      	cmp	r1, r2
 80048d8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048dc:	d1f9      	bne.n	80048d2 <memcpy+0xe>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <_realloc_r>:
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	4680      	mov	r8, r0
 80048e6:	4615      	mov	r5, r2
 80048e8:	460c      	mov	r4, r1
 80048ea:	b921      	cbnz	r1, 80048f6 <_realloc_r+0x16>
 80048ec:	4611      	mov	r1, r2
 80048ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f2:	f7ff ba65 	b.w	8003dc0 <_malloc_r>
 80048f6:	b92a      	cbnz	r2, 8004904 <_realloc_r+0x24>
 80048f8:	f7ff f9f8 	bl	8003cec <_free_r>
 80048fc:	2400      	movs	r4, #0
 80048fe:	4620      	mov	r0, r4
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	f000 f89e 	bl	8004a44 <_malloc_usable_size_r>
 8004908:	4285      	cmp	r5, r0
 800490a:	4606      	mov	r6, r0
 800490c:	d802      	bhi.n	8004914 <_realloc_r+0x34>
 800490e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004912:	d8f4      	bhi.n	80048fe <_realloc_r+0x1e>
 8004914:	4629      	mov	r1, r5
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fa52 	bl	8003dc0 <_malloc_r>
 800491c:	4607      	mov	r7, r0
 800491e:	2800      	cmp	r0, #0
 8004920:	d0ec      	beq.n	80048fc <_realloc_r+0x1c>
 8004922:	42b5      	cmp	r5, r6
 8004924:	462a      	mov	r2, r5
 8004926:	4621      	mov	r1, r4
 8004928:	bf28      	it	cs
 800492a:	4632      	movcs	r2, r6
 800492c:	f7ff ffca 	bl	80048c4 <memcpy>
 8004930:	4621      	mov	r1, r4
 8004932:	4640      	mov	r0, r8
 8004934:	f7ff f9da 	bl	8003cec <_free_r>
 8004938:	463c      	mov	r4, r7
 800493a:	e7e0      	b.n	80048fe <_realloc_r+0x1e>

0800493c <__swhatbuf_r>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	460c      	mov	r4, r1
 8004940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004944:	4615      	mov	r5, r2
 8004946:	2900      	cmp	r1, #0
 8004948:	461e      	mov	r6, r3
 800494a:	b096      	sub	sp, #88	@ 0x58
 800494c:	da0c      	bge.n	8004968 <__swhatbuf_r+0x2c>
 800494e:	89a3      	ldrh	r3, [r4, #12]
 8004950:	2100      	movs	r1, #0
 8004952:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004956:	bf14      	ite	ne
 8004958:	2340      	movne	r3, #64	@ 0x40
 800495a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800495e:	2000      	movs	r0, #0
 8004960:	6031      	str	r1, [r6, #0]
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	b016      	add	sp, #88	@ 0x58
 8004966:	bd70      	pop	{r4, r5, r6, pc}
 8004968:	466a      	mov	r2, sp
 800496a:	f000 f849 	bl	8004a00 <_fstat_r>
 800496e:	2800      	cmp	r0, #0
 8004970:	dbed      	blt.n	800494e <__swhatbuf_r+0x12>
 8004972:	9901      	ldr	r1, [sp, #4]
 8004974:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004978:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800497c:	4259      	negs	r1, r3
 800497e:	4159      	adcs	r1, r3
 8004980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004984:	e7eb      	b.n	800495e <__swhatbuf_r+0x22>

08004986 <__smakebuf_r>:
 8004986:	898b      	ldrh	r3, [r1, #12]
 8004988:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800498a:	079d      	lsls	r5, r3, #30
 800498c:	4606      	mov	r6, r0
 800498e:	460c      	mov	r4, r1
 8004990:	d507      	bpl.n	80049a2 <__smakebuf_r+0x1c>
 8004992:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004996:	6023      	str	r3, [r4, #0]
 8004998:	6123      	str	r3, [r4, #16]
 800499a:	2301      	movs	r3, #1
 800499c:	6163      	str	r3, [r4, #20]
 800499e:	b003      	add	sp, #12
 80049a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a2:	466a      	mov	r2, sp
 80049a4:	ab01      	add	r3, sp, #4
 80049a6:	f7ff ffc9 	bl	800493c <__swhatbuf_r>
 80049aa:	9f00      	ldr	r7, [sp, #0]
 80049ac:	4605      	mov	r5, r0
 80049ae:	4639      	mov	r1, r7
 80049b0:	4630      	mov	r0, r6
 80049b2:	f7ff fa05 	bl	8003dc0 <_malloc_r>
 80049b6:	b948      	cbnz	r0, 80049cc <__smakebuf_r+0x46>
 80049b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049bc:	059a      	lsls	r2, r3, #22
 80049be:	d4ee      	bmi.n	800499e <__smakebuf_r+0x18>
 80049c0:	f023 0303 	bic.w	r3, r3, #3
 80049c4:	f043 0302 	orr.w	r3, r3, #2
 80049c8:	81a3      	strh	r3, [r4, #12]
 80049ca:	e7e2      	b.n	8004992 <__smakebuf_r+0xc>
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049d6:	81a3      	strh	r3, [r4, #12]
 80049d8:	9b01      	ldr	r3, [sp, #4]
 80049da:	6020      	str	r0, [r4, #0]
 80049dc:	b15b      	cbz	r3, 80049f6 <__smakebuf_r+0x70>
 80049de:	4630      	mov	r0, r6
 80049e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049e4:	f000 f81e 	bl	8004a24 <_isatty_r>
 80049e8:	b128      	cbz	r0, 80049f6 <__smakebuf_r+0x70>
 80049ea:	89a3      	ldrh	r3, [r4, #12]
 80049ec:	f023 0303 	bic.w	r3, r3, #3
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	81a3      	strh	r3, [r4, #12]
 80049f6:	89a3      	ldrh	r3, [r4, #12]
 80049f8:	431d      	orrs	r5, r3
 80049fa:	81a5      	strh	r5, [r4, #12]
 80049fc:	e7cf      	b.n	800499e <__smakebuf_r+0x18>
	...

08004a00 <_fstat_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	2300      	movs	r3, #0
 8004a04:	4d06      	ldr	r5, [pc, #24]	@ (8004a20 <_fstat_r+0x20>)
 8004a06:	4604      	mov	r4, r0
 8004a08:	4608      	mov	r0, r1
 8004a0a:	4611      	mov	r1, r2
 8004a0c:	602b      	str	r3, [r5, #0]
 8004a0e:	f7fe fd48 	bl	80034a2 <_fstat>
 8004a12:	1c43      	adds	r3, r0, #1
 8004a14:	d102      	bne.n	8004a1c <_fstat_r+0x1c>
 8004a16:	682b      	ldr	r3, [r5, #0]
 8004a18:	b103      	cbz	r3, 8004a1c <_fstat_r+0x1c>
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	bd38      	pop	{r3, r4, r5, pc}
 8004a1e:	bf00      	nop
 8004a20:	20000640 	.word	0x20000640

08004a24 <_isatty_r>:
 8004a24:	b538      	push	{r3, r4, r5, lr}
 8004a26:	2300      	movs	r3, #0
 8004a28:	4d05      	ldr	r5, [pc, #20]	@ (8004a40 <_isatty_r+0x1c>)
 8004a2a:	4604      	mov	r4, r0
 8004a2c:	4608      	mov	r0, r1
 8004a2e:	602b      	str	r3, [r5, #0]
 8004a30:	f7fe fe9a 	bl	8003768 <_isatty>
 8004a34:	1c43      	adds	r3, r0, #1
 8004a36:	d102      	bne.n	8004a3e <_isatty_r+0x1a>
 8004a38:	682b      	ldr	r3, [r5, #0]
 8004a3a:	b103      	cbz	r3, 8004a3e <_isatty_r+0x1a>
 8004a3c:	6023      	str	r3, [r4, #0]
 8004a3e:	bd38      	pop	{r3, r4, r5, pc}
 8004a40:	20000640 	.word	0x20000640

08004a44 <_malloc_usable_size_r>:
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f18      	subs	r0, r3, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfbc      	itt	lt
 8004a4e:	580b      	ldrlt	r3, [r1, r0]
 8004a50:	18c0      	addlt	r0, r0, r3
 8004a52:	4770      	bx	lr

08004a54 <_init>:
 8004a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a56:	bf00      	nop
 8004a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a5a:	bc08      	pop	{r3}
 8004a5c:	469e      	mov	lr, r3
 8004a5e:	4770      	bx	lr

08004a60 <_fini>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr
